#ifndef SHADER_glsl100_h
#define SHADER_glsl100_h

#include <string>

static const std::string mesh_Uv1PucShwPcfNorFogSki_glsl100 = "";
static const std::string mesh_Uv1PucShwPcfNorSki_glsl100 = "";
static const std::string mesh_PucShwPcfNor_glsl100 = "";
static const std::string points_TexVc4Txr_glsl100 = "U0JTIAAAAABkAAAAR0xTTGQAAAABAFNUQUd5BAAAVkVSVENPREU8AgAAI3ZlcnNpb24gMTAwCgp1bmlmb3JtIHZlYzQgdV92c19wb2ludHNQYXJhbXNbNF07CnZhcnlpbmcgZmxvYXQgdl9wb2ludHJvdGF0aW9uOwphdHRyaWJ1dGUgZmxvYXQgYV9wb2ludHJvdGF0aW9uOwp2YXJ5aW5nIHZlYzQgdl9jb2xvcjsKYXR0cmlidXRlIHZlYzQgYV9jb2xvcjsKdmFyeWluZyB2ZWM0IHZfdGV4dHVyZXJlY3Q7CmF0dHJpYnV0ZSB2ZWM0IGFfdGV4dHVyZXJlY3Q7CmF0dHJpYnV0ZSB2ZWMzIGFfcG9zaXRpb247CmF0dHJpYnV0ZSBmbG9hdCBhX3BvaW50c2l6ZTsKCnZvaWQgbWFpbigpCnsKICAgIHZfcG9pbnRyb3RhdGlvbiA9IGFfcG9pbnRyb3RhdGlvbjsKICAgIHZfY29sb3IgPSBhX2NvbG9yOwogICAgdl90ZXh0dXJlcmVjdCA9IGFfdGV4dHVyZXJlY3Q7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c19wb2ludHNQYXJhbXNbMF0sIHVfdnNfcG9pbnRzUGFyYW1zWzFdLCB1X3ZzX3BvaW50c1BhcmFtc1syXSwgdV92c19wb2ludHNQYXJhbXNbM10pICogdmVjNChhX3Bvc2l0aW9uLCAxLjApOwogICAgZ2xfUG9pbnRTaXplID0gYV9wb2ludHNpemUgLyBnbF9Qb3NpdGlvbi53Owp9CgpSRUZMKQIAAHBvaW50c19UZXhWYzRUeHJfZ2xzbDEwMAAAAAAAAAAABQAAAAAAAAABAAAAAQAAAGFfcG9pbnRyb3RhdGlvbgAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDFhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABGTFQ0YV90ZXh0dXJlcmVjdAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAARkxUNGFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDNhX3BvaW50c2l6ZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABOT1JNQUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAAHVfdnNfcG9pbnRzUGFyYW1zAAAAAAAAAAAAAAAAAAAAcG9pbnRzUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABTVEFHXAYAAEZSQUdDT0RF6AUAACN2ZXJzaW9uIDEwMApwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIGhpZ2hwIGludDsKCnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfcG9pbnRzVGV4dHVyZTsKCnZhcnlpbmcgaGlnaHAgdmVjNCB2X2NvbG9yOwp2YXJ5aW5nIGhpZ2hwIGZsb2F0IHZfcG9pbnRyb3RhdGlvbjsKdmFyeWluZyBoaWdocCB2ZWM0IHZfdGV4dHVyZXJlY3Q7CgpoaWdocCB2ZWMzIHNSR0JUb0xpbmVhcihoaWdocCB2ZWMzIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIHZlYzMoMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSk7Cn0KCmhpZ2hwIHZlYzQgc1JHQlRvTGluZWFyKGhpZ2hwIHZlYzQgc3JnYkluKQp7CiAgICBoaWdocCB2ZWMzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiB2ZWM0KHNSR0JUb0xpbmVhcihwYXJhbSksIHNyZ2JJbi53KTsKfQoKaGlnaHAgdmVjNCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2X2NvbG9yOwp9CgpoaWdocCB2ZWM0IGdldEJhc2VDb2xvcigpCnsKICAgIGhpZ2hwIHZlYzQgYmFzZUNvbG9yID0gdmVjNCgxLjApOwogICAgaGlnaHAgdmVjMiByZXN1bHRDb29yZCA9IGdsX1BvaW50Q29vcmQ7CiAgICBpZiAoISh2X3BvaW50cm90YXRpb24gPT0gMC4wKSkKICAgIHsKICAgICAgICBoaWdocCBmbG9hdCBfODMgPSBjb3Modl9wb2ludHJvdGF0aW9uKTsKICAgICAgICBoaWdocCBmbG9hdCBfODggPSByZXN1bHRDb29yZC54IC0gMC41OwogICAgICAgIGhpZ2hwIGZsb2F0IF85MSA9IHNpbih2X3BvaW50cm90YXRpb24pOwogICAgICAgIGhpZ2hwIGZsb2F0IF85NSA9IHJlc3VsdENvb3JkLnkgLSAwLjU7CiAgICAgICAgcmVzdWx0Q29vcmQgPSB2ZWMyKCgoXzgzICogXzg4KSArIChfOTEgKiBfOTUpKSArIDAuNSwgKChfODMgKiBfOTUpIC0gKF85MSAqIF84OCkpICsgMC41KTsKICAgIH0KICAgIGhpZ2hwIHZlYzIgXzExNCA9IHJlc3VsdENvb3JkOwogICAgaGlnaHAgdmVjMiBfMTIxID0gKF8xMTQgKiB2X3RleHR1cmVyZWN0Lnp3KSArIHZfdGV4dHVyZXJlY3QueHk7CiAgICByZXN1bHRDb29yZCA9IF8xMjE7CiAgICBoaWdocCB2ZWM0IHBhcmFtID0gdGV4dHVyZTJEKHVfcG9pbnRzVGV4dHVyZSwgXzEyMSk7CiAgICBoaWdocCB2ZWM0IF8xMzEgPSBiYXNlQ29sb3I7CiAgICBoaWdocCB2ZWM0IF8xMzIgPSBfMTMxICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8xMzI7CiAgICByZXR1cm4gXzEzMiAqIGdldFZlcnRleENvbG9yKCk7Cn0KCmhpZ2hwIHZlYzMgbGluZWFyVG9zUkdCKGhpZ2hwIHZlYzMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIHZlYzMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIHZlYzQgXzEzOSA9IGdldEJhc2VDb2xvcigpOwogICAgaGlnaHAgdmVjMyBwYXJhbSA9IF8xMzkueHl6OwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB2ZWM0KGxpbmVhclRvc1JHQihwYXJhbSksIF8xMzkudyk7Cn0KClJFRkxgAAAAcG9pbnRzX1RleFZjNFR4cl9nbHNsMTAwAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAdV9wb2ludHNUZXh0dXJlAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxU";
static const std::string mesh_PucShwPcfNorSki_glsl100 = "";
static const std::string ui_Ftx_glsl100 = "U0JTIAAAAABkAAAAR0xTTGQAAAABAFNUQUd0AgAAVkVSVENPREUbAQAAI3ZlcnNpb24gMTAwCgp1bmlmb3JtIHZlYzQgdV92c191aVBhcmFtc1s0XTsKdmFyeWluZyB2ZWMyIHZfdXYxOwphdHRyaWJ1dGUgdmVjMiBhX3RleGNvb3JkMTsKYXR0cmlidXRlIHZlYzMgYV9wb3NpdGlvbjsKCnZvaWQgbWFpbigpCnsKICAgIHZfdXYxID0gYV90ZXhjb29yZDE7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c191aVBhcmFtc1swXSwgdV92c191aVBhcmFtc1sxXSwgdV92c191aVBhcmFtc1syXSwgdV92c191aVBhcmFtc1szXSkgKiB2ZWM0KGFfcG9zaXRpb24sIDEuMCk7Cn0KClJFRkxFAQAAdWlfRnR4X2dsc2wxMDAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAEAAAABAAAAYV90ZXhjb29yZDEAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMmFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAdV92c191aVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAB1aVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUdIAwAARlJBR0NPREVXAgAAI3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCB2ZWM0IHVfZnNfdWlQYXJhbXNbMV07CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfdWlUZXh0dXJlOwoKdmFyeWluZyBoaWdocCB2ZWMyIHZfdXYxOwoKaGlnaHAgdmVjNCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2ZWM0KDEuMCk7Cn0KCmhpZ2hwIHZlYzQgZ2V0QmFzZUNvbG9yKCkKewogICAgcmV0dXJuICh1X2ZzX3VpUGFyYW1zWzBdICogdmVjNCgxLjAsIDEuMCwgMS4wLCB0ZXh0dXJlMkQodV91aVRleHR1cmUsIHZfdXYxKS54KSkgKiBnZXRWZXJ0ZXhDb2xvcigpOwp9CgpoaWdocCB2ZWMzIGxpbmVhclRvc1JHQihoaWdocCB2ZWMzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCB2ZWMzKDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NSkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IF82MyA9IGdldEJhc2VDb2xvcigpOwogICAgaGlnaHAgdmVjMyBwYXJhbSA9IF82My54eXo7CiAgICBnbF9GcmFnRGF0YVswXSA9IHZlYzQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzYzLncpOwp9CgpSRUZM3QAAAHVpX0Z0eF9nbHNsMTAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAQAAAHVfdWlUZXh0dXJlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVAEAAAB1X2ZzX3VpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAHVpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAWNvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAA";
static const std::string mesh_Uv1PucNor_glsl100 = "";
static const std::string depth_Mta_glsl100 = "U0JTIAAAAABkAAAAR0xTTGQAAAABAFNUQUdLCAAAVkVSVENPREX5BAAAI3ZlcnNpb24gMTAwCgp1bmlmb3JtIHZlYzQgdV92c19tb3JwaHRhcmdldFsyXTsKdW5pZm9ybSB2ZWM0IHVfdnNfZGVwdGhQYXJhbXNbNF07CmF0dHJpYnV0ZSB2ZWMzIGFfbW9ycGhUYXJnZXQwOwphdHRyaWJ1dGUgdmVjMyBhX21vcnBoVGFyZ2V0MTsKYXR0cmlidXRlIHZlYzMgYV9tb3JwaFRhcmdldDQ7CmF0dHJpYnV0ZSB2ZWMzIGFfbW9ycGhUYXJnZXQ1OwphdHRyaWJ1dGUgdmVjMyBhX21vcnBoVGFyZ2V0NjsKYXR0cmlidXRlIHZlYzMgYV9tb3JwaFRhcmdldDc7CmF0dHJpYnV0ZSB2ZWMzIGFfcG9zaXRpb247CnZhcnlpbmcgdmVjMiB2X3Byb2paVzsKCnZlYzMgZ2V0TW9ycGhQb3NpdGlvbihpbm91dCB2ZWMzIHBvcykKewogICAgcG9zICs9IChhX21vcnBoVGFyZ2V0MCAqIHVfdnNfbW9ycGh0YXJnZXRbMF0ueCk7CiAgICBwb3MgKz0gKGFfbW9ycGhUYXJnZXQxICogdV92c19tb3JwaHRhcmdldFswXS55KTsKICAgIHBvcyArPSAoYV9tb3JwaFRhcmdldDQgKiB1X3ZzX21vcnBodGFyZ2V0WzFdLngpOwogICAgcG9zICs9IChhX21vcnBoVGFyZ2V0NSAqIHVfdnNfbW9ycGh0YXJnZXRbMV0ueSk7CiAgICBwb3MgKz0gKGFfbW9ycGhUYXJnZXQ2ICogdV92c19tb3JwaHRhcmdldFsxXS56KTsKICAgIHBvcyArPSAoYV9tb3JwaFRhcmdldDcgKiB1X3ZzX21vcnBodGFyZ2V0WzFdLncpOwogICAgcmV0dXJuIHBvczsKfQoKbWF0NCBnZXRCb25lVHJhbnNmb3JtKCkKewogICAgcmV0dXJuIG1hdDQodmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSwgdmVjNCgwLjApKTsKfQoKdmVjMyBnZXRTa2luUG9zaXRpb24odmVjMyBwb3MsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoK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";
static const std::string mesh_UltUv1Vc4TxrFog_glsl100 = "U0JTIAAAAABkAAAAR0xTTGQAAAABAFNUQUcfBwAAVkVSVENPREWlBAAAI3ZlcnNpb24gMTAwCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwp1bmlmb3JtIHZlYzQgdV92c19zcHJpdGVQYXJhbXNbMV07CmF0dHJpYnV0ZSB2ZWMzIGFfcG9zaXRpb247CnZhcnlpbmcgdmVjMyB2X3Bvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdl91djE7CnZhcnlpbmcgdmVjMiB2X3V2MjsKYXR0cmlidXRlIHZlYzIgYV90ZXhjb29yZDE7CnZhcnlpbmcgdmVjNCB2X2NvbG9yOwphdHRyaWJ1dGUgdmVjNCBhX2NvbG9yOwoKbWF0NCBnZXRCb25lVHJhbnNmb3JtKCkKewogICAgcmV0dXJuIG1hdDQodmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSwgdmVjNCgwLjApKTsKfQoKdmVjMyBnZXRNb3JwaFBvc2l0aW9uKHZlYzMgcG9zKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2ZWMzIGdldFNraW5Qb3NpdGlvbih2ZWMzIHBvcywgbWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2ZWM0IGdldFBvc2l0aW9uKG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgdmVjMyBwYXJhbSA9IGFfcG9zaXRpb247CiAgICB2ZWMzIHBhcmFtXzEgPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIG1hdDQgcGFyYW1fMiA9IGJvbmVUcmFuc2Zvcm07CiAgICByZXR1cm4gdmVjNChnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMiksIDEuMCk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcGFyYW0gPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICB2ZWM0IF82NyA9IGdldFBvc2l0aW9uKHBhcmFtKTsKICAgIHZlYzQgXzc4ID0gbWF0NCh1X3ZzX3BiclBhcmFtc1swXSwgdV92c19wYnJQYXJhbXNbMV0sIHVfdnNfcGJyUGFyYW1zWzJdLCB1X3ZzX3BiclBhcmFtc1szXSkgKiBfNjc7CiAgICB2X3Bvc2l0aW9uID0gdmVjMyhfNzgueHl6KSAvIHZlYzMoXzc4LncpOwogICAgdl91djEgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MiA9IHZlYzIoMC4wKTsKICAgIHZfdXYxID0gYV90ZXhjb29yZDE7CiAgICB2X3V2MSA9IChhX3RleGNvb3JkMSAqIHVfdnNfc3ByaXRlUGFyYW1zWzBdLnp3KSArIHVfdnNfc3ByaXRlUGFyYW1zWzBdLnh5OwogICAgdl9jb2xvciA9IGFfY29sb3I7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c19wYnJQYXJhbXNbOF0sIHVfdnNfcGJyUGFyYW1zWzldLCB1X3ZzX3BiclBhcmFtc1sxMF0sIHVfdnNfcGJyUGFyYW1zWzExXSkgKiBfNjc7Cn0KClJFRkxmAgAAbWVzaF9VbHRVdjFWYzRUeHJGb2dfZ2xzbDEwMAAAAAADAAAAAAAAAAIAAAAEAAAAYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfdGV4Y29vcmQxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDJhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AwAAAHVfdnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAABbW9kZWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABub3JtYWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAQAAAAG12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAACAAAAAAQAAAHVfdnNfc3ByaXRlUGFyYW1zAAAAAAAAAAAAAAAAAAAAc3ByaXRlUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAABAAAAABdGV4dHVyZVJlY3QAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABTVEFH/AUAAEZSQUdDT0RFLwQAACN2ZXJzaW9uIDEwMApwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIGhpZ2hwIGludDsKCnVuaWZvcm0gaGlnaHAgdmVjNCB1X2ZzX3BiclBhcmFtc1s0XTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9iYXNlQ29sb3JUZXh0dXJlOwoKdmFyeWluZyBoaWdocCB2ZWM0IHZfY29sb3I7CnZhcnlpbmcgaGlnaHAgdmVjMiB2X3V2MTsKdmFyeWluZyBoaWdocCB2ZWMzIHZfcG9zaXRpb247CnZhcnlpbmcgaGlnaHAgdmVjMiB2X3V2MjsKCmhpZ2hwIHZlYzMgc1JHQlRvTGluZWFyKGhpZ2hwIHZlYzMgc3JnYkluKQp7CiAgICByZXR1cm4gcG93KHNyZ2JJbiwgdmVjMygyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjUpKTsKfQoKaGlnaHAgdmVjNCBzUkdCVG9MaW5lYXIoaGlnaHAgdmVjNCBzcmdiSW4pCnsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBzcmdiSW4ueHl6OwogICAgcmV0dXJuIHZlYzQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9CgpoaWdocCB2ZWM0IGdldFZlcnRleENvbG9yKCkKewogICAgcmV0dXJuIHZfY29sb3I7Cn0KCmhpZ2hwIHZlYzQgZ2V0QmFzZUNvbG9yKCkKewogICAgaGlnaHAgdmVjNCBiYXNlQ29sb3IgPSB1X2ZzX3BiclBhcmFtc1swXTsKICAgIGhpZ2hwIHZlYzQgcGFyYW0gPSB0ZXh0dXJlMkQodV9iYXNlQ29sb3JUZXh0dXJlLCB2X3V2MSk7CiAgICBoaWdocCB2ZWM0IF8xMDMgPSBiYXNlQ29sb3I7CiAgICBoaWdocCB2ZWM0IF8xMDQgPSBfMTAzICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8xMDQ7CiAgICByZXR1cm4gXzEwNCAqIGdldFZlcnRleENvbG9yKCk7Cn0KCmhpZ2hwIHZlYzMgbGluZWFyVG9zUkdCKGhpZ2hwIHZlYzMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIHZlYzMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIHZlYzQgXzI1OSA9IGdldEJhc2VDb2xvcigpOwogICAgaGlnaHAgdmVjMyBwYXJhbSA9IF8yNTkueHl6OwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB2ZWM0KGxpbmVhclRvc1JHQihwYXJhbSksIF8yNTkudyk7Cn0KClJFRky5AQAAbWVzaF9VbHRVdjFWYzRUeHJGb2dfZ2xzbDEwMAAAAAAAAAAAAQAAAAEAAAAGAAAAdV9iYXNlQ29sb3JUZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUBgAAAHVfZnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABYmFzZUNvbG9yRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABtZXRhbGxpY0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAEAAAAHJvdWdobmVzc0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAUAAAAZW1pc3NpdmVGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAACAAAABhbWJpZW50TGlnaHQAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAMAAAAGFtYmllbnRGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAA8AAAA";
static const std::string mesh_PucShwPcfNorTanFogMtaMnr_glsl100 = "";
static const std::string mesh_Uv1PucShwPcfNorNmpTanVc4_glsl100 = "";
static const std::string mesh_UltUv1Vc4Txr_glsl100 = "U0JTIAAAAABkAAAAR0xTTGQAAAABAFNUQUcfBwAAVkVSVENPREWlBAAAI3ZlcnNpb24gMTAwCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwp1bmlmb3JtIHZlYzQgdV92c19zcHJpdGVQYXJhbXNbMV07CmF0dHJpYnV0ZSB2ZWMzIGFfcG9zaXRpb247CnZhcnlpbmcgdmVjMyB2X3Bvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdl91djE7CnZhcnlpbmcgdmVjMiB2X3V2MjsKYXR0cmlidXRlIHZlYzIgYV90ZXhjb29yZDE7CnZhcnlpbmcgdmVjNCB2X2NvbG9yOwphdHRyaWJ1dGUgdmVjNCBhX2NvbG9yOwoKbWF0NCBnZXRCb25lVHJhbnNmb3JtKCkKewogICAgcmV0dXJuIG1hdDQodmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSwgdmVjNCgwLjApKTsKfQoKdmVjMyBnZXRNb3JwaFBvc2l0aW9uKHZlYzMgcG9zKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2ZWMzIGdldFNraW5Qb3NpdGlvbih2ZWMzIHBvcywgbWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2ZWM0IGdldFBvc2l0aW9uKG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgdmVjMyBwYXJhbSA9IGFfcG9zaXRpb247CiAgICB2ZWMzIHBhcmFtXzEgPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIG1hdDQgcGFyYW1fMiA9IGJvbmVUcmFuc2Zvcm07CiAgICByZXR1cm4gdmVjNChnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMiksIDEuMCk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcGFyYW0gPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICB2ZWM0IF82NyA9IGdldFBvc2l0aW9uKHBhcmFtKTsKICAgIHZlYzQgXzc4ID0gbWF0NCh1X3ZzX3BiclBhcmFtc1swXSwgdV92c19wYnJQYXJhbXNbMV0sIHVfdnNfcGJyUGFyYW1zWzJdLCB1X3ZzX3BiclBhcmFtc1szXSkgKiBfNjc7CiAgICB2X3Bvc2l0aW9uID0gdmVjMyhfNzgueHl6KSAvIHZlYzMoXzc4LncpOwogICAgdl91djEgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MiA9IHZlYzIoMC4wKTsKICAgIHZfdXYxID0gYV90ZXhjb29yZDE7CiAgICB2X3V2MSA9IChhX3RleGNvb3JkMSAqIHVfdnNfc3ByaXRlUGFyYW1zWzBdLnp3KSArIHVfdnNfc3ByaXRlUGFyYW1zWzBdLnh5OwogICAgdl9jb2xvciA9IGFfY29sb3I7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c19wYnJQYXJhbXNbOF0sIHVfdnNfcGJyUGFyYW1zWzldLCB1X3ZzX3BiclBhcmFtc1sxMF0sIHVfdnNfcGJyUGFyYW1zWzExXSkgKiBfNjc7Cn0KClJFRkxmAgAAbWVzaF9VbHRVdjFWYzRUeHJfZ2xzbDEwMAAAAAAAAAADAAAAAAAAAAIAAAAEAAAAYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfdGV4Y29vcmQxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDJhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AwAAAHVfdnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAABbW9kZWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABub3JtYWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAQAAAAG12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAACAAAAAAQAAAHVfdnNfc3ByaXRlUGFyYW1zAAAAAAAAAAAAAAAAAAAAc3ByaXRlUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAABAAAAABdGV4dHVyZVJlY3QAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABTVEFH/AUAAEZSQUdDT0RFLwQAACN2ZXJzaW9uIDEwMApwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIGhpZ2hwIGludDsKCnVuaWZvcm0gaGlnaHAgdmVjNCB1X2ZzX3BiclBhcmFtc1s0XTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9iYXNlQ29sb3JUZXh0dXJlOwoKdmFyeWluZyBoaWdocCB2ZWM0IHZfY29sb3I7CnZhcnlpbmcgaGlnaHAgdmVjMiB2X3V2MTsKdmFyeWluZyBoaWdocCB2ZWMzIHZfcG9zaXRpb247CnZhcnlpbmcgaGlnaHAgdmVjMiB2X3V2MjsKCmhpZ2hwIHZlYzMgc1JHQlRvTGluZWFyKGhpZ2hwIHZlYzMgc3JnYkluKQp7CiAgICByZXR1cm4gcG93KHNyZ2JJbiwgdmVjMygyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjUpKTsKfQoKaGlnaHAgdmVjNCBzUkdCVG9MaW5lYXIoaGlnaHAgdmVjNCBzcmdiSW4pCnsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBzcmdiSW4ueHl6OwogICAgcmV0dXJuIHZlYzQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9CgpoaWdocCB2ZWM0IGdldFZlcnRleENvbG9yKCkKewogICAgcmV0dXJuIHZfY29sb3I7Cn0KCmhpZ2hwIHZlYzQgZ2V0QmFzZUNvbG9yKCkKewogICAgaGlnaHAgdmVjNCBiYXNlQ29sb3IgPSB1X2ZzX3BiclBhcmFtc1swXTsKICAgIGhpZ2hwIHZlYzQgcGFyYW0gPSB0ZXh0dXJlMkQodV9iYXNlQ29sb3JUZXh0dXJlLCB2X3V2MSk7CiAgICBoaWdocCB2ZWM0IF8xMDMgPSBiYXNlQ29sb3I7CiAgICBoaWdocCB2ZWM0IF8xMDQgPSBfMTAzICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8xMDQ7CiAgICByZXR1cm4gXzEwNCAqIGdldFZlcnRleENvbG9yKCk7Cn0KCmhpZ2hwIHZlYzMgbGluZWFyVG9zUkdCKGhpZ2hwIHZlYzMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIHZlYzMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIHZlYzQgXzI1OSA9IGdldEJhc2VDb2xvcigpOwogICAgaGlnaHAgdmVjMyBwYXJhbSA9IF8yNTkueHl6OwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB2ZWM0KGxpbmVhclRvc1JHQihwYXJhbSksIF8yNTkudyk7Cn0KClJFRky5AQAAbWVzaF9VbHRVdjFWYzRUeHJfZ2xzbDEwMAAAAAAAAAAAAAAAAQAAAAEAAAAGAAAAdV9iYXNlQ29sb3JUZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUBgAAAHVfZnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABYmFzZUNvbG9yRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABtZXRhbGxpY0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAEAAAAHJvdWdobmVzc0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAUAAAAZW1pc3NpdmVGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAACAAAABhbWJpZW50TGlnaHQAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAMAAAAGFtYmllbnRGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAA8AAAA";
static const std::string mesh_Uv1PucShwPcfNorFog_glsl100 = "";
static const std::string points_TexVc4_glsl100 = "U0JTIAAAAABkAAAAR0xTTGQAAAABAFNUQUfQAwAAVkVSVENPREXfAQAAI3ZlcnNpb24gMTAwCgp1bmlmb3JtIHZlYzQgdV92c19wb2ludHNQYXJhbXNbNF07CnZhcnlpbmcgZmxvYXQgdl9wb2ludHJvdGF0aW9uOwphdHRyaWJ1dGUgZmxvYXQgYV9wb2ludHJvdGF0aW9uOwp2YXJ5aW5nIHZlYzQgdl9jb2xvcjsKYXR0cmlidXRlIHZlYzQgYV9jb2xvcjsKYXR0cmlidXRlIHZlYzMgYV9wb3NpdGlvbjsKYXR0cmlidXRlIGZsb2F0IGFfcG9pbnRzaXplOwoKdm9pZCBtYWluKCkKewogICAgdl9wb2ludHJvdGF0aW9uID0gYV9wb2ludHJvdGF0aW9uOwogICAgdl9jb2xvciA9IGFfY29sb3I7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c19wb2ludHNQYXJhbXNbMF0sIHVfdnNfcG9pbnRzUGFyYW1zWzFdLCB1X3ZzX3BvaW50c1BhcmFtc1syXSwgdV92c19wb2ludHNQYXJhbXNbM10pICogdmVjNChhX3Bvc2l0aW9uLCAxLjApOwogICAgZ2xfUG9pbnRTaXplID0gYV9wb2ludHNpemUgLyBnbF9Qb3NpdGlvbi53Owp9CgpSRUZM3QEAAHBvaW50c19UZXhWYzRfZ2xzbDEwMAAAAAAAAAAAAAAABAAAAAAAAAABAAAAAQAAAGFfcG9pbnRyb3RhdGlvbgAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDFhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABGTFQ0YV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfcG9pbnRzaXplAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAdV92c19wb2ludHNQYXJhbXMAAAAAAAAAAAAAAAAAAABwb2ludHNQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUfCBQAARlJBR0NPREVOBQAAI3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9wb2ludHNUZXh0dXJlOwoKdmFyeWluZyBoaWdocCB2ZWM0IHZfY29sb3I7CnZhcnlpbmcgaGlnaHAgZmxvYXQgdl9wb2ludHJvdGF0aW9uOwoKaGlnaHAgdmVjMyBzUkdCVG9MaW5lYXIoaGlnaHAgdmVjMyBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCB2ZWMzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9CgpoaWdocCB2ZWM0IHNSR0JUb0xpbmVhcihoaWdocCB2ZWM0IHNyZ2JJbikKewogICAgaGlnaHAgdmVjMyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gdmVjNChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCmhpZ2hwIHZlYzQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdl9jb2xvcjsKfQoKaGlnaHAgdmVjNCBnZXRCYXNlQ29sb3IoKQp7CiAgICBoaWdocCB2ZWM0IGJhc2VDb2xvciA9IHZlYzQoMS4wKTsKICAgIGhpZ2hwIHZlYzIgcmVzdWx0Q29vcmQgPSBnbF9Qb2ludENvb3JkOwogICAgaWYgKCEodl9wb2ludHJvdGF0aW9uID09IDAuMCkpCiAgICB7CiAgICAgICAgaGlnaHAgZmxvYXQgXzgzID0gY29zKHZfcG9pbnRyb3RhdGlvbik7CiAgICAgICAgaGlnaHAgZmxvYXQgXzg4ID0gcmVzdWx0Q29vcmQueCAtIDAuNTsKICAgICAgICBoaWdocCBmbG9hdCBfOTEgPSBzaW4odl9wb2ludHJvdGF0aW9uKTsKICAgICAgICBoaWdocCBmbG9hdCBfOTUgPSByZXN1bHRDb29yZC55IC0gMC41OwogICAgICAgIHJlc3VsdENvb3JkID0gdmVjMigoKF84MyAqIF84OCkgKyAoXzkxICogXzk1KSkgKyAwLjUsICgoXzgzICogXzk1KSAtIChfOTEgKiBfODgpKSArIDAuNSk7CiAgICB9CiAgICBoaWdocCB2ZWM0IHBhcmFtID0gdGV4dHVyZTJEKHVfcG9pbnRzVGV4dHVyZSwgcmVzdWx0Q29vcmQpOwogICAgaGlnaHAgdmVjNCBfMTIzID0gYmFzZUNvbG9yOwogICAgaGlnaHAgdmVjNCBfMTI0ID0gXzEyMyAqIHNSR0JUb0xpbmVhcihwYXJhbSk7CiAgICBiYXNlQ29sb3IgPSBfMTI0OwogICAgcmV0dXJuIF8xMjQgKiBnZXRWZXJ0ZXhDb2xvcigpOwp9CgpoaWdocCB2ZWMzIGxpbmVhclRvc1JHQihoaWdocCB2ZWMzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCB2ZWMzKDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NSkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IF8xMzEgPSBnZXRCYXNlQ29sb3IoKTsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBfMTMxLnh5ejsKICAgIGdsX0ZyYWdEYXRhWzBdID0gdmVjNChsaW5lYXJUb3NSR0IocGFyYW0pLCBfMTMxLncpOwp9CgpSRUZMYAAAAHBvaW50c19UZXhWYzRfZ2xzbDEwMAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAHVfcG9pbnRzVGV4dHVyZQAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVA==";
static const std::string mesh_Uv1PucNorNmpTanVc4Ski_glsl100 = "";
static const std::string mesh_Uv1PucNorVc4Fog_glsl100 = "";
static const std::string ui_Vc4_glsl100 = "U0JTIAAAAABkAAAAR0xTTGQAAAABAFNUQUdwAgAAVkVSVENPREUXAQAAI3ZlcnNpb24gMTAwCgp1bmlmb3JtIHZlYzQgdV92c191aVBhcmFtc1s0XTsKdmFyeWluZyB2ZWM0IHZfY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IGFfY29sb3I7CmF0dHJpYnV0ZSB2ZWMzIGFfcG9zaXRpb247Cgp2b2lkIG1haW4oKQp7CiAgICB2X2NvbG9yID0gYV9jb2xvcjsKICAgIGdsX1Bvc2l0aW9uID0gbWF0NCh1X3ZzX3VpUGFyYW1zWzBdLCB1X3ZzX3VpUGFyYW1zWzFdLCB1X3ZzX3VpUGFyYW1zWzJdLCB1X3ZzX3VpUGFyYW1zWzNdKSAqIHZlYzQoYV9wb3NpdGlvbiwgMS4wKTsKfQoKUkVGTEUBAAB1aV9WYzRfZ2xzbDEwMAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAQAAAAEAAABhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABOT1JNQUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0YV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAB1X3ZzX3VpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAHVpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAW12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAU1RBR7kCAABGUkFHQ09ERfgBAAAjdmVyc2lvbiAxMDAKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBoaWdocCBpbnQ7Cgp1bmlmb3JtIGhpZ2hwIHZlYzQgdV9mc191aVBhcmFtc1sxXTsKdmFyeWluZyBoaWdocCB2ZWM0IHZfY29sb3I7CgpoaWdocCB2ZWM0IGdldFZlcnRleENvbG9yKCkKewogICAgcmV0dXJuIHZfY29sb3I7Cn0KCmhpZ2hwIHZlYzQgZ2V0QmFzZUNvbG9yKCkKewogICAgcmV0dXJuIHVfZnNfdWlQYXJhbXNbMF0gKiBnZXRWZXJ0ZXhDb2xvcigpOwp9CgpoaWdocCB2ZWMzIGxpbmVhclRvc1JHQihoaWdocCB2ZWMzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCB2ZWMzKDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NSkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IF81MCA9IGdldEJhc2VDb2xvcigpOwogICAgaGlnaHAgdmVjMyBwYXJhbSA9IF81MC54eXo7CiAgICBnbF9GcmFnRGF0YVswXSA9IHZlYzQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzUwLncpOwp9CgpSRUZMrQAAAHVpX1ZjNF9nbHNsMTAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAEAAAB1X2ZzX3VpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAHVpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAWNvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAA";
static const std::string mesh_Uv1PucNorNmpTan_glsl100 = "";
static const std::string mesh_PucShwPcfNorTanMtaMnr_glsl100 = "";
static const std::string mesh_Uv1PucShwPcfNorNmpTan_glsl100 = "";
static const std::string mesh_UltUv1Vc4Fog_glsl100 = "U0JTIAAAAABkAAAAR0xTTGQAAAABAFNUQUcwBgAAVkVSVENPREUzBAAAI3ZlcnNpb24gMTAwCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwphdHRyaWJ1dGUgdmVjMyBhX3Bvc2l0aW9uOwp2YXJ5aW5nIHZlYzMgdl9wb3NpdGlvbjsKdmFyeWluZyB2ZWMyIHZfdXYxOwp2YXJ5aW5nIHZlYzIgdl91djI7CmF0dHJpYnV0ZSB2ZWMyIGFfdGV4Y29vcmQxOwp2YXJ5aW5nIHZlYzQgdl9jb2xvcjsKYXR0cmlidXRlIHZlYzQgYV9jb2xvcjsKCm1hdDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIHJldHVybiBtYXQ0KHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSk7Cn0KCnZlYzMgZ2V0TW9ycGhQb3NpdGlvbih2ZWMzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKdmVjMyBnZXRTa2luUG9zaXRpb24odmVjMyBwb3MsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKdmVjNCBnZXRQb3NpdGlvbihtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHZlYzMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgdmVjMyBwYXJhbV8xID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBtYXQ0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIHZlYzQoZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpLCAxLjApOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBtYXQ0IHBhcmFtID0gZ2V0Qm9uZVRyYW5zZm9ybSgpOwogICAgdmVjNCBfNjcgPSBnZXRQb3NpdGlvbihwYXJhbSk7CiAgICB2ZWM0IF83OCA9IG1hdDQodV92c19wYnJQYXJhbXNbMF0sIHVfdnNfcGJyUGFyYW1zWzFdLCB1X3ZzX3BiclBhcmFtc1syXSwgdV92c19wYnJQYXJhbXNbM10pICogXzY3OwogICAgdl9wb3NpdGlvbiA9IHZlYzMoXzc4Lnh5eikgLyB2ZWMzKF83OC53KTsKICAgIHZfdXYxID0gdmVjMigwLjApOwogICAgdl91djIgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MSA9IGFfdGV4Y29vcmQxOwogICAgdl9jb2xvciA9IGFfY29sb3I7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c19wYnJQYXJhbXNbOF0sIHVfdnNfcGJyUGFyYW1zWzldLCB1X3ZzX3BiclBhcmFtc1sxMF0sIHVfdnNfcGJyUGFyYW1zWzExXSkgKiBfNjc7Cn0KClJFRkzpAQAAbWVzaF9VbHRVdjFWYzRGb2dfZ2xzbDEwMAAAAAAAAAADAAAAAAAAAAEAAAADAAAAYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfdGV4Y29vcmQxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDJhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AwAAAHVfdnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAABbW9kZWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABub3JtYWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAQAAAAG12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAACAAAAAU1RBR/wFAABGUkFHQ09ERS8EAAAjdmVyc2lvbiAxMDAKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBoaWdocCBpbnQ7Cgp1bmlmb3JtIGhpZ2hwIHZlYzQgdV9mc19wYnJQYXJhbXNbNF07CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfYmFzZUNvbG9yVGV4dHVyZTsKCnZhcnlpbmcgaGlnaHAgdmVjNCB2X2NvbG9yOwp2YXJ5aW5nIGhpZ2hwIHZlYzIgdl91djE7CnZhcnlpbmcgaGlnaHAgdmVjMyB2X3Bvc2l0aW9uOwp2YXJ5aW5nIGhpZ2hwIHZlYzIgdl91djI7CgpoaWdocCB2ZWMzIHNSR0JUb0xpbmVhcihoaWdocCB2ZWMzIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIHZlYzMoMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSk7Cn0KCmhpZ2hwIHZlYzQgc1JHQlRvTGluZWFyKGhpZ2hwIHZlYzQgc3JnYkluKQp7CiAgICBoaWdocCB2ZWMzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiB2ZWM0KHNSR0JUb0xpbmVhcihwYXJhbSksIHNyZ2JJbi53KTsKfQoKaGlnaHAgdmVjNCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2X2NvbG9yOwp9CgpoaWdocCB2ZWM0IGdldEJhc2VDb2xvcigpCnsKICAgIGhpZ2hwIHZlYzQgYmFzZUNvbG9yID0gdV9mc19wYnJQYXJhbXNbMF07CiAgICBoaWdocCB2ZWM0IHBhcmFtID0gdGV4dHVyZTJEKHVfYmFzZUNvbG9yVGV4dHVyZSwgdl91djEpOwogICAgaGlnaHAgdmVjNCBfMTAzID0gYmFzZUNvbG9yOwogICAgaGlnaHAgdmVjNCBfMTA0ID0gXzEwMyAqIHNSR0JUb0xpbmVhcihwYXJhbSk7CiAgICBiYXNlQ29sb3IgPSBfMTA0OwogICAgcmV0dXJuIF8xMDQgKiBnZXRWZXJ0ZXhDb2xvcigpOwp9CgpoaWdocCB2ZWMzIGxpbmVhclRvc1JHQihoaWdocCB2ZWMzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCB2ZWMzKDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NSkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IF8yNTkgPSBnZXRCYXNlQ29sb3IoKTsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBfMjU5Lnh5ejsKICAgIGdsX0ZyYWdEYXRhWzBdID0gdmVjNChsaW5lYXJUb3NSR0IocGFyYW0pLCBfMjU5LncpOwp9CgpSRUZMuQEAAG1lc2hfVWx0VXYxVmM0Rm9nX2dsc2wxMDAAAAAAAAAAAAAAAAEAAAABAAAABgAAAHVfYmFzZUNvbG9yVGV4dHVyZQAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVAYAAAB1X2ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAWJhc2VDb2xvckZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAAbWV0YWxsaWNGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABAAAAByb3VnaG5lc3NGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAFAAAAGVtaXNzaXZlRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAgAAAAYW1iaWVudExpZ2h0AAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAADAAAABhbWJpZW50RmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAPAAAAA==";
static const std::string mesh_UltUv1Fog_glsl100 = "U0JTIAAAAABkAAAAR0xTTGQAAAABAFNUQUefBQAAVkVSVENPREXuAwAAI3ZlcnNpb24gMTAwCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwphdHRyaWJ1dGUgdmVjMyBhX3Bvc2l0aW9uOwp2YXJ5aW5nIHZlYzMgdl9wb3NpdGlvbjsKdmFyeWluZyB2ZWMyIHZfdXYxOwp2YXJ5aW5nIHZlYzIgdl91djI7CmF0dHJpYnV0ZSB2ZWMyIGFfdGV4Y29vcmQxOwoKbWF0NCBnZXRCb25lVHJhbnNmb3JtKCkKewogICAgcmV0dXJuIG1hdDQodmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSwgdmVjNCgwLjApKTsKfQoKdmVjMyBnZXRNb3JwaFBvc2l0aW9uKHZlYzMgcG9zKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2ZWMzIGdldFNraW5Qb3NpdGlvbih2ZWMzIHBvcywgbWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2ZWM0IGdldFBvc2l0aW9uKG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgdmVjMyBwYXJhbSA9IGFfcG9zaXRpb247CiAgICB2ZWMzIHBhcmFtXzEgPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIG1hdDQgcGFyYW1fMiA9IGJvbmVUcmFuc2Zvcm07CiAgICByZXR1cm4gdmVjNChnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMiksIDEuMCk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcGFyYW0gPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICB2ZWM0IF82NyA9IGdldFBvc2l0aW9uKHBhcmFtKTsKICAgIHZlYzQgXzc4ID0gbWF0NCh1X3ZzX3BiclBhcmFtc1swXSwgdV92c19wYnJQYXJhbXNbMV0sIHVfdnNfcGJyUGFyYW1zWzJdLCB1X3ZzX3BiclBhcmFtc1szXSkgKiBfNjc7CiAgICB2X3Bvc2l0aW9uID0gdmVjMyhfNzgueHl6KSAvIHZlYzMoXzc4LncpOwogICAgdl91djEgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MiA9IHZlYzIoMC4wKTsKICAgIHZfdXYxID0gYV90ZXhjb29yZDE7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c19wYnJQYXJhbXNbOF0sIHVfdnNfcGJyUGFyYW1zWzldLCB1X3ZzX3BiclBhcmFtc1sxMF0sIHVfdnNfcGJyUGFyYW1zWzExXSkgKiBfNjc7Cn0KClJFRkydAQAAbWVzaF9VbHRVdjFGb2dfZ2xzbDEwMAAAAAAAAAAAAAACAAAAAAAAAAEAAAADAAAAYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfdGV4Y29vcmQxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDIDAAAAdV92c19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAFtb2RlbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAG5vcm1hbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAABAAAAAbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAIAAAABTVEFH4gUAAEZSQUdDT0RFFQQAACN2ZXJzaW9uIDEwMApwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIGhpZ2hwIGludDsKCnVuaWZvcm0gaGlnaHAgdmVjNCB1X2ZzX3BiclBhcmFtc1s0XTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9iYXNlQ29sb3JUZXh0dXJlOwoKdmFyeWluZyBoaWdocCB2ZWMyIHZfdXYxOwp2YXJ5aW5nIGhpZ2hwIHZlYzMgdl9wb3NpdGlvbjsKdmFyeWluZyBoaWdocCB2ZWMyIHZfdXYyOwoKaGlnaHAgdmVjMyBzUkdCVG9MaW5lYXIoaGlnaHAgdmVjMyBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCB2ZWMzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9CgpoaWdocCB2ZWM0IHNSR0JUb0xpbmVhcihoaWdocCB2ZWM0IHNyZ2JJbikKewogICAgaGlnaHAgdmVjMyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gdmVjNChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCmhpZ2hwIHZlYzQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdmVjNCgxLjApOwp9CgpoaWdocCB2ZWM0IGdldEJhc2VDb2xvcigpCnsKICAgIGhpZ2hwIHZlYzQgYmFzZUNvbG9yID0gdV9mc19wYnJQYXJhbXNbMF07CiAgICBoaWdocCB2ZWM0IHBhcmFtID0gdGV4dHVyZTJEKHVfYmFzZUNvbG9yVGV4dHVyZSwgdl91djEpOwogICAgaGlnaHAgdmVjNCBfMTAwID0gYmFzZUNvbG9yOwogICAgaGlnaHAgdmVjNCBfMTAxID0gXzEwMCAqIHNSR0JUb0xpbmVhcihwYXJhbSk7CiAgICBiYXNlQ29sb3IgPSBfMTAxOwogICAgcmV0dXJuIF8xMDEgKiBnZXRWZXJ0ZXhDb2xvcigpOwp9CgpoaWdocCB2ZWMzIGxpbmVhclRvc1JHQihoaWdocCB2ZWMzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCB2ZWMzKDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NSkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IF8yNTYgPSBnZXRCYXNlQ29sb3IoKTsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBfMjU2Lnh5ejsKICAgIGdsX0ZyYWdEYXRhWzBdID0gdmVjNChsaW5lYXJUb3NSR0IocGFyYW0pLCBfMjU2LncpOwp9CgpSRUZMuQEAAG1lc2hfVWx0VXYxRm9nX2dsc2wxMDAAAAAAAAAAAAAAAAAAAAEAAAABAAAABgAAAHVfYmFzZUNvbG9yVGV4dHVyZQAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVAYAAAB1X2ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAWJhc2VDb2xvckZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAAbWV0YWxsaWNGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABAAAAByb3VnaG5lc3NGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAFAAAAGVtaXNzaXZlRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAgAAAAYW1iaWVudExpZ2h0AAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAADAAAABhbWJpZW50RmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAPAAAAA==";
static const std::string depth_Ski_glsl100 = "U0JTIAAAAABkAAAAR0xTTGQAAAABAFNUQUfgCQAAVkVSVENPREW+BwAAI3ZlcnNpb24gMTAwCgp1bmlmb3JtIHZlYzQgdV92c19za2lubmluZ1syODBdOwp1bmlmb3JtIHZlYzQgdV92c19kZXB0aFBhcmFtc1s0XTsKYXR0cmlidXRlIHZlYzQgYV9ib25lSWRzOwphdHRyaWJ1dGUgdmVjNCBhX2JvbmVXZWlnaHRzOwphdHRyaWJ1dGUgdmVjMyBhX3Bvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdl9wcm9qWlc7Cgp2ZWMzIGdldE1vcnBoUG9zaXRpb24odmVjMyBwb3MpCnsKICAgIHJldHVybiBwb3M7Cn0KCm1hdDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIG1hdDQgXzUxID0gbWF0NCh1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMueCAqIDY1NTM1LjApICogNCArIDBdLCB1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMueCAqIDY1NTM1LjApICogNCArIDFdLCB1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMueCAqIDY1NTM1LjApICogNCArIDJdLCB1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMueCAqIDY1NTM1LjApICogNCArIDNdKSAqIGFfYm9uZVdlaWdodHMueDsKICAgIG1hdDQgXzc1ID0gbWF0NCh1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMueSAqIDY1NTM1LjApICogNCArIDBdLCB1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMueSAqIDY1NTM1LjApICogNCArIDFdLCB1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMueSAqIDY1NTM1LjApICogNCArIDJdLCB1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMueSAqIDY1NTM1LjApICogNCArIDNdKSAqIGFfYm9uZVdlaWdodHMueTsKICAgIG1hdDQgXzk5ID0gbWF0NCh1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMueiAqIDY1NTM1LjApICogNCArIDBdLCB1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMueiAqIDY1NTM1LjApICogNCArIDFdLCB1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMueiAqIDY1NTM1LjApICogNCArIDJdLCB1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMueiAqIDY1NTM1LjApICogNCArIDNdKSAqIGFfYm9uZVdlaWdodHMuejsKICAgIG1hdDQgXzEyMyA9IG1hdDQodV92c19za2lubmluZ1tpbnQoYV9ib25lSWRzLncgKiA2NTUzNS4wKSAqIDQgKyAwXSwgdV92c19za2lubmluZ1tpbnQoYV9ib25lSWRzLncgKiA2NTUzNS4wKSAqIDQgKyAxXSwgdV92c19za2lubmluZ1tpbnQoYV9ib25lSWRzLncgKiA2NTUzNS4wKSAqIDQgKyAyXSwgdV92c19za2lubmluZ1tpbnQoYV9ib25lSWRzLncgKiA2NTUzNS4wKSAqIDQgKyAzXSkgKiBhX2JvbmVXZWlnaHRzLnc7CiAgICByZXR1cm4gbWF0NCgoKF81MVswXSArIF83NVswXSkgKyBfOTlbMF0pICsgXzEyM1swXSwgKChfNTFbMV0gKyBfNzVbMV0pICsgXzk5WzFdKSArIF8xMjNbMV0sICgoXzUxWzJdICsgXzc1WzJdKSArIF85OVsyXSkgKyBfMTIzWzJdLCAoKF81MVszXSArIF83NVszXSkgKyBfOTlbM10pICsgXzEyM1szXSk7Cn0KCnZlYzMgZ2V0U2tpblBvc2l0aW9uKGlub3V0IHZlYzMgcG9zLCBtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHZlYzQgXzE1MSA9IGJvbmVUcmFuc2Zvcm0gKiB2ZWM0KHBvcywgMS4wKTsKICAgIHBvcyA9IHZlYzMoXzE1MS54eXopIC8gdmVjMyhfMTUxLncpOwogICAgcmV0dXJuIHBvczsKfQoKdm9pZCBtYWluKCkKewogICAgdmVjMyBwb3MgPSBhX3Bvc2l0aW9uOwogICAgdmVjMyBwYXJhbSA9IGFfcG9zaXRpb247CiAgICBwb3MgPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIHZlYzMgcGFyYW1fMSA9IHBvczsKICAgIG1hdDQgcGFyYW1fMiA9IGdldEJvbmVUcmFuc2Zvcm0oKTsKICAgIHZlYzMgXzE3OSA9IGdldFNraW5Qb3NpdGlvbihwYXJhbV8xLCBwYXJhbV8yKTsKICAgIHBvcyA9IF8xNzk7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c19kZXB0aFBhcmFtc1swXSwgdV92c19kZXB0aFBhcmFtc1sxXSwgdV92c19kZXB0aFBhcmFtc1syXSwgdV92c19kZXB0aFBhcmFtc1szXSkgKiB2ZWM0KF8xNzksIDEuMCk7CiAgICB2X3Byb2paVyA9IGdsX1Bvc2l0aW9uLnp3Owp9CgpSRUZMDgIAAGRlcHRoX1NraV9nbHNsMTAwAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAACAAAAAgAAAGFfYm9uZUlkcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDRhX2JvbmVXZWlnaHRzAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABOT1JNQUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0YV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAB1X3ZzX3NraW5uaW5nAAAAAAAAAAAAAAAAAAAAAAAAAF8zMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAEQAAAWJvbmVzTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNEYAAAAAAAAAAQAAAHVfdnNfZGVwdGhQYXJhbXMAAAAAAAAAAAAAAAAAAAAAZGVwdGhQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAEAAAAABbGlnaHRNVlBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABTVEFHHQIAAEZSQUdDT0RF2QEAACN2ZXJzaW9uIDEwMApwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIGhpZ2hwIGludDsKCnZhcnlpbmcgaGlnaHAgdmVjMiB2X3Byb2paVzsKCmhpZ2hwIHZlYzQgZW5jb2RlRGVwdGgoaGlnaHAgZmxvYXQgdikKewogICAgaGlnaHAgdmVjNCBfMjMgPSBmcmFjdCh2ZWM0KDEuMCwgMjU1LjAsIDY1MDI1LjAsIDE2NTgxMzc1LjApICogdik7CiAgICByZXR1cm4gXzIzIC0gKF8yMy55end3ICogdmVjNCgwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjUsIDAuMDAzOTIxNTY4ODU5MzY4NTYyNjk4MzY0MjU3ODEyNSwgMC4wMDM5MjE1Njg4NTkzNjg1NjI2OTgzNjQyNTc4MTI1LCAwLjApKTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgZmxvYXQgcGFyYW0gPSAoKDAuNSAqIHZfcHJvalpXLngpIC8gdl9wcm9qWlcueSkgKyAwLjU7CiAgICBnbF9GcmFnRGF0YVswXSA9IGVuY29kZURlcHRoKHBhcmFtKTsKfQoKUkVGTDAAAABkZXB0aF9Ta2lfZ2xzbDEwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=";
static const std::string mesh_Uv1PucNorNmpTanVc4Fog_glsl100 = "";
static const std::string mesh_Uv1PucNorVc4_glsl100 = "";
static const std::string mesh_Uv1PucShwPcfNorVc4_glsl100 = "";
static const std::string mesh_UltUv1_glsl100 = "U0JTIAAAAABkAAAAR0xTTGQAAAABAFNUQUefBQAAVkVSVENPREXuAwAAI3ZlcnNpb24gMTAwCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwphdHRyaWJ1dGUgdmVjMyBhX3Bvc2l0aW9uOwp2YXJ5aW5nIHZlYzMgdl9wb3NpdGlvbjsKdmFyeWluZyB2ZWMyIHZfdXYxOwp2YXJ5aW5nIHZlYzIgdl91djI7CmF0dHJpYnV0ZSB2ZWMyIGFfdGV4Y29vcmQxOwoKbWF0NCBnZXRCb25lVHJhbnNmb3JtKCkKewogICAgcmV0dXJuIG1hdDQodmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSwgdmVjNCgwLjApKTsKfQoKdmVjMyBnZXRNb3JwaFBvc2l0aW9uKHZlYzMgcG9zKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2ZWMzIGdldFNraW5Qb3NpdGlvbih2ZWMzIHBvcywgbWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2ZWM0IGdldFBvc2l0aW9uKG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgdmVjMyBwYXJhbSA9IGFfcG9zaXRpb247CiAgICB2ZWMzIHBhcmFtXzEgPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIG1hdDQgcGFyYW1fMiA9IGJvbmVUcmFuc2Zvcm07CiAgICByZXR1cm4gdmVjNChnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMiksIDEuMCk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcGFyYW0gPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICB2ZWM0IF82NyA9IGdldFBvc2l0aW9uKHBhcmFtKTsKICAgIHZlYzQgXzc4ID0gbWF0NCh1X3ZzX3BiclBhcmFtc1swXSwgdV92c19wYnJQYXJhbXNbMV0sIHVfdnNfcGJyUGFyYW1zWzJdLCB1X3ZzX3BiclBhcmFtc1szXSkgKiBfNjc7CiAgICB2X3Bvc2l0aW9uID0gdmVjMyhfNzgueHl6KSAvIHZlYzMoXzc4LncpOwogICAgdl91djEgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MiA9IHZlYzIoMC4wKTsKICAgIHZfdXYxID0gYV90ZXhjb29yZDE7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c19wYnJQYXJhbXNbOF0sIHVfdnNfcGJyUGFyYW1zWzldLCB1X3ZzX3BiclBhcmFtc1sxMF0sIHVfdnNfcGJyUGFyYW1zWzExXSkgKiBfNjc7Cn0KClJFRkydAQAAbWVzaF9VbHRVdjFfZ2xzbDEwMAAAAAAAAAAAAAAAAAACAAAAAAAAAAEAAAADAAAAYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfdGV4Y29vcmQxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDIDAAAAdV92c19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAFtb2RlbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAG5vcm1hbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAABAAAAAbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAIAAAABTVEFH4gUAAEZSQUdDT0RFFQQAACN2ZXJzaW9uIDEwMApwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIGhpZ2hwIGludDsKCnVuaWZvcm0gaGlnaHAgdmVjNCB1X2ZzX3BiclBhcmFtc1s0XTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9iYXNlQ29sb3JUZXh0dXJlOwoKdmFyeWluZyBoaWdocCB2ZWMyIHZfdXYxOwp2YXJ5aW5nIGhpZ2hwIHZlYzMgdl9wb3NpdGlvbjsKdmFyeWluZyBoaWdocCB2ZWMyIHZfdXYyOwoKaGlnaHAgdmVjMyBzUkdCVG9MaW5lYXIoaGlnaHAgdmVjMyBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCB2ZWMzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9CgpoaWdocCB2ZWM0IHNSR0JUb0xpbmVhcihoaWdocCB2ZWM0IHNyZ2JJbikKewogICAgaGlnaHAgdmVjMyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gdmVjNChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCmhpZ2hwIHZlYzQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdmVjNCgxLjApOwp9CgpoaWdocCB2ZWM0IGdldEJhc2VDb2xvcigpCnsKICAgIGhpZ2hwIHZlYzQgYmFzZUNvbG9yID0gdV9mc19wYnJQYXJhbXNbMF07CiAgICBoaWdocCB2ZWM0IHBhcmFtID0gdGV4dHVyZTJEKHVfYmFzZUNvbG9yVGV4dHVyZSwgdl91djEpOwogICAgaGlnaHAgdmVjNCBfMTAwID0gYmFzZUNvbG9yOwogICAgaGlnaHAgdmVjNCBfMTAxID0gXzEwMCAqIHNSR0JUb0xpbmVhcihwYXJhbSk7CiAgICBiYXNlQ29sb3IgPSBfMTAxOwogICAgcmV0dXJuIF8xMDEgKiBnZXRWZXJ0ZXhDb2xvcigpOwp9CgpoaWdocCB2ZWMzIGxpbmVhclRvc1JHQihoaWdocCB2ZWMzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCB2ZWMzKDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NSkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IF8yNTYgPSBnZXRCYXNlQ29sb3IoKTsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBfMjU2Lnh5ejsKICAgIGdsX0ZyYWdEYXRhWzBdID0gdmVjNChsaW5lYXJUb3NSR0IocGFyYW0pLCBfMjU2LncpOwp9CgpSRUZMuQEAAG1lc2hfVWx0VXYxX2dsc2wxMDAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAABgAAAHVfYmFzZUNvbG9yVGV4dHVyZQAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVAYAAAB1X2ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAWJhc2VDb2xvckZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAAbWV0YWxsaWNGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABAAAAByb3VnaG5lc3NGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAFAAAAGVtaXNzaXZlRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAgAAAAYW1iaWVudExpZ2h0AAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAADAAAABhbWJpZW50RmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAPAAAAA==";
static const std::string ui_TexVc4_glsl100 = "U0JTIAAAAABkAAAAR0xTTGQAAAABAFNUQUcFAwAAVkVSVENPREVgAQAAI3ZlcnNpb24gMTAwCgp1bmlmb3JtIHZlYzQgdV92c191aVBhcmFtc1s0XTsKdmFyeWluZyB2ZWM0IHZfY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IGFfY29sb3I7CnZhcnlpbmcgdmVjMiB2X3V2MTsKYXR0cmlidXRlIHZlYzIgYV90ZXhjb29yZDE7CmF0dHJpYnV0ZSB2ZWMzIGFfcG9zaXRpb247Cgp2b2lkIG1haW4oKQp7CiAgICB2X2NvbG9yID0gYV9jb2xvcjsKICAgIHZfdXYxID0gYV90ZXhjb29yZDE7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c191aVBhcmFtc1swXSwgdV92c191aVBhcmFtc1sxXSwgdV92c191aVBhcmFtc1syXSwgdV92c191aVBhcmFtc1szXSkgKiB2ZWM0KGFfcG9zaXRpb24sIDEuMCk7Cn0KClJFRkyRAQAAdWlfVGV4VmM0X2dsc2wxMDAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAEAAAABAAAAYV9jb2xvcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNGFfdGV4Y29vcmQxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDJhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAAHVfdnNfdWlQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAdWlQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABTVEFHzwQAAEZSQUdDT0RF3gMAACN2ZXJzaW9uIDEwMApwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIGhpZ2hwIGludDsKCnVuaWZvcm0gaGlnaHAgdmVjNCB1X2ZzX3VpUGFyYW1zWzFdOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X3VpVGV4dHVyZTsKCnZhcnlpbmcgaGlnaHAgdmVjNCB2X2NvbG9yOwp2YXJ5aW5nIGhpZ2hwIHZlYzIgdl91djE7CgpoaWdocCB2ZWMzIHNSR0JUb0xpbmVhcihoaWdocCB2ZWMzIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIHZlYzMoMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSk7Cn0KCmhpZ2hwIHZlYzQgc1JHQlRvTGluZWFyKGhpZ2hwIHZlYzQgc3JnYkluKQp7CiAgICBoaWdocCB2ZWMzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiB2ZWM0KHNSR0JUb0xpbmVhcihwYXJhbSksIHNyZ2JJbi53KTsKfQoKaGlnaHAgdmVjNCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2X2NvbG9yOwp9CgpoaWdocCB2ZWM0IGdldEJhc2VDb2xvcigpCnsKICAgIGhpZ2hwIHZlYzQgYmFzZUNvbG9yID0gdV9mc191aVBhcmFtc1swXTsKICAgIGhpZ2hwIHZlYzQgcGFyYW0gPSB0ZXh0dXJlMkQodV91aVRleHR1cmUsIHZfdXYxKTsKICAgIGhpZ2hwIHZlYzQgXzg4ID0gYmFzZUNvbG9yOwogICAgaGlnaHAgdmVjNCBfODkgPSBfODggKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzg5OwogICAgcmV0dXJuIF84OSAqIGdldFZlcnRleENvbG9yKCk7Cn0KCmhpZ2hwIHZlYzMgbGluZWFyVG9zUkdCKGhpZ2hwIHZlYzMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIHZlYzMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIHZlYzQgXzk2ID0gZ2V0QmFzZUNvbG9yKCk7CiAgICBoaWdocCB2ZWMzIHBhcmFtID0gXzk2Lnh5ejsKICAgIGdsX0ZyYWdEYXRhWzBdID0gdmVjNChsaW5lYXJUb3NSR0IocGFyYW0pLCBfOTYudyk7Cn0KClJFRkzdAAAAdWlfVGV4VmM0X2dsc2wxMDAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAdV91aVRleHR1cmUAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUAQAAAHVfZnNfdWlQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAdWlQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAABY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAAA=";
static const std::string mesh_Uv1PucNorNmpTanVc4_glsl100 = "";
static const std::string sky_glsl100 = "U0JTIAAAAABkAAAAR0xTTGQAAAABAFNUQUcRAgAAVkVSVENPREUEAQAAI3ZlcnNpb24gMTAwCgp1bmlmb3JtIHZlYzQgdV92c19za3lQYXJhbXNbNF07CnZhcnlpbmcgdmVjMyB1djsKYXR0cmlidXRlIHZlYzMgYV9wb3NpdGlvbjsKCnZvaWQgbWFpbigpCnsKICAgIHV2ID0gYV9wb3NpdGlvbjsKICAgIGdsX1Bvc2l0aW9uID0gKG1hdDQodV92c19za3lQYXJhbXNbMF0sIHVfdnNfc2t5UGFyYW1zWzFdLCB1X3ZzX3NreVBhcmFtc1syXSwgdV92c19za3lQYXJhbXNbM10pICogdmVjNChhX3Bvc2l0aW9uLCAxLjApKS54eXd3Owp9CgpSRUZM+QAAAHNreV9nbHNsMTAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAQAAAGFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAdV92c19za3lQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABza3lQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAF2cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUftAQAARlJBR0NPREX8AAAAI3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCB2ZWM0IHVfZnNfc2t5UGFyYW1zWzFdOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXJDdWJlIHVfc2t5VGV4dHVyZTsKCnZhcnlpbmcgaGlnaHAgdmVjMyB1djsKCnZvaWQgbWFpbigpCnsKICAgIGdsX0ZyYWdEYXRhWzBdID0gdV9mc19za3lQYXJhbXNbMF0gKiB0ZXh0dXJlQ3ViZSh1X3NreVRleHR1cmUsIHV2KTsKfQoKUkVGTN0AAABza3lfZ2xzbDEwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAEAAAB1X3NreVRleHR1cmUAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAQ1VCRVRGTFQBAAAAdV9mc19za3lQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABza3lQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAFjb2xvcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAA==";
static const std::string mesh_Uv1PucShwPcfNor_glsl100 = "";
static const std::string mesh_Uv1PucNorNmpTanVc4FogSki_glsl100 = "";
static const std::string points_Vc4_glsl100 = "U0JTIAAAAABkAAAAR0xTTGQAAAABAFNUQUfQAwAAVkVSVENPREXfAQAAI3ZlcnNpb24gMTAwCgp1bmlmb3JtIHZlYzQgdV92c19wb2ludHNQYXJhbXNbNF07CnZhcnlpbmcgZmxvYXQgdl9wb2ludHJvdGF0aW9uOwphdHRyaWJ1dGUgZmxvYXQgYV9wb2ludHJvdGF0aW9uOwp2YXJ5aW5nIHZlYzQgdl9jb2xvcjsKYXR0cmlidXRlIHZlYzQgYV9jb2xvcjsKYXR0cmlidXRlIHZlYzMgYV9wb3NpdGlvbjsKYXR0cmlidXRlIGZsb2F0IGFfcG9pbnRzaXplOwoKdm9pZCBtYWluKCkKewogICAgdl9wb2ludHJvdGF0aW9uID0gYV9wb2ludHJvdGF0aW9uOwogICAgdl9jb2xvciA9IGFfY29sb3I7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c19wb2ludHNQYXJhbXNbMF0sIHVfdnNfcG9pbnRzUGFyYW1zWzFdLCB1X3ZzX3BvaW50c1BhcmFtc1syXSwgdV92c19wb2ludHNQYXJhbXNbM10pICogdmVjNChhX3Bvc2l0aW9uLCAxLjApOwogICAgZ2xfUG9pbnRTaXplID0gYV9wb2ludHNpemUgLyBnbF9Qb3NpdGlvbi53Owp9CgpSRUZM3QEAAHBvaW50c19WYzRfZ2xzbDEwMAAAAAAAAAAAAAAAAAAABAAAAAAAAAABAAAAAQAAAGFfcG9pbnRyb3RhdGlvbgAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDFhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABGTFQ0YV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfcG9pbnRzaXplAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAdV92c19wb2ludHNQYXJhbXMAAAAAAAAAAAAAAAAAAABwb2ludHNQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUcpAgAARlJBR0NPREXlAQAAI3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdmFyeWluZyBoaWdocCB2ZWM0IHZfY29sb3I7CnZhcnlpbmcgaGlnaHAgZmxvYXQgdl9wb2ludHJvdGF0aW9uOwoKaGlnaHAgdmVjNCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2X2NvbG9yOwp9CgpoaWdocCB2ZWM0IGdldEJhc2VDb2xvcigpCnsKICAgIHJldHVybiBnZXRWZXJ0ZXhDb2xvcigpOwp9CgpoaWdocCB2ZWMzIGxpbmVhclRvc1JHQihoaWdocCB2ZWMzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCB2ZWMzKDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NSkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IF80MiA9IGdldEJhc2VDb2xvcigpOwogICAgaGlnaHAgdmVjMyBwYXJhbSA9IF80Mi54eXo7CiAgICBnbF9GcmFnRGF0YVswXSA9IHZlYzQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzQyLncpOwp9CgpSRUZMMAAAAHBvaW50c19WYzRfZ2xzbDEwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==";
static const std::string mesh_Uv1PucShwPcfNorNmpTanFog_glsl100 = "";
static const std::string mesh_Uv1PucNorFog_glsl100 = "";
static const std::string depth_glsl100 = "U0JTIAAAAABkAAAAR0xTTGQAAAABAFNUQUfPAwAAVkVSVENPREXCAgAAI3ZlcnNpb24gMTAwCgp1bmlmb3JtIHZlYzQgdV92c19kZXB0aFBhcmFtc1s0XTsKYXR0cmlidXRlIHZlYzMgYV9wb3NpdGlvbjsKdmFyeWluZyB2ZWMyIHZfcHJvalpXOwoKdmVjMyBnZXRNb3JwaFBvc2l0aW9uKHZlYzMgcG9zKQp7CiAgICByZXR1cm4gcG9zOwp9CgptYXQ0IGdldEJvbmVUcmFuc2Zvcm0oKQp7CiAgICByZXR1cm4gbWF0NCh2ZWM0KDAuMCksIHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCkpOwp9Cgp2ZWMzIGdldFNraW5Qb3NpdGlvbih2ZWMzIHBvcywgbWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWMzIHBvcyA9IGFfcG9zaXRpb247CiAgICB2ZWMzIHBhcmFtID0gYV9wb3NpdGlvbjsKICAgIHBvcyA9IGdldE1vcnBoUG9zaXRpb24ocGFyYW0pOwogICAgdmVjMyBwYXJhbV8xID0gcG9zOwogICAgbWF0NCBwYXJhbV8yID0gZ2V0Qm9uZVRyYW5zZm9ybSgpOwogICAgdmVjMyBfNDggPSBnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMik7CiAgICBwb3MgPSBfNDg7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c19kZXB0aFBhcmFtc1swXSwgdV92c19kZXB0aFBhcmFtc1sxXSwgdV92c19kZXB0aFBhcmFtc1syXSwgdV92c19kZXB0aFBhcmFtc1szXSkgKiB2ZWM0KF80OCwgMS4wKTsKICAgIHZfcHJvalpXID0gZ2xfUG9zaXRpb24uenc7Cn0KClJFRkz5AAAAZGVwdGhfZ2xzbDEwMAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAABAAAAYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAB1X3ZzX2RlcHRoUGFyYW1zAAAAAAAAAAAAAAAAAAAAAGRlcHRoUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAWxpZ2h0TVZQTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAU1RBRx0CAABGUkFHQ09ERdkBAAAjdmVyc2lvbiAxMDAKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBoaWdocCBpbnQ7Cgp2YXJ5aW5nIGhpZ2hwIHZlYzIgdl9wcm9qWlc7CgpoaWdocCB2ZWM0IGVuY29kZURlcHRoKGhpZ2hwIGZsb2F0IHYpCnsKICAgIGhpZ2hwIHZlYzQgXzIzID0gZnJhY3QodmVjNCgxLjAsIDI1NS4wLCA2NTAyNS4wLCAxNjU4MTM3NS4wKSAqIHYpOwogICAgcmV0dXJuIF8yMyAtIChfMjMueXp3dyAqIHZlYzQoMC4wMDM5MjE1Njg4NTkzNjg1NjI2OTgzNjQyNTc4MTI1LCAwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjUsIDAuMDAzOTIxNTY4ODU5MzY4NTYyNjk4MzY0MjU3ODEyNSwgMC4wKSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtID0gKCgwLjUgKiB2X3Byb2paVy54KSAvIHZfcHJvalpXLnkpICsgMC41OwogICAgZ2xfRnJhZ0RhdGFbMF0gPSBlbmNvZGVEZXB0aChwYXJhbSk7Cn0KClJFRkwwAAAAZGVwdGhfZ2xzbDEwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
static const std::string mesh_PucShwPcfNorTanFogMtaMnrMtg_glsl100 = "U0JTIAAAAABkAAAAR0xTTGQAAAABAFNUQUepEAAAVkVSVENPREXqCwAAI3ZlcnNpb24gMTAwCgp1bmlmb3JtIHZlYzQgdV92c19tb3JwaHRhcmdldFsyXTsKdW5pZm9ybSB2ZWM0IHVfdnNfcGJyUGFyYW1zWzEyXTsKdW5pZm9ybSB2ZWM0IHVfdnNfc2hhZG93c1syNF07CmF0dHJpYnV0ZSB2ZWMzIGFfbW9ycGhUYXJnZXQwOwphdHRyaWJ1dGUgdmVjMyBhX21vcnBoVGFyZ2V0MTsKYXR0cmlidXRlIHZlYzMgYV9tb3JwaE5vcm1hbDA7CmF0dHJpYnV0ZSB2ZWMzIGFfbW9ycGhOb3JtYWwxOwphdHRyaWJ1dGUgdmVjMyBhX21vcnBoVGFuZ2VudDA7CmF0dHJpYnV0ZSB2ZWMzIGFfbW9ycGhUYW5nZW50MTsKYXR0cmlidXRlIHZlYzMgYV9wb3NpdGlvbjsKYXR0cmlidXRlIHZlYzMgYV9ub3JtYWw7CmF0dHJpYnV0ZSB2ZWM0IGFfdGFuZ2VudDsKdmFyeWluZyB2ZWMzIHZfcG9zaXRpb247CnZhcnlpbmcgbWF0MyB2X3RibjsKdmFyeWluZyB2ZWMyIHZfdXYxOwp2YXJ5aW5nIHZlYzIgdl91djI7CnZhcnlpbmcgdmVjNCB2X2xpZ2h0UHJvalBvc1s2XTsKdmFyeWluZyBmbG9hdCB2X2NsaXBTcGFjZVBvc1o7CgptYXQ0IGdldEJvbmVUcmFuc2Zvcm0oKQp7CiAgICByZXR1cm4gbWF0NCh2ZWM0KDAuMCksIHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCkpOwp9Cgp2ZWMzIGdldE1vcnBoUG9zaXRpb24oaW5vdXQgdmVjMyBwb3MpCnsKICAgIHBvcyArPSAoYV9tb3JwaFRhcmdldDAgKiB1X3ZzX21vcnBodGFyZ2V0WzBdLngpOwogICAgcG9zICs9IChhX21vcnBoVGFyZ2V0MSAqIHVfdnNfbW9ycGh0YXJnZXRbMF0ueSk7CiAgICByZXR1cm4gcG9zOwp9Cgp2ZWMzIGdldFNraW5Qb3NpdGlvbih2ZWMzIHBvcywgbWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2ZWM0IGdldFBvc2l0aW9uKG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgdmVjMyBwYXJhbSA9IGFfcG9zaXRpb247CiAgICB2ZWMzIF8xMzMgPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIHZlYzMgcGFyYW1fMSA9IF8xMzM7CiAgICBtYXQ0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIHZlYzQoZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpLCAxLjApOwp9Cgp2ZWMzIGdldE1vcnBoVGFuZ2VudChpbm91dCB2ZWMzIHRhbmdlbnQpCnsKICAgIHRhbmdlbnQgKz0gKGFfbW9ycGhUYW5nZW50MCAqIHVfdnNfbW9ycGh0YXJnZXRbMF0ueCk7CiAgICB0YW5nZW50ICs9IChhX21vcnBoVGFuZ2VudDEgKiB1X3ZzX21vcnBodGFyZ2V0WzBdLnkpOwogICAgcmV0dXJuIHRhbmdlbnQ7Cn0KCnZlYzMgZ2V0U2tpblRhbmdlbnQodmVjMyB0YW5nZW50LCBtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHJldHVybiB0YW5nZW50Owp9Cgp2ZWMzIGdldFRhbmdlbnQobWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICB2ZWMzIHBhcmFtID0gYV90YW5nZW50Lnh5ejsKICAgIHZlYzMgXzE2OSA9IGdldE1vcnBoVGFuZ2VudChwYXJhbSk7CiAgICB2ZWMzIHBhcmFtXzEgPSBfMTY5OwogICAgbWF0NCBwYXJhbV8yID0gYm9uZVRyYW5zZm9ybTsKICAgIHJldHVybiBub3JtYWxpemUoZ2V0U2tpblRhbmdlbnQocGFyYW1fMSwgcGFyYW1fMikpOwp9Cgp2ZWMzIGdldE1vcnBoTm9ybWFsKGlub3V0IHZlYzMgbm9ybWFsKQp7CiAgICBub3JtYWwgKz0gKGFfbW9ycGhOb3JtYWwwICogdV92c19tb3JwaHRhcmdldFswXS54KTsKICAgIG5vcm1hbCArPSAoYV9tb3JwaE5vcm1hbDEgKiB1X3ZzX21vcnBodGFyZ2V0WzBdLnkpOwogICAgcmV0dXJuIG5vcm1hbDsKfQoKdmVjMyBnZXRTa2luTm9ybWFsKHZlYzMgbm9ybWFsLCBtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHJldHVybiBub3JtYWw7Cn0KCnZlYzMgZ2V0Tm9ybWFsKG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgdmVjMyBwYXJhbSA9IGFfbm9ybWFsOwogICAgdmVjMyBfMTUyID0gZ2V0TW9ycGhOb3JtYWwocGFyYW0pOwogICAgdmVjMyBwYXJhbV8xID0gXzE1MjsKICAgIG1hdDQgcGFyYW1fMiA9IGJvbmVUcmFuc2Zvcm07CiAgICByZXR1cm4gbm9ybWFsaXplKGdldFNraW5Ob3JtYWwocGFyYW1fMSwgcGFyYW1fMikpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBtYXQ0IF8xODAgPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICBtYXQ0IHBhcmFtID0gXzE4MDsKICAgIHZlYzQgXzE4NSA9IGdldFBvc2l0aW9uKHBhcmFtKTsKICAgIG1hdDQgXzE5MiA9IG1hdDQodV92c19wYnJQYXJhbXNbMF0sIHVfdnNfcGJyUGFyYW1zWzFdLCB1X3ZzX3BiclBhcmFtc1syXSwgdV92c19wYnJQYXJhbXNbM10pOwogICAgdmVjNCBfMTk0ID0gXzE5MiAqIF8xODU7CiAgICB2X3Bvc2l0aW9uID0gdmVjMyhfMTk0Lnh5eikgLyB2ZWMzKF8xOTQudyk7CiAgICBtYXQ0IHBhcmFtXzEgPSBfMTgwOwogICAgbWF0NCBwYXJhbV8yID0gXzE4MDsKICAgIHZlYzMgXzIyOSA9IG5vcm1hbGl6ZSh2ZWMzKChtYXQ0KHVfdnNfcGJyUGFyYW1zWzRdLCB1X3ZzX3BiclBhcmFtc1s1XSwgdV92c19wYnJQYXJhbXNbNl0sIHVfdnNfcGJyUGFyYW1zWzddKSAqIHZlYzQoZ2V0Tm9ybWFsKHBhcmFtXzIpLCAwLjApKS54eXopKTsKICAgIHZlYzMgXzI0MyA9IG5vcm1hbGl6ZSh2ZWMzKChfMTkyICogdmVjNChnZXRUYW5nZW50KHBhcmFtXzEpLCAwLjApKS54eXopKTsKICAgIHZfdGJuID0gbWF0MyhfMjQzLCBjcm9zcyhfMjI5LCBfMjQzKSAqIGFfdGFuZ2Vu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YWxiZWRvQ29sb3I7CiAgICBoaWdocCB2ZWMzIGY5MDsKICAgIGhpZ2hwIGZsb2F0IG1ldGFsbGljOwogICAgaGlnaHAgdmVjMyBuOwogICAgaGlnaHAgdmVjMyBiYXNlQ29sb3I7Cn07CgpzdHJ1Y3QgTm9ybWFsSW5mbwp7CiAgICBoaWdocCB2ZWMzIG5nOwogICAgaGlnaHAgdmVjMyBuOwogICAgaGlnaHAgdmVjMyB0OwogICAgaGlnaHAgdmVjMyBiOwp9OwoKc3RydWN0IExpZ2h0CnsKICAgIGludCB0eXBlOwogICAgaGlnaHAgdmVjMyBkaXJlY3Rpb247CiAgICBoaWdocCB2ZWMzIGNvbG9yOwogICAgaGlnaHAgdmVjMyBwb3NpdGlvbjsKICAgIGhpZ2hwIGZsb2F0IHJhbmdlOwogICAgaGlnaHAgZmxvYXQgaW50ZW5zaXR5OwogICAgaGlnaHAgZmxvYXQgaW5uZXJDb25lQ29zOwogICAgaGlnaHAgZmxvYXQgb3V0ZXJDb25lQ29zOwogICAgYm9vbCBzaGFkb3dzOwogICAgaW50IHNoYWRvd01hcEluZGV4OwogICAgaW50IG51bVNoYWRvd0Nhc2NhZGVzOwp9OwoKc3RydWN0IFNoYWRvdwp7CiAgICBoaWdocCBmbG9hdCBtYXhCaWFzOwogICAgaGlnaHAgZmxvYXQgbWluQmlhczsKICAgIGhpZ2hwIHZlYzIgbWFwU2l6ZTsKICAgIGhpZ2hwIHZlYzIgbmVhckZhcjsKICAgIGhpZ2hwIHZlYzQgbGlnaHRQcm9qUG9zOwp9OwoKdW5pZm9ybSBoaWdocCB2ZWM0IHVfZnNfcGJyUGFyYW1zWzRdOwp1bmlmb3JtIGhpZ2hwIHZlYzQgdV9mc19zaGFkb3dzWzddOwp1bmlmb3JtIGhpZ2hwIHZlYzQgdV9mc19saWdodGluZ1syNV07CnVuaWZvcm0gaGlnaHAgdmVjNCB1X2ZzX2ZvZ1syXTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9iYXNlQ29sb3JUZXh0dXJlOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X21ldGFsbGljUm91Z2huZXNzVGV4dHVyZTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9vY2NsdXNpb25UZXh0dXJlOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X2VtaXNzaXZlVGV4dHVyZTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9zaGFkb3dNYXAxOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X3NoYWRvd01hcDI7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfc2hhZG93TWFwMzsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9zaGFkb3dNYXA0Owp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X3NoYWRvd01hcDU7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfc2hhZG93TWFwNjsKdW5pZm9ybSBoaWdocCBzYW1wbGVyQ3ViZSB1X3NoYWRvd0N1YmVNYXAxOwoKdmFyeWluZyBoaWdocCB2ZWMyIHZfdXYxOwp2YXJ5aW5nIGhpZ2hwIHZlYzMgdl9wb3NpdGlvbjsKdmFyeWluZyBoaWdocCBtYXQzIHZfdGJuOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgdl9saWdodFByb2pQb3NbNl07CnZhcnlpbmcgaGlnaHAgZmxvYXQgdl9jbGlwU3BhY2VQb3NaOwp2YXJ5aW5nIGhpZ2hwIHZlYzIgdl91djI7CgpoaWdocCB2ZWMzIHNSR0JUb0xpbmVhcihoaWdocCB2ZWMzIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIHZlYzMoMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSk7Cn0KCmhpZ2hwIHZlYzQgc1JHQlRvTGluZWFyKGhpZ2hwIHZlYzQgc3JnYkluKQp7CiAgICBoaWdocCB2ZWMzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiB2ZWM0KHNSR0JUb0xpbmVhcihwYXJhbSksIHNyZ2JJbi53KTsKfQoKaGlnaHAgdmVjNCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2ZWM0KDEuMCk7Cn0KCmhpZ2hwIHZlYzQgZ2V0QmFzZUNvbG9yKCkKewogICAgaGlnaHAgdmVjNCBiYXNlQ29sb3IgPSB1X2ZzX3BiclBhcmFtc1swXTsKICAgIGhpZ2hwIHZlYzQgcGFyYW0gPSB0ZXh0dXJlMkQodV9iYXNlQ29sb3JUZXh0dXJlLCB2X3V2MSk7CiAgICBoaWdocCB2ZWM0IF8yMzIgPSBiYXNlQ29sb3I7CiAgICBoaWdocCB2ZWM0IF8yMzMgPSBfMjMyICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8yMzM7CiAgICByZXR1cm4gXzIzMyAqIGdldFZlcnRleENvbG9yKCk7Cn0KCk5vcm1hbEluZm8gZ2V0Tm9ybWFsSW5mbygpCnsKICAgIGhpZ2hwIHZlYzMgXzM2NCA9IG5vcm1hbGl6ZSh2X3RiblsyXSk7CiAgICByZXR1cm4gTm9ybWFsSW5mbyhfMzY0LCBfMzY0LCBub3JtYWxpemUodl90Ym5bMF0pLCBub3JtYWxpemUodl90Ym5bMV0pKTsKfQoKTWF0ZXJpYWxJbmZvIGdldE1ldGFsbGljUm91Z2huZXNzSW5mbyhpbm91dCBNYXRlcmlhbEluZm8gaW5mbywgaGlnaHAgZmxvYXQgZjBfaW9yKQp7CiAgICBpbmZvLm1ldGFsbGljID0gdV9mc19wYnJQYXJhbXNbMV0ueDsKICAgIGluZm8ucGVyY2VwdHVhbFJvdWdobmVzcyA9IHVfZnNfcGJyUGFyYW1zWzFdLnk7CiAgICBoaWdocCB2ZWM0IF8yNTMgPSB0ZXh0dXJlMkQodV9tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUsIHZfdXYxKTsKICAgIGluZm8ucGVyY2VwdHVhbFJvdWdobmVzcyAqPSBfMjUzLnk7CiAgICBpbmZvLm1ldGFsbGljICo9IF8yNTMuejsKICAgIGhpZ2hwIHZlYzMgXzI3MCA9IHZlYzMoZjBfaW9yKTsKICAgIGluZm8uYWxiZWRvQ29sb3IgPSBtaXgoaW5mby5iYXNlQ29sb3IgKiAodmVjMygxLjApIC0gXzI3MCksIHZlYzMoMC4wKSwgdmVjMyhpbmZvLm1ldGFsbGljKSk7CiAgICBpbmZvLmYwID0gbWl4KF8yNzAsIGluZm8uYmFzZUNvbG9yLCB2ZWMzKGluZm8ubWV0YWxsaWMpKTsKICAgIHJldHVybiBpbmZvOwp9CgpoaWdocCB2ZWM0IGdldE9jY2x1c2lvblRleHR1cmUoKQp7CiAgICByZXR1cm4gdGV4dHVyZTJEKHVfb2NjbHVzaW9uVGV4dHVyZSwgdl91djEpOwp9CgpoaWdocCBmbG9hdCBjbGFtcGVkRG90KGhpZ2hwIHZlYzMgeCwgaGlnaHAgdmVjMyB5KQp7CiAgICByZXR1cm4gY2xhbXAoZG90KHgsIHkpLCAwLjAsIDEuMCk7Cn0KClNoYWRvdyBnZXRTaGFkb3cyRENvbmYoaW50IGluZGV4KQp7CiAgICBmb3IgKGludCBpID0gMDsgaSA8IDY7IGkrKykKICAgIHsKICAgICAgICBpZiAoaSA9PSBpbmRleCkKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiBTaGFkb3codV9mc19zaGFkb3dzW2kgKiAxICsgMF0ueCwgdV9mc19zaGFkb3dzW2kgKiAxICsgMF0ueCAqIDAuMTAwMDAwMDAxNDkwMTE2MTE5Mzg0NzY1NjI1LCB1X2ZzX3NoYWRvd3NbaSAqIDEgKyAwXS55eSwgdV9mc19zaGFkb3dzW2kgKiAxICsgMF0uencsIHZfbGlnaHRQcm9qUG9zW2ldKTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gU2hhZG93KDAuMCwgMC4wLCB2ZWMyKDAuMCksIHZlYzIoMC4wKSwgdmVjNCgwLjApKTsKfQoKaGlnaHAgdmVjNCBnZXRTaGFkb3dNYXAoaW50IGluZGV4LCBoaWdocCB2ZWMyIGNvb3JkcykKewogICAgaWYgKGluZGV4ID09IDApCiAgICB7CiAgICAgICAgcmV0dXJuIHRleHR1cmUyRCh1X3NoYWRvd01hcDEsIGNvb3Jkcyk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgaWYgKGluZGV4ID09IDEpCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gdGV4dHVyZTJEKHVfc2hhZG93TWFwMiwgY29vcmRzKTsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgaWYgKGluZGV4ID09IDIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlMkQodV9zaGFkb3dNYXAzLCBjb29yZHMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IDMpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRleHR1cmUyRCh1X3NoYWRvd01hcDQsIGNvb3Jkcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IDQpCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGV4dHVyZTJEKHVfc2hhZG93TWFwNSwgY29vcmRzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IDUpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlMkQodV9zaGFkb3dNYXA2LCBjb29yZHMpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHZlYzQoMC4wKTsKfQoKaGlnaHAgZmxvYXQgZGVjb2RlRGVwdGgoaGlnaHAgdmVjNCByZ2JhKQp7CiAgICByZXR1cm4gZG90KHJnYmEsIHZlYzQoMS4wLCAwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjUsIDEuNTM3ODcwMDQ4MTk2MDU0OTk1MDU5OTY3MDQxMDE1NmUtMDUsIDYuMDMwODYyOTIwMTY5OTY1OTQ2MTE1NTUzMzc5MDU4OGUtMDgpKTsKfQoKaGlnaHAgZmxvYXQgc2hhZG93Q29tcGFyZShpbnQgc2hhZG93TWFwSW5kZXgsIGhpZ2hwIGZsb2F0IGN1cnJlbnREZXB0aCwgaGlnaHAgZmxvYXQgYmlhcywgaGlnaHAgdmVjMiB0ZXhDb29yZHMpCnsKICAgIGludCBwYXJhbSA9IHNoYWRvd01hcEluZGV4OwogICAgaGlnaHAgdmVjMiBwYXJhbV8xID0gdGV4Q29vcmRzOwogICAgaGlnaHAgdmVjNCBwYXJhbV8yID0gZ2V0U2hhZG93TWFwKHBhcmFtLCBwYXJhbV8xKTsKICAgIHJldHVybiBmbG9hdCgoY3VycmVudERlcHRoIC0gYmlhcykgPiBkZWNvZGVEZXB0aChwYXJhbV8yKSk7Cn0KCmhpZ2hwIGZsb2F0IHNoYWRvd0NhbGN1bGF0aW9uQXV4KGludCBzaGFkb3dNYXBJbmRleCwgU2hhZG93IHNoYWRvd0NvbmYsIGhpZ2hwIGZsb2F0IE5kb3RMKQp7CiAgICBoaWdocCBmbG9hdCBzaGFkb3cgPSAwLjA7CiAgICBoaWdocCB2ZWMzIF84MTQgPSAoKHNoYWRvd0NvbmYubGlnaHRQcm9qUG9zLnh5eiAvIHZlYzMoc2hhZG93Q29uZi5saWdodFByb2pQb3MudykpICogMC41KSArIHZlYzMoMC41KTsKICAgIGhpZ2hwIGZsb2F0IF84MTcgPSBfODE0Lno7CiAgICBoaWdocCBmbG9hdCBfODI2ID0gbWF4KHNoYWRvd0NvbmYubWF4QmlhcyAqICgxLjAgLSBOZG90TCksIHNoYWRvd0NvbmYubWluQmlhcyk7CiAgICBoaWdocCB2ZWMyIF84MzEgPSB2ZWMyKDEuMCkgLyBzaGFkb3dDb25mLm1hcFNpemU7CiAgICBmb3IgKGludCB4ID0gLTE7IHggPD0gMTsgeCsrKQogICAgewogICAgICAgIGZvciAoaW50IHkgPSAtMTsgeSA8PSAxOyB5KyspCiAgICAgICAgewogICAgICAgICAgICBpbnQgcGFyYW0gPSBzaGFkb3dNYXBJbmRleDsKICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMSA9IF84MTc7CiAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzIgPSBfODI2OwogICAgICAgICAgICBoaWdocCB2ZWMyIHBhcmFtXzMgPSBfODE0Lnh5ICsgKHZlYzIoZmxvYXQoeCksIGZsb2F0KHkpKSAqIF84MzEpOwogICAgICAgICAgICBzaGFkb3cgKz0gc2hhZG93Q29tcGFyZShwYXJhbSwgcGFyYW1fMSwgcGFyYW1fMiwgcGFyYW1fMyk7CiAgICAgICAgfQogICAgfQogICAgc2hhZG93ICo9IDAuMTExMTExMTExOTM4OTUzMzk5NjU4MjAzMTI1OwogICAgaWYgKF84MTcgPiAxLjApCiAgICB7CiAgICAgICAgc2hhZG93ID0gMC4wOwogICAgfQogICAgcmV0dXJuIHNoYWRvdzsKfQoKaGlnaHAgZmxvYXQgc2hhZG93Q2FsY3VsYXRpb25QQ0YoaW50IHNoYWRvd01hcEluZGV4LCBoaWdocCBmbG9hdCBOZG90TCkKewogICAgaW50IHBhcmFtID0gc2hhZG93TWFwSW5kZXg7CiAgICBpbnQgcGFyYW1fMSA9IHNoYWRvd01hcEluZGV4OwogICAgU2hhZG93IHBhcmFtXzIgPSBnZXRTaGFkb3cyRENvbmYocGFyYW0pOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMyA9IE5kb3RMOwogICAgcmV0dXJuIHNoYWRvd0NhbGN1bGF0aW9uQXV4KHBhcmFtXzEsIHBhcmFtXzIsIHBhcmFtXzMpOwp9CgpoaWdocCBmbG9hdCBzaGFkb3dDYXNjYWRlZENhbGN1bGF0aW9uUENGKGludCBzaGFkb3dNYXBJbmRleCwgaW50IG51bVNoYWRvd0Nhc2NhZGVzLCBoaWdocCBmbG9hdCBOZG90TCkKewogICAgZm9yIChpbnQgYyA9IDA7IGMgPCA0OyBjKyspCiAgICB7CiAgICAgICAgaWYgKGMgPCBudW1TaGFkb3dDYXNjYWRlcykKICAgICAgICB7CiAgICAgICAgICAgIGludCBfOTEzID0gc2hhZG93TWFwSW5kZXggKyBjOwogICAgICAgICAgICBpbnQgcGFyYW0gPSBfOTEzOwogICAgICAgICAgICBTaGFkb3cgXzkxNyA9IGdldFNoYWRvdzJEQ29uZihwYXJhbSk7CiAgICAgICAgICAgIGhpZ2hwIHZlYzIgXzE2ODUgPSBfOTE3Lm5lYXJGYXI7CiAgICAgICAgICAgIGJvb2wgXzkyMyA9IHZfY2xpcFNwYWNlUG9zWiA+PSBfMTY4NS54OwogICAgICAgICAgICBib29sIF85MzA7CiAgICAgICAgICAgIGlmIChfOTIzKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBfOTMwID0gdl9jbGlwU3BhY2VQb3NaIDw9IF8xNjg1Lnk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBfOTMwID0gXzkyMzsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoXzkzMCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaW50IHBhcmFtXzEgPSBfOTEzOwogICAgICAgICAgICAgICAgU2hhZG93IHBhcmFtXzIgPSBfOTE3OwogICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMyA9IE5kb3RMOwogICAgICAgICAgICAgICAgcmV0dXJuIHNoYWRvd0NhbGN1bGF0aW9uQXV4KHBhcmFtXzEsIHBhcmFtXzIsIHBhcmFtXzMpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIDAuMDsKfQoKU2hhZG93IGdldFNoYWRvd0N1YmVDb25mKGludCBpbmRleCkKewogICAgZm9yIChpbnQgaSA9IDY7IGkgPCA3OyBpKyspCiAgICB7CiAgICAgICAgaWYgKGkgPT0gaW5kZXgpCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gU2hhZG93KHVfZnNfc2hhZG93c1tpICogMSArIDBdLngsIHVfZnNfc2hhZG93c1tpICogMSArIDBdLnggKiAwLjEwMDAwMDAwMTQ5MDExNjExOTM4NDc2NTYyNSwgdV9mc19zaGFkb3dzW2kgKiAxICsgMF0ueXksIHVfZnNfc2hhZG93c1tpICogMSArIDBdLnp3LCB2ZWM0KDAuMCkpOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBTaGFkb3coMC4wLCAwLjAsIHZlYzIoMC4wKSwgdmVjMigwLjApLCB2ZWM0KDAuMCkpOwp9CgpoaWdocCBmbG9hdCBkaXN0YW5jZVRvRGVwdGhWYWx1ZShoaWdocCB2ZWMzIF9kaXN0YW5jZSwgaGlnaHAgdmVjMiBjYWxjTmVhckZhcikKewogICAgaGlnaHAgdmVjMyBfOTQ3ID0gYWJzKF9kaXN0YW5jZSk7CiAgICByZXR1cm4gY2FsY05lYXJGYXIueCArIChjYWxjTmVhckZhci55IC8gbWF4KF85NDcueCwgbWF4KF85NDcueSwgXzk0Ny56KSkpOwp9CgpoaWdocCB2ZWM0IGdldFNoYWRvd0N1YmVNYXAoaW5vdXQgaW50IGluZGV4LCBoaWdocCB2ZWMzIGNvb3JkcykKewogICAgaW5kZXggLT0gNjsKICAgIGlmIChpbmRleCA9PSAwKQogICAgewogICAgICAgIHJldHVybiB0ZXh0dXJlQ3ViZSh1X3NoYWRvd0N1YmVNYXAxLCBjb29yZHMpOwogICAgfQogICAgZWxzZQogICAgewogICAgfQogICAgcmV0dXJuIHZlYzQoMC4wKTsKfQoKaGlnaHAgZmxvYXQgc2hhZG93Q3ViZUNvbXBhcmUoaW50IHNoYWRvd01hcEluZGV4LCBoaWdocCBmbG9hdCBjdXJyZW50RGVwdGgsIGhpZ2hwIGZsb2F0IGJpYXMsIGhpZ2hwIHZlYzMgdGV4Q29vcmRzKQp7CiAgICBpbnQgcGFyYW0gPSBzaGFkb3dNYXBJbmRleDsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMSA9IHRleENvb3JkczsKICAgIGhpZ2hwIHZlYzQgXzk3MSA9IGdldFNoYWRvd0N1YmVNYXAocGFyYW0sIHBhcmFtXzEpOwogICAgaGlnaHAgdmVjNCBwYXJhbV8yID0gXzk3MTsKICAgIGlmICgoY3VycmVudERlcHRoIC0gYmlhcykgPiBkZWNvZGVEZXB0aChwYXJhbV8yKSkKICAgIHsKICAgICAgICByZXR1cm4gMS4wOwogICAgfQogICAgcmV0dXJuIDAuMDsKfQoKaGlnaHAgZmxvYXQgc2hhZG93Q3ViZUNhbGN1bGF0aW9uUENGKGludCBzaGFkb3dNYXBJbmRleCwgaGlnaHAgdmVjMyBmcmFnVG9MaWdodCwgaGlnaHAgZmxvYXQgTmRvdEwpCnsKICAgIGludCBwYXJhbSA9IHNoYWRvd01hcEluZGV4OwogICAgU2hhZG93IF85ODcgPSBnZXRTaGFkb3dDdWJlQ29uZihwYXJhbSk7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzEgPSBmcmFnVG9MaWdodDsKICAgIGhpZ2hwIHZlYzIgcGFyYW1fMiA9IF85ODcubmVhckZhcjsKICAgIGhpZ2hwIGZsb2F0IF85OTQgPSBkaXN0YW5jZVRvRGVwdGhWYWx1ZShwYXJhbV8xLCBwYXJhbV8yKTsKICAgIGhpZ2hwIGZsb2F0IHNoYWRvdyA9IDAuMDsKICAgIGhpZ2hwIGZsb2F0IF8xMDA0ID0gbWF4KF85ODcubWF4QmlhcyAqICgxLjAgLSBOZG90TCksIF85ODcubWluQmlhcyk7CiAgICBoaWdocCBmbG9hdCBfMTAwOSA9IGxlbmd0aChmcmFnVG9MaWdodCkgKiAwLjAwMDUwMDAwMDAyMzc0ODcyNTY1MjY5NDcwMjE0ODQzNzU7CiAgICBpbnQgcGFyYW1fMyA9IHNoYWRvd01hcEluZGV4OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fNCA9IF85OTQ7CiAgICBoaWdocCBmbG9hdCBwYXJhbV81ID0gXzEwMDQ7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzYgPSBmcmFnVG9MaWdodDsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8zLCBwYXJhbV80LCBwYXJhbV81LCBwYXJhbV82KTsKICAgIGludCBwYXJhbV83ID0gc2hhZG93TWFwSW5kZXg7CiAgICBoaWdocCBmbG9hdCBwYXJhbV84ID0gXzk5NDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzkgPSBfMTAwNDsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMTAgPSBmcmFnVG9MaWdodCArICh2ZWMzKDEuMCkgKiBfMTAwOSk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fNywgcGFyYW1fOCwgcGFyYW1fOSwgcGFyYW1fMTApOwogICAgaW50IHBhcmFtXzExID0gc2hhZG93TWFwSW5kZXg7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8xMiA9IF85OTQ7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8xMyA9IF8xMDA0OwogICAgaGlnaHAgdmVjMyBwYXJhbV8xNCA9IGZyYWdUb0xpZ2h0ICsgKHZlYzMoMS4wLCAtMS4wLCAxLjApICogXzEwMDkpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzExLCBwYXJhbV8xMiwgcGFyYW1fMTMsIHBhcmFtXzE0KTsKICAgIGludCBwYXJhbV8xNSA9IHNoYWRvd01hcEluZGV4OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMTYgPSBfOTk0OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMTcgPSBfMTAwNDsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMTggPSBmcmFnVG9MaWdodCArICh2ZWMzKC0xLjAsIC0xLjAsIDEuMCkgKiBfMTAwOSk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMTUsIHBhcmFtXzE2LCBwYXJhbV8xNywgcGFyYW1fMTgpOwogICAgaW50IHBhcmFtXzE5ID0gc2hhZG93TWFwSW5kZXg7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8yMCA9IF85OTQ7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8yMSA9IF8xMDA0OwogICAgaGlnaHAgdmVjMyBwYXJhbV8yMiA9IGZyYWdUb0xpZ2h0ICsgKHZlYzMoLTEuMCwgMS4wLCAxLjApICogXzEwMDkpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzE5LCBwYXJhbV8yMCwgcGFyYW1fMjEsIHBhcmFtXzIyKTsKICAgIGludCBwYXJhbV8yMyA9IHNoYWRvd01hcEluZGV4OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMjQgPSBfOTk0OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMjUgPSBfMTAwNDsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMjYgPSBmcmFnVG9MaWdodCArICh2ZWMzKDEuMCwgMS4wLCAtMS4wKSAqIF8xMDA5KTsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8yMywgcGFyYW1fMjQsIHBhcmFtXzI1LCBwYXJhbV8yNik7CiAgICBpbnQgcGFyYW1fMjcgPSBzaGFkb3dNYXBJbmRleDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzI4ID0gXzk5NDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzI5ID0gXzEwMDQ7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzMwID0gZnJhZ1RvTGlnaHQgKyAodmVjMygxLjAsIC0xLjAsIC0xLjApICogXzEwMDkpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzI3LCBwYXJhbV8yOCwgcGFyYW1fMjksIHBhcmFtXzMwKTsKICAgIGludCBwYXJhbV8zMSA9IHNoYWRvd01hcEluZGV4OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMzIgPSBfOTk0OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMzMgPSBfMTAwNDsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMzQgPSBmcmFnVG9MaWdodCArICh2ZWMzKC0xLjApICogXzEwMDkpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzMxLCBwYXJhbV8zMiwgcGFyYW1fMzMsIHBhcmFtXzM0KTsKICAgIGludCBwYXJhbV8zNSA9IHNoYWRvd01hcEluZGV4OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMzYgPSBfOTk0OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMzcgPSBfMTAwNDsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMzggPSBmcmFnVG9MaWdodCArICh2ZWMzKC0xLjAsIDEuMCwgLTEuMCkgKiBfMTAwOSk7CiAgICBoaWdocCBmbG9hdCBfMTE0MiA9IHNoYWRvdzsKICAgIGhpZ2hwIGZsb2F0IF8xMTQ1ID0gKF8xMTQyICsgc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMzUsIHBhcmFtXzM2LCBwYXJhbV8zNywgcGFyYW1fMzgpKSAqIDAuMTExMTExMTExOTM4OTUzMzk5NjU4MjAzMTI1OwogICAgc2hhZG93ID0gXzExNDU7CiAgICByZXR1cm4gXzExNDU7Cn0KCmhpZ2hwIGZsb2F0IGdldFJhbmdlQXR0ZW51YXRpb24oaGlnaHAgZmxvYXQgcmFuZ2UsIGhpZ2hwIGZsb2F0IF9kaXN0YW5jZSkKewogICAgaWYgKHJhbmdlIDw9IDAuMCkKICAgIHsKICAgICAgICByZXR1cm4gMS4wIC8gcG93KF9kaXN0YW5jZSwgMi4wKTsKICAgIH0KICAgIHJldHVybiBtYXgobWluKDEuMCAtIHBvdyhfZGlzdGFuY2UgLyByYW5nZSwgNC4wKSwgMS4wKSwgMC4wKSAvIHBvdyhfZGlzdGFuY2UsIDIuMCk7Cn0KCmhpZ2hwIGZsb2F0IGdldFNwb3RBdHRlbnVhdGlvbihoaWdocCB2ZWMzIHBvaW50VG9MaWdodCwgaGlnaHAgdmVjMyBzcG90RGlyZWN0aW9uLCBoaWdocCBmbG9hdCBvdXRlckNvbmVDb3MsIGhpZ2hwIGZsb2F0IGlubmVyQ29uZUNvcykKewogICAgaGlnaHAgZmxvYXQgXzUyOCA9IGRvdChub3JtYWxpemUoc3BvdERpcmVjdGlvbiksIG5vcm1hbGl6ZSgtcG9pbnRUb0xpZ2h0KSk7CiAgICBpZiAoXzUyOCA+IG91dGVyQ29uZUNvcykKICAgIHsKICAgICAgICBpZiAoXzUyOCA8IGlubmVyQ29uZUNvcykKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiBzbW9vdGhzdGVwKG91dGVyQ29uZUNvcywgaW5uZXJDb25lQ29zLCBfNTI4KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIDEuMDsKICAgIH0KICAgIHJldHVybiAwLjA7Cn0KCmhpZ2hwIHZlYzMgZ2V0TGlnaEludGVuc2l0eShMaWdodCBsaWdodCwgaGlnaHAgdmVjMyBwb2ludFRvTGlnaHQpCnsKICAgIGhpZ2hwIGZsb2F0IHJhbmdlQXR0ZW51YXRpb24gPSAxLjA7CiAgICBoaWdocCBmbG9hdCBzcG90QXR0ZW51YXRpb24gPSAxLjA7CiAgICBpZiAobGlnaHQudHlwZSAhPSAwKQogICAgewogICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtID0gbGlnaHQucmFuZ2U7CiAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMSA9IGxlbmd0aChwb2ludFRvTGlnaHQpOwogICAgICAgIHJhbmdlQXR0ZW51YXRpb24gPSBnZXRSYW5nZUF0dGVudWF0aW9uKHBhcmFtLCBwYXJhbV8xKTsKICAgIH0KICAgIGlmIChsaWdodC50eXBlID09IDIpCiAgICB7CiAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8yID0gcG9pbnRUb0xpZ2h0OwogICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMyA9IGxpZ2h0LmRpcmVjdGlvbjsKICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV80ID0gbGlnaHQub3V0ZXJDb25lQ29zOwogICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzUgPSBsaWdodC5pbm5lckNvbmVDb3M7CiAgICAgICAgc3BvdEF0dGVudWF0aW9uID0gZ2V0U3BvdEF0dGVudWF0aW9uKHBhcmFtXzIsIHBhcmFtXzMsIHBhcmFtXzQsIHBhcmFtXzUpOwogICAgfQogICAgcmV0dXJuIGxpZ2h0LmNvbG9yICogKChyYW5nZUF0dGVudWF0aW9uICogc3BvdEF0dGVudWF0aW9uKSAqIGxpZ2h0LmludGVuc2l0eSk7Cn0KCmhpZ2hwIHZlYzMgRl9TY2hsaWNrKGhpZ2hwIHZlYzMgZjAsIGhpZ2hwIHZlYzMgZjkwLCBoaWdocCBmbG9hdCBWZG90SCkKewogICAgcmV0dXJuIGYwICsgKChmOTAgLSBmMCkgKiBwb3coY2xhbXAoMS4wIC0gVmRvdEgsIDAuMCwgMS4wKSwgNS4wKSk7Cn0KCmhpZ2hwIHZlYzMgQlJERl9sYW1iZXJ0aWFuKGhpZ2hwIHZlYzMgZjAsIGhpZ2hwIHZlYzMgZjkwLCBoaWdocCB2ZWMzIGRpZmZ1c2VDb2xvciwgaGlnaHAgZmxvYXQgVmRvdEgpCnsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBmMDsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMSA9IGY5MDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzIgPSBWZG90SDsKICAgIHJldHVybiAodmVjMygxLjApIC0gRl9TY2hsaWNrKHBhcmFtLCBwYXJhbV8xLCBwYXJhbV8yKSkgKiAoZGlmZnVzZUNvbG9yICogdmVjMygwLjMxODMwOTg3MzM0MjUxNDAzODA4NTkzNzUpKTsKfQoKaGlnaHAgZmxvYXQgVl9HR1goaGlnaHAgZmxvYXQgTmRvdEwsIGhpZ2hwIGZsb2F0IE5kb3RWLCBoaWdocCBmbG9hdCBhbHBoYVJvdWdobmVzcykKewogICAgaGlnaHAgZmxvYXQgXzM5NiA9IGFscGhhUm91Z2huZXNzICogYWxwaGFSb3VnaG5lc3M7CiAgICBoaWdocCBmbG9hdCBfNDAzID0gMS4wIC0gXzM5NjsKICAgIGhpZ2hwIGZsb2F0IF80MjQgPSAoTmRvdEwgKiBzcXJ0KCgoTmRvdFYgKiBOZG90VikgKiBfNDAzKSArIF8zOTYpKSArIChOZG90ViAqIHNxcnQoKChOZG90TCAqIE5kb3RMKSAqIF80MDMpICsgXzM5NikpOwogICAgaWYgKF80MjQgPiAwLjApCiAgICB7CiAgICAgICAgcmV0dXJuIDAuNSAvIF80MjQ7CiAgICB9CiAgICByZXR1cm4gMC4wOwp9CgpoaWdocCBmbG9hdCBEX0dHWChoaWdocCBmbG9hdCBOZG90SCwgaGlnaHAgZmxvYXQgYWxwaGFSb3VnaG5lc3MpCnsKICAgIGhpZ2hwIGZsb2F0IF80MzggPSBhbHBoYVJvdWdobmVzcyAqIGFscGhhUm91Z2huZXNzOwogICAgaGlnaHAgZmxvYXQgXzQ0NiA9ICgoTmRvdEggKiBOZG90SCkgKiAoXzQzOCAtIDEuMCkpICsgMS4wOwogICAgcmV0dXJuIF80MzggLyAoKDMuMTQxNTkyNzQxMDEyNTczMjQyMTg3NSAqIF80NDYpICogXzQ0Nik7Cn0KCmhpZ2hwIHZlYzMgQlJERl9zcGVjdWxhckdHWChoaWdocCB2ZWMzIGYwLCBoaWdocCB2ZWMzIGY5MCwgaGlnaHAgZmxvYXQgYWxwaGFSb3VnaG5lc3MsIGhpZ2hwIGZsb2F0IFZkb3RILCBoaWdocCBmbG9hdCBOZG90TCwgaGlnaHAgZmxvYXQgTmRvdFYsIGhpZ2hwIGZsb2F0IE5kb3RIKQp7CiAgICBoaWdocCB2ZWMzIHBhcmFtID0gZjA7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzEgPSBmOTA7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8yID0gVmRvdEg7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8zID0gTmRvdEw7CiAgICBoaWdocCBmbG9hdCBwYXJhbV80ID0gTmRvdFY7CiAgICBoaWdocCBmbG9hdCBwYXJhbV81ID0gYWxwaGFSb3VnaG5lc3M7CiAgICBoaWdocCBmbG9hdCBwYXJhbV82ID0gTmRvdEg7CiAgICBoaWdocCBmbG9hdCBwYXJhbV83ID0gYWxwaGFSb3VnaG5lc3M7CiAgICByZXR1cm4gKEZfU2NobGljayhwYXJhbSwgcGFyYW1fMSwgcGFyYW1fMikgKiBWX0dHWChwYXJhbV8zLCBwYXJhbV80LCBwYXJhbV81KSkgKiBEX0dHWChwYXJhbV82LCBwYXJhbV83KTsKfQoKaGlnaHAgdmVjNCBnZXRFbWlzc2l2ZVRleHR1cmUoKQp7CiAgICByZXR1cm4gdGV4dHVyZTJEKHVfZW1pc3NpdmVUZXh0dXJlLCB2X3V2MSk7Cn0KCmhpZ2hwIHZlYzMgbGluZWFyVG9zUkdCKGhpZ2hwIHZlYzMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIHZlYzMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIHZlYzQgXzExNTAgPSBnZXRCYXNlQ29sb3IoKTsKICAgIGhpZ2hwIHZlYzMgXzE1NzkgPSBnZXROb3JtYWxJbmZvKCkubjsKICAgIGhpZ2hwIHZlYzMgXzE1ODMgPSB2ZWMzKDAuMCk7CiAgICBoaWdocCBmbG9hdCBfMTU4NCA9IDAuMDsKICAgIGhpZ2hwIHZlYzMgXzE1ODUgPSB2ZWMzKDAuMCk7CiAgICBoaWdocCB2ZWMzIF8xNTg2ID0gdmVjMygwLjApOwogICAgaGlnaHAgdmVjMyBfMTE2NSA9IF8xMTUwLnh5ejsKICAgIE1hdGVyaWFsSW5mbyBwYXJhbSA9IE1hdGVyaWFsSW5mbygwLjAsIHZlYzMoMC4wKSwgMC4wLCB2ZWMzKDAuMCksIHZlYzMoMC4wKSwgMC4wLCB2ZWMzKDAuMCksIF8xMTY1KTsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzEgPSAwLjAzOTk5OTk5OTEwNTkzMDMyODM2OTE0MDYyNTsKICAgIE1hdGVyaWFsSW5mbyBfMTE3NSA9IGdldE1ldGFsbGljUm91Z2huZXNzSW5mbyhwYXJhbSwgcGFyYW1fMSk7CiAgICBfMTU4MyA9IF8xMTc1LmYwOwogICAgXzE1ODUgPSBfMTE3NS5hbGJlZG9Db2xvcjsKICAgIGhpZ2hwIGZsb2F0IF8xMTc4ID0gY2xhbXAoXzExNzUucGVyY2VwdHVhbFJvdWdobmVzcywgMC4wLCAxLjApOwogICAgXzE1ODQgPSBfMTE3OCAqIF8xMTc4OwogICAgXzE1ODYgPSB2ZWMzKGNsYW1wKG1heChtYXgoXzExNzUuZjAueCwgXzExNzUuZjAueSksIF8xMTc1LmYwLnopICogNTAuMCwgMC4wLCAxLjApKTsKICAgIGhpZ2hwIHZlYzMgZl9zcGVjdWxhciA9IHZlYzMoMC4wKTsKICAgIGhpZ2hwIHZlYzMgZl9lbWlzc2l2ZSA9IHZlYzMoMC4wKTsKICAgIGhpZ2hwIHZlYzMgZl9kaWZmdXNlID0gKHVfZnNfcGJyUGFyYW1zWzNdLnh5eiAqIHBvdyh1X2ZzX3BiclBhcmFtc1szXS53LCAyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjUpKSAqIF8xMTY1OwogICAgaGlnaHAgdmVjNCBfMTIyMyA9IGdldE9jY2x1c2lvblRleHR1cmUoKTsKICAgIGhpZ2hwIGZsb2F0IF8xMjI0ID0gXzEyMjMueDsKICAgIGZfZGlmZnVzZSAqPSBfMTIyNDsKICAgIGZfc3BlY3VsYXIgKj0gXzEyMjQ7CiAgICBoaWdocCB2ZWMzIF8xMjUwID0gbm9ybWFsaXplKHVfZnNfbGlnaHRpbmdbMjRdLnh5eiAtIHZfcG9zaXRpb24pOwogICAgaGlnaHAgdmVjMyBwb2ludFRvTGlnaHQ7CiAgICBmb3IgKGludCBpID0gMDsgaSA8IDY7IGkrKykKICAgIHsKICAgICAgICBpbnQgXzEyNjMgPSBpbnQodV9mc19saWdodGluZ1tpICogMSArIDEyXS53KTsKICAgICAgICBib29sIF8xMjk0ID0gKHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxOF0ueiA8IDAuMCkgPyBmYWxzZSA6IHRydWU7CiAgICAgICAgaW50IF8xMjk4ID0gaW50KHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxOF0ueik7CiAgICAgICAgaW50IF8xMzAyID0gaW50KHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxOF0udyk7CiAgICAgICAgaWYgKHVfZnNfbGlnaHRpbmdbaSAqIDEgKyA2XS53ID4gMC4wKQogICAgICAgIHsKICAgICAgICAgICAgaWYgKF8xMjYzICE9IDApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHBvaW50VG9MaWdodCA9IHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxMl0ueHl6IC0gdl9wb3NpdGlvbjsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHBvaW50VG9MaWdodCA9IC11X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMF0ueHl6OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgXzEzMjUgPSBub3JtYWxpemUocG9pbnRUb0xpZ2h0KTsKICAgICAgICAgICAgaGlnaHAgdmVjMyBfMTMzMCA9IG5vcm1hbGl6ZShfMTMyNSArIF8xMjUwKTsKICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8yID0gXzE1Nzk7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMyA9IF8xMzI1OwogICAgICAgICAgICBoaWdocCBmbG9hdCBfMTMzNiA9IGNsYW1wZWREb3QocGFyYW1fMiwgcGFyYW1fMyk7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fNCA9IF8xNTc5OwogICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzUgPSBfMTI1MDsKICAgICAgICAgICAgaGlnaHAgZmxvYXQgXzEzNDIgPSBjbGFtcGVkRG90KHBhcmFtXzQsIHBhcmFtXzUpOwogICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzYgPSBfMTU3OTsKICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV83ID0gXzEzMzA7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fOCA9IF8xMzI1OwogICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzkgPSBfMTMzMDsKICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8xMCA9IF8xMjUwOwogICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzExID0gXzEzMzA7CiAgICAgICAgICAgIGhpZ2hwIGZsb2F0IF8xMzYwID0gY2xhbXBlZERvdChwYXJhbV8xMCwgcGFyYW1fMTEpOwogICAgICAgICAgICBoaWdocCBmbG9hdCBzaGFkb3cgPSAxLjA7CiAgICAgICAgICAgIGlmIChfMTI5NCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaWYgKF8xMjYzID09IDIpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaW50IHBhcmFtXzEyID0gXzEyOTg7CiAgICAgICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMTMgPSBfMTMzNjsKICAgICAgICAgICAgICAgICAgICBzaGFkb3cgPSAxLjAgLSBzaGFkb3dDYWxjdWxhdGlvblBDRihwYXJhbV8xMiwgcGFyYW1fMTMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGlmIChfMTI2MyA9PSAwKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaW50IHBhcmFtXzE0ID0gXzEyOTg7CiAgICAgICAgICAgICAgICAgICAgICAgIGludCBwYXJhbV8xNSA9IF8xMzAyOwogICAgICAgICAgICAgICAgICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8xNiA9IF8xMzM2OwogICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3cgPSAxLjAgLSBzaGFkb3dDYXNjYWRlZENhbGN1bGF0aW9uUENGKHBhcmFtXzE0LCBwYXJhbV8xNSwgcGFyYW1fMTYpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoXzEyNjMgPT0gMSkKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50IHBhcmFtXzE3ID0gXzEyOTg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzE4ID0gLXBvaW50VG9MaWdodDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzE5ID0gXzEzMzY7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3cgPSAxLjAgLSBzaGFkb3dDdWJlQ2FsY3VsYXRpb25QQ0YocGFyYW1fMTcsIHBhcmFtXzE4LCBwYXJhbV8xOSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKChfMTMzNiA+IDAuMCkgfHwgKF8xMzQyID4gMC4wKSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgTGlnaHQgcGFyYW1fMjAgPSBMaWdodChfMTI2MywgdV9mc19saWdodGluZ1tpICogMSArIDBdLnh5eiwgdV9mc19saWdodGluZ1tpICogMSArIDZdLnh5eiwgdV9mc19saWdodGluZ1tpICogMSArIDEyXS54eXosIHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAwXS53LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgNl0udywgdV9mc19saWdodGluZ1tpICogMSArIDE4XS54LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMThdLnksIF8xMjk0LCBfMTI5OCwgXzEzMDIpOwogICAgICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8yMSA9IHBvaW50VG9MaWdodDsKICAgICAgICAgICAgICAgIGhpZ2hwIHZlYzMgXzE0MjYgPSBnZXRMaWdoSW50ZW5zaXR5KHBhcmFtXzIwLCBwYXJhbV8yMSk7CiAgICAgICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzIyID0gXzE1ODM7CiAgICAgICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzIzID0gXzE1ODY7CiAgICAgICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzI0ID0gXzE1ODU7CiAgICAgICAgICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8yNSA9IF8xMzYwOwogICAgICAgICAgICAgICAgZl9kaWZmdXNlICs9ICgoKF8xNDI2ICogc2hhZG93KSAqIF8xMzM2KSAqIEJSREZfbGFtYmVydGlhbihwYXJhbV8yMiwgcGFyYW1fMjMsIHBhcmFtXzI0LCBwYXJhbV8yNSkpOwogICAgICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8yNiA9IF8xNTgzOwogICAgICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8yNyA9IF8xNTg2OwogICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMjggPSBfMTU4NDsKICAgICAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzI5ID0gXzEzNjA7CiAgICAgICAgICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8zMCA9IF8xMzM2OwogICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMzEgPSBfMTM0MjsKICAgICAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzMyID0gY2xhbXBlZERvdChwYXJhbV82LCBwYXJhbV83KTsKICAgICAgICAgICAgICAgIGZfc3BlY3VsYXIgKz0gKCgoXzE0MjYgKiBzaGFkb3cpICogXzEzMzYpICogQlJERl9zcGVjdWxhckdHWChwYXJhbV8yNiwgcGFyYW1fMjcsIHBhcmFtXzI4LCBwYXJhbV8yOSwgcGFyYW1fMzAsIHBhcmFtXzMxLCBwYXJhbV8zMikpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgZl9lbWlzc2l2ZSA9IHVfZnNfcGJyUGFyYW1zWzJdLnh5ejsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMzMgPSBnZXRFbWlzc2l2ZVRleHR1cmUoKS54eXo7CiAgICBoaWdocCB2ZWMzIF8xNDgxID0gZl9lbWlzc2l2ZTsKICAgIGhpZ2hwIHZlYzMgXzE0ODIgPSBfMTQ4MSAqIHNSR0JUb0xpbmVhcihwYXJhbV8zMyk7CiAgICBmX2VtaXNzaXZlID0gXzE0ODI7CiAgICBoaWdocCB2ZWMzIGNvbG9yID0gKF8xNDgyICsgZl9kaWZmdXNlKSArIGZfc3BlY3VsYXI7CiAgICBpbnQgXzE0OTUgPSBpbnQodV9mc19mb2dbMF0udyk7CiAgICBoaWdocCBmbG9hdCBmb2dGYWN0b3IgPSAwLjA7CiAgICBoaWdocCBmbG9hdCBfMTUxNiA9IGdsX0ZyYWdDb29yZC56IC8gZ2xfRnJhZ0Nvb3JkLnc7CiAgICBpZiAoXzE0OTUgPT0gMCkKICAgIHsKICAgICAgICBmb2dGYWN0b3IgPSAodV9mc19mb2dbMV0udyAtIF8xNTE2KSAvICh1X2ZzX2ZvZ1sxXS53IC0gdV9mc19mb2dbMV0ueik7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgaWYgKF8xNDk1ID09IDEpCiAgICAgICAgewogICAgICAgICAgICBmb2dGYWN0b3IgPSBleHAyKCgoLXVfZnNfZm9nWzFdLngpICogXzE1MTYpICogMS40NDI2OTUwMjE2MjkzMzM0OTYwOTM3NSk7CiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgIGlmIChfMTQ5NSA9PSAyKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBmb2dGYWN0b3IgPSBleHAyKCgoKCgtdV9mc19mb2dbMV0ueCkgKiB1X2ZzX2ZvZ1sxXS54KSAqIF8xNTE2KSAqIF8xNTE2KSAqIDEuNDQyNjk1MDIxNjI5MzMzNDk2MDkzNzUpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgaGlnaHAgZmxvYXQgXzE1NTUgPSBmb2dGYWN0b3I7CiAgICBoaWdocCBm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";
static const std::string mesh_Uv1PucShwPcfNorVc4Fog_glsl100 = "";
static const std::string mesh_UltUv1Vc4_glsl100 = "U0JTIAAAAABkAAAAR0xTTGQAAAABAFNUQUcwBgAAVkVSVENPREUzBAAAI3ZlcnNpb24gMTAwCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwphdHRyaWJ1dGUgdmVjMyBhX3Bvc2l0aW9uOwp2YXJ5aW5nIHZlYzMgdl9wb3NpdGlvbjsKdmFyeWluZyB2ZWMyIHZfdXYxOwp2YXJ5aW5nIHZlYzIgdl91djI7CmF0dHJpYnV0ZSB2ZWMyIGFfdGV4Y29vcmQxOwp2YXJ5aW5nIHZlYzQgdl9jb2xvcjsKYXR0cmlidXRlIHZlYzQgYV9jb2xvcjsKCm1hdDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIHJldHVybiBtYXQ0KHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSk7Cn0KCnZlYzMgZ2V0TW9ycGhQb3NpdGlvbih2ZWMzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKdmVjMyBnZXRTa2luUG9zaXRpb24odmVjMyBwb3MsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKdmVjNCBnZXRQb3NpdGlvbihtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHZlYzMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgdmVjMyBwYXJhbV8xID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBtYXQ0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIHZlYzQoZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpLCAxLjApOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBtYXQ0IHBhcmFtID0gZ2V0Qm9uZVRyYW5zZm9ybSgpOwogICAgdmVjNCBfNjcgPSBnZXRQb3NpdGlvbihwYXJhbSk7CiAgICB2ZWM0IF83OCA9IG1hdDQodV92c19wYnJQYXJhbXNbMF0sIHVfdnNfcGJyUGFyYW1zWzFdLCB1X3ZzX3BiclBhcmFtc1syXSwgdV92c19wYnJQYXJhbXNbM10pICogXzY3OwogICAgdl9wb3NpdGlvbiA9IHZlYzMoXzc4Lnh5eikgLyB2ZWMzKF83OC53KTsKICAgIHZfdXYxID0gdmVjMigwLjApOwogICAgdl91djIgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MSA9IGFfdGV4Y29vcmQxOwogICAgdl9jb2xvciA9IGFfY29sb3I7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c19wYnJQYXJhbXNbOF0sIHVfdnNfcGJyUGFyYW1zWzldLCB1X3ZzX3BiclBhcmFtc1sxMF0sIHVfdnNfcGJyUGFyYW1zWzExXSkgKiBfNjc7Cn0KClJFRkzpAQAAbWVzaF9VbHRVdjFWYzRfZ2xzbDEwMAAAAAAAAAAAAAADAAAAAAAAAAEAAAADAAAAYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfdGV4Y29vcmQxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDJhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AwAAAHVfdnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAABbW9kZWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABub3JtYWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAQAAAAG12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAACAAAAAU1RBR/wFAABGUkFHQ09ERS8EAAAjdmVyc2lvbiAxMDAKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBoaWdocCBpbnQ7Cgp1bmlmb3JtIGhpZ2hwIHZlYzQgdV9mc19wYnJQYXJhbXNbNF07CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfYmFzZUNvbG9yVGV4dHVyZTsKCnZhcnlpbmcgaGlnaHAgdmVjNCB2X2NvbG9yOwp2YXJ5aW5nIGhpZ2hwIHZlYzIgdl91djE7CnZhcnlpbmcgaGlnaHAgdmVjMyB2X3Bvc2l0aW9uOwp2YXJ5aW5nIGhpZ2hwIHZlYzIgdl91djI7CgpoaWdocCB2ZWMzIHNSR0JUb0xpbmVhcihoaWdocCB2ZWMzIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIHZlYzMoMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSk7Cn0KCmhpZ2hwIHZlYzQgc1JHQlRvTGluZWFyKGhpZ2hwIHZlYzQgc3JnYkluKQp7CiAgICBoaWdocCB2ZWMzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiB2ZWM0KHNSR0JUb0xpbmVhcihwYXJhbSksIHNyZ2JJbi53KTsKfQoKaGlnaHAgdmVjNCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2X2NvbG9yOwp9CgpoaWdocCB2ZWM0IGdldEJhc2VDb2xvcigpCnsKICAgIGhpZ2hwIHZlYzQgYmFzZUNvbG9yID0gdV9mc19wYnJQYXJhbXNbMF07CiAgICBoaWdocCB2ZWM0IHBhcmFtID0gdGV4dHVyZTJEKHVfYmFzZUNvbG9yVGV4dHVyZSwgdl91djEpOwogICAgaGlnaHAgdmVjNCBfMTAzID0gYmFzZUNvbG9yOwogICAgaGlnaHAgdmVjNCBfMTA0ID0gXzEwMyAqIHNSR0JUb0xpbmVhcihwYXJhbSk7CiAgICBiYXNlQ29sb3IgPSBfMTA0OwogICAgcmV0dXJuIF8xMDQgKiBnZXRWZXJ0ZXhDb2xvcigpOwp9CgpoaWdocCB2ZWMzIGxpbmVhclRvc1JHQihoaWdocCB2ZWMzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCB2ZWMzKDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NSkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IF8yNTkgPSBnZXRCYXNlQ29sb3IoKTsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBfMjU5Lnh5ejsKICAgIGdsX0ZyYWdEYXRhWzBdID0gdmVjNChsaW5lYXJUb3NSR0IocGFyYW0pLCBfMjU5LncpOwp9CgpSRUZMuQEAAG1lc2hfVWx0VXYxVmM0X2dsc2wxMDAAAAAAAAAAAAAAAAAAAAEAAAABAAAABgAAAHVfYmFzZUNvbG9yVGV4dHVyZQAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVAYAAAB1X2ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAWJhc2VDb2xvckZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAAbWV0YWxsaWNGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABAAAAByb3VnaG5lc3NGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAFAAAAGVtaXNzaXZlRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAgAAAAYW1iaWVudExpZ2h0AAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAADAAAABhbWJpZW50RmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAPAAAAA==";
static const std::string mesh_Uv1PucNorNmpTanFog_glsl100 = "";
static const std::string mesh_PucShwPcfNorTanMtaMnrMtg_glsl100 = "";
static const std::string mesh_Uv1PucShwPcfNorNmpTanVc4Fog_glsl100 = "";

std::string getBase64Shader(std::string name) {
    if (name == "mesh_Uv1PucShwPcfNorFogSki_glsl100") {
        return mesh_Uv1PucShwPcfNorFogSki_glsl100;
    } else if (name == "mesh_Uv1PucShwPcfNorSki_glsl100") {
        return mesh_Uv1PucShwPcfNorSki_glsl100;
    } else if (name == "mesh_PucShwPcfNor_glsl100") {
        return mesh_PucShwPcfNor_glsl100;
    } else if (name == "points_TexVc4Txr_glsl100") {
        return points_TexVc4Txr_glsl100;
    } else if (name == "mesh_PucShwPcfNorSki_glsl100") {
        return mesh_PucShwPcfNorSki_glsl100;
    } else if (name == "ui_Ftx_glsl100") {
        return ui_Ftx_glsl100;
    } else if (name == "mesh_Uv1PucNor_glsl100") {
        return mesh_Uv1PucNor_glsl100;
    } else if (name == "depth_Mta_glsl100") {
        return depth_Mta_glsl100;
    } else if (name == "mesh_UltUv1Vc4TxrFog_glsl100") {
        return mesh_UltUv1Vc4TxrFog_glsl100;
    } else if (name == "mesh_PucShwPcfNorTanFogMtaMnr_glsl100") {
        return mesh_PucShwPcfNorTanFogMtaMnr_glsl100;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTanVc4_glsl100") {
        return mesh_Uv1PucShwPcfNorNmpTanVc4_glsl100;
    } else if (name == "mesh_UltUv1Vc4Txr_glsl100") {
        return mesh_UltUv1Vc4Txr_glsl100;
    } else if (name == "mesh_Uv1PucShwPcfNorFog_glsl100") {
        return mesh_Uv1PucShwPcfNorFog_glsl100;
    } else if (name == "points_TexVc4_glsl100") {
        return points_TexVc4_glsl100;
    } else if (name == "mesh_Uv1PucNorNmpTanVc4Ski_glsl100") {
        return mesh_Uv1PucNorNmpTanVc4Ski_glsl100;
    } else if (name == "mesh_Uv1PucNorVc4Fog_glsl100") {
        return mesh_Uv1PucNorVc4Fog_glsl100;
    } else if (name == "ui_Vc4_glsl100") {
        return ui_Vc4_glsl100;
    } else if (name == "mesh_Uv1PucNorNmpTan_glsl100") {
        return mesh_Uv1PucNorNmpTan_glsl100;
    } else if (name == "mesh_PucShwPcfNorTanMtaMnr_glsl100") {
        return mesh_PucShwPcfNorTanMtaMnr_glsl100;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTan_glsl100") {
        return mesh_Uv1PucShwPcfNorNmpTan_glsl100;
    } else if (name == "mesh_UltUv1Vc4Fog_glsl100") {
        return mesh_UltUv1Vc4Fog_glsl100;
    } else if (name == "mesh_UltUv1Fog_glsl100") {
        return mesh_UltUv1Fog_glsl100;
    } else if (name == "depth_Ski_glsl100") {
        return depth_Ski_glsl100;
    } else if (name == "mesh_Uv1PucNorNmpTanVc4Fog_glsl100") {
        return mesh_Uv1PucNorNmpTanVc4Fog_glsl100;
    } else if (name == "mesh_Uv1PucNorVc4_glsl100") {
        return mesh_Uv1PucNorVc4_glsl100;
    } else if (name == "mesh_Uv1PucShwPcfNorVc4_glsl100") {
        return mesh_Uv1PucShwPcfNorVc4_glsl100;
    } else if (name == "mesh_UltUv1_glsl100") {
        return mesh_UltUv1_glsl100;
    } else if (name == "ui_TexVc4_glsl100") {
        return ui_TexVc4_glsl100;
    } else if (name == "mesh_Uv1PucNorNmpTanVc4_glsl100") {
        return mesh_Uv1PucNorNmpTanVc4_glsl100;
    } else if (name == "sky_glsl100") {
        return sky_glsl100;
    } else if (name == "mesh_Uv1PucShwPcfNor_glsl100") {
        return mesh_Uv1PucShwPcfNor_glsl100;
    } else if (name == "mesh_Uv1PucNorNmpTanVc4FogSki_glsl100") {
        return mesh_Uv1PucNorNmpTanVc4FogSki_glsl100;
    } else if (name == "points_Vc4_glsl100") {
        return points_Vc4_glsl100;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTanFog_glsl100") {
        return mesh_Uv1PucShwPcfNorNmpTanFog_glsl100;
    } else if (name == "mesh_Uv1PucNorFog_glsl100") {
        return mesh_Uv1PucNorFog_glsl100;
    } else if (name == "depth_glsl100") {
        return depth_glsl100;
    } else if (name == "mesh_PucShwPcfNorTanFogMtaMnrMtg_glsl100") {
        return mesh_PucShwPcfNorTanFogMtaMnrMtg_glsl100;
    } else if (name == "mesh_Uv1PucShwPcfNorVc4Fog_glsl100") {
        return mesh_Uv1PucShwPcfNorVc4Fog_glsl100;
    } else if (name == "mesh_UltUv1Vc4_glsl100") {
        return mesh_UltUv1Vc4_glsl100;
    } else if (name == "mesh_Uv1PucNorNmpTanFog_glsl100") {
        return mesh_Uv1PucNorNmpTanFog_glsl100;
    } else if (name == "mesh_PucShwPcfNorTanMtaMnrMtg_glsl100") {
        return mesh_PucShwPcfNorTanMtaMnrMtg_glsl100;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTanVc4Fog_glsl100") {
        return mesh_Uv1PucShwPcfNorNmpTanVc4Fog_glsl100;
    }
    return "";
}
#endif //SHADER_glsl100_h
