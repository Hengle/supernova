#ifndef SHADER_glsl330_h
#define SHADER_glsl330_h

#include <string>

static const std::string mesh_Uv1PucNorNmpTanVc4_glsl330 = "";
static const std::string mesh_UltUv1Vc4Fog_glsl330 = "U0JTIAAAAABkAAAAR0xTTEoBAAAAAFNUQUdKBgAAVkVSVENPREVNBAAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwpsYXlvdXQobG9jYXRpb24gPSAwKSBpbiB2ZWMzIGFfcG9zaXRpb247Cm91dCB2ZWMzIHZfcG9zaXRpb247Cm91dCB2ZWMyIHZfdXYxOwpvdXQgdmVjMiB2X3V2MjsKbGF5b3V0KGxvY2F0aW9uID0gMSkgaW4gdmVjMiBhX3RleGNvb3JkMTsKb3V0IHZlYzQgdl9jb2xvcjsKbGF5b3V0KGxvY2F0aW9uID0gMikgaW4gdmVjNCBhX2NvbG9yOwoKbWF0NCBnZXRCb25lVHJhbnNmb3JtKCkKewogICAgcmV0dXJuIG1hdDQodmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSwgdmVjNCgwLjApKTsKfQoKdmVjMyBnZXRNb3JwaFBvc2l0aW9uKHZlYzMgcG9zKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2ZWMzIGdldFNraW5Qb3NpdGlvbih2ZWMzIHBvcywgbWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2ZWM0IGdldFBvc2l0aW9uKG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgdmVjMyBwYXJhbSA9IGFfcG9zaXRpb247CiAgICB2ZWMzIHBhcmFtXzEgPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIG1hdDQgcGFyYW1fMiA9IGJvbmVUcmFuc2Zvcm07CiAgICByZXR1cm4gdmVjNChnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMiksIDEuMCk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcGFyYW0gPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICB2ZWM0IF82NyA9IGdldFBvc2l0aW9uKHBhcmFtKTsKICAgIHZlYzQgXzc4ID0gbWF0NCh1X3ZzX3BiclBhcmFtc1swXSwgdV92c19wYnJQYXJhbXNbMV0sIHVfdnNfcGJyUGFyYW1zWzJdLCB1X3ZzX3BiclBhcmFtc1szXSkgKiBfNjc7CiAgICB2X3Bvc2l0aW9uID0gdmVjMyhfNzgueHl6KSAvIHZlYzMoXzc4LncpOwogICAgdl91djEgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MiA9IHZlYzIoMC4wKTsKICAgIHZfdXYxID0gYV90ZXhjb29yZDE7CiAgICB2X2NvbG9yID0gYV9jb2xvcjsKICAgIGdsX1Bvc2l0aW9uID0gbWF0NCh1X3ZzX3BiclBhcmFtc1s4XSwgdV92c19wYnJQYXJhbXNbOV0sIHVfdnNfcGJyUGFyYW1zWzEwXSwgdV92c19wYnJQYXJhbXNbMTFdKSAqIF82NzsKfQoKUkVGTOkBAABtZXNoX1VsdFV2MVZjNEZvZ19nbHNsMzMwAAAAAAAAAAMAAAAAAAAAAQAAAAMAAABhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV90ZXhjb29yZDEAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMmFfY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQDAAAAdV92c19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAFtb2RlbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAG5vcm1hbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAABAAAAAbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAIAAAABTVEFHZAUAAEZSQUdDT0RFlwMAACN2ZXJzaW9uIDMzMAoKdW5pZm9ybSB2ZWM0IHVfZnNfcGJyUGFyYW1zWzRdOwp1bmlmb3JtIHNhbXBsZXIyRCB1X2Jhc2VDb2xvclRleHR1cmU7CgppbiB2ZWM0IHZfY29sb3I7CmluIHZlYzIgdl91djE7CmluIHZlYzMgdl9wb3NpdGlvbjsKbGF5b3V0KGxvY2F0aW9uID0gMCkgb3V0IHZlYzQgZ19maW5hbENvbG9yOwppbiB2ZWMyIHZfdXYyOwoKdmVjMyBzUkdCVG9MaW5lYXIodmVjMyBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCB2ZWMzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9Cgp2ZWM0IHNSR0JUb0xpbmVhcih2ZWM0IHNyZ2JJbikKewogICAgdmVjMyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gdmVjNChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCnZlYzQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdl9jb2xvcjsKfQoKdmVjNCBnZXRCYXNlQ29sb3IoKQp7CiAgICB2ZWM0IGJhc2VDb2xvciA9IHVfZnNfcGJyUGFyYW1zWzBdOwogICAgdmVjNCBwYXJhbSA9IHRleHR1cmUodV9iYXNlQ29sb3JUZXh0dXJlLCB2X3V2MSk7CiAgICB2ZWM0IF8xMDMgPSBiYXNlQ29sb3I7CiAgICB2ZWM0IF8xMDQgPSBfMTAzICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8xMDQ7CiAgICByZXR1cm4gXzEwNCAqIGdldFZlcnRleENvbG9yKCk7Cn0KCnZlYzMgbGluZWFyVG9zUkdCKHZlYzMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIHZlYzMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIHZlYzQgXzI1OSA9IGdldEJhc2VDb2xvcigpOwogICAgdmVjMyBwYXJhbSA9IF8yNTkueHl6OwogICAgZ19maW5hbENvbG9yID0gdmVjNChsaW5lYXJUb3NSR0IocGFyYW0pLCBfMjU5LncpOwp9CgpSRUZMuQEAAG1lc2hfVWx0VXYxVmM0Rm9nX2dsc2wzMzAAAAAAAAAAAAAAAAEAAAABAAAABgAAAHVfYmFzZUNvbG9yVGV4dHVyZQAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVAYAAAB1X2ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAWJhc2VDb2xvckZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAAbWV0YWxsaWNGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABAAAAByb3VnaG5lc3NGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAFAAAAGVtaXNzaXZlRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAgAAAAYW1iaWVudExpZ2h0AAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAADAAAABhbWJpZW50RmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAPAAAAA==";
static const std::string depth_Ski_glsl330 = "U0JTIAAAAABkAAAAR0xTTEoBAAAAAFNUQUcGCgAAVkVSVENPREXkBwAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV92c19za2lubmluZ1syODBdOwp1bmlmb3JtIHZlYzQgdV92c19kZXB0aFBhcmFtc1s0XTsKbGF5b3V0KGxvY2F0aW9uID0gMikgaW4gdmVjNCBhX2JvbmVJZHM7CmxheW91dChsb2NhdGlvbiA9IDEpIGluIHZlYzQgYV9ib25lV2VpZ2h0czsKbGF5b3V0KGxvY2F0aW9uID0gMCkgaW4gdmVjMyBhX3Bvc2l0aW9uOwpvdXQgdmVjMiB2X3Byb2paVzsKCnZlYzMgZ2V0TW9ycGhQb3NpdGlvbih2ZWMzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKbWF0NCBnZXRCb25lVHJhbnNmb3JtKCkKewogICAgbWF0NCBfNTEgPSBtYXQ0KHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy54ICogNjU1MzUuMCkgKiA0ICsgMF0sIHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy54ICogNjU1MzUuMCkgKiA0ICsgMV0sIHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy54ICogNjU1MzUuMCkgKiA0ICsgMl0sIHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy54ICogNjU1MzUuMCkgKiA0ICsgM10pICogYV9ib25lV2VpZ2h0cy54OwogICAgbWF0NCBfNzUgPSBtYXQ0KHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy55ICogNjU1MzUuMCkgKiA0ICsgMF0sIHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy55ICogNjU1MzUuMCkgKiA0ICsgMV0sIHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy55ICogNjU1MzUuMCkgKiA0ICsgMl0sIHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy55ICogNjU1MzUuMCkgKiA0ICsgM10pICogYV9ib25lV2VpZ2h0cy55OwogICAgbWF0NCBfOTkgPSBtYXQ0KHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy56ICogNjU1MzUuMCkgKiA0ICsgMF0sIHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy56ICogNjU1MzUuMCkgKiA0ICsgMV0sIHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy56ICogNjU1MzUuMCkgKiA0ICsgMl0sIHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy56ICogNjU1MzUuMCkgKiA0ICsgM10pICogYV9ib25lV2VpZ2h0cy56OwogICAgbWF0NCBfMTIzID0gbWF0NCh1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMudyAqIDY1NTM1LjApICogNCArIDBdLCB1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMudyAqIDY1NTM1LjApICogNCArIDFdLCB1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMudyAqIDY1NTM1LjApICogNCArIDJdLCB1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMudyAqIDY1NTM1LjApICogNCArIDNdKSAqIGFfYm9uZVdlaWdodHMudzsKICAgIHJldHVybiBtYXQ0KCgoXzUxWzBdICsgXzc1WzBdKSArIF85OVswXSkgKyBfMTIzWzBdLCAoKF81MVsxXSArIF83NVsxXSkgKyBfOTlbMV0pICsgXzEyM1sxXSwgKChfNTFbMl0gKyBfNzVbMl0pICsgXzk5WzJdKSArIF8xMjNbMl0sICgoXzUxWzNdICsgXzc1WzNdKSArIF85OVszXSkgKyBfMTIzWzNdKTsKfQoKdmVjMyBnZXRTa2luUG9zaXRpb24oaW5vdXQgdmVjMyBwb3MsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgdmVjNCBfMTUxID0gYm9uZVRyYW5zZm9ybSAqIHZlYzQocG9zLCAxLjApOwogICAgcG9zID0gdmVjMyhfMTUxLnh5eikgLyB2ZWMzKF8xNTEudyk7CiAgICByZXR1cm4gcG9zOwp9Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWMzIHBvcyA9IGFfcG9zaXRpb247CiAgICB2ZWMzIHBhcmFtID0gYV9wb3NpdGlvbjsKICAgIHBvcyA9IGdldE1vcnBoUG9zaXRpb24ocGFyYW0pOwogICAgdmVjMyBwYXJhbV8xID0gcG9zOwogICAgbWF0NCBwYXJhbV8yID0gZ2V0Qm9uZVRyYW5zZm9ybSgpOwogICAgdmVjMyBfMTc5ID0gZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpOwogICAgcG9zID0gXzE3OTsKICAgIGdsX1Bvc2l0aW9uID0gbWF0NCh1X3ZzX2RlcHRoUGFyYW1zWzBdLCB1X3ZzX2RlcHRoUGFyYW1zWzFdLCB1X3ZzX2RlcHRoUGFyYW1zWzJdLCB1X3ZzX2RlcHRoUGFyYW1zWzNdKSAqIHZlYzQoXzE3OSwgMS4wKTsKICAgIHZfcHJvalpXID0gZ2xfUG9zaXRpb24uenc7Cn0KClJFRkwOAgAAZGVwdGhfU2tpX2dsc2wzMzAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAIAAAACAAAAYV9ib25lSWRzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNGFfYm9uZVdlaWdodHMAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDRhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAAHVfdnNfc2tpbm5pbmcAAAAAAAAAAAAAAAAAAAAAAAAAXzMzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIARAAABYm9uZXNNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0RgAAAAAAAAABAAAAdV92c19kZXB0aFBhcmFtcwAAAAAAAAAAAAAAAAAAAABkZXB0aFBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAQAAAAAFsaWdodE1WUE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUfyAQAARlJBR0NPREWuAQAAI3ZlcnNpb24gMzMwCgpsYXlvdXQobG9jYXRpb24gPSAwKSBvdXQgdmVjNCBmcmFnX2NvbG9yOwppbiB2ZWMyIHZfcHJvalpXOwoKdmVjNCBlbmNvZGVEZXB0aChmbG9hdCB2KQp7CiAgICB2ZWM0IF8yMyA9IGZyYWN0KHZlYzQoMS4wLCAyNTUuMCwgNjUwMjUuMCwgMTY1ODEzNzUuMCkgKiB2KTsKICAgIHJldHVybiBfMjMgLSAoXzIzLnl6d3cgKiB2ZWM0KDAuMDAzOTIxNTY4ODU5MzY4NTYyNjk4MzY0MjU3ODEyNSwgMC4wMDM5MjE1Njg4NTkzNjg1NjI2OTgzNjQyNTc4MTI1LCAwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjUsIDAuMCkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBmbG9hdCBwYXJhbSA9ICgoMC41ICogdl9wcm9qWlcueCkgLyB2X3Byb2paVy55KSArIDAuNTsKICAgIGZyYWdfY29sb3IgPSBlbmNvZGVEZXB0aChwYXJhbSk7Cn0KClJFRkwwAAAAZGVwdGhfU2tpX2dsc2wzMzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
static const std::string mesh_PucShwPcfNorSki_glsl330 = "";
static const std::string depth_Mta_glsl330 = "U0JTIAAAAABkAAAAR0xTTEoBAAAAAFNUQUepCAAAVkVSVENPREVXBQAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV92c19tb3JwaHRhcmdldFsyXTsKdW5pZm9ybSB2ZWM0IHVfdnNfZGVwdGhQYXJhbXNbNF07CmxheW91dChsb2NhdGlvbiA9IDEpIGluIHZlYzMgYV9tb3JwaFRhcmdldDA7CmxheW91dChsb2NhdGlvbiA9IDIpIGluIHZlYzMgYV9tb3JwaFRhcmdldDE7CmxheW91dChsb2NhdGlvbiA9IDMpIGluIHZlYzMgYV9tb3JwaFRhcmdldDQ7CmxheW91dChsb2NhdGlvbiA9IDQpIGluIHZlYzMgYV9tb3JwaFRhcmdldDU7CmxheW91dChsb2NhdGlvbiA9IDUpIGluIHZlYzMgYV9tb3JwaFRhcmdldDY7CmxheW91dChsb2NhdGlvbiA9IDYpIGluIHZlYzMgYV9tb3JwaFRhcmdldDc7CmxheW91dChsb2NhdGlvbiA9IDApIGluIHZlYzMgYV9wb3NpdGlvbjsKb3V0IHZlYzIgdl9wcm9qWlc7Cgp2ZWMzIGdldE1vcnBoUG9zaXRpb24oaW5vdXQgdmVjMyBwb3MpCnsKICAgIHBvcyArPSAoYV9tb3JwaFRhcmdldDAgKiB1X3ZzX21vcnBodGFyZ2V0WzBdLngpOwogICAgcG9zICs9IChhX21vcnBoVGFyZ2V0MSAqIHVfdnNfbW9ycGh0YXJnZXRbMF0ueSk7CiAgICBwb3MgKz0gKGFfbW9ycGhUYXJnZXQ0ICogdV92c19tb3JwaHRhcmdldFsxXS54KTsKICAgIHBvcyArPSAoYV9tb3JwaFRhcmdldDUgKiB1X3ZzX21vcnBodGFyZ2V0WzFdLnkpOwogICAgcG9zICs9IChhX21vcnBoVGFyZ2V0NiAqIHVfdnNfbW9ycGh0YXJnZXRbMV0ueik7CiAgICBwb3MgKz0gKGFfbW9ycGhUYXJnZXQ3ICogdV92c19tb3JwaHRhcmdldFsxXS53KTsKICAgIHJldHVybiBwb3M7Cn0KCm1hdDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIHJldHVybiBtYXQ0KHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSk7Cn0KCnZlYzMgZ2V0U2tpblBvc2l0aW9uKHZlYzMgcG9zLCBtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHJldHVybiBwb3M7Cn0KCnZvaWQgbWFpbigpCnsKICAgIHZlYzMgcG9zID0gYV9wb3NpdGlvbjsKICAgIHZlYzMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgdmVjMyBfOTggPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIHBvcyA9IF85ODsKICAgIHZlYzMgcGFyYW1fMSA9IHBvczsKICAgIG1hdDQgcGFyYW1fMiA9IGdldEJvbmVUcmFuc2Zvcm0oKTsKICAgIHZlYzMgXzEwMyA9IGdldFNraW5Qb3NpdGlvbihwYXJhbV8xLCBwYXJhbV8yKTsKICAgIHBvcyA9IF8xMDM7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c19kZXB0aFBhcmFtc1swXSwgdV92c19kZXB0aFBhcmFtc1sxXSwgdV92c19kZXB0aFBhcmFtc1syXSwgdV92c19kZXB0aFBhcmFtc1szXSkgKiB2ZWM0KF8xMDMsIDEuMCk7CiAgICB2X3Byb2paVyA9IGdsX1Bvc2l0aW9uLnp3Owp9CgpSRUZMPgMAAGRlcHRoX010YV9nbHNsMzMwAAAAAAAAAAAAAAAAAAAABwAAAAAAAAACAAAAAgAAAGFfbW9ycGhUYXJnZXQwAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDNhX21vcnBoVGFyZ2V0MQAAAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV9tb3JwaFRhcmdldDQAAAAAAAAAAAAAAAAAAAAAAAADAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAARkxUM2FfbW9ycGhUYXJnZXQ1AAAAAAAAAAAAAAAAAAAAAAAABAAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAEZMVDNhX21vcnBoVGFyZ2V0NgAAAAAAAAAAAAAAAAAAAAAAAAUAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAABGTFQzYV9tb3JwaFRhcmdldDcAAAAAAAAAAAAAAAAAAAAAAAAGAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAARkxUM2FfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAdV92c19tb3JwaHRhcmdldAAAAAAAAAAAAAAAAAAAAABfMzkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAFtb3JwaFdlaWdodHMAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQCAAAAAAAAAAEAAAB1X3ZzX2RlcHRoUGFyYW1zAAAAAAAAAAAAAAAAAAAAAGRlcHRoUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABAAAAAAWxpZ2h0TVZQTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAU1RBR/IBAABGUkFHQ09ERa4BAAAjdmVyc2lvbiAzMzAKCmxheW91dChsb2NhdGlvbiA9IDApIG91dCB2ZWM0IGZyYWdfY29sb3I7CmluIHZlYzIgdl9wcm9qWlc7Cgp2ZWM0IGVuY29kZURlcHRoKGZsb2F0IHYpCnsKICAgIHZlYzQgXzIzID0gZnJhY3QodmVjNCgxLjAsIDI1NS4wLCA2NTAyNS4wLCAxNjU4MTM3NS4wKSAqIHYpOwogICAgcmV0dXJuIF8yMyAtIChfMjMueXp3dyAqIHZlYzQoMC4wMDM5MjE1Njg4NTkzNjg1NjI2OTgzNjQyNTc4MTI1LCAwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjUsIDAuMDAzOTIxNTY4ODU5MzY4NTYyNjk4MzY0MjU3ODEyNSwgMC4wKSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGZsb2F0IHBhcmFtID0gKCgwLjUgKiB2X3Byb2paVy54KSAvIHZfcHJvalpXLnkpICsgMC41OwogICAgZnJhZ19jb2xvciA9IGVuY29kZURlcHRoKHBhcmFtKTsKfQoKUkVGTDAAAABkZXB0aF9NdGFfZ2xzbDMzMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=";
static const std::string mesh_Uv1PucShwPcfNorNmpTanVc4Fog_glsl330 = "";
static const std::string mesh_Uv1PucShwPcfNor_glsl330 = "";
static const std::string mesh_Uv1PucNorVc4_glsl330 = "";
static const std::string mesh_Uv1PucNorVc4Fog_glsl330 = "U0JTIAAAAABkAAAAR0xTTEoBAAAAAFNUQUfiCAAAVkVSVENPREWZBgAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwpsYXlvdXQobG9jYXRpb24gPSAwKSBpbiB2ZWMzIGFfcG9zaXRpb247CmxheW91dChsb2NhdGlvbiA9IDEpIGluIHZlYzMgYV9ub3JtYWw7Cm91dCB2ZWMzIHZfcG9zaXRpb247Cm91dCB2ZWMzIHZfbm9ybWFsOwpvdXQgdmVjMiB2X3V2MTsKb3V0IHZlYzIgdl91djI7CmxheW91dChsb2NhdGlvbiA9IDIpIGluIHZlYzIgYV90ZXhjb29yZDE7Cm91dCB2ZWM0IHZfY29sb3I7CmxheW91dChsb2NhdGlvbiA9IDMpIGluIHZlYzQgYV9jb2xvcjsKCm1hdDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIHJldHVybiBtYXQ0KHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSk7Cn0KCnZlYzMgZ2V0TW9ycGhQb3NpdGlvbih2ZWMzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKdmVjMyBnZXRTa2luUG9zaXRpb24odmVjMyBwb3MsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKdmVjNCBnZXRQb3NpdGlvbihtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHZlYzMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgdmVjMyBwYXJhbV8xID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBtYXQ0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIHZlYzQoZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpLCAxLjApOwp9Cgp2ZWMzIGdldE1vcnBoTm9ybWFsKHZlYzMgbm9ybWFsKQp7CiAgICByZXR1cm4gbm9ybWFsOwp9Cgp2ZWMzIGdldFNraW5Ob3JtYWwodmVjMyBub3JtYWwsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIG5vcm1hbDsKfQoKdmVjMyBnZXROb3JtYWwobWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICB2ZWMzIHBhcmFtID0gYV9ub3JtYWw7CiAgICB2ZWMzIHBhcmFtXzEgPSBnZXRNb3JwaE5vcm1hbChwYXJhbSk7CiAgICBtYXQ0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIG5vcm1hbGl6ZShnZXRTa2luTm9ybWFsKHBhcmFtXzEsIHBhcmFtXzIpKTsKfQoKdm9pZCBtYWluKCkKewogICAgbWF0NCBfOTQgPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICBtYXQ0IHBhcmFtID0gXzk0OwogICAgdmVjNCBfOTkgPSBnZXRQb3NpdGlvbihwYXJhbSk7CiAgICB2ZWM0IF8xMTAgPSBtYXQ0KHVfdnNfcGJyUGFyYW1zWzBdLCB1X3ZzX3BiclBhcmFtc1sxXSwgdV92c19wYnJQYXJhbXNbMl0sIHVfdnNfcGJyUGFyYW1zWzNdKSAqIF85OTsKICAgIHZfcG9zaXRpb24gPSB2ZWMzKF8xMTAueHl6KSAvIHZlYzMoXzExMC53KTsKICAgIG1hdDQgcGFyYW1fMSA9IF85NDsKICAgIHZfbm9ybWFsID0gbm9ybWFsaXplKHZlYzMoKG1hdDQodV92c19wYnJQYXJhbXNbNF0sIHVfdnNfcGJyUGFyYW1zWzVdLCB1X3ZzX3BiclBhcmFtc1s2XSwgdV92c19wYnJQYXJhbXNbN10pICogdmVjNChnZXROb3JtYWwocGFyYW1fMSksIDAuMCkpLnh5eikpOwogICAgdl91djEgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MiA9IHZlYzIoMC4wKTsKICAgIHZfdXYxID0gYV90ZXhjb29yZDE7CiAgICB2X2NvbG9yID0gYV9jb2xvcjsKICAgIGdsX1Bvc2l0aW9uID0gbWF0NCh1X3ZzX3BiclBhcmFtc1s4XSwgdV92c19wYnJQYXJhbXNbOV0sIHVfdnNfcGJyUGFyYW1zWzEwXSwgdV92c19wYnJQYXJhbXNbMTFdKSAqIF85OTsKfQoKUkVGTDUCAABtZXNoX1V2MVB1Y05vclZjNEZvZ19nbHNsMzMwAAAAAAQAAAAAAAAAAQAAAAMAAABhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV9ub3JtYWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfdGV4Y29vcmQxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDJhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABGTFQ0AwAAAHVfdnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAABbW9kZWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABub3JtYWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAQAAAAG12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAACAAAAAU1RBRwcqAABGUkFHQ09ERdQlAAAjdmVyc2lvbiAzMzAKCnN0cnVjdCBNYXRlcmlhbEluZm8KewogICAgZmxvYXQgcGVyY2VwdHVhbFJvdWdobmVzczsKICAgIHZlYzMgZjA7CiAgICBmbG9hdCBhbHBoYVJvdWdobmVzczsKICAgIHZlYzMgYWxiZWRvQ29sb3I7CiAgICB2ZWMzIGY5MDsKICAgIGZsb2F0IG1ldGFsbGljOwogICAgdmVjMyBuOwogICAgdmVjMyBiYXNlQ29sb3I7Cn07CgpzdHJ1Y3QgTm9ybWFsSW5mbwp7CiAgICB2ZWMzIG5nOwogICAgdmVjMyBuOwogICAgdmVjMyB0OwogICAgdmVjMyBiOwp9OwoKc3RydWN0IExpZ2h0CnsKICAgIGludCB0eXBlOwogICAgdmVjMyBkaXJlY3Rpb247CiAgICB2ZWMzIGNvbG9yOwogICAgdmVjMyBwb3NpdGlvbjsKICAgIGZsb2F0IHJhbmdlOwogICAgZmxvYXQgaW50ZW5zaXR5OwogICAgZmxvYXQgaW5uZXJDb25lQ29zOwogICAgZmxvYXQgb3V0ZXJDb25lQ29zOwogICAgYm9vbCBzaGFkb3dzOwogICAgaW50IHNoYWRvd01hcEluZGV4OwogICAgaW50IG51bVNoYWRvd0Nhc2NhZGVzOwp9OwoKdW5pZm9ybSB2ZWM0IHVfZnNfcGJyUGFyYW1zWzRdOwp1bmlmb3JtIHZlYzQgdV9mc19saWdodGluZ1syNV07CnVuaWZvcm0gdmVjNCB1X2ZzX2ZvZ1syXTsKdW5pZm9ybSBzYW1wbGVyMkQgdV9iYXNlQ29sb3JUZXh0dXJlOwp1bmlmb3JtIHNhbXBsZXIyRCB1X21ldGFsbGljUm91Z2huZXNzVGV4dHVyZTsKdW5pZm9ybSBzYW1wbGVyMkQgdV9vY2NsdXNpb25UZXh0dXJlOwp1bmlmb3JtIHNhbXBsZXIyRCB1X2VtaXNzaXZlVGV4dHVyZTsKCmluIHZlYzQgdl9jb2xvcjsKaW4gdmVjMiB2X3V2MTsKaW4gdmVjMyB2X3Bvc2l0aW9uOwppbiB2ZWMzIHZfbm9ybWFsOwpsYXlvdXQobG9jYXRpb24gPSAwKSBvdXQgdmVjNCBnX2ZpbmFsQ29sb3I7CmluIHZlYzIgdl91djI7Cgp2ZWMzIHNSR0JUb0xpbmVhcih2ZWMzIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIHZlYzMoMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSk7Cn0KCnZlYzQgc1JHQlRvTGluZWFyKHZlYzQgc3JnYkluKQp7CiAgICB2ZWMzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiB2ZWM0KHNSR0JUb0xpbmVhcihwYXJhbSksIHNyZ2JJbi53KTsKfQoKdmVjNCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2X2NvbG9yOwp9Cgp2ZWM0IGdldEJhc2VDb2xvcigpCnsKICAgIHZlYzQgYmFzZUNvbG9yID0gdV9mc19wYnJQYXJhbXNbMF07CiAgICB2ZWM0IHBhcmFtID0gdGV4dHVyZSh1X2Jhc2VDb2xvclRleHR1cmUsIHZfdXYxKTsKICAgIHZlYzQgXzE2OCA9IGJhc2VDb2xvcjsKICAgIHZlYzQgXzE2OSA9IF8xNjggKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzE2OTsKICAgIHJldHVybiBfMTY5ICogZ2V0VmVydGV4Q29sb3IoKTsKfQoKTm9ybWFsSW5mbyBnZXROb3JtYWxJbmZvKCkKewogICAgdmVjMyBfMjUxID0gdmVjMyh2X3V2MSwgMC4wKTsKICAgIHZlYzMgXzI1MiA9IGRGZHgoXzI1MSk7CiAgICB2ZWMzIF8yNTggPSBkRmR5KF8yNTEpOwogICAgZmxvYXQgXzI2MSA9IF8yNTgueTsKICAgIGZsb2F0IF8yNjggPSBfMjUyLnk7CiAgICB2ZWMzIF8yODYgPSAoKGRGZHgodl9wb3NpdGlvbikgKiBfMjYxKSAtIChkRmR5KHZfcG9zaXRpb24pICogXzI2OCkpIC8gdmVjMygoXzI1Mi54ICogXzI2MSkgLSAoXzI1OC54ICogXzI2OCkpOwogICAgdmVjMyBfMjkwID0gbm9ybWFsaXplKHZfbm9ybWFsKTsKICAgIHZlYzMgXzI5OSA9IG5vcm1hbGl6ZShfMjg2IC0gKF8yOTAgKiBkb3QoXzI5MCwgXzI4NikpKTsKICAgIHJldHVybiBOb3JtYWxJbmZvKF8yOTAsIF8yOTAsIF8yOTksIGNyb3NzKF8yOTAsIF8yOTkpKTsKfQoKTWF0ZXJpYWxJbmZvIGdldE1ldGFsbGljUm91Z2huZXNzSW5mbyhpbm91dCBNYXRlcmlhbEluZm8gaW5mbywgZmxvYXQgZjBfaW9yKQp7CiAgICBpbmZvLm1ldGFsbGljID0gdV9mc19wYnJQYXJhbXNbMV0ueDsKICAgIGluZm8ucGVyY2VwdHVhbFJvdWdobmVzcyA9IHVfZnNfcGJyUGFyYW1zWzFdLnk7CiAgICB2ZWM0IF8xODkgPSB0ZXh0dXJlKHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlLCB2X3V2MSk7CiAgICBpbmZvLnBlcmNlcHR1YWxSb3VnaG5lc3MgKj0gXzE4OS55OwogICAgaW5mby5tZXRhbGxpYyAqPSBfMTg5Lno7CiAgICB2ZWMzIF8yMDYgPSB2ZWMzKGYwX2lvcik7CiAgICBpbmZvLmFsYmVkb0NvbG9yID0gbWl4KGluZm8uYmFzZUNvbG9yICogKHZlYzMoMS4wKSAtIF8yMDYpLCB2ZWMzKDAuMCksIHZlYzMoaW5mby5tZXRhbGxpYykpOwogICAgaW5mby5mMCA9IG1peChfMjA2LCBpbmZvLmJhc2VDb2xvciwgdmVjMyhpbmZvLm1ldGFsbGljKSk7CiAgICByZXR1cm4gaW5mbzsKfQoKdmVjNCBnZXRPY2NsdXNpb25UZXh0dXJlKCkKewogICAgcmV0dXJuIHRleHR1cmUodV9vY2NsdXNpb25UZXh0dXJlLCB2X3V2MSk7Cn0KCmZsb2F0IGNsYW1wZWREb3QodmVjMyB4LCB2ZWMzIHkpCnsKICAgIHJldHVybiBjbGFtcChkb3QoeCwgeSksIDAuMCwgMS4wKTsKfQoKZmxvYXQgZ2V0UmFuZ2VBdHRlbnVhdGlvbihmbG9hdCByYW5nZSwgZmxvYXQgX2Rpc3RhbmNlKQp7CiAgICBpZiAocmFuZ2UgPD0gMC4wKQogICAgewogICAgICAgIHJldHVybiAxLjAgLyBwb3coX2Rpc3RhbmNlLCAyLjApOwogICAgfQogICAgcmV0dXJuIG1heChtaW4oMS4wIC0gcG93KF9kaXN0YW5jZSAvIHJhbmdlLCA0LjApLCAxLjApLCAwLjApIC8gcG93KF9kaXN0YW5jZSwgMi4wKTsKfQoKZmxvYXQgZ2V0U3BvdEF0dGVudWF0aW9uKHZlYzMgcG9pbnRUb0xpZ2h0LCB2ZWMzIHNwb3REaXJlY3Rpb24sIGZsb2F0IG91dGVyQ29uZUNvcywgZmxvYXQgaW5uZXJDb25lQ29zKQp7CiAgICBmbG9hdCBfNDY3ID0gZG90KG5vcm1hbGl6ZShzcG90RGlyZWN0aW9uKSwgbm9ybWFsaXplKC1wb2ludFRvTGlnaHQpKTsKICAgIGlmIChfNDY3ID4gb3V0ZXJDb25lQ29zKQogICAgewogICAgICAgIGlmIChfNDY3IDwgaW5uZXJDb25lQ29zKQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIHNtb290aHN0ZXAob3V0ZXJDb25lQ29zLCBpbm5lckNvbmVDb3MsIF80NjcpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gMS4wOwogICAgfQogICAgcmV0dXJuIDAuMDsKfQoKdmVjMyBnZXRMaWdoSW50ZW5zaXR5KExpZ2h0IGxpZ2h0LCB2ZWMzIHBvaW50VG9MaWdodCkKewogICAgZmxvYXQgcmFuZ2VBdHRlbnVhdGlvbiA9IDEuMDsKICAgIGZsb2F0IHNwb3RBdHRlbnVhdGlvbiA9IDEuMDsKICAgIGlmIChsaWdodC50eXBlICE9IDApCiAgICB7CiAgICAgICAgZmxvYXQgcGFyYW0gPSBsaWdodC5yYW5nZTsKICAgICAgICBmbG9hdCBwYXJhbV8xID0gbGVuZ3RoKHBvaW50VG9MaWdodCk7CiAgICAgICAgcmFuZ2VBdHRlbnVhdGlvbiA9IGdldFJhbmdlQXR0ZW51YXRpb24ocGFyYW0sIHBhcmFtXzEpOwogICAgfQogICAgaWYgKGxpZ2h0LnR5cGUgPT0gMikKICAgIHsKICAgICAgICB2ZWMzIHBhcmFtXzIgPSBwb2ludFRvTGlnaHQ7CiAgICAgICAgdmVjMyBwYXJhbV8zID0gbGlnaHQuZGlyZWN0aW9uOwogICAgICAgIGZsb2F0IHBhcmFtXzQgPSBsaWdodC5vdXRlckNvbmVDb3M7CiAgICAgICAgZmxvYXQgcGFyYW1fNSA9IGxpZ2h0LmlubmVyQ29uZUNvczsKICAgICAgICBzcG90QXR0ZW51YXRpb24gPSBnZXRTcG90QXR0ZW51YXRpb24ocGFyYW1fMiwgcGFyYW1fMywgcGFyYW1fNCwgcGFyYW1fNSk7CiAgICB9CiAgICByZXR1cm4gbGlnaHQuY29sb3IgKiAoKHJhbmdlQXR0ZW51YXRpb24gKiBzcG90QXR0ZW51YXRpb24pICogbGlnaHQuaW50ZW5zaXR5KTsKfQoKdmVjMyBGX1NjaGxpY2sodmVjMyBmMCwgdmVjMyBmOTAsIGZsb2F0IFZkb3RIKQp7CiAgICByZXR1cm4gZjAgKyAoKGY5MCAtIGYwKSAqIHBvdyhjbGFtcCgxLjAgLSBWZG90SCwgMC4wLCAxLjApLCA1LjApKTsKfQoKdmVjMyBCUkRGX2xhbWJlcnRpYW4odmVjMyBmMCwgdmVjMyBmOTAsIHZlYzMgZGlmZnVzZUNvbG9yLCBmbG9hdCBWZG90SCkKewogICAgdmVjMyBwYXJhbSA9IGYwOwogICAgdmVjMyBwYXJhbV8xID0gZjkwOwogICAgZmxvYXQgcGFyYW1fMiA9IFZkb3RIOwogICAgcmV0dXJuICh2ZWMzKDEuMCkgLSBGX1NjaGxpY2socGFyYW0sIHBhcmFtXzEsIHBhcmFtXzIpKSAqIChkaWZmdXNlQ29sb3IgKiB2ZWMzKDAuMzE4MzA5ODczMzQyNTE0MDM4MDg1OTM3NSkpOwp9CgpmbG9hdCBWX0dHWChmbG9hdCBOZG90TCwgZmxvYXQgTmRvdFYsIGZsb2F0IGFscGhhUm91Z2huZXNzKQp7CiAgICBmbG9hdCBfMzM1ID0gYWxwaGFSb3VnaG5lc3MgKiBhbHBoYVJvdWdobmVzczsKICAgIGZsb2F0IF8zNDIgPSAxLjAgLSBfMzM1OwogICAgZmxvYXQgXzM2MyA9IChOZG90TCAqIHNxcnQoKChOZG90ViAqIE5kb3RWKSAqIF8zNDIpICsgXzMzNSkpICsgKE5kb3RWICogc3FydCgoKE5kb3RMICogTmRvdEwpICogXzM0MikgKyBfMzM1KSk7CiAgICBpZiAoXzM2MyA+IDAuMCkKICAgIHsKICAgICAgICByZXR1cm4gMC41IC8gXzM2MzsKICAgIH0KICAgIHJldHVybiAwLjA7Cn0KCmZsb2F0IERfR0dYKGZsb2F0IE5kb3RILCBmbG9hdCBhbHBoYVJvdWdobmVzcykKewogICAgZmxvYXQgXzM3NyA9IGFscGhhUm91Z2huZXNzICogYWxwaGFSb3VnaG5lc3M7CiAgICBmbG9hdCBfMzg1ID0gKChOZG90SCAqIE5kb3RIKSAqIChfMzc3IC0gMS4wKSkgKyAxLjA7CiAgICByZXR1cm4gXzM3NyAvICgoMy4xNDE1OTI3NDEwMTI1NzMyNDIxODc1ICogXzM4NSkgKiBfMzg1KTsKfQoKdmVjMyBCUkRGX3NwZWN1bGFyR0dYKHZlYzMgZjAsIHZlYzMgZjkwLCBmbG9hdCBhbHBoYVJvdWdobmVzcywgZmxvYXQgVmRvdEgsIGZsb2F0IE5kb3RMLCBmbG9hdCBOZG90ViwgZmxvYXQgTmRvdEgpCnsKICAgIHZlYzMgcGFyYW0gPSBmMDsKICAgIHZlYzMgcGFyYW1fMSA9IGY5MDsKICAgIGZsb2F0IHBhcmFtXzIgPSBWZG90SDsKICAgIGZsb2F0IHBhcmFtXzMgPSBOZG90TDsKICAgIGZsb2F0IHBhcmFtXzQgPSBOZG90VjsKICAgIGZsb2F0IHBhcmFtXzUgPSBhbHBoYVJvdWdobmVzczsKICAgIGZsb2F0IHBhcmFtXzYgPSBOZG90SDsKICAgIGZsb2F0IHBhcmFtXzcgPSBhbHBoYVJvdWdobmVzczsKICAgIHJldHVybiAoRl9TY2hsaWNrKHBhcmFtLCBwYXJhbV8xLCBwYXJhbV8yKSAqIFZfR0dYKHBhcmFtXzMsIHBhcmFtXzQsIHBhcmFtXzUpKSAqIERfR0dYKHBhcmFtXzYsIHBhcmFtXzcpOwp9Cgp2ZWM0IGdldEVtaXNzaXZlVGV4dHVyZSgpCnsKICAgIHJldHVybiB0ZXh0dXJlKHVfZW1pc3NpdmVUZXh0dXJlLCB2X3V2MSk7Cn0KCnZlYzMgbGluZWFyVG9zUkdCKHZlYzMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIHZlYzMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIHZlYzQgXzUzMiA9IGdldEJhc2VDb2xvcigpOwogICAgdmVjMyBfOTExID0gZ2V0Tm9ybWFsSW5mbygpLm47CiAgICB2ZWMzIF85MTUgPSB2ZWMzKDAuMCk7CiAgICBmbG9hdCBfOTE2ID0gMC4wOwogICAgdmVjMyBfOTE3ID0gdmVjMygwLjApOwogICAgdmVjMyBfOTE4ID0gdmVjMygwLjApOwogICAgdmVjMyBfNTQ3ID0gXzUzMi54eXo7CiAgICBNYXRlcmlhbEluZm8gcGFyYW0gPSBNYXRlcmlhbEluZm8oMC4wLCB2ZWMzKDAuMCksIDAuMCwgdmVjMygwLjApLCB2ZWMzKDAuMCksIDAuMCwgdmVjMygwLjApLCBfNTQ3KTsKICAgIGZsb2F0IHBhcmFtXzEgPSAwLjAzOTk5OTk5OTEwNTkzMDMyODM2OTE0MDYyNTsKICAgIE1hdGVyaWFsSW5mbyBfNTU3ID0gZ2V0TWV0YWxsaWNSb3VnaG5lc3NJbmZvKHBhcmFtLCBwYXJhbV8xKTsKICAgIF85MTUgPSBfNTU3LmYwOwogICAgXzkxNyA9IF81NTcuYWxiZWRvQ29sb3I7CiAgICBmbG9hdCBfNTYwID0gY2xhbXAoXzU1Ny5wZXJjZXB0dWFsUm91Z2huZXNzLCAwLjAsIDEuMCk7CiAgICBfOTE2ID0gXzU2MCAqIF81NjA7CiAgICBfOTE4ID0gdmVjMyhjbGFtcChtYXgobWF4KF81NTcuZjAueCwgXzU1Ny5mMC55KSwgXzU1Ny5mMC56KSAqIDUwLjAsIDAuMCwgMS4wKSk7CiAgICB2ZWMzIGZfc3BlY3VsYXIgPSB2ZWMzKDAuMCk7CiAgICB2ZWMzIGZfZW1pc3NpdmUgPSB2ZWMzKDAuMCk7CiAgICB2ZWMzIGZfZGlmZnVzZSA9ICh1X2ZzX3BiclBhcmFtc1szXS54eXogKiBwb3codV9mc19wYnJQYXJhbXNbM10udywgMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSkgKiBfNTQ3OwogICAgdmVjNCBfNjA1ID0gZ2V0T2NjbHVzaW9uVGV4dHVyZSgpOwogICAgZmxvYXQgXzYwNiA9IF82MDUueDsKICAgIGZfZGlmZnVzZSAqPSBfNjA2OwogICAgZl9zcGVjdWxhciAqPSBfNjA2OwogICAgdmVjMyBfNjMzID0gbm9ybWFsaXplKHVfZnNfbGlnaHRpbmdbMjRdLnh5eiAtIHZfcG9zaXRpb24pOwogICAgdmVjMyBwb2ludFRvTGlnaHQ7CiAgICBmb3IgKGludCBpID0gMDsgaSA8IDY7IGkrKykKICAgIHsKICAgICAgICBpbnQgXzY0NiA9IGludCh1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMTJdLncpOwogICAgICAgIGlmICh1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgNl0udyA+IDAuMCkKICAgICAgICB7CiAgICAgICAgICAgIGlmIChfNjQ2ICE9IDApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHBvaW50VG9MaWdodCA9IHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxMl0ueHl6IC0gdl9wb3NpdGlvbjsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHBvaW50VG9MaWdodCA9IC11X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMF0ueHl6OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZlYzMgXzcwOCA9IG5vcm1hbGl6ZShwb2ludFRvTGlnaHQpOwogICAgICAgICAgICB2ZWMzIF83MTMgPSBub3JtYWxpemUoXzcwOCArIF82MzMpOwogICAgICAgICAgICB2ZWMzIHBhcmFtXzIgPSBfOTExOwogICAgICAgICAgICB2ZWMzIHBhcmFtXzMgPSBfNzA4OwogICAgICAgICAgICBmbG9hdCBfNzE5ID0gY2xhbXBlZERvdChwYXJhbV8yLCBwYXJhbV8zKTsKICAgICAgICAgICAgdmVjMyBwYXJhbV80ID0gXzkxMTsKICAgICAgICAgICAgdmVjMyBwYXJhbV81ID0gXzYzMzsKICAgICAgICAgICAgZmxvYXQgXzcyNSA9IGNsYW1wZWREb3QocGFyYW1fNCwgcGFyYW1fNSk7CiAgICAgICAgICAgIHZlYzMgcGFyYW1fNiA9IF85MTE7CiAgICAgICAgICAgIHZlYzMgcGFyYW1fNyA9IF83MTM7CiAgICAgICAgICAgIHZlYzMgcGFyYW1fOCA9IF83MDg7CiAgICAgICAgICAgIHZlYzMgcGFyYW1fOSA9IF83MTM7CiAgICAgICAgICAgIHZlYzMgcGFyYW1fMTAgPSBfNjMzOwogICAgICAgICAgICB2ZWMzIHBhcmFtXzExID0gXzcxMzsKICAgICAgICAgICAgZmxvYXQgXzc0MyA9IGNsYW1wZWREb3QocGFyYW1fMTAsIHBhcmFtXzExKTsKICAgICAgICAgICAgaWYgKChfNzE5ID4gMC4wKSB8fCAoXzcyNSA+IDAuMCkpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIExpZ2h0IHBhcmFtXzEyID0gTGlnaHQoXzY0NiwgdV9mc19saWdodGluZ1tpICogMSArIDBdLnh5eiwgdV9mc19saWdodGluZ1tpICogMSArIDZdLnh5eiwgdV9mc19saWdodGluZ1tpICogMSArIDEyXS54eXosIHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAwXS53LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgNl0udywgdV9mc19saWdodGluZ1tpICogMSArIDE4XS54LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMThdLnksICh1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMThdLnogPCAwLjApID8gZmFsc2UgOiB0cnVlLCBpbnQodV9mc19saWdodGluZ1tpICogMSArIDE4XS56KSwgaW50KHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxOF0udykpOwogICAgICAgICAgICAgICAgdmVjMyBwYXJhbV8xMyA9IHBvaW50VG9MaWdodDsKICAgICAgICAgICAgICAgIHZlYzMgXzc2MiA9IChnZXRMaWdoSW50ZW5zaXR5KHBhcmFtXzEyLCBwYXJhbV8xMykgKiAxLjApICogXzcxOTsKICAgICAgICAgICAgICAgIHZlYzMgcGFyYW1fMTQgPSBfOTE1OwogICAgICAgICAgICAgICAgdmVjMyBwYXJhbV8xNSA9IF85MTg7CiAgICAgICAgICAgICAgICB2ZWMzIHBhcmFtXzE2ID0gXzkxNzsKICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzE3ID0gXzc0MzsKICAgICAgICAgICAgICAgIGZfZGlmZnVzZSArPSAoXzc2MiAqIEJSREZfbGFtYmVydGlhbihwYXJhbV8xNCwgcGFyYW1fMTUsIHBhcmFtXzE2LCBwYXJhbV8xNykpOwogICAgICAgICAgICAgICAgdmVjMyBwYXJhbV8xOCA9IF85MTU7CiAgICAgICAgICAgICAgICB2ZWMzIHBhcmFtXzE5ID0gXzkxODsKICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzIwID0gXzkxNjsKICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzIxID0gXzc0MzsKICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzIyID0gXzcxOTsKICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzIzID0gXzcyNTsKICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzI0ID0gY2xhbXBlZERvdChwYXJhbV82LCBwYXJhbV83KTsKICAgICAgICAgICAgICAgIGZfc3BlY3VsYXIgKz0gKF83NjIgKiBCUkRGX3NwZWN1bGFyR0dYKHBhcmFtXzE4LCBwYXJhbV8xOSwgcGFyYW1fMjAsIHBhcmFtXzIxLCBwYXJhbV8yMiwgcGFyYW1fMjMsIHBhcmFtXzI0KSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBmX2VtaXNzaXZlID0gdV9mc19wYnJQYXJhbXNbMl0ueHl6OwogICAgdmVjMyBwYXJhbV8yNSA9IGdldEVtaXNzaXZlVGV4dHVyZSgpLnh5ejsKICAgIHZlYzMgXzgxMiA9IGZfZW1pc3NpdmU7CiAgICB2ZWMzIF84MTMgPSBfODEyICogc1JHQlRvTGluZWFyKHBhcmFtXzI1KTsKICAgIGZfZW1pc3NpdmUgPSBfODEzOwogICAgdmVjMyBjb2xvciA9IChfODEzICsgZl9kaWZmdXNlKSArIGZfc3BlY3VsYXI7CiAgICBpbnQgXzgyNiA9IGludCh1X2ZzX2ZvZ1swXS53KTsKICAgIGZsb2F0IGZvZ0ZhY3RvciA9IDAuMDsKICAgIGZsb2F0IF84NDggPSBnbF9GcmFnQ29vcmQueiAvIGdsX0ZyYWdDb29yZC53OwogICAgaWYgKF84MjYgPT0gMCkKICAgIHsKICAgICAgICBmb2dGYWN0b3IgPSAodV9mc19mb2dbMV0udyAtIF84NDgpIC8gKHVfZnNfZm9nWzFdLncgLSB1X2ZzX2ZvZ1sxXS56KTsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBpZiAoXzgyNiA9PSAxKQogICAgICAgIHsKICAgICAgICAgICAgZm9nRmFjdG9yID0gZXhwMigoKC11X2ZzX2ZvZ1sxXS54KSAqIF84NDgpICogMS40NDI2OTUwMjE2MjkzMzM0OTYwOTM3NSk7CiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgIGlmIChfODI2ID09IDIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGZvZ0ZhY3RvciA9IGV4cDIoKCgoKC11X2ZzX2ZvZ1sxXS54KSAqIHVfZnNfZm9nWzFdLngpICogXzg0OCkgKiBfODQ4KSAqIDEuNDQyNjk1MDIxNjI5MzMzNDk2MDkzNzUpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgZmxvYXQgXzg4NyA9IGZvZ0ZhY3RvcjsKICAgIGZsb2F0IF84ODggPSBjbGFtcChfODg3LCAwLjAsIDEuMCk7CiAgICBmb2dGYWN0b3IgPSBfODg4OwogICAgdmVjMyBfODkwID0gY29sb3I7CiAgICB2ZWMzIF84OTMgPSBtaXgodV9mc19mb2dbMF0ueHl6LCBfODkwLCB2ZWMzKF84ODgpKTsKICAgIGNvbG9yID0gXzg5MzsKICAgIHZlYzMgcGFyYW1fMjYgPSBfODkzOwogICAgZ19maW5hbENvbG9yID0gdmVjNChsaW5lYXJUb3NSR0IocGFyYW1fMjYpLCBfNTMyLncpOwp9CgpSRUZMHwQAAG1lc2hfVXYxUHVjTm9yVmM0Rm9nX2dsc2wzMzAAAAAAAAAAAAQAAAADAAAADQAAAHVfYmFzZUNvbG9yVGV4dHVyZQAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlAAAAAAAAAgAAAAEAAAAyRCAgVEZMVHVfb2NjbHVzaW9uVGV4dHVyZQAAAAAAAAAAAAAAAAAAAgAAAAIAAAAyRCAgVEZMVHVfZW1pc3NpdmVUZXh0dXJlAAAAAAAAAAAAAAAAAAAAAgAAAAMAAAAyRCAgVEZMVAYAAAB1X2ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAWJhc2VDb2xvckZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAAbWV0YWxsaWNGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABAAAAByb3VnaG5lc3NGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAFAAAAGVtaXNzaXZlRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAgAAAAYW1iaWVudExpZ2h0AAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAADAAAABhbWJpZW50RmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAPAAAAAUAAAB1X2ZzX2xpZ2h0aW5nAAAAAAAAAAAAAAAAAAAAAAAAAGxpZ2h0aW5nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAACQAQAAAWRpcmVjdGlvbl9yYW5nZQAAAAAAAAAAAAAAAAAAAAAARkxUNAYAAAAAAAAAY29sb3JfaW50ZW5zaXR5AAAAAAAAAAAAAAAAAAAAAABGTFQ0BgAAAGAAAABwb3NpdGlvbl90eXBlAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQGAAAAwAAAAGluQ29uZV9vdUNvbmVfc2hhZG93c19jYXNjYWRlcwAARkxUNAYAAAAgAQAAZXllUG9zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAIABAAACAAAAdV9mc19mb2cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmb2cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAIAAAAAFjb2xvcl90eXBlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAGRlbnNpdHlfc3RhcnRfZW5kAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAQAAAA";
static const std::string mesh_PucShwPcfNorTanMtaMnr_glsl330 = "";
static const std::string mesh_PucShwPcfNorTanMtaMnrMtg_glsl330 = "";
static const std::string mesh_Uv1PucNorNmpTanFog_glsl330 = "";
static const std::string mesh_UltUv1Fog_glsl330 = "U0JTIAAAAABkAAAAR0xTTEoBAAAAAFNUQUevBQAAVkVSVENPREX+AwAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwpsYXlvdXQobG9jYXRpb24gPSAwKSBpbiB2ZWMzIGFfcG9zaXRpb247Cm91dCB2ZWMzIHZfcG9zaXRpb247Cm91dCB2ZWMyIHZfdXYxOwpvdXQgdmVjMiB2X3V2MjsKbGF5b3V0KGxvY2F0aW9uID0gMSkgaW4gdmVjMiBhX3RleGNvb3JkMTsKCm1hdDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIHJldHVybiBtYXQ0KHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSk7Cn0KCnZlYzMgZ2V0TW9ycGhQb3NpdGlvbih2ZWMzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKdmVjMyBnZXRTa2luUG9zaXRpb24odmVjMyBwb3MsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKdmVjNCBnZXRQb3NpdGlvbihtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHZlYzMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgdmVjMyBwYXJhbV8xID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBtYXQ0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIHZlYzQoZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpLCAxLjApOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBtYXQ0IHBhcmFtID0gZ2V0Qm9uZVRyYW5zZm9ybSgpOwogICAgdmVjNCBfNjcgPSBnZXRQb3NpdGlvbihwYXJhbSk7CiAgICB2ZWM0IF83OCA9IG1hdDQodV92c19wYnJQYXJhbXNbMF0sIHVfdnNfcGJyUGFyYW1zWzFdLCB1X3ZzX3BiclBhcmFtc1syXSwgdV92c19wYnJQYXJhbXNbM10pICogXzY3OwogICAgdl9wb3NpdGlvbiA9IHZlYzMoXzc4Lnh5eikgLyB2ZWMzKF83OC53KTsKICAgIHZfdXYxID0gdmVjMigwLjApOwogICAgdl91djIgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MSA9IGFfdGV4Y29vcmQxOwogICAgZ2xfUG9zaXRpb24gPSBtYXQ0KHVfdnNfcGJyUGFyYW1zWzhdLCB1X3ZzX3BiclBhcmFtc1s5XSwgdV92c19wYnJQYXJhbXNbMTBdLCB1X3ZzX3BiclBhcmFtc1sxMV0pICogXzY3Owp9CgpSRUZMnQEAAG1lc2hfVWx0VXYxRm9nX2dsc2wzMzAAAAAAAAAAAAAAAgAAAAAAAAABAAAAAwAAAGFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDNhX3RleGNvb3JkMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABOT1JNQUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQyAwAAAHVfdnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAABbW9kZWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABub3JtYWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAQAAAAG12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAACAAAAAU1RBR1UFAABGUkFHQ09ERYgDAAAjdmVyc2lvbiAzMzAKCnVuaWZvcm0gdmVjNCB1X2ZzX3BiclBhcmFtc1s0XTsKdW5pZm9ybSBzYW1wbGVyMkQgdV9iYXNlQ29sb3JUZXh0dXJlOwoKaW4gdmVjMiB2X3V2MTsKaW4gdmVjMyB2X3Bvc2l0aW9uOwpsYXlvdXQobG9jYXRpb24gPSAwKSBvdXQgdmVjNCBnX2ZpbmFsQ29sb3I7CmluIHZlYzIgdl91djI7Cgp2ZWMzIHNSR0JUb0xpbmVhcih2ZWMzIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIHZlYzMoMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSk7Cn0KCnZlYzQgc1JHQlRvTGluZWFyKHZlYzQgc3JnYkluKQp7CiAgICB2ZWMzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiB2ZWM0KHNSR0JUb0xpbmVhcihwYXJhbSksIHNyZ2JJbi53KTsKfQoKdmVjNCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2ZWM0KDEuMCk7Cn0KCnZlYzQgZ2V0QmFzZUNvbG9yKCkKewogICAgdmVjNCBiYXNlQ29sb3IgPSB1X2ZzX3BiclBhcmFtc1swXTsKICAgIHZlYzQgcGFyYW0gPSB0ZXh0dXJlKHVfYmFzZUNvbG9yVGV4dHVyZSwgdl91djEpOwogICAgdmVjNCBfMTAwID0gYmFzZUNvbG9yOwogICAgdmVjNCBfMTAxID0gXzEwMCAqIHNSR0JUb0xpbmVhcihwYXJhbSk7CiAgICBiYXNlQ29sb3IgPSBfMTAxOwogICAgcmV0dXJuIF8xMDEgKiBnZXRWZXJ0ZXhDb2xvcigpOwp9Cgp2ZWMzIGxpbmVhclRvc1JHQih2ZWMzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCB2ZWMzKDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NSkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWM0IF8yNTYgPSBnZXRCYXNlQ29sb3IoKTsKICAgIHZlYzMgcGFyYW0gPSBfMjU2Lnh5ejsKICAgIGdfZmluYWxDb2xvciA9IHZlYzQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzI1Ni53KTsKfQoKUkVGTLkBAABtZXNoX1VsdFV2MUZvZ19nbHNsMzMwAAAAAAAAAAAAAAAAAAABAAAAAQAAAAYAAAB1X2Jhc2VDb2xvclRleHR1cmUAAAAAAAAAAAAAAAAAAAIAAAAAAAAAMkQgIFRGTFQGAAAAdV9mc19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFiYXNlQ29sb3JGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAG1ldGFsbGljRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAQAAAAcm91Z2huZXNzRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABQAAABlbWlzc2l2ZUZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAIAAAAGFtYmllbnRMaWdodAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAwAAAAYW1iaWVudEZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAADwAAAA=";
static const std::string mesh_UltUv1Vc4_glsl330 = "U0JTIAAAAABkAAAAR0xTTEoBAAAAAFNUQUdKBgAAVkVSVENPREVNBAAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwpsYXlvdXQobG9jYXRpb24gPSAwKSBpbiB2ZWMzIGFfcG9zaXRpb247Cm91dCB2ZWMzIHZfcG9zaXRpb247Cm91dCB2ZWMyIHZfdXYxOwpvdXQgdmVjMiB2X3V2MjsKbGF5b3V0KGxvY2F0aW9uID0gMSkgaW4gdmVjMiBhX3RleGNvb3JkMTsKb3V0IHZlYzQgdl9jb2xvcjsKbGF5b3V0KGxvY2F0aW9uID0gMikgaW4gdmVjNCBhX2NvbG9yOwoKbWF0NCBnZXRCb25lVHJhbnNmb3JtKCkKewogICAgcmV0dXJuIG1hdDQodmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSwgdmVjNCgwLjApKTsKfQoKdmVjMyBnZXRNb3JwaFBvc2l0aW9uKHZlYzMgcG9zKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2ZWMzIGdldFNraW5Qb3NpdGlvbih2ZWMzIHBvcywgbWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2ZWM0IGdldFBvc2l0aW9uKG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgdmVjMyBwYXJhbSA9IGFfcG9zaXRpb247CiAgICB2ZWMzIHBhcmFtXzEgPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIG1hdDQgcGFyYW1fMiA9IGJvbmVUcmFuc2Zvcm07CiAgICByZXR1cm4gdmVjNChnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMiksIDEuMCk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcGFyYW0gPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICB2ZWM0IF82NyA9IGdldFBvc2l0aW9uKHBhcmFtKTsKICAgIHZlYzQgXzc4ID0gbWF0NCh1X3ZzX3BiclBhcmFtc1swXSwgdV92c19wYnJQYXJhbXNbMV0sIHVfdnNfcGJyUGFyYW1zWzJdLCB1X3ZzX3BiclBhcmFtc1szXSkgKiBfNjc7CiAgICB2X3Bvc2l0aW9uID0gdmVjMyhfNzgueHl6KSAvIHZlYzMoXzc4LncpOwogICAgdl91djEgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MiA9IHZlYzIoMC4wKTsKICAgIHZfdXYxID0gYV90ZXhjb29yZDE7CiAgICB2X2NvbG9yID0gYV9jb2xvcjsKICAgIGdsX1Bvc2l0aW9uID0gbWF0NCh1X3ZzX3BiclBhcmFtc1s4XSwgdV92c19wYnJQYXJhbXNbOV0sIHVfdnNfcGJyUGFyYW1zWzEwXSwgdV92c19wYnJQYXJhbXNbMTFdKSAqIF82NzsKfQoKUkVGTOkBAABtZXNoX1VsdFV2MVZjNF9nbHNsMzMwAAAAAAAAAAAAAAMAAAAAAAAAAQAAAAMAAABhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV90ZXhjb29yZDEAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMmFfY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQDAAAAdV92c19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAFtb2RlbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAG5vcm1hbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAABAAAAAbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAIAAAABTVEFHZAUAAEZSQUdDT0RFlwMAACN2ZXJzaW9uIDMzMAoKdW5pZm9ybSB2ZWM0IHVfZnNfcGJyUGFyYW1zWzRdOwp1bmlmb3JtIHNhbXBsZXIyRCB1X2Jhc2VDb2xvclRleHR1cmU7CgppbiB2ZWM0IHZfY29sb3I7CmluIHZlYzIgdl91djE7CmluIHZlYzMgdl9wb3NpdGlvbjsKbGF5b3V0KGxvY2F0aW9uID0gMCkgb3V0IHZlYzQgZ19maW5hbENvbG9yOwppbiB2ZWMyIHZfdXYyOwoKdmVjMyBzUkdCVG9MaW5lYXIodmVjMyBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCB2ZWMzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9Cgp2ZWM0IHNSR0JUb0xpbmVhcih2ZWM0IHNyZ2JJbikKewogICAgdmVjMyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gdmVjNChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCnZlYzQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdl9jb2xvcjsKfQoKdmVjNCBnZXRCYXNlQ29sb3IoKQp7CiAgICB2ZWM0IGJhc2VDb2xvciA9IHVfZnNfcGJyUGFyYW1zWzBdOwogICAgdmVjNCBwYXJhbSA9IHRleHR1cmUodV9iYXNlQ29sb3JUZXh0dXJlLCB2X3V2MSk7CiAgICB2ZWM0IF8xMDMgPSBiYXNlQ29sb3I7CiAgICB2ZWM0IF8xMDQgPSBfMTAzICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8xMDQ7CiAgICByZXR1cm4gXzEwNCAqIGdldFZlcnRleENvbG9yKCk7Cn0KCnZlYzMgbGluZWFyVG9zUkdCKHZlYzMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIHZlYzMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIHZlYzQgXzI1OSA9IGdldEJhc2VDb2xvcigpOwogICAgdmVjMyBwYXJhbSA9IF8yNTkueHl6OwogICAgZ19maW5hbENvbG9yID0gdmVjNChsaW5lYXJUb3NSR0IocGFyYW0pLCBfMjU5LncpOwp9CgpSRUZMuQEAAG1lc2hfVWx0VXYxVmM0X2dsc2wzMzAAAAAAAAAAAAAAAAAAAAEAAAABAAAABgAAAHVfYmFzZUNvbG9yVGV4dHVyZQAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVAYAAAB1X2ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAWJhc2VDb2xvckZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAAbWV0YWxsaWNGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABAAAAByb3VnaG5lc3NGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAFAAAAGVtaXNzaXZlRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAgAAAAYW1iaWVudExpZ2h0AAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAADAAAABhbWJpZW50RmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAPAAAAA==";
static const std::string mesh_Uv1PucShwPcfNorFogSki_glsl330 = "";
static const std::string mesh_Uv1PucShwPcfNorNmpTanVc4_glsl330 = "";
static const std::string mesh_UltUv1Vc4Txr_glsl330 = "U0JTIAAAAABkAAAAR0xTTEoBAAAAAFNUQUc5BwAAVkVSVENPREW/BAAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwp1bmlmb3JtIHZlYzQgdV92c19zcHJpdGVQYXJhbXNbMV07CmxheW91dChsb2NhdGlvbiA9IDApIGluIHZlYzMgYV9wb3NpdGlvbjsKb3V0IHZlYzMgdl9wb3NpdGlvbjsKb3V0IHZlYzIgdl91djE7Cm91dCB2ZWMyIHZfdXYyOwpsYXlvdXQobG9jYXRpb24gPSAxKSBpbiB2ZWMyIGFfdGV4Y29vcmQxOwpvdXQgdmVjNCB2X2NvbG9yOwpsYXlvdXQobG9jYXRpb24gPSAyKSBpbiB2ZWM0IGFfY29sb3I7CgptYXQ0IGdldEJvbmVUcmFuc2Zvcm0oKQp7CiAgICByZXR1cm4gbWF0NCh2ZWM0KDAuMCksIHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCkpOwp9Cgp2ZWMzIGdldE1vcnBoUG9zaXRpb24odmVjMyBwb3MpCnsKICAgIHJldHVybiBwb3M7Cn0KCnZlYzMgZ2V0U2tpblBvc2l0aW9uKHZlYzMgcG9zLCBtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHJldHVybiBwb3M7Cn0KCnZlYzQgZ2V0UG9zaXRpb24obWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICB2ZWMzIHBhcmFtID0gYV9wb3NpdGlvbjsKICAgIHZlYzMgcGFyYW1fMSA9IGdldE1vcnBoUG9zaXRpb24ocGFyYW0pOwogICAgbWF0NCBwYXJhbV8yID0gYm9uZVRyYW5zZm9ybTsKICAgIHJldHVybiB2ZWM0KGdldFNraW5Qb3NpdGlvbihwYXJhbV8xLCBwYXJhbV8yKSwgMS4wKTsKfQoKdm9pZCBtYWluKCkKewogICAgbWF0NCBwYXJhbSA9IGdldEJvbmVUcmFuc2Zvcm0oKTsKICAgIHZlYzQgXzY3ID0gZ2V0UG9zaXRpb24ocGFyYW0pOwogICAgdmVjNCBfNzggPSBtYXQ0KHVfdnNfcGJyUGFyYW1zWzBdLCB1X3ZzX3BiclBhcmFtc1sxXSwgdV92c19wYnJQYXJhbXNbMl0sIHVfdnNfcGJyUGFyYW1zWzNdKSAqIF82NzsKICAgIHZfcG9zaXRpb24gPSB2ZWMzKF83OC54eXopIC8gdmVjMyhfNzgudyk7CiAgICB2X3V2MSA9IHZlYzIoMC4wKTsKICAgIHZfdXYyID0gdmVjMigwLjApOwogICAgdl91djEgPSBhX3RleGNvb3JkMTsKICAgIHZfdXYxID0gKGFfdGV4Y29vcmQxICogdV92c19zcHJpdGVQYXJhbXNbMF0uencpICsgdV92c19zcHJpdGVQYXJhbXNbMF0ueHk7CiAgICB2X2NvbG9yID0gYV9jb2xvcjsKICAgIGdsX1Bvc2l0aW9uID0gbWF0NCh1X3ZzX3BiclBhcmFtc1s4XSwgdV92c19wYnJQYXJhbXNbOV0sIHVfdnNfcGJyUGFyYW1zWzEwXSwgdV92c19wYnJQYXJhbXNbMTFdKSAqIF82NzsKfQoKUkVGTGYCAABtZXNoX1VsdFV2MVZjNFR4cl9nbHNsMzMwAAAAAAAAAAMAAAAAAAAAAgAAAAQAAABhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV90ZXhjb29yZDEAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMmFfY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQDAAAAdV92c19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAFtb2RlbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAG5vcm1hbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAABAAAAAbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAIAAAAABAAAAdV92c19zcHJpdGVQYXJhbXMAAAAAAAAAAAAAAAAAAABzcHJpdGVQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAEAAAAAF0ZXh0dXJlUmVjdAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAFNUQUdkBQAARlJBR0NPREWXAwAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV9mc19wYnJQYXJhbXNbNF07CnVuaWZvcm0gc2FtcGxlcjJEIHVfYmFzZUNvbG9yVGV4dHVyZTsKCmluIHZlYzQgdl9jb2xvcjsKaW4gdmVjMiB2X3V2MTsKaW4gdmVjMyB2X3Bvc2l0aW9uOwpsYXlvdXQobG9jYXRpb24gPSAwKSBvdXQgdmVjNCBnX2ZpbmFsQ29sb3I7CmluIHZlYzIgdl91djI7Cgp2ZWMzIHNSR0JUb0xpbmVhcih2ZWMzIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIHZlYzMoMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSk7Cn0KCnZlYzQgc1JHQlRvTGluZWFyKHZlYzQgc3JnYkluKQp7CiAgICB2ZWMzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiB2ZWM0KHNSR0JUb0xpbmVhcihwYXJhbSksIHNyZ2JJbi53KTsKfQoKdmVjNCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2X2NvbG9yOwp9Cgp2ZWM0IGdldEJhc2VDb2xvcigpCnsKICAgIHZlYzQgYmFzZUNvbG9yID0gdV9mc19wYnJQYXJhbXNbMF07CiAgICB2ZWM0IHBhcmFtID0gdGV4dHVyZSh1X2Jhc2VDb2xvclRleHR1cmUsIHZfdXYxKTsKICAgIHZlYzQgXzEwMyA9IGJhc2VDb2xvcjsKICAgIHZlYzQgXzEwNCA9IF8xMDMgKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzEwNDsKICAgIHJldHVybiBfMTA0ICogZ2V0VmVydGV4Q29sb3IoKTsKfQoKdmVjMyBsaW5lYXJUb3NSR0IodmVjMyBjb2xvcikKewogICAgcmV0dXJuIHBvdyhjb2xvciwgdmVjMygwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzUpKTsKfQoKdm9pZCBtYWluKCkKewogICAgdmVjNCBfMjU5ID0gZ2V0QmFzZUNvbG9yKCk7CiAgICB2ZWMzIHBhcmFtID0gXzI1OS54eXo7CiAgICBnX2ZpbmFsQ29sb3IgPSB2ZWM0KGxpbmVhclRvc1JHQihwYXJhbSksIF8yNTkudyk7Cn0KClJFRky5AQAAbWVzaF9VbHRVdjFWYzRUeHJfZ2xzbDMzMAAAAAAAAAAAAAAAAQAAAAEAAAAGAAAAdV9iYXNlQ29sb3JUZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUBgAAAHVfZnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABYmFzZUNvbG9yRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABtZXRhbGxpY0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAEAAAAHJvdWdobmVzc0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAUAAAAZW1pc3NpdmVGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAACAAAABhbWJpZW50TGlnaHQAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAMAAAAGFtYmllbnRGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAA8AAAA";
static const std::string mesh_Uv1PucNorNmpTan_glsl330 = "";
static const std::string points_TexVc4_glsl330 = "U0JTIAAAAABkAAAAR0xTTEoBAAAAAFNUQUcABAAAVkVSVENPREUPAgAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV92c19wb2ludHNQYXJhbXNbNF07Cm91dCBmbG9hdCB2X3BvaW50cm90YXRpb247CmxheW91dChsb2NhdGlvbiA9IDIpIGluIGZsb2F0IGFfcG9pbnRyb3RhdGlvbjsKb3V0IHZlYzQgdl9jb2xvcjsKbGF5b3V0KGxvY2F0aW9uID0gMykgaW4gdmVjNCBhX2NvbG9yOwpsYXlvdXQobG9jYXRpb24gPSAwKSBpbiB2ZWMzIGFfcG9zaXRpb247CmxheW91dChsb2NhdGlvbiA9IDEpIGluIGZsb2F0IGFfcG9pbnRzaXplOwoKdm9pZCBtYWluKCkKewogICAgdl9wb2ludHJvdGF0aW9uID0gYV9wb2ludHJvdGF0aW9uOwogICAgdl9jb2xvciA9IGFfY29sb3I7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c19wb2ludHNQYXJhbXNbMF0sIHVfdnNfcG9pbnRzUGFyYW1zWzFdLCB1X3ZzX3BvaW50c1BhcmFtc1syXSwgdV92c19wb2ludHNQYXJhbXNbM10pICogdmVjNChhX3Bvc2l0aW9uLCAxLjApOwogICAgZ2xfUG9pbnRTaXplID0gYV9wb2ludHNpemUgLyBnbF9Qb3NpdGlvbi53Owp9CgpSRUZM3QEAAHBvaW50c19UZXhWYzRfZ2xzbDMzMAAAAAAAAAAAAAAABAAAAAAAAAABAAAAAQAAAGFfcG9pbnRyb3RhdGlvbgAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDFhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABGTFQ0YV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfcG9pbnRzaXplAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAdV92c19wb2ludHNQYXJhbXMAAAAAAAAAAAAAAAAAAABwb2ludHNQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUcoBQAARlJBR0NPREW0BAAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHNhbXBsZXIyRCB1X3BvaW50c1RleHR1cmU7CgppbiB2ZWM0IHZfY29sb3I7CmluIGZsb2F0IHZfcG9pbnRyb3RhdGlvbjsKbGF5b3V0KGxvY2F0aW9uID0gMCkgb3V0IHZlYzQgZ19maW5hbENvbG9yOwoKdmVjMyBzUkdCVG9MaW5lYXIodmVjMyBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCB2ZWMzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9Cgp2ZWM0IHNSR0JUb0xpbmVhcih2ZWM0IHNyZ2JJbikKewogICAgdmVjMyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gdmVjNChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCnZlYzQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdl9jb2xvcjsKfQoKdmVjNCBnZXRCYXNlQ29sb3IoKQp7CiAgICB2ZWM0IGJhc2VDb2xvciA9IHZlYzQoMS4wKTsKICAgIHZlYzIgcmVzdWx0Q29vcmQgPSBnbF9Qb2ludENvb3JkOwogICAgaWYgKCEodl9wb2ludHJvdGF0aW9uID09IDAuMCkpCiAgICB7CiAgICAgICAgZmxvYXQgXzgzID0gY29zKHZfcG9pbnRyb3RhdGlvbik7CiAgICAgICAgZmxvYXQgXzg4ID0gcmVzdWx0Q29vcmQueCAtIDAuNTsKICAgICAgICBmbG9hdCBfOTEgPSBzaW4odl9wb2ludHJvdGF0aW9uKTsKICAgICAgICBmbG9hdCBfOTUgPSByZXN1bHRDb29yZC55IC0gMC41OwogICAgICAgIHJlc3VsdENvb3JkID0gdmVjMigoKF84MyAqIF84OCkgKyAoXzkxICogXzk1KSkgKyAwLjUsICgoXzgzICogXzk1KSAtIChfOTEgKiBfODgpKSArIDAuNSk7CiAgICB9CiAgICB2ZWM0IHBhcmFtID0gdGV4dHVyZSh1X3BvaW50c1RleHR1cmUsIHJlc3VsdENvb3JkKTsKICAgIHZlYzQgXzEyMyA9IGJhc2VDb2xvcjsKICAgIHZlYzQgXzEyNCA9IF8xMjMgKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzEyNDsKICAgIHJldHVybiBfMTI0ICogZ2V0VmVydGV4Q29sb3IoKTsKfQoKdmVjMyBsaW5lYXJUb3NSR0IodmVjMyBjb2xvcikKewogICAgcmV0dXJuIHBvdyhjb2xvciwgdmVjMygwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzUpKTsKfQoKdm9pZCBtYWluKCkKewogICAgdmVjNCBfMTMxID0gZ2V0QmFzZUNvbG9yKCk7CiAgICB2ZWMzIHBhcmFtID0gXzEzMS54eXo7CiAgICBnX2ZpbmFsQ29sb3IgPSB2ZWM0KGxpbmVhclRvc1JHQihwYXJhbSksIF8xMzEudyk7Cn0KClJFRkxgAAAAcG9pbnRzX1RleFZjNF9nbHNsMzMwAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAdV9wb2ludHNUZXh0dXJlAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxU";
static const std::string mesh_Uv1PucNor_glsl330 = "";
static const std::string depth_glsl330 = "U0JTIAAAAABkAAAAR0xTTEoBAAAAAFNUQUfZAwAAVkVSVENPREXMAgAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV92c19kZXB0aFBhcmFtc1s0XTsKbGF5b3V0KGxvY2F0aW9uID0gMCkgaW4gdmVjMyBhX3Bvc2l0aW9uOwpvdXQgdmVjMiB2X3Byb2paVzsKCnZlYzMgZ2V0TW9ycGhQb3NpdGlvbih2ZWMzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKbWF0NCBnZXRCb25lVHJhbnNmb3JtKCkKewogICAgcmV0dXJuIG1hdDQodmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSwgdmVjNCgwLjApKTsKfQoKdmVjMyBnZXRTa2luUG9zaXRpb24odmVjMyBwb3MsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKdm9pZCBtYWluKCkKewogICAgdmVjMyBwb3MgPSBhX3Bvc2l0aW9uOwogICAgdmVjMyBwYXJhbSA9IGFfcG9zaXRpb247CiAgICBwb3MgPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIHZlYzMgcGFyYW1fMSA9IHBvczsKICAgIG1hdDQgcGFyYW1fMiA9IGdldEJvbmVUcmFuc2Zvcm0oKTsKICAgIHZlYzMgXzQ4ID0gZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpOwogICAgcG9zID0gXzQ4OwogICAgZ2xfUG9zaXRpb24gPSBtYXQ0KHVfdnNfZGVwdGhQYXJhbXNbMF0sIHVfdnNfZGVwdGhQYXJhbXNbMV0sIHVfdnNfZGVwdGhQYXJhbXNbMl0sIHVfdnNfZGVwdGhQYXJhbXNbM10pICogdmVjNChfNDgsIDEuMCk7CiAgICB2X3Byb2paVyA9IGdsX1Bvc2l0aW9uLnp3Owp9CgpSRUZM+QAAAGRlcHRoX2dsc2wzMzAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAQAAAGFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAdV92c19kZXB0aFBhcmFtcwAAAAAAAAAAAAAAAAAAAABkZXB0aFBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFsaWdodE1WUE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUfyAQAARlJBR0NPREWuAQAAI3ZlcnNpb24gMzMwCgpsYXlvdXQobG9jYXRpb24gPSAwKSBvdXQgdmVjNCBmcmFnX2NvbG9yOwppbiB2ZWMyIHZfcHJvalpXOwoKdmVjNCBlbmNvZGVEZXB0aChmbG9hdCB2KQp7CiAgICB2ZWM0IF8yMyA9IGZyYWN0KHZlYzQoMS4wLCAyNTUuMCwgNjUwMjUuMCwgMTY1ODEzNzUuMCkgKiB2KTsKICAgIHJldHVybiBfMjMgLSAoXzIzLnl6d3cgKiB2ZWM0KDAuMDAzOTIxNTY4ODU5MzY4NTYyNjk4MzY0MjU3ODEyNSwgMC4wMDM5MjE1Njg4NTkzNjg1NjI2OTgzNjQyNTc4MTI1LCAwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjUsIDAuMCkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBmbG9hdCBwYXJhbSA9ICgoMC41ICogdl9wcm9qWlcueCkgLyB2X3Byb2paVy55KSArIDAuNTsKICAgIGZyYWdfY29sb3IgPSBlbmNvZGVEZXB0aChwYXJhbSk7Cn0KClJFRkwwAAAAZGVwdGhfZ2xzbDMzMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
static const std::string mesh_Uv1PucShwPcfNorNmpTan_glsl330 = "";
static const std::string mesh_PucShwPcfNorTanFogMtaMnr_glsl330 = "";
static const std::string mesh_Uv1PucNorNmpTanVc4Fog_glsl330 = "";
static const std::string mesh_Uv1PucNorNmpTanVc4Ski_glsl330 = "";
static const std::string mesh_Uv1PucNorNmpTanVc4FogSki_glsl330 = "";
static const std::string mesh_UltUv1Vc4TxrFog_glsl330 = "U0JTIAAAAABkAAAAR0xTTEoBAAAAAFNUQUc5BwAAVkVSVENPREW/BAAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwp1bmlmb3JtIHZlYzQgdV92c19zcHJpdGVQYXJhbXNbMV07CmxheW91dChsb2NhdGlvbiA9IDApIGluIHZlYzMgYV9wb3NpdGlvbjsKb3V0IHZlYzMgdl9wb3NpdGlvbjsKb3V0IHZlYzIgdl91djE7Cm91dCB2ZWMyIHZfdXYyOwpsYXlvdXQobG9jYXRpb24gPSAxKSBpbiB2ZWMyIGFfdGV4Y29vcmQxOwpvdXQgdmVjNCB2X2NvbG9yOwpsYXlvdXQobG9jYXRpb24gPSAyKSBpbiB2ZWM0IGFfY29sb3I7CgptYXQ0IGdldEJvbmVUcmFuc2Zvcm0oKQp7CiAgICByZXR1cm4gbWF0NCh2ZWM0KDAuMCksIHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCkpOwp9Cgp2ZWMzIGdldE1vcnBoUG9zaXRpb24odmVjMyBwb3MpCnsKICAgIHJldHVybiBwb3M7Cn0KCnZlYzMgZ2V0U2tpblBvc2l0aW9uKHZlYzMgcG9zLCBtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHJldHVybiBwb3M7Cn0KCnZlYzQgZ2V0UG9zaXRpb24obWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICB2ZWMzIHBhcmFtID0gYV9wb3NpdGlvbjsKICAgIHZlYzMgcGFyYW1fMSA9IGdldE1vcnBoUG9zaXRpb24ocGFyYW0pOwogICAgbWF0NCBwYXJhbV8yID0gYm9uZVRyYW5zZm9ybTsKICAgIHJldHVybiB2ZWM0KGdldFNraW5Qb3NpdGlvbihwYXJhbV8xLCBwYXJhbV8yKSwgMS4wKTsKfQoKdm9pZCBtYWluKCkKewogICAgbWF0NCBwYXJhbSA9IGdldEJvbmVUcmFuc2Zvcm0oKTsKICAgIHZlYzQgXzY3ID0gZ2V0UG9zaXRpb24ocGFyYW0pOwogICAgdmVjNCBfNzggPSBtYXQ0KHVfdnNfcGJyUGFyYW1zWzBdLCB1X3ZzX3BiclBhcmFtc1sxXSwgdV92c19wYnJQYXJhbXNbMl0sIHVfdnNfcGJyUGFyYW1zWzNdKSAqIF82NzsKICAgIHZfcG9zaXRpb24gPSB2ZWMzKF83OC54eXopIC8gdmVjMyhfNzgudyk7CiAgICB2X3V2MSA9IHZlYzIoMC4wKTsKICAgIHZfdXYyID0gdmVjMigwLjApOwogICAgdl91djEgPSBhX3RleGNvb3JkMTsKICAgIHZfdXYxID0gKGFfdGV4Y29vcmQxICogdV92c19zcHJpdGVQYXJhbXNbMF0uencpICsgdV92c19zcHJpdGVQYXJhbXNbMF0ueHk7CiAgICB2X2NvbG9yID0gYV9jb2xvcjsKICAgIGdsX1Bvc2l0aW9uID0gbWF0NCh1X3ZzX3BiclBhcmFtc1s4XSwgdV92c19wYnJQYXJhbXNbOV0sIHVfdnNfcGJyUGFyYW1zWzEwXSwgdV92c19wYnJQYXJhbXNbMTFdKSAqIF82NzsKfQoKUkVGTGYCAABtZXNoX1VsdFV2MVZjNFR4ckZvZ19nbHNsMzMwAAAAAAMAAAAAAAAAAgAAAAQAAABhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV90ZXhjb29yZDEAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMmFfY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQDAAAAdV92c19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAFtb2RlbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAG5vcm1hbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAABAAAAAbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAIAAAAABAAAAdV92c19zcHJpdGVQYXJhbXMAAAAAAAAAAAAAAAAAAABzcHJpdGVQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAEAAAAAF0ZXh0dXJlUmVjdAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAFNUQUdkBQAARlJBR0NPREWXAwAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV9mc19wYnJQYXJhbXNbNF07CnVuaWZvcm0gc2FtcGxlcjJEIHVfYmFzZUNvbG9yVGV4dHVyZTsKCmluIHZlYzQgdl9jb2xvcjsKaW4gdmVjMiB2X3V2MTsKaW4gdmVjMyB2X3Bvc2l0aW9uOwpsYXlvdXQobG9jYXRpb24gPSAwKSBvdXQgdmVjNCBnX2ZpbmFsQ29sb3I7CmluIHZlYzIgdl91djI7Cgp2ZWMzIHNSR0JUb0xpbmVhcih2ZWMzIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIHZlYzMoMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSk7Cn0KCnZlYzQgc1JHQlRvTGluZWFyKHZlYzQgc3JnYkluKQp7CiAgICB2ZWMzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiB2ZWM0KHNSR0JUb0xpbmVhcihwYXJhbSksIHNyZ2JJbi53KTsKfQoKdmVjNCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2X2NvbG9yOwp9Cgp2ZWM0IGdldEJhc2VDb2xvcigpCnsKICAgIHZlYzQgYmFzZUNvbG9yID0gdV9mc19wYnJQYXJhbXNbMF07CiAgICB2ZWM0IHBhcmFtID0gdGV4dHVyZSh1X2Jhc2VDb2xvclRleHR1cmUsIHZfdXYxKTsKICAgIHZlYzQgXzEwMyA9IGJhc2VDb2xvcjsKICAgIHZlYzQgXzEwNCA9IF8xMDMgKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzEwNDsKICAgIHJldHVybiBfMTA0ICogZ2V0VmVydGV4Q29sb3IoKTsKfQoKdmVjMyBsaW5lYXJUb3NSR0IodmVjMyBjb2xvcikKewogICAgcmV0dXJuIHBvdyhjb2xvciwgdmVjMygwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzUpKTsKfQoKdm9pZCBtYWluKCkKewogICAgdmVjNCBfMjU5ID0gZ2V0QmFzZUNvbG9yKCk7CiAgICB2ZWMzIHBhcmFtID0gXzI1OS54eXo7CiAgICBnX2ZpbmFsQ29sb3IgPSB2ZWM0KGxpbmVhclRvc1JHQihwYXJhbSksIF8yNTkudyk7Cn0KClJFRky5AQAAbWVzaF9VbHRVdjFWYzRUeHJGb2dfZ2xzbDMzMAAAAAAAAAAAAQAAAAEAAAAGAAAAdV9iYXNlQ29sb3JUZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUBgAAAHVfZnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABYmFzZUNvbG9yRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABtZXRhbGxpY0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAEAAAAHJvdWdobmVzc0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAUAAAAZW1pc3NpdmVGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAACAAAABhbWJpZW50TGlnaHQAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAMAAAAGFtYmllbnRGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAA8AAAA";
static const std::string mesh_Uv1PucShwPcfNorFog_glsl330 = "";
static const std::string ui_TexVc4_glsl330 = "U0JTIAAAAABkAAAAR0xTTEoBAAAAAFNUQUcnAwAAVkVSVENPREWCAQAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV92c191aVBhcmFtc1s0XTsKb3V0IHZlYzQgdl9jb2xvcjsKbGF5b3V0KGxvY2F0aW9uID0gMSkgaW4gdmVjNCBhX2NvbG9yOwpvdXQgdmVjMiB2X3V2MTsKbGF5b3V0KGxvY2F0aW9uID0gMikgaW4gdmVjMiBhX3RleGNvb3JkMTsKbGF5b3V0KGxvY2F0aW9uID0gMCkgaW4gdmVjMyBhX3Bvc2l0aW9uOwoKdm9pZCBtYWluKCkKewogICAgdl9jb2xvciA9IGFfY29sb3I7CiAgICB2X3V2MSA9IGFfdGV4Y29vcmQxOwogICAgZ2xfUG9zaXRpb24gPSBtYXQ0KHVfdnNfdWlQYXJhbXNbMF0sIHVfdnNfdWlQYXJhbXNbMV0sIHVfdnNfdWlQYXJhbXNbMl0sIHVfdnNfdWlQYXJhbXNbM10pICogdmVjNChhX3Bvc2l0aW9uLCAxLjApOwp9CgpSRUZMkQEAAHVpX1RleFZjNF9nbHNsMzMwAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAABAAAAAQAAAGFfY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDRhX3RleGNvb3JkMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQyYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAB1X3ZzX3VpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAHVpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAW12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAU1RBR00EAABGUkFHQ09ERVwDAAAjdmVyc2lvbiAzMzAKCnVuaWZvcm0gdmVjNCB1X2ZzX3VpUGFyYW1zWzFdOwp1bmlmb3JtIHNhbXBsZXIyRCB1X3VpVGV4dHVyZTsKCmluIHZlYzQgdl9jb2xvcjsKaW4gdmVjMiB2X3V2MTsKbGF5b3V0KGxvY2F0aW9uID0gMCkgb3V0IHZlYzQgZ19maW5hbENvbG9yOwoKdmVjMyBzUkdCVG9MaW5lYXIodmVjMyBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCB2ZWMzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9Cgp2ZWM0IHNSR0JUb0xpbmVhcih2ZWM0IHNyZ2JJbikKewogICAgdmVjMyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gdmVjNChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCnZlYzQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdl9jb2xvcjsKfQoKdmVjNCBnZXRCYXNlQ29sb3IoKQp7CiAgICB2ZWM0IGJhc2VDb2xvciA9IHVfZnNfdWlQYXJhbXNbMF07CiAgICB2ZWM0IHBhcmFtID0gdGV4dHVyZSh1X3VpVGV4dHVyZSwgdl91djEpOwogICAgdmVjNCBfODggPSBiYXNlQ29sb3I7CiAgICB2ZWM0IF84OSA9IF84OCAqIHNSR0JUb0xpbmVhcihwYXJhbSk7CiAgICBiYXNlQ29sb3IgPSBfODk7CiAgICByZXR1cm4gXzg5ICogZ2V0VmVydGV4Q29sb3IoKTsKfQoKdmVjMyBsaW5lYXJUb3NSR0IodmVjMyBjb2xvcikKewogICAgcmV0dXJuIHBvdyhjb2xvciwgdmVjMygwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzUpKTsKfQoKdm9pZCBtYWluKCkKewogICAgdmVjNCBfOTYgPSBnZXRCYXNlQ29sb3IoKTsKICAgIHZlYzMgcGFyYW0gPSBfOTYueHl6OwogICAgZ19maW5hbENvbG9yID0gdmVjNChsaW5lYXJUb3NSR0IocGFyYW0pLCBfOTYudyk7Cn0KClJFRkzdAAAAdWlfVGV4VmM0X2dsc2wzMzAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAdV91aVRleHR1cmUAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUAQAAAHVfZnNfdWlQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAdWlQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAABY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAAA=";
static const std::string mesh_Uv1PucShwPcfNorSki_glsl330 = "";
static const std::string mesh_Uv1PucShwPcfNorVc4_glsl330 = "";
static const std::string sky_glsl330 = "U0JTIAAAAABkAAAAR0xTTEoBAAAAAFNUQUcbAgAAVkVSVENPREUOAQAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV92c19za3lQYXJhbXNbNF07Cm91dCB2ZWMzIHV2OwpsYXlvdXQobG9jYXRpb24gPSAwKSBpbiB2ZWMzIGFfcG9zaXRpb247Cgp2b2lkIG1haW4oKQp7CiAgICB1diA9IGFfcG9zaXRpb247CiAgICBnbF9Qb3NpdGlvbiA9IChtYXQ0KHVfdnNfc2t5UGFyYW1zWzBdLCB1X3ZzX3NreVBhcmFtc1sxXSwgdV92c19za3lQYXJhbXNbMl0sIHVfdnNfc2t5UGFyYW1zWzNdKSAqIHZlYzQoYV9wb3NpdGlvbiwgMS4wKSkueHl3dzsKfQoKUkVGTPkAAABza3lfZ2xzbDMzMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAQAAAAEAAABhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAAHVfdnNfc2t5UGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAc2t5UGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABTVEFHygEAAEZSQUdDT0RF2QAAACN2ZXJzaW9uIDMzMAoKdW5pZm9ybSB2ZWM0IHVfZnNfc2t5UGFyYW1zWzFdOwp1bmlmb3JtIHNhbXBsZXJDdWJlIHVfc2t5VGV4dHVyZTsKCmxheW91dChsb2NhdGlvbiA9IDApIG91dCB2ZWM0IGZyYWdfY29sb3I7CmluIHZlYzMgdXY7Cgp2b2lkIG1haW4oKQp7CiAgICBmcmFnX2NvbG9yID0gdV9mc19za3lQYXJhbXNbMF0gKiB0ZXh0dXJlKHVfc2t5VGV4dHVyZSwgdXYpOwp9CgpSRUZM3QAAAHNreV9nbHNsMzMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAQAAAHVfc2t5VGV4dHVyZQAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAABDVUJFVEZMVAEAAAB1X2ZzX3NreVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHNreVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAWNvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAA";
static const std::string mesh_Uv1PucShwPcfNorNmpTanFog_glsl330 = "";
static const std::string mesh_PucShwPcfNorTanFogMtaMnrMtg_glsl330 = "";
static const std::string mesh_Uv1PucNorFog_glsl330 = "";
static const std::string points_TexVc4Txr_glsl330 = "U0JTIAAAAABkAAAAR0xTTEoBAAAAAFNUQUezBAAAVkVSVENPREV2AgAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV92c19wb2ludHNQYXJhbXNbNF07Cm91dCBmbG9hdCB2X3BvaW50cm90YXRpb247CmxheW91dChsb2NhdGlvbiA9IDIpIGluIGZsb2F0IGFfcG9pbnRyb3RhdGlvbjsKb3V0IHZlYzQgdl9jb2xvcjsKbGF5b3V0KGxvY2F0aW9uID0gMykgaW4gdmVjNCBhX2NvbG9yOwpvdXQgdmVjNCB2X3RleHR1cmVyZWN0OwpsYXlvdXQobG9jYXRpb24gPSA0KSBpbiB2ZWM0IGFfdGV4dHVyZXJlY3Q7CmxheW91dChsb2NhdGlvbiA9IDApIGluIHZlYzMgYV9wb3NpdGlvbjsKbGF5b3V0KGxvY2F0aW9uID0gMSkgaW4gZmxvYXQgYV9wb2ludHNpemU7Cgp2b2lkIG1haW4oKQp7CiAgICB2X3BvaW50cm90YXRpb24gPSBhX3BvaW50cm90YXRpb247CiAgICB2X2NvbG9yID0gYV9jb2xvcjsKICAgIHZfdGV4dHVyZXJlY3QgPSBhX3RleHR1cmVyZWN0OwogICAgZ2xfUG9zaXRpb24gPSBtYXQ0KHVfdnNfcG9pbnRzUGFyYW1zWzBdLCB1X3ZzX3BvaW50c1BhcmFtc1sxXSwgdV92c19wb2ludHNQYXJhbXNbMl0sIHVfdnNfcG9pbnRzUGFyYW1zWzNdKSAqIHZlYzQoYV9wb3NpdGlvbiwgMS4wKTsKICAgIGdsX1BvaW50U2l6ZSA9IGFfcG9pbnRzaXplIC8gZ2xfUG9zaXRpb24udzsKfQoKUkVGTCkCAABwb2ludHNfVGV4VmM0VHhyX2dsc2wzMzAAAAAAAAAAAAUAAAAAAAAAAQAAAAEAAABhX3BvaW50cm90YXRpb24AAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQxYV9jb2xvcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAARkxUNGFfdGV4dHVyZXJlY3QAAAAAAAAAAAAAAAAAAAAAAAAABAAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAEZMVDRhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV9wb2ludHNpemUAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAB1X3ZzX3BvaW50c1BhcmFtcwAAAAAAAAAAAAAAAAAAAHBvaW50c1BhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAW12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAU1RBR6sFAABGUkFHQ09ERTcFAAAjdmVyc2lvbiAzMzAKCnVuaWZvcm0gc2FtcGxlcjJEIHVfcG9pbnRzVGV4dHVyZTsKCmluIHZlYzQgdl9jb2xvcjsKaW4gZmxvYXQgdl9wb2ludHJvdGF0aW9uOwppbiB2ZWM0IHZfdGV4dHVyZXJlY3Q7CmxheW91dChsb2NhdGlvbiA9IDApIG91dCB2ZWM0IGdfZmluYWxDb2xvcjsKCnZlYzMgc1JHQlRvTGluZWFyKHZlYzMgc3JnYkluKQp7CiAgICByZXR1cm4gcG93KHNyZ2JJbiwgdmVjMygyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjUpKTsKfQoKdmVjNCBzUkdCVG9MaW5lYXIodmVjNCBzcmdiSW4pCnsKICAgIHZlYzMgcGFyYW0gPSBzcmdiSW4ueHl6OwogICAgcmV0dXJuIHZlYzQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9Cgp2ZWM0IGdldFZlcnRleENvbG9yKCkKewogICAgcmV0dXJuIHZfY29sb3I7Cn0KCnZlYzQgZ2V0QmFzZUNvbG9yKCkKewogICAgdmVjNCBiYXNlQ29sb3IgPSB2ZWM0KDEuMCk7CiAgICB2ZWMyIHJlc3VsdENvb3JkID0gZ2xfUG9pbnRDb29yZDsKICAgIGlmICghKHZfcG9pbnRyb3RhdGlvbiA9PSAwLjApKQogICAgewogICAgICAgIGZsb2F0IF84MyA9IGNvcyh2X3BvaW50cm90YXRpb24pOwogICAgICAgIGZsb2F0IF84OCA9IHJlc3VsdENvb3JkLnggLSAwLjU7CiAgICAgICAgZmxvYXQgXzkxID0gc2luKHZfcG9pbnRyb3RhdGlvbik7CiAgICAgICAgZmxvYXQgXzk1ID0gcmVzdWx0Q29vcmQueSAtIDAuNTsKICAgICAgICByZXN1bHRDb29yZCA9IHZlYzIoKChfODMgKiBfODgpICsgKF85MSAqIF85NSkpICsgMC41LCAoKF84MyAqIF85NSkgLSAoXzkxICogXzg4KSkgKyAwLjUpOwogICAgfQogICAgdmVjMiBfMTE0ID0gcmVzdWx0Q29vcmQ7CiAgICB2ZWMyIF8xMjEgPSAoXzExNCAqIHZfdGV4dHVyZXJlY3QuencpICsgdl90ZXh0dXJlcmVjdC54eTsKICAgIHJlc3VsdENvb3JkID0gXzEyMTsKICAgIHZlYzQgcGFyYW0gPSB0ZXh0dXJlKHVfcG9pbnRzVGV4dHVyZSwgXzEyMSk7CiAgICB2ZWM0IF8xMzEgPSBiYXNlQ29sb3I7CiAgICB2ZWM0IF8xMzIgPSBfMTMxICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8xMzI7CiAgICByZXR1cm4gXzEzMiAqIGdldFZlcnRleENvbG9yKCk7Cn0KCnZlYzMgbGluZWFyVG9zUkdCKHZlYzMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIHZlYzMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIHZlYzQgXzEzOSA9IGdldEJhc2VDb2xvcigpOwogICAgdmVjMyBwYXJhbSA9IF8xMzkueHl6OwogICAgZ19maW5hbENvbG9yID0gdmVjNChsaW5lYXJUb3NSR0IocGFyYW0pLCBfMTM5LncpOwp9CgpSRUZMYAAAAHBvaW50c19UZXhWYzRUeHJfZ2xzbDMzMAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAHVfcG9pbnRzVGV4dHVyZQAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVA==";
static const std::string mesh_UltUv1_glsl330 = "U0JTIAAAAABkAAAAR0xTTEoBAAAAAFNUQUevBQAAVkVSVENPREX+AwAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwpsYXlvdXQobG9jYXRpb24gPSAwKSBpbiB2ZWMzIGFfcG9zaXRpb247Cm91dCB2ZWMzIHZfcG9zaXRpb247Cm91dCB2ZWMyIHZfdXYxOwpvdXQgdmVjMiB2X3V2MjsKbGF5b3V0KGxvY2F0aW9uID0gMSkgaW4gdmVjMiBhX3RleGNvb3JkMTsKCm1hdDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIHJldHVybiBtYXQ0KHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSk7Cn0KCnZlYzMgZ2V0TW9ycGhQb3NpdGlvbih2ZWMzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKdmVjMyBnZXRTa2luUG9zaXRpb24odmVjMyBwb3MsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKdmVjNCBnZXRQb3NpdGlvbihtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHZlYzMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgdmVjMyBwYXJhbV8xID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBtYXQ0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIHZlYzQoZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpLCAxLjApOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBtYXQ0IHBhcmFtID0gZ2V0Qm9uZVRyYW5zZm9ybSgpOwogICAgdmVjNCBfNjcgPSBnZXRQb3NpdGlvbihwYXJhbSk7CiAgICB2ZWM0IF83OCA9IG1hdDQodV92c19wYnJQYXJhbXNbMF0sIHVfdnNfcGJyUGFyYW1zWzFdLCB1X3ZzX3BiclBhcmFtc1syXSwgdV92c19wYnJQYXJhbXNbM10pICogXzY3OwogICAgdl9wb3NpdGlvbiA9IHZlYzMoXzc4Lnh5eikgLyB2ZWMzKF83OC53KTsKICAgIHZfdXYxID0gdmVjMigwLjApOwogICAgdl91djIgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MSA9IGFfdGV4Y29vcmQxOwogICAgZ2xfUG9zaXRpb24gPSBtYXQ0KHVfdnNfcGJyUGFyYW1zWzhdLCB1X3ZzX3BiclBhcmFtc1s5XSwgdV92c19wYnJQYXJhbXNbMTBdLCB1X3ZzX3BiclBhcmFtc1sxMV0pICogXzY3Owp9CgpSRUZMnQEAAG1lc2hfVWx0VXYxX2dsc2wzMzAAAAAAAAAAAAAAAAAAAgAAAAAAAAABAAAAAwAAAGFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDNhX3RleGNvb3JkMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABOT1JNQUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQyAwAAAHVfdnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAABbW9kZWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABub3JtYWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAQAAAAG12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAACAAAAAU1RBR1UFAABGUkFHQ09ERYgDAAAjdmVyc2lvbiAzMzAKCnVuaWZvcm0gdmVjNCB1X2ZzX3BiclBhcmFtc1s0XTsKdW5pZm9ybSBzYW1wbGVyMkQgdV9iYXNlQ29sb3JUZXh0dXJlOwoKaW4gdmVjMiB2X3V2MTsKaW4gdmVjMyB2X3Bvc2l0aW9uOwpsYXlvdXQobG9jYXRpb24gPSAwKSBvdXQgdmVjNCBnX2ZpbmFsQ29sb3I7CmluIHZlYzIgdl91djI7Cgp2ZWMzIHNSR0JUb0xpbmVhcih2ZWMzIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIHZlYzMoMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSk7Cn0KCnZlYzQgc1JHQlRvTGluZWFyKHZlYzQgc3JnYkluKQp7CiAgICB2ZWMzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiB2ZWM0KHNSR0JUb0xpbmVhcihwYXJhbSksIHNyZ2JJbi53KTsKfQoKdmVjNCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2ZWM0KDEuMCk7Cn0KCnZlYzQgZ2V0QmFzZUNvbG9yKCkKewogICAgdmVjNCBiYXNlQ29sb3IgPSB1X2ZzX3BiclBhcmFtc1swXTsKICAgIHZlYzQgcGFyYW0gPSB0ZXh0dXJlKHVfYmFzZUNvbG9yVGV4dHVyZSwgdl91djEpOwogICAgdmVjNCBfMTAwID0gYmFzZUNvbG9yOwogICAgdmVjNCBfMTAxID0gXzEwMCAqIHNSR0JUb0xpbmVhcihwYXJhbSk7CiAgICBiYXNlQ29sb3IgPSBfMTAxOwogICAgcmV0dXJuIF8xMDEgKiBnZXRWZXJ0ZXhDb2xvcigpOwp9Cgp2ZWMzIGxpbmVhclRvc1JHQih2ZWMzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCB2ZWMzKDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NSkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWM0IF8yNTYgPSBnZXRCYXNlQ29sb3IoKTsKICAgIHZlYzMgcGFyYW0gPSBfMjU2Lnh5ejsKICAgIGdfZmluYWxDb2xvciA9IHZlYzQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzI1Ni53KTsKfQoKUkVGTLkBAABtZXNoX1VsdFV2MV9nbHNsMzMwAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAYAAAB1X2Jhc2VDb2xvclRleHR1cmUAAAAAAAAAAAAAAAAAAAIAAAAAAAAAMkQgIFRGTFQGAAAAdV9mc19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFiYXNlQ29sb3JGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAG1ldGFsbGljRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAQAAAAcm91Z2huZXNzRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABQAAABlbWlzc2l2ZUZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAIAAAAGFtYmllbnRMaWdodAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAwAAAAYW1iaWVudEZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAADwAAAA=";
static const std::string mesh_PucShwPcfNor_glsl330 = "U0JTIAAAAABkAAAAR0xTTEoBAAAAAFNUQUdpCQAAVkVSVENPREU7BwAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwp1bmlmb3JtIHZlYzQgdV92c19zaGFkb3dzWzI0XTsKbGF5b3V0KGxvY2F0aW9uID0gMCkgaW4gdmVjMyBhX3Bvc2l0aW9uOwpsYXlvdXQobG9jYXRpb24gPSAxKSBpbiB2ZWMzIGFfbm9ybWFsOwpvdXQgdmVjMyB2X3Bvc2l0aW9uOwpvdXQgdmVjMyB2X25vcm1hbDsKb3V0IHZlYzIgdl91djE7Cm91dCB2ZWMyIHZfdXYyOwpvdXQgdmVjNCB2X2xpZ2h0UHJvalBvc1s2XTsKb3V0IGZsb2F0IHZfY2xpcFNwYWNlUG9zWjsKCm1hdDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIHJldHVybiBtYXQ0KHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSk7Cn0KCnZlYzMgZ2V0TW9ycGhQb3NpdGlvbih2ZWMzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKdmVjMyBnZXRTa2luUG9zaXRpb24odmVjMyBwb3MsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKdmVjNCBnZXRQb3NpdGlvbihtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHZlYzMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgdmVjMyBwYXJhbV8xID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBtYXQ0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIHZlYzQoZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpLCAxLjApOwp9Cgp2ZWMzIGdldE1vcnBoTm9ybWFsKHZlYzMgbm9ybWFsKQp7CiAgICByZXR1cm4gbm9ybWFsOwp9Cgp2ZWMzIGdldFNraW5Ob3JtYWwodmVjMyBub3JtYWwsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIG5vcm1hbDsKfQoKdmVjMyBnZXROb3JtYWwobWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICB2ZWMzIHBhcmFtID0gYV9ub3JtYWw7CiAgICB2ZWMzIHBhcmFtXzEgPSBnZXRNb3JwaE5vcm1hbChwYXJhbSk7CiAgICBtYXQ0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIG5vcm1hbGl6ZShnZXRTa2luTm9ybWFsKHBhcmFtXzEsIHBhcmFtXzIpKTsKfQoKdm9pZCBtYWluKCkKewogICAgbWF0NCBfOTQgPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICBtYXQ0IHBhcmFtID0gXzk0OwogICAgdmVjNCBfOTkgPSBnZXRQb3NpdGlvbihwYXJhbSk7CiAgICB2ZWM0IF8xMTAgPSBtYXQ0KHVfdnNfcGJyUGFyYW1zWzBdLCB1X3ZzX3BiclBhcmFtc1sxXSwgdV92c19wYnJQYXJhbXNbMl0sIHVfdnNfcGJyUGFyYW1zWzNdKSAqIF85OTsKICAgIHZfcG9zaXRpb24gPSB2ZWMzKF8xMTAueHl6KSAvIHZlYzMoXzExMC53KTsKICAgIG1hdDQgcGFyYW1fMSA9IF85NDsKICAgIHZfbm9ybWFsID0gbm9ybWFsaXplKHZlYzMoKG1hdDQodV92c19wYnJQYXJhbXNbNF0sIHVfdnNfcGJyUGFyYW1zWzVdLCB1X3ZzX3BiclBhcmFtc1s2XSwgdV92c19wYnJQYXJhbXNbN10pICogdmVjNChnZXROb3JtYWwocGFyYW1fMSksIDAuMCkpLnh5eikpOwogICAgdl91djEgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MiA9IHZlYzIoMC4wKTsKICAgIGZvciAoaW50IGkgPSAwOyBpIDwgNjsgaSsrKQogICAgewogICAgICAgIHZfbGlnaHRQcm9qUG9zW2ldID0gbWF0NCh1X3ZzX3NoYWRvd3NbaSAqIDQgKyAwXSwgdV92c19zaGFkb3dzW2kgKiA0ICsgMV0sIHVfdnNfc2hhZG93c1tpICogNCArIDJdLCB1X3ZzX3NoYWRvd3NbaSAqIDQgKyAzXSkgKiBfMTEwOwogICAgfQogICAgZ2xfUG9zaXRpb24gPSBtYXQ0KHVfdnNfcGJyUGFyYW1zWzhdLCB1X3ZzX3BiclBhcmFtc1s5XSwgdV92c19wYnJQYXJhbXNbMTBdLCB1X3ZzX3BiclBhcmFtc1sxMV0pICogXzk5OwogICAgdl9jbGlwU3BhY2VQb3NaID0gZ2xfUG9zaXRpb24uejsKfQoKUkVGTBoCAABtZXNoX1B1Y1Nod1BjZk5vcl9nbHNsMzMwAAAAAAAAAAIAAAAAAAAAAgAAAAQAAABhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV9ub3JtYWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwMAAAB1X3ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAW1vZGVsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAbm9ybWFsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAEAAAABtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAgAAAAAEAAAB1X3ZzX3NoYWRvd3MAAAAAAAAAAAAAAAAAAAAAAAAAAF8xNjcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAACAAQAAAWxpZ2h0VlBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAYAAAAAAAAAU1RBR/xLAABGUkFHQ09ERaVGAAAjdmVyc2lvbiAzMzAKCnN0cnVjdCBNYXRlcmlhbEluZm8KewogICAgZmxvYXQgcGVyY2VwdHVhbFJvdWdobmVzczsKICAgIHZlYzMgZjA7CiAgICBmbG9hdCBhbHBoYVJvdWdobmVzczsKICAgIHZlYzMgYWxiZWRvQ29sb3I7CiAgICB2ZWMzIGY5MDsKICAgIGZsb2F0IG1ldGFsbGljOwogICAgdmVjMyBuOwogICAgdmVjMyBiYXNlQ29sb3I7Cn07CgpzdHJ1Y3QgTm9ybWFsSW5mbwp7CiAgICB2ZWMzIG5nOwogICAgdmVjMyBuOwogICAgdmVjMyB0OwogICAgdmVjMyBiOwp9OwoKc3RydWN0IExpZ2h0CnsKICAgIGludCB0eXBlOwogICAgdmVjMyBkaXJlY3Rpb247CiAgICB2ZWMzIGNvbG9yOwogICAgdmVjMyBwb3NpdGlvbjsKICAgIGZsb2F0IHJhbmdlOwogICAgZmxvYXQgaW50ZW5zaXR5OwogICAgZmxvYXQgaW5uZXJDb25lQ29zOwogICAgZmxvYXQgb3V0ZXJDb25lQ29zOwogICAgYm9vbCBzaGFkb3dzOwogICAgaW50IHNoYWRvd01hcEluZGV4OwogICAgaW50IG51bVNoYWRvd0Nhc2NhZGVzOwp9OwoKc3RydWN0IFNoYWRvdwp7CiAgICBmbG9hdCBtYXhCaWFzOwogICAgZmxvYXQgbWluQmlhczsKICAgIHZlYzIgbWFwU2l6ZTsKICAgIHZlYzIgbmVhckZhcjsKICAgIHZlYzQgbGlnaHRQcm9qUG9zOwp9OwoKdW5pZm9ybSB2ZWM0IHVfZnNfcGJyUGFyYW1zWzRdOwp1bmlmb3JtIHZlYzQgdV9mc19zaGFkb3dzWzddOwp1bmlmb3JtIHZlYzQgdV9mc19saWdodGluZ1syNV07CnVuaWZvcm0gc2FtcGxlcjJEIHVfYmFzZUNvbG9yVGV4dHVyZTsKdW5pZm9ybSBzYW1wbGVyMkQgdV9tZXRhbGxpY1JvdWdobmVzc1RleHR1cmU7CnVuaWZvcm0gc2FtcGxlcjJEIHVfb2NjbHVzaW9uVGV4dHVyZTsKdW5pZm9ybSBzYW1wbGVyMkQgdV9lbWlzc2l2ZVRleHR1cmU7CnVuaWZvcm0gc2FtcGxlcjJEIHVfc2hhZG93TWFwMTsKdW5pZm9ybSBzYW1wbGVyMkQgdV9zaGFkb3dNYXAyOwp1bmlmb3JtIHNhbXBsZXIyRCB1X3NoYWRvd01hcDM7CnVuaWZvcm0gc2FtcGxlcjJEIHVfc2hhZG93TWFwNDsKdW5pZm9ybSBzYW1wbGVyMkQgdV9zaGFkb3dNYXA1Owp1bmlmb3JtIHNhbXBsZXIyRCB1X3NoYWRvd01hcDY7CnVuaWZvcm0gc2FtcGxlckN1YmUgdV9zaGFkb3dDdWJlTWFwMTsKCmluIHZlYzIgdl91djE7CmluIHZlYzMgdl9wb3NpdGlvbjsKaW4gdmVjMyB2X25vcm1hbDsKaW4gdmVjNCB2X2xpZ2h0UHJvalBvc1s2XTsKaW4gZmxvYXQgdl9jbGlwU3BhY2VQb3NaOwpsYXlvdXQobG9jYXRpb24gPSAwKSBvdXQgdmVjNCBnX2ZpbmFsQ29sb3I7CmluIHZlYzIgdl91djI7Cgp2ZWMzIHNSR0JUb0xpbmVhcih2ZWMzIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIHZlYzMoMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSk7Cn0KCnZlYzQgc1JHQlRvTGluZWFyKHZlYzQgc3JnYkluKQp7CiAgICB2ZWMzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiB2ZWM0KHNSR0JUb0xpbmVhcihwYXJhbSksIHNyZ2JJbi53KTsKfQoKdmVjNCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2ZWM0KDEuMCk7Cn0KCnZlYzQgZ2V0QmFzZUNvbG9yKCkKewogICAgdmVjNCBiYXNlQ29sb3IgPSB1X2ZzX3BiclBhcmFtc1swXTsKICAgIHZlYzQgcGFyYW0gPSB0ZXh0dXJlKHVfYmFzZUNvbG9yVGV4dHVyZSwgdl91djEpOwogICAgdmVjNCBfMjMyID0gYmFzZUNvbG9yOwogICAgdmVjNCBfMjMzID0gXzIzMiAqIHNSR0JUb0xpbmVhcihwYXJhbSk7CiAgICBiYXNlQ29sb3IgPSBfMjMzOwogICAgcmV0dXJuIF8yMzMgKiBnZXRWZXJ0ZXhDb2xvcigpOwp9CgpOb3JtYWxJbmZvIGdldE5vcm1hbEluZm8oKQp7CiAgICB2ZWMzIF8zMTQgPSB2ZWMzKHZfdXYxLCAwLjApOwogICAgdmVjMyBfMzE1ID0gZEZkeChfMzE0KTsKICAgIHZlYzMgXzMyMSA9IGRGZHkoXzMxNCk7CiAgICBmbG9hdCBfMzI0ID0gXzMyMS55OwogICAgZmxvYXQgXzMzMSA9IF8zMTUueTsKICAgIHZlYzMgXzM0OSA9ICgoZEZkeCh2X3Bvc2l0aW9uKSAqIF8zMjQpIC0gKGRGZHkodl9wb3NpdGlvbikgKiBfMzMxKSkgLyB2ZWMzKChfMzE1LnggKiBfMzI0KSAtIChfMzIxLnggKiBfMzMxKSk7CiAgICB2ZWMzIF8zNTMgPSBub3JtYWxpemUodl9ub3JtYWwpOwogICAgdmVjMyBfMzYyID0gbm9ybWFsaXplKF8zNDkgLSAoXzM1MyAqIGRvdChfMzUzLCBfMzQ5KSkpOwogICAgcmV0dXJuIE5vcm1hbEluZm8oXzM1MywgXzM1MywgXzM2MiwgY3Jvc3MoXzM1MywgXzM2MikpOwp9CgpNYXRlcmlhbEluZm8gZ2V0TWV0YWxsaWNSb3VnaG5lc3NJbmZvKGlub3V0IE1hdGVyaWFsSW5mbyBpbmZvLCBmbG9hdCBmMF9pb3IpCnsKICAgIGluZm8ubWV0YWxsaWMgPSB1X2ZzX3BiclBhcmFtc1sxXS54OwogICAgaW5mby5wZXJjZXB0dWFsUm91Z2huZXNzID0gdV9mc19wYnJQYXJhbXNbMV0ueTsKICAgIHZlYzQgXzI1MyA9IHRleHR1cmUodV9tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUsIHZfdXYxKTsKICAgIGluZm8ucGVyY2VwdHVhbFJvdWdobmVzcyAqPSBfMjUzLnk7CiAgICBpbmZvLm1ldGFsbGljICo9IF8yNTMuejsKICAgIHZlYzMgXzI3MCA9IHZlYzMoZjBfaW9yKTsKICAgIGluZm8uYWxiZWRvQ29sb3IgPSBtaXgoaW5mby5iYXNlQ29sb3IgKiAodmVjMygxLjApIC0gXzI3MCksIHZlYzMoMC4wKSwgdmVjMyhpbmZvLm1ldGFsbGljKSk7CiAgICBpbmZvLmYwID0gbWl4KF8yNzAsIGluZm8uYmFzZUNvbG9yLCB2ZWMzKGluZm8ubWV0YWxsaWMpKTsKICAgIHJldHVybiBpbmZvOwp9Cgp2ZWM0IGdldE9jY2x1c2lvblRleHR1cmUoKQp7CiAgICByZXR1cm4gdGV4dHVyZSh1X29jY2x1c2lvblRleHR1cmUsIHZfdXYxKTsKfQoKZmxvYXQgY2xhbXBlZERvdCh2ZWMzIHgsIHZlYzMgeSkKewogICAgcmV0dXJuIGNsYW1wKGRvdCh4LCB5KSwgMC4wLCAxLjApOwp9CgpTaGFkb3cgZ2V0U2hhZG93MkRDb25mKGludCBpbmRleCkKewogICAgZm9yIChpbnQgaSA9IDA7IGkgPCA2OyBpKyspCiAgICB7CiAgICAgICAgaWYgKGkgPT0gaW5kZXgpCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gU2hhZG93KHVfZnNfc2hhZG93c1tpICogMSArIDBdLngsIHVfZnNfc2hhZG93c1tpICogMSArIDBdLnggKiAwLjEwMDAwMDAwMTQ5MDExNjExOTM4NDc2NTYyNSwgdV9mc19zaGFkb3dzW2kgKiAxICsgMF0ueXksIHVfZnNfc2hhZG93c1tpICogMSArIDBdLnp3LCB2X2xpZ2h0UHJvalBvc1tpXSk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIFNoYWRvdygwLjAsIDAuMCwgdmVjMigwLjApLCB2ZWMyKDAuMCksIHZlYzQoMC4wKSk7Cn0KCnZlYzQgZ2V0U2hhZG93TWFwKGludCBpbmRleCwgdmVjMiBjb29yZHMpCnsKICAgIGlmIChpbmRleCA9PSAwKQogICAgewogICAgICAgIHJldHVybiB0ZXh0dXJlKHVfc2hhZG93TWFwMSwgY29vcmRzKTsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBpZiAoaW5kZXggPT0gMSkKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlKHVfc2hhZG93TWFwMiwgY29vcmRzKTsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgaWYgKGluZGV4ID09IDIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlKHVfc2hhZG93TWFwMywgY29vcmRzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSAzKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlKHVfc2hhZG93TWFwNCwgY29vcmRzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT0gNCkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlKHVfc2hhZG93TWFwNSwgY29vcmRzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IDUpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlKHVfc2hhZG93TWFwNiwgY29vcmRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiB2ZWM0KDAuMCk7Cn0KCmZsb2F0IGRlY29kZURlcHRoKHZlYzQgcmdiYSkKewogICAgcmV0dXJuIGRvdChyZ2JhLCB2ZWM0KDEuMCwgMC4wMDM5MjE1Njg4NTkzNjg1NjI2OTgzNjQyNTc4MTI1LCAxLjUzNzg3MDA0ODE5NjA1NDk5NTA1OTk2NzA0MTAxNTZlLTA1LCA2LjAzMDg2MjkyMDE2OTk2NTk0NjExNTU1MzM3OTA1ODhlLTA4KSk7Cn0KCmZsb2F0IHNoYWRvd0NvbXBhcmUoaW50IHNoYWRvd01hcEluZGV4LCBmbG9hdCBjdXJyZW50RGVwdGgsIGZsb2F0IGJpYXMsIHZlYzIgdGV4Q29vcmRzKQp7CiAgICBpbnQgcGFyYW0gPSBzaGFkb3dNYXBJbmRleDsKICAgIHZlYzIgcGFyYW1fMSA9IHRleENvb3JkczsKICAgIHZlYzQgcGFyYW1fMiA9IGdldFNoYWRvd01hcChwYXJhbSwgcGFyYW1fMSk7CiAgICByZXR1cm4gZmxvYXQoKGN1cnJlbnREZXB0aCAtIGJpYXMpID4gZGVjb2RlRGVwdGgocGFyYW1fMikpOwp9CgpmbG9hdCBzaGFkb3dDYWxjdWxhdGlvbkF1eChpbnQgc2hhZG93TWFwSW5kZXgsIFNoYWRvdyBzaGFkb3dDb25mLCBmbG9hdCBOZG90TCkKewogICAgZmxvYXQgc2hhZG93ID0gMC4wOwogICAgdmVjMyBfODE2ID0gKChzaGFkb3dDb25mLmxpZ2h0UHJvalBvcy54eXogLyB2ZWMzKHNoYWRvd0NvbmYubGlnaHRQcm9qUG9zLncpKSAqIDAuNSkgKyB2ZWMzKDAuNSk7CiAgICBmbG9hdCBfODE5ID0gXzgxNi56OwogICAgZmxvYXQgXzgyOCA9IG1heChzaGFkb3dDb25mLm1heEJpYXMgKiAoMS4wIC0gTmRvdEwpLCBzaGFkb3dDb25mLm1pbkJpYXMpOwogICAgdmVjMiBfODMzID0gdmVjMigxLjApIC8gc2hhZG93Q29uZi5tYXBTaXplOwogICAgZm9yIChpbnQgeCA9IC0xOyB4IDw9IDE7IHgrKykKICAgIHsKICAgICAgICBmb3IgKGludCB5ID0gLTE7IHkgPD0gMTsgeSsrKQogICAgICAgIHsKICAgICAgICAgICAgaW50IHBhcmFtID0gc2hhZG93TWFwSW5kZXg7CiAgICAgICAgICAgIGZsb2F0IHBhcmFtXzEgPSBfODE5OwogICAgICAgICAgICBmbG9hdCBwYXJhbV8yID0gXzgyODsKICAgICAgICAgICAgdmVjMiBwYXJhbV8zID0gXzgxNi54eSArICh2ZWMyKGZsb2F0KHgpLCBmbG9hdCh5KSkgKiBfODMzKTsKICAgICAgICAgICAgc2hhZG93ICs9IHNoYWRvd0NvbXBhcmUocGFyYW0sIHBhcmFtXzEsIHBhcmFtXzIsIHBhcmFtXzMpOwogICAgICAgIH0KICAgIH0KICAgIHNoYWRvdyAqPSAwLjExMTExMTExMTkzODk1MzM5OTY1ODIwMzEyNTsKICAgIGlmIChfODE5ID4gMS4wKQogICAgewogICAgICAgIHNoYWRvdyA9IDAuMDsKICAgIH0KICAgIHJldHVybiBzaGFkb3c7Cn0KCmZsb2F0IHNoYWRvd0NhbGN1bGF0aW9uUENGKGludCBzaGFkb3dNYXBJbmRleCwgZmxvYXQgTmRvdEwpCnsKICAgIGludCBwYXJhbSA9IHNoYWRvd01hcEluZGV4OwogICAgaW50IHBhcmFtXzEgPSBzaGFkb3dNYXBJbmRleDsKICAgIFNoYWRvdyBwYXJhbV8yID0gZ2V0U2hhZG93MkRDb25mKHBhcmFtKTsKICAgIGZsb2F0IHBhcmFtXzMgPSBOZG90TDsKICAgIHJldHVybiBzaGFkb3dDYWxjdWxhdGlvbkF1eChwYXJhbV8xLCBwYXJhbV8yLCBwYXJhbV8zKTsKfQoKZmxvYXQgc2hhZG93Q2FzY2FkZWRDYWxjdWxhdGlvblBDRihpbnQgc2hhZG93TWFwSW5kZXgsIGludCBudW1TaGFkb3dDYXNjYWRlcywgZmxvYXQgTmRvdEwpCnsKICAgIGZvciAoaW50IGMgPSAwOyBjIDwgNDsgYysrKQogICAgewogICAgICAgIGlmIChjIDwgbnVtU2hhZG93Q2FzY2FkZXMpCiAgICAgICAgewogICAgICAgICAgICBpbnQgXzkxNSA9IHNoYWRvd01hcEluZGV4ICsgYzsKICAgICAgICAgICAgaW50IHBhcmFtID0gXzkxNTsKICAgICAgICAgICAgU2hhZG93IF85MTkgPSBnZXRTaGFkb3cyRENvbmYocGFyYW0pOwogICAgICAgICAgICB2ZWMyIF8xNjE0ID0gXzkxOS5uZWFyRmFyOwogICAgICAgICAgICBib29sIF85MjUgPSB2X2NsaXBTcGFjZVBvc1ogPj0gXzE2MTQueDsKICAgICAgICAgICAgYm9vbCBfOTMyOwogICAgICAgICAgICBpZiAoXzkyNSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgXzkzMiA9IHZfY2xpcFNwYWNlUG9zWiA8PSBfMTYxNC55OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgXzkzMiA9IF85MjU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKF85MzIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGludCBwYXJhbV8xID0gXzkxNTsKICAgICAgICAgICAgICAgIFNoYWRvdyBwYXJhbV8yID0gXzkxOTsKICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzMgPSBOZG90TDsKICAgICAgICAgICAgICAgIHJldHVybiBzaGFkb3dDYWxjdWxhdGlvbkF1eChwYXJhbV8xLCBwYXJhbV8yLCBwYXJhbV8zKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiAwLjA7Cn0KClNoYWRvdyBnZXRTaGFkb3dDdWJlQ29uZihpbnQgaW5kZXgpCnsKICAgIGZvciAoaW50IGkgPSA2OyBpIDwgNzsgaSsrKQogICAgewogICAgICAgIGlmIChpID09IGluZGV4KQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIFNoYWRvdyh1X2ZzX3NoYWRvd3NbaSAqIDEgKyAwXS54LCB1X2ZzX3NoYWRvd3NbaSAqIDEgKyAwXS54ICogMC4xMDAwMDAwMDE0OTAxMTYxMTkzODQ3NjU2MjUsIHVfZnNfc2hhZG93c1tpICogMSArIDBdLnl5LCB1X2ZzX3NoYWRvd3NbaSAqIDEgKyAwXS56dywgdmVjNCgwLjApKTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gU2hhZG93KDAuMCwgMC4wLCB2ZWMyKDAuMCksIHZlYzIoMC4wKSwgdmVjNCgwLjApKTsKfQoKZmxvYXQgZGlzdGFuY2VUb0RlcHRoVmFsdWUodmVjMyBfZGlzdGFuY2UsIHZlYzIgY2FsY05lYXJGYXIpCnsKICAgIHZlYzMgXzk0OSA9IGFicyhfZGlzdGFuY2UpOwogICAgcmV0dXJuIGNhbGNOZWFyRmFyLnggKyAoY2FsY05lYXJGYXIueSAvIG1heChfOTQ5LngsIG1heChfOTQ5LnksIF85NDkueikpKTsKfQoKdmVjNCBnZXRTaGFkb3dDdWJlTWFwKGlub3V0IGludCBpbmRleCwgdmVjMyBjb29yZHMpCnsKICAgIGluZGV4IC09IDY7CiAgICBpZiAoaW5kZXggPT0gMCkKICAgIHsKICAgICAgICByZXR1cm4gdGV4dHVyZSh1X3NoYWRvd0N1YmVNYXAxLCBjb29yZHMpOwogICAgfQogICAgZWxzZQogICAgewogICAgfQogICAgcmV0dXJuIHZlYzQoMC4wKTsKfQoKZmxvYXQgc2hhZG93Q3ViZUNvbXBhcmUoaW50IHNoYWRvd01hcEluZGV4LCBmbG9hdCBjdXJyZW50RGVwdGgsIGZsb2F0IGJpYXMsIHZlYzMgdGV4Q29vcmRzKQp7CiAgICBpbnQgcGFyYW0gPSBzaGFkb3dNYXBJbmRleDsKICAgIHZlYzMgcGFyYW1fMSA9IHRleENvb3JkczsKICAgIHZlYzQgXzk3MyA9IGdldFNoYWRvd0N1YmVNYXAocGFyYW0sIHBhcmFtXzEpOwogICAgdmVjNCBwYXJhbV8yID0gXzk3MzsKICAgIGlmICgoY3VycmVudERlcHRoIC0gYmlhcykgPiBkZWNvZGVEZXB0aChwYXJhbV8yKSkKICAgIHsKICAgICAgICByZXR1cm4gMS4wOwogICAgfQogICAgcmV0dXJuIDAuMDsKfQoKZmxvYXQgc2hhZG93Q3ViZUNhbGN1bGF0aW9uUENGKGludCBzaGFkb3dNYXBJbmRleCwgdmVjMyBmcmFnVG9MaWdodCwgZmxvYXQgTmRvdEwpCnsKICAgIGludCBwYXJhbSA9IHNoYWRvd01hcEluZGV4OwogICAgU2hhZG93IF85ODkgPSBnZXRTaGFkb3dDdWJlQ29uZihwYXJhbSk7CiAgICB2ZWMzIHBhcmFtXzEgPSBmcmFnVG9MaWdodDsKICAgIHZlYzIgcGFyYW1fMiA9IF85ODkubmVhckZhcjsKICAgIGZsb2F0IF85OTYgPSBkaXN0YW5jZVRvRGVwdGhWYWx1ZShwYXJhbV8xLCBwYXJhbV8yKTsKICAgIGZsb2F0IHNoYWRvdyA9IDAuMDsKICAgIGZsb2F0IF8xMDA2ID0gbWF4KF85ODkubWF4QmlhcyAqICgxLjAgLSBOZG90TCksIF85ODkubWluQmlhcyk7CiAgICBmbG9hdCBfMTAxMSA9IGxlbmd0aChmcmFnVG9MaWdodCkgKiAwLjAwMDUwMDAwMDAyMzc0ODcyNTY1MjY5NDcwMjE0ODQzNzU7CiAgICBpbnQgcGFyYW1fMyA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fNCA9IF85OTY7CiAgICBmbG9hdCBwYXJhbV81ID0gXzEwMDY7CiAgICB2ZWMzIHBhcmFtXzYgPSBmcmFnVG9MaWdodDsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8zLCBwYXJhbV80LCBwYXJhbV81LCBwYXJhbV82KTsKICAgIGludCBwYXJhbV83ID0gc2hhZG93TWFwSW5kZXg7CiAgICBmbG9hdCBwYXJhbV84ID0gXzk5NjsKICAgIGZsb2F0IHBhcmFtXzkgPSBfMTAwNjsKICAgIHZlYzMgcGFyYW1fMTAgPSBmcmFnVG9MaWdodCArICh2ZWMzKDEuMCkgKiBfMTAxMSk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fNywgcGFyYW1fOCwgcGFyYW1fOSwgcGFyYW1fMTApOwogICAgaW50IHBhcmFtXzExID0gc2hhZG93TWFwSW5kZXg7CiAgICBmbG9hdCBwYXJhbV8xMiA9IF85OTY7CiAgICBmbG9hdCBwYXJhbV8xMyA9IF8xMDA2OwogICAgdmVjMyBwYXJhbV8xNCA9IGZyYWdUb0xpZ2h0ICsgKHZlYzMoMS4wLCAtMS4wLCAxLjApICogXzEwMTEpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzExLCBwYXJhbV8xMiwgcGFyYW1fMTMsIHBhcmFtXzE0KTsKICAgIGludCBwYXJhbV8xNSA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fMTYgPSBfOTk2OwogICAgZmxvYXQgcGFyYW1fMTcgPSBfMTAwNjsKICAgIHZlYzMgcGFyYW1fMTggPSBmcmFnVG9MaWdodCArICh2ZWMzKC0xLjAsIC0xLjAsIDEuMCkgKiBfMTAxMSk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMTUsIHBhcmFtXzE2LCBwYXJhbV8xNywgcGFyYW1fMTgpOwogICAgaW50IHBhcmFtXzE5ID0gc2hhZG93TWFwSW5kZXg7CiAgICBmbG9hdCBwYXJhbV8yMCA9IF85OTY7CiAgICBmbG9hdCBwYXJhbV8yMSA9IF8xMDA2OwogICAgdmVjMyBwYXJhbV8yMiA9IGZyYWdUb0xpZ2h0ICsgKHZlYzMoLTEuMCwgMS4wLCAxLjApICogXzEwMTEpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzE5LCBwYXJhbV8yMCwgcGFyYW1fMjEsIHBhcmFtXzIyKTsKICAgIGludCBwYXJhbV8yMyA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fMjQgPSBfOTk2OwogICAgZmxvYXQgcGFyYW1fMjUgPSBfMTAwNjsKICAgIHZlYzMgcGFyYW1fMjYgPSBmcmFnVG9MaWdodCArICh2ZWMzKDEuMCwgMS4wLCAtMS4wKSAqIF8xMDExKTsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8yMywgcGFyYW1fMjQsIHBhcmFtXzI1LCBwYXJhbV8yNik7CiAgICBpbnQgcGFyYW1fMjcgPSBzaGFkb3dNYXBJbmRleDsKICAgIGZsb2F0IHBhcmFtXzI4ID0gXzk5NjsKICAgIGZsb2F0IHBhcmFtXzI5ID0gXzEwMDY7CiAgICB2ZWMzIHBhcmFtXzMwID0gZnJhZ1RvTGlnaHQgKyAodmVjMygxLjAsIC0xLjAsIC0xLjApICogXzEwMTEpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzI3LCBwYXJhbV8yOCwgcGFyYW1fMjksIHBhcmFtXzMwKTsKICAgIGludCBwYXJhbV8zMSA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fMzIgPSBfOTk2OwogICAgZmxvYXQgcGFyYW1fMzMgPSBfMTAwNjsKICAgIHZlYzMgcGFyYW1fMzQgPSBmcmFnVG9MaWdodCArICh2ZWMzKC0xLjApICogXzEwMTEpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzMxLCBwYXJhbV8zMiwgcGFyYW1fMzMsIHBhcmFtXzM0KTsKICAgIGludCBwYXJhbV8zNSA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fMzYgPSBfOTk2OwogICAgZmxvYXQgcGFyYW1fMzcgPSBfMTAwNjsKICAgIHZlYzMgcGFyYW1fMzggPSBmcmFnVG9MaWdodCArICh2ZWMzKC0xLjAsIDEuMCwgLTEuMCkgKiBfMTAxMSk7CiAgICBmbG9hdCBfMTE0NCA9IHNoYWRvdzsKICAgIGZsb2F0IF8xMTQ3ID0gKF8xMTQ0ICsgc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMzUsIHBhcmFtXzM2LCBwYXJhbV8zNywgcGFyYW1fMzgpKSAqIDAuMTExMTExMTExOTM4OTUzMzk5NjU4MjAzMTI1OwogICAgc2hhZG93ID0gXzExNDc7CiAgICByZXR1cm4gXzExNDc7Cn0KCmZsb2F0IGdldFJhbmdlQXR0ZW51YXRpb24oZmxvYXQgcmFuZ2UsIGZsb2F0IF9kaXN0YW5jZSkKewogICAgaWYgKHJhbmdlIDw9IDAuMCkKICAgIHsKICAgICAgICByZXR1cm4gMS4wIC8gcG93KF9kaXN0YW5jZSwgMi4wKTsKICAgIH0KICAgIHJldHVybiBtYXgobWluKDEuMCAtIHBvdyhfZGlzdGFuY2UgLyByYW5nZSwgNC4wKSwgMS4wKSwgMC4wKSAvIHBvdyhfZGlzdGFuY2UsIDIuMCk7Cn0KCmZsb2F0IGdldFNwb3RBdHRlbnVhdGlvbih2ZWMzIHBvaW50VG9MaWdodCwgdmVjMyBzcG90RGlyZWN0aW9uLCBmbG9hdCBvdXRlckNvbmVDb3MsIGZsb2F0IGlubmVyQ29uZUNvcykKewogICAgZmxvYXQgXzUzMCA9IGRvdChub3JtYWxpemUoc3BvdERpcmVjdGlvbiksIG5vcm1hbGl6ZSgtcG9pbnRUb0xpZ2h0KSk7CiAgICBpZiAoXzUzMCA+IG91dGVyQ29uZUNvcykKICAgIHsKICAgICAgICBpZiAoXzUzMCA8IGlubmVyQ29uZUNvcykKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiBzbW9vdGhzdGVwKG91dGVyQ29uZUNvcywgaW5uZXJDb25lQ29zLCBfNTMwKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIDEuMDsKICAgIH0KICAgIHJldHVybiAwLjA7Cn0KCnZlYzMgZ2V0TGlnaEludGVuc2l0eShMaWdodCBsaWdodCwgdmVjMyBwb2ludFRvTGlnaHQpCnsKICAgIGZsb2F0IHJhbmdlQXR0ZW51YXRpb24gPSAxLjA7CiAgICBmbG9hdCBzcG90QXR0ZW51YXRpb24gPSAxLjA7CiAgICBpZiAobGlnaHQudHlwZSAhPSAwKQogICAgewogICAgICAgIGZsb2F0IHBhcmFtID0gbGlnaHQucmFuZ2U7CiAgICAgICAgZmxvYXQgcGFyYW1fMSA9IGxlbmd0aChwb2ludFRvTGlnaHQpOwogICAgICAgIHJhbmdlQXR0ZW51YXRpb24gPSBnZXRSYW5nZUF0dGVudWF0aW9uKHBhcmFtLCBwYXJhbV8xKTsKICAgIH0KICAgIGlmIChsaWdodC50eXBlID09IDIpCiAgICB7CiAgICAgICAgdmVjMyBwYXJhbV8yID0gcG9pbnRUb0xpZ2h0OwogICAgICAgIHZlYzMgcGFyYW1fMyA9IGxpZ2h0LmRpcmVjdGlvbjsKICAgICAgICBmbG9hdCBwYXJhbV80ID0gbGlnaHQub3V0ZXJDb25lQ29zOwogICAgICAgIGZsb2F0IHBhcmFtXzUgPSBsaWdodC5pbm5lckNvbmVDb3M7CiAgICAgICAgc3BvdEF0dGVudWF0aW9uID0gZ2V0U3BvdEF0dGVudWF0aW9uKHBhcmFtXzIsIHBhcmFtXzMsIHBhcmFtXzQsIHBhcmFtXzUpOwogICAgfQogICAgcmV0dXJuIGxpZ2h0LmNvbG9yICogKChyYW5nZUF0dGVudWF0aW9uICogc3BvdEF0dGVudWF0aW9uKSAqIGxpZ2h0LmludGVuc2l0eSk7Cn0KCnZlYzMgRl9TY2hsaWNrKHZlYzMgZjAsIHZlYzMgZjkwLCBmbG9hdCBWZG90SCkKewogICAgcmV0dXJuIGYwICsgKChmOTAgLSBmMCkgKiBwb3coY2xhbXAoMS4wIC0gVmRvdEgsIDAuMCwgMS4wKSwgNS4wKSk7Cn0KCnZlYzMgQlJERl9sYW1iZXJ0aWFuKHZlYzMgZjAsIHZlYzMgZjkwLCB2ZWMzIGRpZmZ1c2VDb2xvciwgZmxvYXQgVmRvdEgpCnsKICAgIHZlYzMgcGFyYW0gPSBmMDsKICAgIHZlYzMgcGFyYW1fMSA9IGY5MDsKICAgIGZsb2F0IHBhcmFtXzIgPSBWZG90SDsKICAgIHJldHVybiAodmVjMygxLjApIC0gRl9TY2hsaWNrKHBhcmFtLCBwYXJhbV8xLCBwYXJhbV8yKSkgKiAoZGlmZnVzZUNvbG9yICogdmVjMygwLjMxODMwOTg3MzM0MjUxNDAzODA4NTkzNzUpKTsKfQoKZmxvYXQgVl9HR1goZmxvYXQgTmRvdEwsIGZsb2F0IE5kb3RWLCBmbG9hdCBhbHBoYVJvdWdobmVzcykKewogICAgZmxvYXQgXzM5OCA9IGFscGhhUm91Z2huZXNzICogYWxwaGFSb3VnaG5lc3M7CiAgICBmbG9hdCBfNDA1ID0gMS4wIC0gXzM5ODsKICAgIGZsb2F0IF80MjYgPSAoTmRvdEwgKiBzcXJ0KCgoTmRvdFYgKiBOZG90VikgKiBfNDA1KSArIF8zOTgpKSArIChOZG90ViAqIHNxcnQoKChOZG90TCAqIE5kb3RMKSAqIF80MDUpICsgXzM5OCkpOwogICAgaWYgKF80MjYgPiAwLjApCiAgICB7CiAgICAgICAgcmV0dXJuIDAuNSAvIF80MjY7CiAgICB9CiAgICByZXR1cm4gMC4wOwp9CgpmbG9hdCBEX0dHWChmbG9hdCBOZG90SCwgZmxvYXQgYWxwaGFSb3VnaG5lc3MpCnsKICAgIGZsb2F0IF80NDAgPSBhbHBoYVJvdWdobmVzcyAqIGFscGhhUm91Z2huZXNzOwogICAgZmxvYXQgXzQ0OCA9ICgoTmRvdEggKiBOZG90SCkgKiAoXzQ0MCAtIDEuMCkpICsgMS4wOwogICAgcmV0dXJuIF80NDAgLyAoKDMuMTQxNTkyNzQxMDEyNTczMjQyMTg3NSAqIF80NDgpICogXzQ0OCk7Cn0KCnZlYzMgQlJERl9zcGVjdWxhckdHWCh2ZWMzIGYwLCB2ZWMzIGY5MCwgZmxvYXQgYWxwaGFSb3VnaG5lc3MsIGZsb2F0IFZkb3RILCBmbG9hdCBOZG90TCwgZmxvYXQgTmRvdFYsIGZsb2F0IE5kb3RIKQp7CiAgICB2ZWMzIHBhcmFtID0gZjA7CiAgICB2ZWMzIHBhcmFtXzEgPSBmOTA7CiAgICBmbG9hdCBwYXJhbV8yID0gVmRvdEg7CiAgICBmbG9hdCBwYXJhbV8zID0gTmRvdEw7CiAgICBmbG9hdCBwYXJhbV80ID0gTmRvdFY7CiAgICBmbG9hdCBwYXJhbV81ID0gYWxwaGFSb3VnaG5lc3M7CiAgICBmbG9hdCBwYXJhbV82ID0gTmRvdEg7CiAgICBmbG9hdCBwYXJhbV83ID0gYWxwaGFSb3VnaG5lc3M7CiAgICByZXR1cm4gKEZfU2NobGljayhwYXJhbSwgcGFyYW1fMSwgcGFyYW1fMikgKiBWX0dHWChwYXJhbV8zLCBwYXJhbV80LCBwYXJhbV81KSkgKiBEX0dHWChwYXJhbV82LCBwYXJhbV83KTsKfQoKdmVjNCBnZXRFbWlzc2l2ZVRleHR1cmUoKQp7CiAgICByZXR1cm4gdGV4dHVyZSh1X2VtaXNzaXZlVGV4dHVyZSwgdl91djEpOwp9Cgp2ZWMzIGxpbmVhclRvc1JHQih2ZWMzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCB2ZWMzKDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NSkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWM0IF8xMTUyID0gZ2V0QmFzZUNvbG9yKCk7CiAgICB2ZWMzIF8xNTA4ID0gZ2V0Tm9ybWFsSW5mbygpLm47CiAgICB2ZWMzIF8xNTEyID0gdmVjMygwLjApOwogICAgZmxvYXQgXzE1MTMgPSAwLjA7CiAgICB2ZWMzIF8xNTE0ID0gdmVjMygwLjApOwogICAgdmVjMyBfMTUxNSA9IHZlYzMoMC4wKTsKICAgIHZlYzMgXzExNjcgPSBfMTE1Mi54eXo7CiAgICBNYXRlcmlhbEluZm8gcGFyYW0gPSBNYXRlcmlhbEluZm8oMC4wLCB2ZWMzKDAuMCksIDAuMCwgdmVjMygwLjApLCB2ZWMzKDAuMCksIDAuMCwgdmVjMygwLjApLCBfMTE2Nyk7CiAgICBmbG9hdCBwYXJhbV8xID0gMC4wMzk5OTk5OTkxMDU5MzAzMjgzNjkxNDA2MjU7CiAgICBNYXRlcmlhbEluZm8gXzExNzcgPSBnZXRNZXRhbGxpY1JvdWdobmVzc0luZm8ocGFyYW0sIHBhcmFtXzEpOwogICAgXzE1MTIgPSBfMTE3Ny5mMDsKICAgIF8xNTE0ID0gXzExNzcuYWxiZWRvQ29sb3I7CiAgICBmbG9hdCBfMTE4MCA9IGNsYW1wKF8xMTc3LnBlcmNlcHR1YWxSb3VnaG5lc3MsIDAuMCwgMS4wKTsKICAgIF8xNTEzID0gXzExODAgKiBfMTE4MDsKICAgIF8xNTE1ID0gdmVjMyhjbGFtcChtYXgobWF4KF8xMTc3LmYwLngsIF8xMTc3LmYwLnkpLCBfMTE3Ny5mMC56KSAqIDUwLjAsIDAuMCwgMS4wKSk7CiAgICB2ZWMzIGZfc3BlY3VsYXIgPSB2ZWMzKDAuMCk7CiAgICB2ZWMzIGZfZW1pc3NpdmUgPSB2ZWMzKDAuMCk7CiAgICB2ZWMzIGZfZGlmZnVzZSA9ICh1X2ZzX3BiclBhcmFtc1szXS54eXogKiBwb3codV9mc19wYnJQYXJhbXNbM10udywgMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSkgKiBfMTE2NzsKICAgIHZlYzQgXzEyMjUgPSBnZXRPY2NsdXNpb25UZXh0dXJlKCk7CiAgICBmbG9hdCBfMTIyNiA9IF8xMjI1Lng7CiAgICBmX2RpZmZ1c2UgKj0gXzEyMjY7CiAgICBmX3NwZWN1bGFyICo9IF8xMjI2OwogICAgdmVjMyBfMTI1MiA9IG5vcm1hbGl6ZSh1X2ZzX2xpZ2h0aW5nWzI0XS54eXogLSB2X3Bvc2l0aW9uKTsKICAgIHZlYzMgcG9pbnRUb0xpZ2h0OwogICAgZm9yIChpbnQgaSA9IDA7IGkgPCA2OyBpKyspCiAgICB7CiAgICAgICAgaW50IF8xMjY1ID0gaW50KHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxMl0udyk7CiAgICAgICAgYm9vbCBfMTI5NiA9ICh1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMThdLnogPCAwLjApID8gZmFsc2UgOiB0cnVlOwogICAgICAgIGludCBfMTMwMCA9IGludCh1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMThdLnopOwogICAgICAgIGludCBfMTMwNCA9IGludCh1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMThdLncpOwogICAgICAgIGlmICh1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgNl0udyA+IDAuMCkKICAgICAgICB7CiAgICAgICAgICAgIGlmIChfMTI2NSAhPSAwKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBwb2ludFRvTGlnaHQgPSB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMTJdLnh5eiAtIHZfcG9zaXRpb247CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBwb2ludFRvTGlnaHQgPSAtdV9mc19saWdodGluZ1tpICogMSArIDBdLnh5ejsKICAgICAgICAgICAgfQogICAgICAgICAgICB2ZWMzIF8xMzI3ID0gbm9ybWFsaXplKHBvaW50VG9MaWdodCk7CiAgICAgICAgICAgIHZlYzMgXzEzMzIgPSBub3JtYWxpemUoXzEzMjcgKyBfMTI1Mik7CiAgICAgICAgICAgIHZlYzMgcGFyYW1fMiA9IF8xNTA4OwogICAgICAgICAgICB2ZWMzIHBhcmFtXzMgPSBfMTMyNzsKICAgICAgICAgICAgZmxvYXQgXzEzMzggPSBjbGFtcGVkRG90KHBhcmFtXzIsIHBhcmFtXzMpOwogICAgICAgICAgICB2ZWMzIHBhcmFtXzQgPSBfMTUwODsKICAgICAgICAgICAgdmVjMyBwYXJhbV81ID0gXzEyNTI7CiAgICAgICAgICAgIGZsb2F0IF8xMzQ0ID0gY2xhbXBlZERvdChwYXJhbV80LCBwYXJhbV81KTsKICAgICAgICAgICAgdmVjMyBwYXJhbV82ID0gXzE1MDg7CiAgICAgICAgICAgIHZlYzMgcGFyYW1fNyA9IF8xMzMyOwogICAgICAgICAgICB2ZWMzIHBhcmFtXzggPSBfMTMyNzsKICAgICAgICAgICAgdmVjMyBwYXJhbV85ID0gXzEzMzI7CiAgICAgICAgICAgIHZlYzMgcGFyYW1fMTAgPSBfMTI1MjsKICAgICAgICAgICAgdmVjMyBwYXJhbV8xMSA9IF8xMzMyOwogICAgICAgICAgICBmbG9hdCBfMTM2MiA9IGNsYW1wZWREb3QocGFyYW1fMTAsIHBhcmFtXzExKTsKICAgICAgICAgICAgZmxvYXQgc2hhZG93ID0gMS4wOwogICAgICAgICAgICBpZiAoXzEyOTYpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmIChfMTI2NSA9PSAyKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGludCBwYXJhbV8xMiA9IF8xMzAwOwogICAgICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzEzID0gXzEzMzg7CiAgICAgICAgICAgICAgICAgICAgc2hhZG93ID0gMS4wIC0gc2hhZG93Q2FsY3VsYXRpb25QQ0YocGFyYW1fMTIsIHBhcmFtXzEzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpZiAoXzEyNjUgPT0gMCkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGludCBwYXJhbV8xNCA9IF8xMzAwOwogICAgICAgICAgICAgICAgICAgICAgICBpbnQgcGFyYW1fMTUgPSBfMTMwNDsKICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMTYgPSBfMTMzODsKICAgICAgICAgICAgICAgICAgICAgICAgc2hhZG93ID0gMS4wIC0gc2hhZG93Q2FzY2FkZWRDYWxjdWxhdGlvblBDRihwYXJhbV8xNCwgcGFyYW1fMTUsIHBhcmFtXzE2KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8xMjY1ID09IDEpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludCBwYXJhbV8xNyA9IF8xMzAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMyBwYXJhbV8xOCA9IC1wb2ludFRvTGlnaHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8xOSA9IF8xMzM4OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhZG93ID0gMS4wIC0gc2hhZG93Q3ViZUNhbGN1bGF0aW9uUENGKHBhcmFtXzE3LCBwYXJhbV8xOCwgcGFyYW1fMTkpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgoXzEzMzggPiAwLjApIHx8IChfMTM0NCA+IDAuMCkpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIExpZ2h0IHBhcmFtXzIwID0gTGlnaHQoXzEyNjUsIHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAwXS54eXosIHVfZnNfbGlnaHRpbmdbaSAqIDEgKyA2XS54eXosIHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxMl0ueHl6LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMF0udywgdV9mc19saWdodGluZ1tpICogMSArIDZdLncsIHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxOF0ueCwgdV9mc19saWdodGluZ1tpICogMSArIDE4XS55LCBfMTI5NiwgXzEzMDAsIF8xMzA0KTsKICAgICAgICAgICAgICAgIHZlYzMgcGFyYW1fMjEgPSBwb2ludFRvTGlnaHQ7CiAgICAgICAgICAgICAgICB2ZWMzIF8xNDI4ID0gZ2V0TGlnaEludGVuc2l0eShwYXJhbV8yMCwgcGFyYW1fMjEpOwogICAgICAgICAgICAgICAgdmVjMyBwYXJhbV8yMiA9IF8xNTEyOwogICAgICAgICAgICAgICAgdmVjMyBwYXJhbV8yMyA9IF8xNTE1OwogICAgICAgICAgICAgICAgdmVjMyBwYXJhbV8yNCA9IF8xNTE0OwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMjUgPSBfMTM2MjsKICAgICAgICAgICAgICAgIGZfZGlmZnVzZSArPSAoKChfMTQyOCAqIHNoYWRvdykgKiBfMTMzOCkgKiBCUkRGX2xhbWJlcnRpYW4ocGFyYW1fMjIsIHBhcmFtXzIzLCBwYXJhbV8yNCwgcGFyYW1fMjUpKTsKICAgICAgICAgICAgICAgIHZlYzMgcGFyYW1fMjYgPSBfMTUxMjsKICAgICAgICAgICAgICAgIHZlYzMgcGFyYW1fMjcgPSBfMTUxNTsKICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzI4ID0gXzE1MTM7CiAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8yOSA9IF8xMzYyOwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMzAgPSBfMTMzODsKICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzMxID0gXzEzNDQ7CiAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8zMiA9IGNsYW1wZWREb3QocGFyYW1fNiwgcGFyYW1fNyk7CiAgICAgICAgICAgICAgICBmX3NwZWN1bGFyICs9ICgoKF8xNDI4ICogc2hhZG93KSAqIF8xMzM4KSAqIEJSREZfc3BlY3VsYXJHR1gocGFyYW1fMjYsIHBhcmFtXzI3LCBwYXJhbV8yOCwgcGFyYW1fMjksIHBhcmFtXzMwLCBwYXJhbV8zMSwgcGFyYW1fMzIpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGZfZW1pc3NpdmUgPSB1X2ZzX3BiclBhcmFtc1syXS54eXo7CiAgICB2ZWMzIHBhcmFtXzMzID0gZ2V0RW1pc3NpdmVUZXh0dXJlKCkueHl6OwogICAgdmVjMyBfMTQ4MyA9IGZfZW1pc3NpdmU7CiAgICB2ZWMzIF8xNDg0ID0gXzE0ODMgKiBzUkdCVG9MaW5lYXIocGFyYW1fMzMpOwogICAgZl9lbWlzc2l2ZSA9IF8xNDg0OwogICAgdmVjMyBwYXJhbV8zNCA9IChfMTQ4NCArIGZfZGlmZnVzZSkgKyBmX3NwZWN1bGFyOwogICAgZ19maW5hbENvbG9yID0gdmVjNChsaW5lYXJUb3NSR0IocGFyYW1fMzQpLCBfMTE1Mi53KTsKfQoKUkVGTEMFAABtZXNoX1B1Y1Nod1BjZk5vcl9nbHNsMzMwAAAAAAAAAAAAAAALAAAAAwAAAAwAAAB1X2Jhc2VDb2xvclRleHR1cmUAAAAAAAAAAAAAAAAAAAIAAAAAAAAAMkQgIFRGTFR1X21ldGFsbGljUm91Z2huZXNzVGV4dHVyZQAAAAAAAAIAAAABAAAAMkQgIFRGTFR1X29jY2x1c2lvblRleHR1cmUAAAAAAAAAAAAAAAAAAAIAAAACAAAAMkQgIFRGTFR1X2VtaXNzaXZlVGV4dHVyZQAAAAAAAAAAAAAAAAAAAAIAAAADAAAAMkQgIFRGTFR1X3NoYWRvd01hcDEAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAEAAAAMkQgIFRGTFR1X3NoYWRvd01hcDIAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAFAAAAMkQgIFRGTFR1X3NoYWRvd01hcDMAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAAMkQgIFRGTFR1X3NoYWRvd01hcDQAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAHAAAAMkQgIFRGTFR1X3NoYWRvd01hcDUAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAIAAAAMkQgIFRGTFR1X3NoYWRvd01hcDYAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAJAAAAMkQgIFRGTFR1X3NoYWRvd0N1YmVNYXAxAAAAAAAAAAAAAAAAAAAAAAIAAAAKAAAAQ1VCRVRGTFQGAAAAdV9mc19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFiYXNlQ29sb3JGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAG1ldGFsbGljRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAQAAAAcm91Z2huZXNzRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABQAAABlbWlzc2l2ZUZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAIAAAAGFtYmllbnRMaWdodAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAwAAAAYW1iaWVudEZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAADwAAAABAAAAdV9mc19zaGFkb3dzAAAAAAAAAAAAAAAAAAAAAAAAAAB1U2hhZG93cwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAcAAAAAFiaWFzX3RleFNpemVfbmVhckZhcgAAAAAAAAAAAAAAAEZMVDQHAAAAAAAAAAUAAAB1X2ZzX2xpZ2h0aW5nAAAAAAAAAAAAAAAAAAAAAAAAAGxpZ2h0aW5nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACQAQAAAWRpcmVjdGlvbl9yYW5nZQAAAAAAAAAAAAAAAAAAAAAARkxUNAYAAAAAAAAAY29sb3JfaW50ZW5zaXR5AAAAAAAAAAAAAAAAAAAAAABGTFQ0BgAAAGAAAABwb3NpdGlvbl90eXBlAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQGAAAAwAAAAGluQ29uZV9vdUNvbmVfc2hhZG93c19jYXNjYWRlcwAARkxUNAYAAAAgAQAAZXllUG9zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAIABAAA=";
static const std::string ui_Vc4_glsl330 = "U0JTIAAAAABkAAAAR0xTTEoBAAAAAFNUQUeIAgAAVkVSVENPREUvAQAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV92c191aVBhcmFtc1s0XTsKb3V0IHZlYzQgdl9jb2xvcjsKbGF5b3V0KGxvY2F0aW9uID0gMSkgaW4gdmVjNCBhX2NvbG9yOwpsYXlvdXQobG9jYXRpb24gPSAwKSBpbiB2ZWMzIGFfcG9zaXRpb247Cgp2b2lkIG1haW4oKQp7CiAgICB2X2NvbG9yID0gYV9jb2xvcjsKICAgIGdsX1Bvc2l0aW9uID0gbWF0NCh1X3ZzX3VpUGFyYW1zWzBdLCB1X3ZzX3VpUGFyYW1zWzFdLCB1X3ZzX3VpUGFyYW1zWzJdLCB1X3ZzX3VpUGFyYW1zWzNdKSAqIHZlYzQoYV9wb3NpdGlvbiwgMS4wKTsKfQoKUkVGTEUBAAB1aV9WYzRfZ2xzbDMzMAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAQAAAAEAAABhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABOT1JNQUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0YV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAB1X3ZzX3VpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAHVpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAW12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAU1RBR4ACAABGUkFHQ09ERb8BAAAjdmVyc2lvbiAzMzAKCnVuaWZvcm0gdmVjNCB1X2ZzX3VpUGFyYW1zWzFdOwppbiB2ZWM0IHZfY29sb3I7CmxheW91dChsb2NhdGlvbiA9IDApIG91dCB2ZWM0IGdfZmluYWxDb2xvcjsKCnZlYzQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdl9jb2xvcjsKfQoKdmVjNCBnZXRCYXNlQ29sb3IoKQp7CiAgICByZXR1cm4gdV9mc191aVBhcmFtc1swXSAqIGdldFZlcnRleENvbG9yKCk7Cn0KCnZlYzMgbGluZWFyVG9zUkdCKHZlYzMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIHZlYzMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIHZlYzQgXzUwID0gZ2V0QmFzZUNvbG9yKCk7CiAgICB2ZWMzIHBhcmFtID0gXzUwLnh5ejsKICAgIGdfZmluYWxDb2xvciA9IHZlYzQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzUwLncpOwp9CgpSRUZMrQAAAHVpX1ZjNF9nbHNsMzMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAEAAAB1X2ZzX3VpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAHVpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAWNvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAA";
static const std::string ui_Ftx_glsl330 = "U0JTIAAAAABkAAAAR0xTTEoBAAAAAFNUQUeMAgAAVkVSVENPREUzAQAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV92c191aVBhcmFtc1s0XTsKb3V0IHZlYzIgdl91djE7CmxheW91dChsb2NhdGlvbiA9IDEpIGluIHZlYzIgYV90ZXhjb29yZDE7CmxheW91dChsb2NhdGlvbiA9IDApIGluIHZlYzMgYV9wb3NpdGlvbjsKCnZvaWQgbWFpbigpCnsKICAgIHZfdXYxID0gYV90ZXhjb29yZDE7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c191aVBhcmFtc1swXSwgdV92c191aVBhcmFtc1sxXSwgdV92c191aVBhcmFtc1syXSwgdV92c191aVBhcmFtc1szXSkgKiB2ZWM0KGFfcG9zaXRpb24sIDEuMCk7Cn0KClJFRkxFAQAAdWlfRnR4X2dsc2wzMzAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAEAAAABAAAAYV90ZXhjb29yZDEAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMmFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAdV92c191aVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAB1aVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUcHAwAARlJBR0NPREUWAgAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV9mc191aVBhcmFtc1sxXTsKdW5pZm9ybSBzYW1wbGVyMkQgdV91aVRleHR1cmU7CgppbiB2ZWMyIHZfdXYxOwpsYXlvdXQobG9jYXRpb24gPSAwKSBvdXQgdmVjNCBnX2ZpbmFsQ29sb3I7Cgp2ZWM0IGdldFZlcnRleENvbG9yKCkKewogICAgcmV0dXJuIHZlYzQoMS4wKTsKfQoKdmVjNCBnZXRCYXNlQ29sb3IoKQp7CiAgICByZXR1cm4gKHVfZnNfdWlQYXJhbXNbMF0gKiB2ZWM0KDEuMCwgMS4wLCAxLjAsIHRleHR1cmUodV91aVRleHR1cmUsIHZfdXYxKS54KSkgKiBnZXRWZXJ0ZXhDb2xvcigpOwp9Cgp2ZWMzIGxpbmVhclRvc1JHQih2ZWMzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCB2ZWMzKDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NSkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWM0IF82MyA9IGdldEJhc2VDb2xvcigpOwogICAgdmVjMyBwYXJhbSA9IF82My54eXo7CiAgICBnX2ZpbmFsQ29sb3IgPSB2ZWM0KGxpbmVhclRvc1JHQihwYXJhbSksIF82My53KTsKfQoKUkVGTN0AAAB1aV9GdHhfZ2xzbDMzMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAEAAAB1X3VpVGV4dHVyZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAMkQgIFRGTFQBAAAAdV9mc191aVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAB1aVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAFjb2xvcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAA==";
static const std::string points_Vc4_glsl330 = "U0JTIAAAAABkAAAAR0xTTEoBAAAAAFNUQUcABAAAVkVSVENPREUPAgAAI3ZlcnNpb24gMzMwCgp1bmlmb3JtIHZlYzQgdV92c19wb2ludHNQYXJhbXNbNF07Cm91dCBmbG9hdCB2X3BvaW50cm90YXRpb247CmxheW91dChsb2NhdGlvbiA9IDIpIGluIGZsb2F0IGFfcG9pbnRyb3RhdGlvbjsKb3V0IHZlYzQgdl9jb2xvcjsKbGF5b3V0KGxvY2F0aW9uID0gMykgaW4gdmVjNCBhX2NvbG9yOwpsYXlvdXQobG9jYXRpb24gPSAwKSBpbiB2ZWMzIGFfcG9zaXRpb247CmxheW91dChsb2NhdGlvbiA9IDEpIGluIGZsb2F0IGFfcG9pbnRzaXplOwoKdm9pZCBtYWluKCkKewogICAgdl9wb2ludHJvdGF0aW9uID0gYV9wb2ludHJvdGF0aW9uOwogICAgdl9jb2xvciA9IGFfY29sb3I7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c19wb2ludHNQYXJhbXNbMF0sIHVfdnNfcG9pbnRzUGFyYW1zWzFdLCB1X3ZzX3BvaW50c1BhcmFtc1syXSwgdV92c19wb2ludHNQYXJhbXNbM10pICogdmVjNChhX3Bvc2l0aW9uLCAxLjApOwogICAgZ2xfUG9pbnRTaXplID0gYV9wb2ludHNpemUgLyBnbF9Qb3NpdGlvbi53Owp9CgpSRUZM3QEAAHBvaW50c19WYzRfZ2xzbDMzMAAAAAAAAAAAAAAAAAAABAAAAAAAAAABAAAAAQAAAGFfcG9pbnRyb3RhdGlvbgAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDFhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABGTFQ0YV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfcG9pbnRzaXplAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAdV92c19wb2ludHNQYXJhbXMAAAAAAAAAAAAAAAAAAABwb2ludHNQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUfrAQAARlJBR0NPREWnAQAAI3ZlcnNpb24gMzMwCgppbiB2ZWM0IHZfY29sb3I7CmxheW91dChsb2NhdGlvbiA9IDApIG91dCB2ZWM0IGdfZmluYWxDb2xvcjsKaW4gZmxvYXQgdl9wb2ludHJvdGF0aW9uOwoKdmVjNCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2X2NvbG9yOwp9Cgp2ZWM0IGdldEJhc2VDb2xvcigpCnsKICAgIHJldHVybiBnZXRWZXJ0ZXhDb2xvcigpOwp9Cgp2ZWMzIGxpbmVhclRvc1JHQih2ZWMzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCB2ZWMzKDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NSkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWM0IF80MiA9IGdldEJhc2VDb2xvcigpOwogICAgdmVjMyBwYXJhbSA9IF80Mi54eXo7CiAgICBnX2ZpbmFsQ29sb3IgPSB2ZWM0KGxpbmVhclRvc1JHQihwYXJhbSksIF80Mi53KTsKfQoKUkVGTDAAAABwb2ludHNfVmM0X2dsc2wzMzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=";
static const std::string mesh_Uv1PucShwPcfNorVc4Fog_glsl330 = "";

std::string getBase64Shader(std::string name) {
    if (name == "mesh_Uv1PucNorNmpTanVc4_glsl330") {
        return mesh_Uv1PucNorNmpTanVc4_glsl330;
    } else if (name == "mesh_UltUv1Vc4Fog_glsl330") {
        return mesh_UltUv1Vc4Fog_glsl330;
    } else if (name == "depth_Ski_glsl330") {
        return depth_Ski_glsl330;
    } else if (name == "mesh_PucShwPcfNorSki_glsl330") {
        return mesh_PucShwPcfNorSki_glsl330;
    } else if (name == "depth_Mta_glsl330") {
        return depth_Mta_glsl330;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTanVc4Fog_glsl330") {
        return mesh_Uv1PucShwPcfNorNmpTanVc4Fog_glsl330;
    } else if (name == "mesh_Uv1PucShwPcfNor_glsl330") {
        return mesh_Uv1PucShwPcfNor_glsl330;
    } else if (name == "mesh_Uv1PucNorVc4_glsl330") {
        return mesh_Uv1PucNorVc4_glsl330;
    } else if (name == "mesh_Uv1PucNorVc4Fog_glsl330") {
        return mesh_Uv1PucNorVc4Fog_glsl330;
    } else if (name == "mesh_PucShwPcfNorTanMtaMnr_glsl330") {
        return mesh_PucShwPcfNorTanMtaMnr_glsl330;
    } else if (name == "mesh_PucShwPcfNorTanMtaMnrMtg_glsl330") {
        return mesh_PucShwPcfNorTanMtaMnrMtg_glsl330;
    } else if (name == "mesh_Uv1PucNorNmpTanFog_glsl330") {
        return mesh_Uv1PucNorNmpTanFog_glsl330;
    } else if (name == "mesh_UltUv1Fog_glsl330") {
        return mesh_UltUv1Fog_glsl330;
    } else if (name == "mesh_UltUv1Vc4_glsl330") {
        return mesh_UltUv1Vc4_glsl330;
    } else if (name == "mesh_Uv1PucShwPcfNorFogSki_glsl330") {
        return mesh_Uv1PucShwPcfNorFogSki_glsl330;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTanVc4_glsl330") {
        return mesh_Uv1PucShwPcfNorNmpTanVc4_glsl330;
    } else if (name == "mesh_UltUv1Vc4Txr_glsl330") {
        return mesh_UltUv1Vc4Txr_glsl330;
    } else if (name == "mesh_Uv1PucNorNmpTan_glsl330") {
        return mesh_Uv1PucNorNmpTan_glsl330;
    } else if (name == "points_TexVc4_glsl330") {
        return points_TexVc4_glsl330;
    } else if (name == "mesh_Uv1PucNor_glsl330") {
        return mesh_Uv1PucNor_glsl330;
    } else if (name == "depth_glsl330") {
        return depth_glsl330;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTan_glsl330") {
        return mesh_Uv1PucShwPcfNorNmpTan_glsl330;
    } else if (name == "mesh_PucShwPcfNorTanFogMtaMnr_glsl330") {
        return mesh_PucShwPcfNorTanFogMtaMnr_glsl330;
    } else if (name == "mesh_Uv1PucNorNmpTanVc4Fog_glsl330") {
        return mesh_Uv1PucNorNmpTanVc4Fog_glsl330;
    } else if (name == "mesh_Uv1PucNorNmpTanVc4Ski_glsl330") {
        return mesh_Uv1PucNorNmpTanVc4Ski_glsl330;
    } else if (name == "mesh_Uv1PucNorNmpTanVc4FogSki_glsl330") {
        return mesh_Uv1PucNorNmpTanVc4FogSki_glsl330;
    } else if (name == "mesh_UltUv1Vc4TxrFog_glsl330") {
        return mesh_UltUv1Vc4TxrFog_glsl330;
    } else if (name == "mesh_Uv1PucShwPcfNorFog_glsl330") {
        return mesh_Uv1PucShwPcfNorFog_glsl330;
    } else if (name == "ui_TexVc4_glsl330") {
        return ui_TexVc4_glsl330;
    } else if (name == "mesh_Uv1PucShwPcfNorSki_glsl330") {
        return mesh_Uv1PucShwPcfNorSki_glsl330;
    } else if (name == "mesh_Uv1PucShwPcfNorVc4_glsl330") {
        return mesh_Uv1PucShwPcfNorVc4_glsl330;
    } else if (name == "sky_glsl330") {
        return sky_glsl330;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTanFog_glsl330") {
        return mesh_Uv1PucShwPcfNorNmpTanFog_glsl330;
    } else if (name == "mesh_PucShwPcfNorTanFogMtaMnrMtg_glsl330") {
        return mesh_PucShwPcfNorTanFogMtaMnrMtg_glsl330;
    } else if (name == "mesh_Uv1PucNorFog_glsl330") {
        return mesh_Uv1PucNorFog_glsl330;
    } else if (name == "points_TexVc4Txr_glsl330") {
        return points_TexVc4Txr_glsl330;
    } else if (name == "mesh_UltUv1_glsl330") {
        return mesh_UltUv1_glsl330;
    } else if (name == "mesh_PucShwPcfNor_glsl330") {
        return mesh_PucShwPcfNor_glsl330;
    } else if (name == "ui_Vc4_glsl330") {
        return ui_Vc4_glsl330;
    } else if (name == "ui_Ftx_glsl330") {
        return ui_Ftx_glsl330;
    } else if (name == "points_Vc4_glsl330") {
        return points_Vc4_glsl330;
    } else if (name == "mesh_Uv1PucShwPcfNorVc4Fog_glsl330") {
        return mesh_Uv1PucShwPcfNorVc4Fog_glsl330;
    }
    return "";
}
#endif //SHADER_glsl330_h
