#ifndef SHADER_msl21ios_h
#define SHADER_msl21ios_h

#include <string>

static const std::string mesh_UltUv1Vc4Txr_msl21ios = "U0JTIAAAAABkAAAATVNMIIROAAAAAFNUQUfGCgAAVkVSVENPREVMCAAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfdnNfcGJyUGFyYW1zCnsKICAgIGZsb2F0NHg0IG1vZGVsTWF0cml4OwogICAgZmxvYXQ0eDQgbm9ybWFsTWF0cml4OwogICAgZmxvYXQ0eDQgbXZwTWF0cml4Owp9OwoKc3RydWN0IHVfdnNfc3ByaXRlUGFyYW1zCnsKICAgIGZsb2F0NCB0ZXh0dXJlUmVjdDsKfTsKCnN0cnVjdCBtYWluMF9vdXQKewogICAgZmxvYXQzIHZfcG9zaXRpb24gW1t1c2VyKGxvY24wKV1dOwogICAgZmxvYXQyIHZfdXYxIFtbdXNlcihsb2NuMSldXTsKICAgIGZsb2F0MiB2X3V2MiBbW3VzZXIobG9jbjIpXV07CiAgICBmbG9hdDQgdl9jb2xvciBbW3VzZXIobG9jbjMpXV07CiAgICBmbG9hdDQgZ2xfUG9zaXRpb24gW1twb3NpdGlvbl1dOwp9OwoKc3RydWN0IG1haW4wX2luCnsKICAgIGZsb2F0MyBhX3Bvc2l0aW9uIFtbYXR0cmlidXRlKDApXV07CiAgICBmbG9hdDIgYV90ZXhjb29yZDEgW1thdHRyaWJ1dGUoMSldXTsKICAgIGZsb2F0NCBhX2NvbG9yIFtbYXR0cmlidXRlKDIpXV07Cn07CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDR4NCBnZXRCb25lVHJhbnNmb3JtKCkKewogICAgcmV0dXJuIGZsb2F0NHg0KGZsb2F0NCgwLjApLCBmbG9hdDQoMC4wKSwgZmxvYXQ0KDAuMCksIGZsb2F0NCgwLjApKTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIGdldE1vcnBoUG9zaXRpb24odGhyZWFkIGNvbnN0IGZsb2F0MyYgcG9zKQp7CiAgICByZXR1cm4gcG9zOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDMgZ2V0U2tpblBvc2l0aW9uKHRocmVhZCBjb25zdCBmbG9hdDMmIHBvcywgdGhyZWFkIGNvbnN0IGZsb2F0NHg0JiBib25lVHJhbnNmb3JtKQp7CiAgICByZXR1cm4gcG9zOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgZ2V0UG9zaXRpb24odGhyZWFkIGNvbnN0IGZsb2F0NHg0JiBib25lVHJhbnNmb3JtLCB0aHJlYWQgZmxvYXQzJiBhX3Bvc2l0aW9uKQp7CiAgICBmbG9hdDMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgZmxvYXQzIHBhcmFtXzEgPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIGZsb2F0NHg0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIGZsb2F0NChnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMiksIDEuMCk7Cn0KCnZlcnRleCBtYWluMF9vdXQgbWFpbjAobWFpbjBfaW4gaW4gW1tzdGFnZV9pbl1dLCBjb25zdGFudCB1X3ZzX3BiclBhcmFtcyYgcGJyUGFyYW1zIFtbYnVmZmVyKDApXV0sIGNvbnN0YW50IHVfdnNfc3ByaXRlUGFyYW1zJiBzcHJpdGVQYXJhbXMgW1tidWZmZXIoMSldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgZmxvYXQ0eDQgcGFyYW0gPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICBmbG9hdDQgXzY3ID0gZ2V0UG9zaXRpb24ocGFyYW0sIGluLmFfcG9zaXRpb24pOwogICAgZmxvYXQ0IF83OCA9IHBiclBhcmFtcy5tb2RlbE1hdHJpeCAqIF82NzsKICAgIG91dC52X3Bvc2l0aW9uID0gZmxvYXQzKF83OC54eXopIC8gZmxvYXQzKF83OC53KTsKICAgIG91dC52X3V2MSA9IGZsb2F0MigwLjApOwogICAgb3V0LnZfdXYyID0gZmxvYXQyKDAuMCk7CiAgICBvdXQudl91djEgPSBpbi5hX3RleGNvb3JkMTsKICAgIG91dC52X3V2MSA9IChpbi5hX3RleGNvb3JkMSAqIHNwcml0ZVBhcmFtcy50ZXh0dXJlUmVjdC56dykgKyBzcHJpdGVQYXJhbXMudGV4dHVyZVJlY3QueHk7CiAgICBvdXQudl9jb2xvciA9IGluLmFfY29sb3I7CiAgICBvdXQuZ2xfUG9zaXRpb24gPSBwYnJQYXJhbXMubXZwTWF0cml4ICogXzY3OwogICAgb3V0LmdsX1Bvc2l0aW9uLnogPSAob3V0LmdsX1Bvc2l0aW9uLnogKyBvdXQuZ2xfUG9zaXRpb24udykgKiAwLjU7ICAgICAgIC8vIEFkanVzdCBjbGlwLXNwYWNlIGZvciBNZXRhbAogICAgcmV0dXJuIG91dDsKfQoKUkVGTGYCAABtZXNoX1VsdFV2MVZjNFR4cl9tc2wyMWlvcwAAAAAAAAMAAAAAAAAAAgAAAAQAAABhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV90ZXhjb29yZDEAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMmFfY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQDAAAAdV92c19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAFtb2RlbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAG5vcm1hbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAABAAAAAbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAIAAAAABAAAAdV92c19zcHJpdGVQYXJhbXMAAAAAAAAAAAAAAAAAAABzcHJpdGVQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAEAAAAAF0ZXh0dXJlUmVjdAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAFNUQUfGCQAARlJBR0NPREX5BwAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfZnNfcGJyUGFyYW1zCnsKICAgIGZsb2F0NCBiYXNlQ29sb3JGYWN0b3I7CiAgICBmbG9hdCBtZXRhbGxpY0ZhY3RvcjsKICAgIGZsb2F0IHJvdWdobmVzc0ZhY3RvcjsKICAgIGZsb2F0MyBlbWlzc2l2ZUZhY3RvcjsKICAgIHBhY2tlZF9mbG9hdDMgYW1iaWVudExpZ2h0OwogICAgZmxvYXQgYW1iaWVudEZhY3RvcjsKfTsKCnN0cnVjdCBtYWluMF9vdXQKewogICAgZmxvYXQ0IGdfZmluYWxDb2xvciBbW2NvbG9yKDApXV07Cn07CgpzdHJ1Y3QgbWFpbjBfaW4KewogICAgZmxvYXQyIHZfdXYxIFtbdXNlcihsb2NuMSldXTsKICAgIGZsb2F0NCB2X2NvbG9yIFtbdXNlcihsb2NuMyldXTsKfTsKCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBzUkdCVG9MaW5lYXIodGhyZWFkIGNvbnN0IGZsb2F0MyYgc3JnYkluKQp7CiAgICByZXR1cm4gcG93KHNyZ2JJbiwgZmxvYXQzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgc1JHQlRvTGluZWFyKHRocmVhZCBjb25zdCBmbG9hdDQmIHNyZ2JJbikKewogICAgZmxvYXQzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiBmbG9hdDQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgZ2V0VmVydGV4Q29sb3IodGhyZWFkIGZsb2F0NCYgdl9jb2xvcikKewogICAgcmV0dXJuIHZfY29sb3I7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0NCBnZXRCYXNlQ29sb3IodGhyZWFkIGZsb2F0NCYgdl9jb2xvciwgY29uc3RhbnQgdV9mc19wYnJQYXJhbXMmIHBiclBhcmFtcywgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9iYXNlQ29sb3JUZXh0dXJlLCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X2Jhc2VDb2xvclRleHR1cmVTbXBsciwgdGhyZWFkIGZsb2F0MiYgdl91djEpCnsKICAgIGZsb2F0NCBiYXNlQ29sb3IgPSBwYnJQYXJhbXMuYmFzZUNvbG9yRmFjdG9yOwogICAgZmxvYXQ0IHBhcmFtID0gdV9iYXNlQ29sb3JUZXh0dXJlLnNhbXBsZSh1X2Jhc2VDb2xvclRleHR1cmVTbXBsciwgdl91djEpOwogICAgZmxvYXQ0IF8xMDMgPSBiYXNlQ29sb3I7CiAgICBmbG9hdDQgXzEwNCA9IF8xMDMgKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzEwNDsKICAgIHJldHVybiBfMTA0ICogZ2V0VmVydGV4Q29sb3Iodl9jb2xvcik7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBsaW5lYXJUb3NSR0IodGhyZWFkIGNvbnN0IGZsb2F0MyYgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIGZsb2F0MygwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzUpKTsKfQoKZnJhZ21lbnQgbWFpbjBfb3V0IG1haW4wKG1haW4wX2luIGluIFtbc3RhZ2VfaW5dXSwgY29uc3RhbnQgdV9mc19wYnJQYXJhbXMmIHBiclBhcmFtcyBbW2J1ZmZlcigwKV1dLCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfYmFzZUNvbG9yVGV4dHVyZSBbW3RleHR1cmUoMCldXSwgc2FtcGxlciB1X2Jhc2VDb2xvclRleHR1cmVTbXBsciBbW3NhbXBsZXIoMCldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgZmxvYXQ0IF8yNTkgPSBnZXRCYXNlQ29sb3IoaW4udl9jb2xvciwgcGJyUGFyYW1zLCB1X2Jhc2VDb2xvclRleHR1cmUsIHVfYmFzZUNvbG9yVGV4dHVyZVNtcGxyLCBpbi52X3V2MSk7CiAgICBmbG9hdDMgcGFyYW0gPSBfMjU5Lnh5ejsKICAgIG91dC5nX2ZpbmFsQ29sb3IgPSBmbG9hdDQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzI1OS53KTsKICAgIHJldHVybiBvdXQ7Cn0KClJFRky5AQAAbWVzaF9VbHRVdjFWYzRUeHJfbXNsMjFpb3MAAAAAAAAAAAAAAQAAAAEAAAAGAAAAdV9iYXNlQ29sb3JUZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUBgAAAHVfZnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABYmFzZUNvbG9yRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABtZXRhbGxpY0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAEAAAAHJvdWdobmVzc0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAUAAAAZW1pc3NpdmVGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAACAAAABhbWJpZW50TGlnaHQAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAMAAAAGFtYmllbnRGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAA8AAAA";
static const std::string depth_msl21ios = "U0JTIAAAAABkAAAATVNMIIROAAAAAFNUQUeRBgAAVkVSVENPREWEBQAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfdnNfZGVwdGhQYXJhbXMKewogICAgZmxvYXQ0eDQgbGlnaHRNVlBNYXRyaXg7Cn07CgpzdHJ1Y3QgbWFpbjBfb3V0CnsKICAgIGZsb2F0MiB2X3Byb2paVyBbW3VzZXIobG9jbjApXV07CiAgICBmbG9hdDQgZ2xfUG9zaXRpb24gW1twb3NpdGlvbl1dOwp9OwoKc3RydWN0IG1haW4wX2luCnsKICAgIGZsb2F0MyBhX3Bvc2l0aW9uIFtbYXR0cmlidXRlKDApXV07Cn07CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDMgZ2V0TW9ycGhQb3NpdGlvbih0aHJlYWQgY29uc3QgZmxvYXQzJiBwb3MpCnsKICAgIHJldHVybiBwb3M7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0NHg0IGdldEJvbmVUcmFuc2Zvcm0oKQp7CiAgICByZXR1cm4gZmxvYXQ0eDQoZmxvYXQ0KDAuMCksIGZsb2F0NCgwLjApLCBmbG9hdDQoMC4wKSwgZmxvYXQ0KDAuMCkpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDMgZ2V0U2tpblBvc2l0aW9uKHRocmVhZCBjb25zdCBmbG9hdDMmIHBvcywgdGhyZWFkIGNvbnN0IGZsb2F0NHg0JiBib25lVHJhbnNmb3JtKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2ZXJ0ZXggbWFpbjBfb3V0IG1haW4wKG1haW4wX2luIGluIFtbc3RhZ2VfaW5dXSwgY29uc3RhbnQgdV92c19kZXB0aFBhcmFtcyYgZGVwdGhQYXJhbXMgW1tidWZmZXIoMCldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgZmxvYXQzIHBvcyA9IGluLmFfcG9zaXRpb247CiAgICBmbG9hdDMgcGFyYW0gPSBpbi5hX3Bvc2l0aW9uOwogICAgcG9zID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBmbG9hdDMgcGFyYW1fMSA9IHBvczsKICAgIGZsb2F0NHg0IHBhcmFtXzIgPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICBmbG9hdDMgXzQ4ID0gZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpOwogICAgcG9zID0gXzQ4OwogICAgb3V0LmdsX1Bvc2l0aW9uID0gZGVwdGhQYXJhbXMubGlnaHRNVlBNYXRyaXggKiBmbG9hdDQoXzQ4LCAxLjApOwogICAgb3V0LnZfcHJvalpXID0gb3V0LmdsX1Bvc2l0aW9uLnp3OwogICAgb3V0LmdsX1Bvc2l0aW9uLnkgPSAtb3V0LmdsX1Bvc2l0aW9uLnk7CiAgICBvdXQuZ2xfUG9zaXRpb24ueiA9IChvdXQuZ2xfUG9zaXRpb24ueiArIG91dC5nbF9Qb3NpdGlvbi53KSAqIDAuNTsgICAgICAgLy8gQWRqdXN0IGNsaXAtc3BhY2UgZm9yIE1ldGFsCiAgICByZXR1cm4gb3V0Owp9CgpSRUZM+QAAAGRlcHRoX21zbDIxaW9zAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAQAAAGFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAdV92c19kZXB0aFBhcmFtcwAAAAAAAAAAAAAAAAAAAABkZXB0aFBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFsaWdodE1WUE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUc6AwAARlJBR0NPREX2AgAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IG1haW4wX291dAp7CiAgICBmbG9hdDQgZnJhZ19jb2xvciBbW2NvbG9yKDApXV07Cn07CgpzdHJ1Y3QgbWFpbjBfaW4KewogICAgZmxvYXQyIHZfcHJvalpXIFtbdXNlcihsb2NuMCldXTsKfTsKCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0NCBlbmNvZGVEZXB0aCh0aHJlYWQgY29uc3QgZmxvYXQmIHYpCnsKICAgIGZsb2F0NCBfMjMgPSBmcmFjdChmbG9hdDQoMS4wLCAyNTUuMCwgNjUwMjUuMCwgMTY1ODEzNzUuMCkgKiB2KTsKICAgIHJldHVybiBfMjMgLSAoXzIzLnl6d3cgKiBmbG9hdDQoMC4wMDM5MjE1Njg4NTkzNjg1NjI2OTgzNjQyNTc4MTI1LCAwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjUsIDAuMDAzOTIxNTY4ODU5MzY4NTYyNjk4MzY0MjU3ODEyNSwgMC4wKSk7Cn0KCmZyYWdtZW50IG1haW4wX291dCBtYWluMChtYWluMF9pbiBpbiBbW3N0YWdlX2luXV0pCnsKICAgIG1haW4wX291dCBvdXQgPSB7fTsKICAgIGZsb2F0IHBhcmFtID0gKCgwLjUgKiBpbi52X3Byb2paVy54KSAvIGluLnZfcHJvalpXLnkpICsgMC41OwogICAgb3V0LmZyYWdfY29sb3IgPSBlbmNvZGVEZXB0aChwYXJhbSk7CiAgICByZXR1cm4gb3V0Owp9CgpSRUZMMAAAAGRlcHRoX21zbDIxaW9zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==";
static const std::string mesh_Uv1PucNorNmpTanVc4Ski_msl21ios = "";
static const std::string mesh_UltUv1Vc4TxrFog_msl21ios = "U0JTIAAAAABkAAAATVNMIIROAAAAAFNUQUfGCgAAVkVSVENPREVMCAAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfdnNfcGJyUGFyYW1zCnsKICAgIGZsb2F0NHg0IG1vZGVsTWF0cml4OwogICAgZmxvYXQ0eDQgbm9ybWFsTWF0cml4OwogICAgZmxvYXQ0eDQgbXZwTWF0cml4Owp9OwoKc3RydWN0IHVfdnNfc3ByaXRlUGFyYW1zCnsKICAgIGZsb2F0NCB0ZXh0dXJlUmVjdDsKfTsKCnN0cnVjdCBtYWluMF9vdXQKewogICAgZmxvYXQzIHZfcG9zaXRpb24gW1t1c2VyKGxvY24wKV1dOwogICAgZmxvYXQyIHZfdXYxIFtbdXNlcihsb2NuMSldXTsKICAgIGZsb2F0MiB2X3V2MiBbW3VzZXIobG9jbjIpXV07CiAgICBmbG9hdDQgdl9jb2xvciBbW3VzZXIobG9jbjMpXV07CiAgICBmbG9hdDQgZ2xfUG9zaXRpb24gW1twb3NpdGlvbl1dOwp9OwoKc3RydWN0IG1haW4wX2luCnsKICAgIGZsb2F0MyBhX3Bvc2l0aW9uIFtbYXR0cmlidXRlKDApXV07CiAgICBmbG9hdDIgYV90ZXhjb29yZDEgW1thdHRyaWJ1dGUoMSldXTsKICAgIGZsb2F0NCBhX2NvbG9yIFtbYXR0cmlidXRlKDIpXV07Cn07CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDR4NCBnZXRCb25lVHJhbnNmb3JtKCkKewogICAgcmV0dXJuIGZsb2F0NHg0KGZsb2F0NCgwLjApLCBmbG9hdDQoMC4wKSwgZmxvYXQ0KDAuMCksIGZsb2F0NCgwLjApKTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIGdldE1vcnBoUG9zaXRpb24odGhyZWFkIGNvbnN0IGZsb2F0MyYgcG9zKQp7CiAgICByZXR1cm4gcG9zOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDMgZ2V0U2tpblBvc2l0aW9uKHRocmVhZCBjb25zdCBmbG9hdDMmIHBvcywgdGhyZWFkIGNvbnN0IGZsb2F0NHg0JiBib25lVHJhbnNmb3JtKQp7CiAgICByZXR1cm4gcG9zOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgZ2V0UG9zaXRpb24odGhyZWFkIGNvbnN0IGZsb2F0NHg0JiBib25lVHJhbnNmb3JtLCB0aHJlYWQgZmxvYXQzJiBhX3Bvc2l0aW9uKQp7CiAgICBmbG9hdDMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgZmxvYXQzIHBhcmFtXzEgPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIGZsb2F0NHg0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIGZsb2F0NChnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMiksIDEuMCk7Cn0KCnZlcnRleCBtYWluMF9vdXQgbWFpbjAobWFpbjBfaW4gaW4gW1tzdGFnZV9pbl1dLCBjb25zdGFudCB1X3ZzX3BiclBhcmFtcyYgcGJyUGFyYW1zIFtbYnVmZmVyKDApXV0sIGNvbnN0YW50IHVfdnNfc3ByaXRlUGFyYW1zJiBzcHJpdGVQYXJhbXMgW1tidWZmZXIoMSldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgZmxvYXQ0eDQgcGFyYW0gPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICBmbG9hdDQgXzY3ID0gZ2V0UG9zaXRpb24ocGFyYW0sIGluLmFfcG9zaXRpb24pOwogICAgZmxvYXQ0IF83OCA9IHBiclBhcmFtcy5tb2RlbE1hdHJpeCAqIF82NzsKICAgIG91dC52X3Bvc2l0aW9uID0gZmxvYXQzKF83OC54eXopIC8gZmxvYXQzKF83OC53KTsKICAgIG91dC52X3V2MSA9IGZsb2F0MigwLjApOwogICAgb3V0LnZfdXYyID0gZmxvYXQyKDAuMCk7CiAgICBvdXQudl91djEgPSBpbi5hX3RleGNvb3JkMTsKICAgIG91dC52X3V2MSA9IChpbi5hX3RleGNvb3JkMSAqIHNwcml0ZVBhcmFtcy50ZXh0dXJlUmVjdC56dykgKyBzcHJpdGVQYXJhbXMudGV4dHVyZVJlY3QueHk7CiAgICBvdXQudl9jb2xvciA9IGluLmFfY29sb3I7CiAgICBvdXQuZ2xfUG9zaXRpb24gPSBwYnJQYXJhbXMubXZwTWF0cml4ICogXzY3OwogICAgb3V0LmdsX1Bvc2l0aW9uLnogPSAob3V0LmdsX1Bvc2l0aW9uLnogKyBvdXQuZ2xfUG9zaXRpb24udykgKiAwLjU7ICAgICAgIC8vIEFkanVzdCBjbGlwLXNwYWNlIGZvciBNZXRhbAogICAgcmV0dXJuIG91dDsKfQoKUkVGTGYCAABtZXNoX1VsdFV2MVZjNFR4ckZvZ19tc2wyMWlvcwAAAAMAAAAAAAAAAgAAAAQAAABhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV90ZXhjb29yZDEAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMmFfY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQDAAAAdV92c19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAFtb2RlbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAG5vcm1hbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAABAAAAAbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAIAAAAABAAAAdV92c19zcHJpdGVQYXJhbXMAAAAAAAAAAAAAAAAAAABzcHJpdGVQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAEAAAAAF0ZXh0dXJlUmVjdAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAFNUQUfGCQAARlJBR0NPREX5BwAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfZnNfcGJyUGFyYW1zCnsKICAgIGZsb2F0NCBiYXNlQ29sb3JGYWN0b3I7CiAgICBmbG9hdCBtZXRhbGxpY0ZhY3RvcjsKICAgIGZsb2F0IHJvdWdobmVzc0ZhY3RvcjsKICAgIGZsb2F0MyBlbWlzc2l2ZUZhY3RvcjsKICAgIHBhY2tlZF9mbG9hdDMgYW1iaWVudExpZ2h0OwogICAgZmxvYXQgYW1iaWVudEZhY3RvcjsKfTsKCnN0cnVjdCBtYWluMF9vdXQKewogICAgZmxvYXQ0IGdfZmluYWxDb2xvciBbW2NvbG9yKDApXV07Cn07CgpzdHJ1Y3QgbWFpbjBfaW4KewogICAgZmxvYXQyIHZfdXYxIFtbdXNlcihsb2NuMSldXTsKICAgIGZsb2F0NCB2X2NvbG9yIFtbdXNlcihsb2NuMyldXTsKfTsKCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBzUkdCVG9MaW5lYXIodGhyZWFkIGNvbnN0IGZsb2F0MyYgc3JnYkluKQp7CiAgICByZXR1cm4gcG93KHNyZ2JJbiwgZmxvYXQzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgc1JHQlRvTGluZWFyKHRocmVhZCBjb25zdCBmbG9hdDQmIHNyZ2JJbikKewogICAgZmxvYXQzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiBmbG9hdDQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgZ2V0VmVydGV4Q29sb3IodGhyZWFkIGZsb2F0NCYgdl9jb2xvcikKewogICAgcmV0dXJuIHZfY29sb3I7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0NCBnZXRCYXNlQ29sb3IodGhyZWFkIGZsb2F0NCYgdl9jb2xvciwgY29uc3RhbnQgdV9mc19wYnJQYXJhbXMmIHBiclBhcmFtcywgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9iYXNlQ29sb3JUZXh0dXJlLCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X2Jhc2VDb2xvclRleHR1cmVTbXBsciwgdGhyZWFkIGZsb2F0MiYgdl91djEpCnsKICAgIGZsb2F0NCBiYXNlQ29sb3IgPSBwYnJQYXJhbXMuYmFzZUNvbG9yRmFjdG9yOwogICAgZmxvYXQ0IHBhcmFtID0gdV9iYXNlQ29sb3JUZXh0dXJlLnNhbXBsZSh1X2Jhc2VDb2xvclRleHR1cmVTbXBsciwgdl91djEpOwogICAgZmxvYXQ0IF8xMDMgPSBiYXNlQ29sb3I7CiAgICBmbG9hdDQgXzEwNCA9IF8xMDMgKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzEwNDsKICAgIHJldHVybiBfMTA0ICogZ2V0VmVydGV4Q29sb3Iodl9jb2xvcik7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBsaW5lYXJUb3NSR0IodGhyZWFkIGNvbnN0IGZsb2F0MyYgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIGZsb2F0MygwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzUpKTsKfQoKZnJhZ21lbnQgbWFpbjBfb3V0IG1haW4wKG1haW4wX2luIGluIFtbc3RhZ2VfaW5dXSwgY29uc3RhbnQgdV9mc19wYnJQYXJhbXMmIHBiclBhcmFtcyBbW2J1ZmZlcigwKV1dLCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfYmFzZUNvbG9yVGV4dHVyZSBbW3RleHR1cmUoMCldXSwgc2FtcGxlciB1X2Jhc2VDb2xvclRleHR1cmVTbXBsciBbW3NhbXBsZXIoMCldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgZmxvYXQ0IF8yNTkgPSBnZXRCYXNlQ29sb3IoaW4udl9jb2xvciwgcGJyUGFyYW1zLCB1X2Jhc2VDb2xvclRleHR1cmUsIHVfYmFzZUNvbG9yVGV4dHVyZVNtcGxyLCBpbi52X3V2MSk7CiAgICBmbG9hdDMgcGFyYW0gPSBfMjU5Lnh5ejsKICAgIG91dC5nX2ZpbmFsQ29sb3IgPSBmbG9hdDQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzI1OS53KTsKICAgIHJldHVybiBvdXQ7Cn0KClJFRky5AQAAbWVzaF9VbHRVdjFWYzRUeHJGb2dfbXNsMjFpb3MAAAAAAAAAAQAAAAEAAAAGAAAAdV9iYXNlQ29sb3JUZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUBgAAAHVfZnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABYmFzZUNvbG9yRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABtZXRhbGxpY0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAEAAAAHJvdWdobmVzc0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAUAAAAZW1pc3NpdmVGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAACAAAABhbWJpZW50TGlnaHQAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAMAAAAGFtYmllbnRGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAA8AAAA";
static const std::string mesh_PucShwPcfNor_msl21ios = "";
static const std::string ui_Vc4_msl21ios = "U0JTIAAAAABkAAAATVNMIIROAAAAAFNUQUf2AwAAVkVSVENPREWdAgAAI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfdnNfdWlQYXJhbXMKewogICAgZmxvYXQ0eDQgbXZwTWF0cml4Owp9OwoKc3RydWN0IG1haW4wX291dAp7CiAgICBmbG9hdDQgdl9jb2xvciBbW3VzZXIobG9jbjApXV07CiAgICBmbG9hdDQgZ2xfUG9zaXRpb24gW1twb3NpdGlvbl1dOwp9OwoKc3RydWN0IG1haW4wX2luCnsKICAgIGZsb2F0MyBhX3Bvc2l0aW9uIFtbYXR0cmlidXRlKDApXV07CiAgICBmbG9hdDQgYV9jb2xvciBbW2F0dHJpYnV0ZSgxKV1dOwp9OwoKdmVydGV4IG1haW4wX291dCBtYWluMChtYWluMF9pbiBpbiBbW3N0YWdlX2luXV0sIGNvbnN0YW50IHVfdnNfdWlQYXJhbXMmIHVpUGFyYW1zIFtbYnVmZmVyKDApXV0pCnsKICAgIG1haW4wX291dCBvdXQgPSB7fTsKICAgIG91dC52X2NvbG9yID0gaW4uYV9jb2xvcjsKICAgIG91dC5nbF9Qb3NpdGlvbiA9IHVpUGFyYW1zLm12cE1hdHJpeCAqIGZsb2F0NChpbi5hX3Bvc2l0aW9uLCAxLjApOwogICAgb3V0LmdsX1Bvc2l0aW9uLnogPSAob3V0LmdsX1Bvc2l0aW9uLnogKyBvdXQuZ2xfUG9zaXRpb24udykgKiAwLjU7ICAgICAgIC8vIEFkanVzdCBjbGlwLXNwYWNlIGZvciBNZXRhbAogICAgcmV0dXJuIG91dDsKfQoKUkVGTEUBAAB1aV9WYzRfbXNsMjFpb3MAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAQAAAAEAAABhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABOT1JNQUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0YV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAB1X3ZzX3VpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAHVpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAW12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAU1RBR8kEAABGUkFHQ09ERQgEAAAjcHJhZ21hIGNsYW5nIGRpYWdub3N0aWMgaWdub3JlZCAiLVdtaXNzaW5nLXByb3RvdHlwZXMiCgojaW5jbHVkZSA8bWV0YWxfc3RkbGliPgojaW5jbHVkZSA8c2ltZC9zaW1kLmg+Cgp1c2luZyBuYW1lc3BhY2UgbWV0YWw7CgpzdHJ1Y3QgdV9mc191aVBhcmFtcwp7CiAgICBmbG9hdDQgY29sb3I7Cn07CgpzdHJ1Y3QgbWFpbjBfb3V0CnsKICAgIGZsb2F0NCBnX2ZpbmFsQ29sb3IgW1tjb2xvcigwKV1dOwp9OwoKc3RydWN0IG1haW4wX2luCnsKICAgIGZsb2F0NCB2X2NvbG9yIFtbdXNlcihsb2NuMCldXTsKfTsKCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0NCBnZXRWZXJ0ZXhDb2xvcih0aHJlYWQgZmxvYXQ0JiB2X2NvbG9yKQp7CiAgICByZXR1cm4gdl9jb2xvcjsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0IGdldEJhc2VDb2xvcih0aHJlYWQgZmxvYXQ0JiB2X2NvbG9yLCBjb25zdGFudCB1X2ZzX3VpUGFyYW1zJiB1aVBhcmFtcykKewogICAgcmV0dXJuIHVpUGFyYW1zLmNvbG9yICogZ2V0VmVydGV4Q29sb3Iodl9jb2xvcik7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBsaW5lYXJUb3NSR0IodGhyZWFkIGNvbnN0IGZsb2F0MyYgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIGZsb2F0MygwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzUpKTsKfQoKZnJhZ21lbnQgbWFpbjBfb3V0IG1haW4wKG1haW4wX2luIGluIFtbc3RhZ2VfaW5dXSwgY29uc3RhbnQgdV9mc191aVBhcmFtcyYgdWlQYXJhbXMgW1tidWZmZXIoMCldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgZmxvYXQ0IF81MCA9IGdldEJhc2VDb2xvcihpbi52X2NvbG9yLCB1aVBhcmFtcyk7CiAgICBmbG9hdDMgcGFyYW0gPSBfNTAueHl6OwogICAgb3V0LmdfZmluYWxDb2xvciA9IGZsb2F0NChsaW5lYXJUb3NSR0IocGFyYW0pLCBfNTAudyk7CiAgICByZXR1cm4gb3V0Owp9CgpSRUZMrQAAAHVpX1ZjNF9tc2wyMWlvcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAEAAAB1X2ZzX3VpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAHVpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAWNvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAA";
static const std::string mesh_UltUv1Fog_msl21ios = "U0JTIAAAAABkAAAATVNMIIROAAAAAFNUQUfJCAAAVkVSVENPREUYBwAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfdnNfcGJyUGFyYW1zCnsKICAgIGZsb2F0NHg0IG1vZGVsTWF0cml4OwogICAgZmxvYXQ0eDQgbm9ybWFsTWF0cml4OwogICAgZmxvYXQ0eDQgbXZwTWF0cml4Owp9OwoKc3RydWN0IG1haW4wX291dAp7CiAgICBmbG9hdDMgdl9wb3NpdGlvbiBbW3VzZXIobG9jbjApXV07CiAgICBmbG9hdDIgdl91djEgW1t1c2VyKGxvY24xKV1dOwogICAgZmxvYXQyIHZfdXYyIFtbdXNlcihsb2NuMildXTsKICAgIGZsb2F0NCBnbF9Qb3NpdGlvbiBbW3Bvc2l0aW9uXV07Cn07CgpzdHJ1Y3QgbWFpbjBfaW4KewogICAgZmxvYXQzIGFfcG9zaXRpb24gW1thdHRyaWJ1dGUoMCldXTsKICAgIGZsb2F0MiBhX3RleGNvb3JkMSBbW2F0dHJpYnV0ZSgxKV1dOwp9OwoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0eDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIHJldHVybiBmbG9hdDR4NChmbG9hdDQoMC4wKSwgZmxvYXQ0KDAuMCksIGZsb2F0NCgwLjApLCBmbG9hdDQoMC4wKSk7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBnZXRNb3JwaFBvc2l0aW9uKHRocmVhZCBjb25zdCBmbG9hdDMmIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIGdldFNraW5Qb3NpdGlvbih0aHJlYWQgY29uc3QgZmxvYXQzJiBwb3MsIHRocmVhZCBjb25zdCBmbG9hdDR4NCYgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0IGdldFBvc2l0aW9uKHRocmVhZCBjb25zdCBmbG9hdDR4NCYgYm9uZVRyYW5zZm9ybSwgdGhyZWFkIGZsb2F0MyYgYV9wb3NpdGlvbikKewogICAgZmxvYXQzIHBhcmFtID0gYV9wb3NpdGlvbjsKICAgIGZsb2F0MyBwYXJhbV8xID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBmbG9hdDR4NCBwYXJhbV8yID0gYm9uZVRyYW5zZm9ybTsKICAgIHJldHVybiBmbG9hdDQoZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpLCAxLjApOwp9Cgp2ZXJ0ZXggbWFpbjBfb3V0IG1haW4wKG1haW4wX2luIGluIFtbc3RhZ2VfaW5dXSwgY29uc3RhbnQgdV92c19wYnJQYXJhbXMmIHBiclBhcmFtcyBbW2J1ZmZlcigwKV1dKQp7CiAgICBtYWluMF9vdXQgb3V0ID0ge307CiAgICBmbG9hdDR4NCBwYXJhbSA9IGdldEJvbmVUcmFuc2Zvcm0oKTsKICAgIGZsb2F0NCBfNjcgPSBnZXRQb3NpdGlvbihwYXJhbSwgaW4uYV9wb3NpdGlvbik7CiAgICBmbG9hdDQgXzc4ID0gcGJyUGFyYW1zLm1vZGVsTWF0cml4ICogXzY3OwogICAgb3V0LnZfcG9zaXRpb24gPSBmbG9hdDMoXzc4Lnh5eikgLyBmbG9hdDMoXzc4LncpOwogICAgb3V0LnZfdXYxID0gZmxvYXQyKDAuMCk7CiAgICBvdXQudl91djIgPSBmbG9hdDIoMC4wKTsKICAgIG91dC52X3V2MSA9IGluLmFfdGV4Y29vcmQxOwogICAgb3V0LmdsX1Bvc2l0aW9uID0gcGJyUGFyYW1zLm12cE1hdHJpeCAqIF82NzsKICAgIG91dC5nbF9Qb3NpdGlvbi56ID0gKG91dC5nbF9Qb3NpdGlvbi56ICsgb3V0LmdsX1Bvc2l0aW9uLncpICogMC41OyAgICAgICAvLyBBZGp1c3QgY2xpcC1zcGFjZSBmb3IgTWV0YWwKICAgIHJldHVybiBvdXQ7Cn0KClJFRkydAQAAbWVzaF9VbHRVdjFGb2dfbXNsMjFpb3MAAAAAAAAAAAACAAAAAAAAAAEAAAADAAAAYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfdGV4Y29vcmQxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDIDAAAAdV92c19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAFtb2RlbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAG5vcm1hbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAABAAAAAbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAIAAAABTVEFHZQkAAEZSQUdDT0RFmAcAACNwcmFnbWEgY2xhbmcgZGlhZ25vc3RpYyBpZ25vcmVkICItV21pc3NpbmctcHJvdG90eXBlcyIKCiNpbmNsdWRlIDxtZXRhbF9zdGRsaWI+CiNpbmNsdWRlIDxzaW1kL3NpbWQuaD4KCnVzaW5nIG5hbWVzcGFjZSBtZXRhbDsKCnN0cnVjdCB1X2ZzX3BiclBhcmFtcwp7CiAgICBmbG9hdDQgYmFzZUNvbG9yRmFjdG9yOwogICAgZmxvYXQgbWV0YWxsaWNGYWN0b3I7CiAgICBmbG9hdCByb3VnaG5lc3NGYWN0b3I7CiAgICBmbG9hdDMgZW1pc3NpdmVGYWN0b3I7CiAgICBwYWNrZWRfZmxvYXQzIGFtYmllbnRMaWdodDsKICAgIGZsb2F0IGFtYmllbnRGYWN0b3I7Cn07CgpzdHJ1Y3QgbWFpbjBfb3V0CnsKICAgIGZsb2F0NCBnX2ZpbmFsQ29sb3IgW1tjb2xvcigwKV1dOwp9OwoKc3RydWN0IG1haW4wX2luCnsKICAgIGZsb2F0MiB2X3V2MSBbW3VzZXIobG9jbjEpXV07Cn07CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDMgc1JHQlRvTGluZWFyKHRocmVhZCBjb25zdCBmbG9hdDMmIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIGZsb2F0MygyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjUpKTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0IHNSR0JUb0xpbmVhcih0aHJlYWQgY29uc3QgZmxvYXQ0JiBzcmdiSW4pCnsKICAgIGZsb2F0MyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gZmxvYXQ0KHNSR0JUb0xpbmVhcihwYXJhbSksIHNyZ2JJbi53KTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0IGdldFZlcnRleENvbG9yKCkKewogICAgcmV0dXJuIGZsb2F0NCgxLjApOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgZ2V0QmFzZUNvbG9yKGNvbnN0YW50IHVfZnNfcGJyUGFyYW1zJiBwYnJQYXJhbXMsIHRocmVhZCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfYmFzZUNvbG9yVGV4dHVyZSwgdGhyZWFkIGNvbnN0IHNhbXBsZXIgdV9iYXNlQ29sb3JUZXh0dXJlU21wbHIsIHRocmVhZCBmbG9hdDImIHZfdXYxKQp7CiAgICBmbG9hdDQgYmFzZUNvbG9yID0gcGJyUGFyYW1zLmJhc2VDb2xvckZhY3RvcjsKICAgIGZsb2F0NCBwYXJhbSA9IHVfYmFzZUNvbG9yVGV4dHVyZS5zYW1wbGUodV9iYXNlQ29sb3JUZXh0dXJlU21wbHIsIHZfdXYxKTsKICAgIGZsb2F0NCBfMTAwID0gYmFzZUNvbG9yOwogICAgZmxvYXQ0IF8xMDEgPSBfMTAwICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8xMDE7CiAgICByZXR1cm4gXzEwMSAqIGdldFZlcnRleENvbG9yKCk7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBsaW5lYXJUb3NSR0IodGhyZWFkIGNvbnN0IGZsb2F0MyYgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIGZsb2F0MygwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzUpKTsKfQoKZnJhZ21lbnQgbWFpbjBfb3V0IG1haW4wKG1haW4wX2luIGluIFtbc3RhZ2VfaW5dXSwgY29uc3RhbnQgdV9mc19wYnJQYXJhbXMmIHBiclBhcmFtcyBbW2J1ZmZlcigwKV1dLCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfYmFzZUNvbG9yVGV4dHVyZSBbW3RleHR1cmUoMCldXSwgc2FtcGxlciB1X2Jhc2VDb2xvclRleHR1cmVTbXBsciBbW3NhbXBsZXIoMCldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgZmxvYXQ0IF8yNTYgPSBnZXRCYXNlQ29sb3IocGJyUGFyYW1zLCB1X2Jhc2VDb2xvclRleHR1cmUsIHVfYmFzZUNvbG9yVGV4dHVyZVNtcGxyLCBpbi52X3V2MSk7CiAgICBmbG9hdDMgcGFyYW0gPSBfMjU2Lnh5ejsKICAgIG91dC5nX2ZpbmFsQ29sb3IgPSBmbG9hdDQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzI1Ni53KTsKICAgIHJldHVybiBvdXQ7Cn0KClJFRky5AQAAbWVzaF9VbHRVdjFGb2dfbXNsMjFpb3MAAAAAAAAAAAAAAAAAAQAAAAEAAAAGAAAAdV9iYXNlQ29sb3JUZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUBgAAAHVfZnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABYmFzZUNvbG9yRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABtZXRhbGxpY0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAEAAAAHJvdWdobmVzc0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAUAAAAZW1pc3NpdmVGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAACAAAABhbWJpZW50TGlnaHQAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAMAAAAGFtYmllbnRGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAA8AAAA";
static const std::string points_TexVc4Txr_msl21ios = "U0JTIAAAAABkAAAATVNMIIROAAAAAFNUQUd4BgAAVkVSVENPREU7BAAAI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfdnNfcG9pbnRzUGFyYW1zCnsKICAgIGZsb2F0NHg0IG12cE1hdHJpeDsKfTsKCnN0cnVjdCBtYWluMF9vdXQKewogICAgZmxvYXQgdl9wb2ludHJvdGF0aW9uIFtbdXNlcihsb2NuMCldXTsKICAgIGZsb2F0NCB2X2NvbG9yIFtbdXNlcihsb2NuMSldXTsKICAgIGZsb2F0NCB2X3RleHR1cmVyZWN0IFtbdXNlcihsb2NuMildXTsKICAgIGZsb2F0NCBnbF9Qb3NpdGlvbiBbW3Bvc2l0aW9uXV07CiAgICBmbG9hdCBnbF9Qb2ludFNpemUgW1twb2ludF9zaXplXV07Cn07CgpzdHJ1Y3QgbWFpbjBfaW4KewogICAgZmxvYXQzIGFfcG9zaXRpb24gW1thdHRyaWJ1dGUoMCldXTsKICAgIGZsb2F0IGFfcG9pbnRzaXplIFtbYXR0cmlidXRlKDEpXV07CiAgICBmbG9hdCBhX3BvaW50cm90YXRpb24gW1thdHRyaWJ1dGUoMildXTsKICAgIGZsb2F0NCBhX2NvbG9yIFtbYXR0cmlidXRlKDMpXV07CiAgICBmbG9hdDQgYV90ZXh0dXJlcmVjdCBbW2F0dHJpYnV0ZSg0KV1dOwp9OwoKdmVydGV4IG1haW4wX291dCBtYWluMChtYWluMF9pbiBpbiBbW3N0YWdlX2luXV0sIGNvbnN0YW50IHVfdnNfcG9pbnRzUGFyYW1zJiBwb2ludHNQYXJhbXMgW1tidWZmZXIoMCldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgb3V0LnZfcG9pbnRyb3RhdGlvbiA9IGluLmFfcG9pbnRyb3RhdGlvbjsKICAgIG91dC52X2NvbG9yID0gaW4uYV9jb2xvcjsKICAgIG91dC52X3RleHR1cmVyZWN0ID0gaW4uYV90ZXh0dXJlcmVjdDsKICAgIG91dC5nbF9Qb3NpdGlvbiA9IHBvaW50c1BhcmFtcy5tdnBNYXRyaXggKiBmbG9hdDQoaW4uYV9wb3NpdGlvbiwgMS4wKTsKICAgIG91dC5nbF9Qb2ludFNpemUgPSBpbi5hX3BvaW50c2l6ZSAvIG91dC5nbF9Qb3NpdGlvbi53OwogICAgb3V0LmdsX1Bvc2l0aW9uLnogPSAob3V0LmdsX1Bvc2l0aW9uLnogKyBvdXQuZ2xfUG9zaXRpb24udykgKiAwLjU7ICAgICAgIC8vIEFkanVzdCBjbGlwLXNwYWNlIGZvciBNZXRhbAogICAgcmV0dXJuIG91dDsKfQoKUkVGTCkCAABwb2ludHNfVGV4VmM0VHhyX21zbDIxaW9zAAAAAAAAAAUAAAAAAAAAAQAAAAEAAABhX3BvaW50cm90YXRpb24AAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQxYV9jb2xvcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAARkxUNGFfdGV4dHVyZXJlY3QAAAAAAAAAAAAAAAAAAAAAAAAABAAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAEZMVDRhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV9wb2ludHNpemUAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAB1X3ZzX3BvaW50c1BhcmFtcwAAAAAAAAAAAAAAAAAAAHBvaW50c1BhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAW12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAU1RBR+kJAABGUkFHQ09ERXUJAAAjcHJhZ21hIGNsYW5nIGRpYWdub3N0aWMgaWdub3JlZCAiLVdtaXNzaW5nLXByb3RvdHlwZXMiCgojaW5jbHVkZSA8bWV0YWxfc3RkbGliPgojaW5jbHVkZSA8c2ltZC9zaW1kLmg+Cgp1c2luZyBuYW1lc3BhY2UgbWV0YWw7CgpzdHJ1Y3QgbWFpbjBfb3V0CnsKICAgIGZsb2F0NCBnX2ZpbmFsQ29sb3IgW1tjb2xvcigwKV1dOwp9OwoKc3RydWN0IG1haW4wX2luCnsKICAgIGZsb2F0IHZfcG9pbnRyb3RhdGlvbiBbW3VzZXIobG9jbjApXV07CiAgICBmbG9hdDQgdl9jb2xvciBbW3VzZXIobG9jbjEpXV07CiAgICBmbG9hdDQgdl90ZXh0dXJlcmVjdCBbW3VzZXIobG9jbjIpXV07Cn07CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDMgc1JHQlRvTGluZWFyKHRocmVhZCBjb25zdCBmbG9hdDMmIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIGZsb2F0MygyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjUpKTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0IHNSR0JUb0xpbmVhcih0aHJlYWQgY29uc3QgZmxvYXQ0JiBzcmdiSW4pCnsKICAgIGZsb2F0MyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gZmxvYXQ0KHNSR0JUb0xpbmVhcihwYXJhbSksIHNyZ2JJbi53KTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0IGdldFZlcnRleENvbG9yKHRocmVhZCBmbG9hdDQmIHZfY29sb3IpCnsKICAgIHJldHVybiB2X2NvbG9yOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgZ2V0QmFzZUNvbG9yKHRocmVhZCBmbG9hdDQmIHZfY29sb3IsIHRocmVhZCBmbG9hdDImIGdsX1BvaW50Q29vcmQsIHRocmVhZCBmbG9hdCYgdl9wb2ludHJvdGF0aW9uLCB0aHJlYWQgZmxvYXQ0JiB2X3RleHR1cmVyZWN0LCB0aHJlYWQgdGV4dHVyZTJkPGZsb2F0PiB1X3BvaW50c1RleHR1cmUsIHRocmVhZCBjb25zdCBzYW1wbGVyIHVfcG9pbnRzVGV4dHVyZVNtcGxyKQp7CiAgICBmbG9hdDQgYmFzZUNvbG9yID0gZmxvYXQ0KDEuMCk7CiAgICBmbG9hdDIgcmVzdWx0Q29vcmQgPSBnbF9Qb2ludENvb3JkOwogICAgaWYgKChpc3Vub3JkZXJlZCh2X3BvaW50cm90YXRpb24sIDAuMCkgfHwgdl9wb2ludHJvdGF0aW9uICE9IDAuMCkpCiAgICB7CiAgICAgICAgZmxvYXQgXzgzID0gY29zKHZfcG9pbnRyb3RhdGlvbik7CiAgICAgICAgZmxvYXQgXzg4ID0gcmVzdWx0Q29vcmQueCAtIDAuNTsKICAgICAgICBmbG9hdCBfOTEgPSBzaW4odl9wb2ludHJvdGF0aW9uKTsKICAgICAgICBmbG9hdCBfOTUgPSByZXN1bHRDb29yZC55IC0gMC41OwogICAgICAgIHJlc3VsdENvb3JkID0gZmxvYXQyKCgoXzgzICogXzg4KSArIChfOTEgKiBfOTUpKSArIDAuNSwgKChfODMgKiBfOTUpIC0gKF85MSAqIF84OCkpICsgMC41KTsKICAgIH0KICAgIGZsb2F0MiBfMTE0ID0gcmVzdWx0Q29vcmQ7CiAgICBmbG9hdDIgXzEyMSA9IChfMTE0ICogdl90ZXh0dXJlcmVjdC56dykgKyB2X3RleHR1cmVyZWN0Lnh5OwogICAgcmVzdWx0Q29vcmQgPSBfMTIxOwogICAgZmxvYXQ0IHBhcmFtID0gdV9wb2ludHNUZXh0dXJlLnNhbXBsZSh1X3BvaW50c1RleHR1cmVTbXBsciwgXzEyMSk7CiAgICBmbG9hdDQgXzEzMSA9IGJhc2VDb2xvcjsKICAgIGZsb2F0NCBfMTMyID0gXzEzMSAqIHNSR0JUb0xpbmVhcihwYXJhbSk7CiAgICBiYXNlQ29sb3IgPSBfMTMyOwogICAgcmV0dXJuIF8xMzIgKiBnZXRWZXJ0ZXhDb2xvcih2X2NvbG9yKTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIGxpbmVhclRvc1JHQih0aHJlYWQgY29uc3QgZmxvYXQzJiBjb2xvcikKewogICAgcmV0dXJuIHBvdyhjb2xvciwgZmxvYXQzKDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NSkpOwp9CgpmcmFnbWVudCBtYWluMF9vdXQgbWFpbjAobWFpbjBfaW4gaW4gW1tzdGFnZV9pbl1dLCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfcG9pbnRzVGV4dHVyZSBbW3RleHR1cmUoMCldXSwgc2FtcGxlciB1X3BvaW50c1RleHR1cmVTbXBsciBbW3NhbXBsZXIoMCldXSwgZmxvYXQyIGdsX1BvaW50Q29vcmQgW1twb2ludF9jb29yZF1dKQp7CiAgICBtYWluMF9vdXQgb3V0ID0ge307CiAgICBmbG9hdDQgXzEzOSA9IGdldEJhc2VDb2xvcihpbi52X2NvbG9yLCBnbF9Qb2ludENvb3JkLCBpbi52X3BvaW50cm90YXRpb24sIGluLnZfdGV4dHVyZXJlY3QsIHVfcG9pbnRzVGV4dHVyZSwgdV9wb2ludHNUZXh0dXJlU21wbHIpOwogICAgZmxvYXQzIHBhcmFtID0gXzEzOS54eXo7CiAgICBvdXQuZ19maW5hbENvbG9yID0gZmxvYXQ0KGxpbmVhclRvc1JHQihwYXJhbSksIF8xMzkudyk7CiAgICByZXR1cm4gb3V0Owp9CgpSRUZMYAAAAHBvaW50c19UZXhWYzRUeHJfbXNsMjFpb3MAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAHVfcG9pbnRzVGV4dHVyZQAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVA==";
static const std::string mesh_Uv1PucShwPcfNorVc4Fog_msl21ios = "";
static const std::string mesh_Uv1PucShwPcfNorFogSki_msl21ios = "";
static const std::string mesh_PucShwPcfNorTanFogMtaMnr_msl21ios = "";
static const std::string mesh_UltUv1Vc4_msl21ios = "U0JTIAAAAABkAAAATVNMIIROAAAAAFNUQUd8CQAAVkVSVENPREV/BwAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfdnNfcGJyUGFyYW1zCnsKICAgIGZsb2F0NHg0IG1vZGVsTWF0cml4OwogICAgZmxvYXQ0eDQgbm9ybWFsTWF0cml4OwogICAgZmxvYXQ0eDQgbXZwTWF0cml4Owp9OwoKc3RydWN0IG1haW4wX291dAp7CiAgICBmbG9hdDMgdl9wb3NpdGlvbiBbW3VzZXIobG9jbjApXV07CiAgICBmbG9hdDIgdl91djEgW1t1c2VyKGxvY24xKV1dOwogICAgZmxvYXQyIHZfdXYyIFtbdXNlcihsb2NuMildXTsKICAgIGZsb2F0NCB2X2NvbG9yIFtbdXNlcihsb2NuMyldXTsKICAgIGZsb2F0NCBnbF9Qb3NpdGlvbiBbW3Bvc2l0aW9uXV07Cn07CgpzdHJ1Y3QgbWFpbjBfaW4KewogICAgZmxvYXQzIGFfcG9zaXRpb24gW1thdHRyaWJ1dGUoMCldXTsKICAgIGZsb2F0MiBhX3RleGNvb3JkMSBbW2F0dHJpYnV0ZSgxKV1dOwogICAgZmxvYXQ0IGFfY29sb3IgW1thdHRyaWJ1dGUoMildXTsKfTsKCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0NHg0IGdldEJvbmVUcmFuc2Zvcm0oKQp7CiAgICByZXR1cm4gZmxvYXQ0eDQoZmxvYXQ0KDAuMCksIGZsb2F0NCgwLjApLCBmbG9hdDQoMC4wKSwgZmxvYXQ0KDAuMCkpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDMgZ2V0TW9ycGhQb3NpdGlvbih0aHJlYWQgY29uc3QgZmxvYXQzJiBwb3MpCnsKICAgIHJldHVybiBwb3M7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBnZXRTa2luUG9zaXRpb24odGhyZWFkIGNvbnN0IGZsb2F0MyYgcG9zLCB0aHJlYWQgY29uc3QgZmxvYXQ0eDQmIGJvbmVUcmFuc2Zvcm0pCnsKICAgIHJldHVybiBwb3M7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0NCBnZXRQb3NpdGlvbih0aHJlYWQgY29uc3QgZmxvYXQ0eDQmIGJvbmVUcmFuc2Zvcm0sIHRocmVhZCBmbG9hdDMmIGFfcG9zaXRpb24pCnsKICAgIGZsb2F0MyBwYXJhbSA9IGFfcG9zaXRpb247CiAgICBmbG9hdDMgcGFyYW1fMSA9IGdldE1vcnBoUG9zaXRpb24ocGFyYW0pOwogICAgZmxvYXQ0eDQgcGFyYW1fMiA9IGJvbmVUcmFuc2Zvcm07CiAgICByZXR1cm4gZmxvYXQ0KGdldFNraW5Qb3NpdGlvbihwYXJhbV8xLCBwYXJhbV8yKSwgMS4wKTsKfQoKdmVydGV4IG1haW4wX291dCBtYWluMChtYWluMF9pbiBpbiBbW3N0YWdlX2luXV0sIGNvbnN0YW50IHVfdnNfcGJyUGFyYW1zJiBwYnJQYXJhbXMgW1tidWZmZXIoMCldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgZmxvYXQ0eDQgcGFyYW0gPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICBmbG9hdDQgXzY3ID0gZ2V0UG9zaXRpb24ocGFyYW0sIGluLmFfcG9zaXRpb24pOwogICAgZmxvYXQ0IF83OCA9IHBiclBhcmFtcy5tb2RlbE1hdHJpeCAqIF82NzsKICAgIG91dC52X3Bvc2l0aW9uID0gZmxvYXQzKF83OC54eXopIC8gZmxvYXQzKF83OC53KTsKICAgIG91dC52X3V2MSA9IGZsb2F0MigwLjApOwogICAgb3V0LnZfdXYyID0gZmxvYXQyKDAuMCk7CiAgICBvdXQudl91djEgPSBpbi5hX3RleGNvb3JkMTsKICAgIG91dC52X2NvbG9yID0gaW4uYV9jb2xvcjsKICAgIG91dC5nbF9Qb3NpdGlvbiA9IHBiclBhcmFtcy5tdnBNYXRyaXggKiBfNjc7CiAgICBvdXQuZ2xfUG9zaXRpb24ueiA9IChvdXQuZ2xfUG9zaXRpb24ueiArIG91dC5nbF9Qb3NpdGlvbi53KSAqIDAuNTsgICAgICAgLy8gQWRqdXN0IGNsaXAtc3BhY2UgZm9yIE1ldGFsCiAgICByZXR1cm4gb3V0Owp9CgpSRUZM6QEAAG1lc2hfVWx0VXYxVmM0X21zbDIxaW9zAAAAAAAAAAAAAwAAAAAAAAABAAAAAwAAAGFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDNhX3RleGNvb3JkMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABOT1JNQUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQyYV9jb2xvcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNAMAAAB1X3ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAW1vZGVsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAbm9ybWFsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAEAAAABtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAgAAAAFNUQUfGCQAARlJBR0NPREX5BwAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfZnNfcGJyUGFyYW1zCnsKICAgIGZsb2F0NCBiYXNlQ29sb3JGYWN0b3I7CiAgICBmbG9hdCBtZXRhbGxpY0ZhY3RvcjsKICAgIGZsb2F0IHJvdWdobmVzc0ZhY3RvcjsKICAgIGZsb2F0MyBlbWlzc2l2ZUZhY3RvcjsKICAgIHBhY2tlZF9mbG9hdDMgYW1iaWVudExpZ2h0OwogICAgZmxvYXQgYW1iaWVudEZhY3RvcjsKfTsKCnN0cnVjdCBtYWluMF9vdXQKewogICAgZmxvYXQ0IGdfZmluYWxDb2xvciBbW2NvbG9yKDApXV07Cn07CgpzdHJ1Y3QgbWFpbjBfaW4KewogICAgZmxvYXQyIHZfdXYxIFtbdXNlcihsb2NuMSldXTsKICAgIGZsb2F0NCB2X2NvbG9yIFtbdXNlcihsb2NuMyldXTsKfTsKCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBzUkdCVG9MaW5lYXIodGhyZWFkIGNvbnN0IGZsb2F0MyYgc3JnYkluKQp7CiAgICByZXR1cm4gcG93KHNyZ2JJbiwgZmxvYXQzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgc1JHQlRvTGluZWFyKHRocmVhZCBjb25zdCBmbG9hdDQmIHNyZ2JJbikKewogICAgZmxvYXQzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiBmbG9hdDQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgZ2V0VmVydGV4Q29sb3IodGhyZWFkIGZsb2F0NCYgdl9jb2xvcikKewogICAgcmV0dXJuIHZfY29sb3I7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0NCBnZXRCYXNlQ29sb3IodGhyZWFkIGZsb2F0NCYgdl9jb2xvciwgY29uc3RhbnQgdV9mc19wYnJQYXJhbXMmIHBiclBhcmFtcywgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9iYXNlQ29sb3JUZXh0dXJlLCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X2Jhc2VDb2xvclRleHR1cmVTbXBsciwgdGhyZWFkIGZsb2F0MiYgdl91djEpCnsKICAgIGZsb2F0NCBiYXNlQ29sb3IgPSBwYnJQYXJhbXMuYmFzZUNvbG9yRmFjdG9yOwogICAgZmxvYXQ0IHBhcmFtID0gdV9iYXNlQ29sb3JUZXh0dXJlLnNhbXBsZSh1X2Jhc2VDb2xvclRleHR1cmVTbXBsciwgdl91djEpOwogICAgZmxvYXQ0IF8xMDMgPSBiYXNlQ29sb3I7CiAgICBmbG9hdDQgXzEwNCA9IF8xMDMgKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzEwNDsKICAgIHJldHVybiBfMTA0ICogZ2V0VmVydGV4Q29sb3Iodl9jb2xvcik7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBsaW5lYXJUb3NSR0IodGhyZWFkIGNvbnN0IGZsb2F0MyYgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIGZsb2F0MygwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzUpKTsKfQoKZnJhZ21lbnQgbWFpbjBfb3V0IG1haW4wKG1haW4wX2luIGluIFtbc3RhZ2VfaW5dXSwgY29uc3RhbnQgdV9mc19wYnJQYXJhbXMmIHBiclBhcmFtcyBbW2J1ZmZlcigwKV1dLCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfYmFzZUNvbG9yVGV4dHVyZSBbW3RleHR1cmUoMCldXSwgc2FtcGxlciB1X2Jhc2VDb2xvclRleHR1cmVTbXBsciBbW3NhbXBsZXIoMCldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgZmxvYXQ0IF8yNTkgPSBnZXRCYXNlQ29sb3IoaW4udl9jb2xvciwgcGJyUGFyYW1zLCB1X2Jhc2VDb2xvclRleHR1cmUsIHVfYmFzZUNvbG9yVGV4dHVyZVNtcGxyLCBpbi52X3V2MSk7CiAgICBmbG9hdDMgcGFyYW0gPSBfMjU5Lnh5ejsKICAgIG91dC5nX2ZpbmFsQ29sb3IgPSBmbG9hdDQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzI1OS53KTsKICAgIHJldHVybiBvdXQ7Cn0KClJFRky5AQAAbWVzaF9VbHRVdjFWYzRfbXNsMjFpb3MAAAAAAAAAAAAAAAAAAQAAAAEAAAAGAAAAdV9iYXNlQ29sb3JUZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUBgAAAHVfZnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABYmFzZUNvbG9yRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABtZXRhbGxpY0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAEAAAAHJvdWdobmVzc0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAUAAAAZW1pc3NpdmVGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAACAAAABhbWJpZW50TGlnaHQAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAMAAAAGFtYmllbnRGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAA8AAAA";
static const std::string mesh_Uv1PucNorNmpTanVc4FogSki_msl21ios = "";
static const std::string sky_msl21ios = "U0JTIAAAAABkAAAATVNMIIROAAAAAFNUQUeHAwAAVkVSVENPREV6AgAAI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfdnNfc2t5UGFyYW1zCnsKICAgIGZsb2F0NHg0IHZwTWF0cml4Owp9OwoKc3RydWN0IG1haW4wX291dAp7CiAgICBmbG9hdDMgdXYgW1t1c2VyKGxvY24wKV1dOwogICAgZmxvYXQ0IGdsX1Bvc2l0aW9uIFtbcG9zaXRpb25dXTsKfTsKCnN0cnVjdCBtYWluMF9pbgp7CiAgICBmbG9hdDMgYV9wb3NpdGlvbiBbW2F0dHJpYnV0ZSgwKV1dOwp9OwoKdmVydGV4IG1haW4wX291dCBtYWluMChtYWluMF9pbiBpbiBbW3N0YWdlX2luXV0sIGNvbnN0YW50IHVfdnNfc2t5UGFyYW1zJiBza3lQYXJhbXMgW1tidWZmZXIoMCldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgb3V0LnV2ID0gaW4uYV9wb3NpdGlvbjsKICAgIG91dC5nbF9Qb3NpdGlvbiA9IChza3lQYXJhbXMudnBNYXRyaXggKiBmbG9hdDQoaW4uYV9wb3NpdGlvbiwgMS4wKSkueHl3dzsKICAgIG91dC5nbF9Qb3NpdGlvbi56ID0gKG91dC5nbF9Qb3NpdGlvbi56ICsgb3V0LmdsX1Bvc2l0aW9uLncpICogMC41OyAgICAgICAvLyBBZGp1c3QgY2xpcC1zcGFjZSBmb3IgTWV0YWwKICAgIHJldHVybiBvdXQ7Cn0KClJFRkz5AAAAc2t5X21zbDIxaW9zAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAABAAAAYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAB1X3ZzX3NreVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHNreVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAU1RBRxkDAABGUkFHQ09ERSgCAAAjaW5jbHVkZSA8bWV0YWxfc3RkbGliPgojaW5jbHVkZSA8c2ltZC9zaW1kLmg+Cgp1c2luZyBuYW1lc3BhY2UgbWV0YWw7CgpzdHJ1Y3QgdV9mc19za3lQYXJhbXMKewogICAgZmxvYXQ0IGNvbG9yOwp9OwoKc3RydWN0IG1haW4wX291dAp7CiAgICBmbG9hdDQgZnJhZ19jb2xvciBbW2NvbG9yKDApXV07Cn07CgpzdHJ1Y3QgbWFpbjBfaW4KewogICAgZmxvYXQzIHV2IFtbdXNlcihsb2NuMCldXTsKfTsKCmZyYWdtZW50IG1haW4wX291dCBtYWluMChtYWluMF9pbiBpbiBbW3N0YWdlX2luXV0sIGNvbnN0YW50IHVfZnNfc2t5UGFyYW1zJiBza3lQYXJhbXMgW1tidWZmZXIoMCldXSwgdGV4dHVyZWN1YmU8ZmxvYXQ+IHVfc2t5VGV4dHVyZSBbW3RleHR1cmUoMCldXSwgc2FtcGxlciB1X3NreVRleHR1cmVTbXBsciBbW3NhbXBsZXIoMCldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgb3V0LmZyYWdfY29sb3IgPSBza3lQYXJhbXMuY29sb3IgKiB1X3NreVRleHR1cmUuc2FtcGxlKHVfc2t5VGV4dHVyZVNtcGxyLCBpbi51dik7CiAgICByZXR1cm4gb3V0Owp9CgpSRUZM3QAAAHNreV9tc2wyMWlvcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAQAAAHVfc2t5VGV4dHVyZQAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAABDVUJFVEZMVAEAAAB1X2ZzX3NreVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHNreVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAWNvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAA";
static const std::string mesh_Uv1PucNorVc4_msl21ios = "U0JTIAAAAABkAAAATVNMIIROAAAAAFNUQUf6DAAAVkVSVENPREWxCgAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfdnNfcGJyUGFyYW1zCnsKICAgIGZsb2F0NHg0IG1vZGVsTWF0cml4OwogICAgZmxvYXQ0eDQgbm9ybWFsTWF0cml4OwogICAgZmxvYXQ0eDQgbXZwTWF0cml4Owp9OwoKc3RydWN0IG1haW4wX291dAp7CiAgICBmbG9hdDMgdl9wb3NpdGlvbiBbW3VzZXIobG9jbjApXV07CiAgICBmbG9hdDMgdl9ub3JtYWwgW1t1c2VyKGxvY24xKV1dOwogICAgZmxvYXQyIHZfdXYxIFtbdXNlcihsb2NuMildXTsKICAgIGZsb2F0MiB2X3V2MiBbW3VzZXIobG9jbjMpXV07CiAgICBmbG9hdDQgdl9jb2xvciBbW3VzZXIobG9jbjQpXV07CiAgICBmbG9hdDQgZ2xfUG9zaXRpb24gW1twb3NpdGlvbl1dOwp9OwoKc3RydWN0IG1haW4wX2luCnsKICAgIGZsb2F0MyBhX3Bvc2l0aW9uIFtbYXR0cmlidXRlKDApXV07CiAgICBmbG9hdDMgYV9ub3JtYWwgW1thdHRyaWJ1dGUoMSldXTsKICAgIGZsb2F0MiBhX3RleGNvb3JkMSBbW2F0dHJpYnV0ZSgyKV1dOwogICAgZmxvYXQ0IGFfY29sb3IgW1thdHRyaWJ1dGUoMyldXTsKfTsKCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0NHg0IGdldEJvbmVUcmFuc2Zvcm0oKQp7CiAgICByZXR1cm4gZmxvYXQ0eDQoZmxvYXQ0KDAuMCksIGZsb2F0NCgwLjApLCBmbG9hdDQoMC4wKSwgZmxvYXQ0KDAuMCkpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDMgZ2V0TW9ycGhQb3NpdGlvbih0aHJlYWQgY29uc3QgZmxvYXQzJiBwb3MpCnsKICAgIHJldHVybiBwb3M7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBnZXRTa2luUG9zaXRpb24odGhyZWFkIGNvbnN0IGZsb2F0MyYgcG9zLCB0aHJlYWQgY29uc3QgZmxvYXQ0eDQmIGJvbmVUcmFuc2Zvcm0pCnsKICAgIHJldHVybiBwb3M7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0NCBnZXRQb3NpdGlvbih0aHJlYWQgY29uc3QgZmxvYXQ0eDQmIGJvbmVUcmFuc2Zvcm0sIHRocmVhZCBmbG9hdDMmIGFfcG9zaXRpb24pCnsKICAgIGZsb2F0MyBwYXJhbSA9IGFfcG9zaXRpb247CiAgICBmbG9hdDMgcGFyYW1fMSA9IGdldE1vcnBoUG9zaXRpb24ocGFyYW0pOwogICAgZmxvYXQ0eDQgcGFyYW1fMiA9IGJvbmVUcmFuc2Zvcm07CiAgICByZXR1cm4gZmxvYXQ0KGdldFNraW5Qb3NpdGlvbihwYXJhbV8xLCBwYXJhbV8yKSwgMS4wKTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIGdldE1vcnBoTm9ybWFsKHRocmVhZCBjb25zdCBmbG9hdDMmIG5vcm1hbCkKewogICAgcmV0dXJuIG5vcm1hbDsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIGdldFNraW5Ob3JtYWwodGhyZWFkIGNvbnN0IGZsb2F0MyYgbm9ybWFsLCB0aHJlYWQgY29uc3QgZmxvYXQ0eDQmIGJvbmVUcmFuc2Zvcm0pCnsKICAgIHJldHVybiBub3JtYWw7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBnZXROb3JtYWwodGhyZWFkIGNvbnN0IGZsb2F0NHg0JiBib25lVHJhbnNmb3JtLCB0aHJlYWQgZmxvYXQzJiBhX25vcm1hbCkKewogICAgZmxvYXQzIHBhcmFtID0gYV9ub3JtYWw7CiAgICBmbG9hdDMgcGFyYW1fMSA9IGdldE1vcnBoTm9ybWFsKHBhcmFtKTsKICAgIGZsb2F0NHg0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIG5vcm1hbGl6ZShnZXRTa2luTm9ybWFsKHBhcmFtXzEsIHBhcmFtXzIpKTsKfQoKdmVydGV4IG1haW4wX291dCBtYWluMChtYWluMF9pbiBpbiBbW3N0YWdlX2luXV0sIGNvbnN0YW50IHVfdnNfcGJyUGFyYW1zJiBwYnJQYXJhbXMgW1tidWZmZXIoMCldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgZmxvYXQ0eDQgXzk0ID0gZ2V0Qm9uZVRyYW5zZm9ybSgpOwogICAgZmxvYXQ0eDQgcGFyYW0gPSBfOTQ7CiAgICBmbG9hdDQgXzk5ID0gZ2V0UG9zaXRpb24ocGFyYW0sIGluLmFfcG9zaXRpb24pOwogICAgZmxvYXQ0IF8xMTAgPSBwYnJQYXJhbXMubW9kZWxNYXRyaXggKiBfOTk7CiAgICBvdXQudl9wb3NpdGlvbiA9IGZsb2F0MyhfMTEwLnh5eikgLyBmbG9hdDMoXzExMC53KTsKICAgIGZsb2F0NHg0IHBhcmFtXzEgPSBfOTQ7CiAgICBvdXQudl9ub3JtYWwgPSBub3JtYWxpemUoZmxvYXQzKChwYnJQYXJhbXMubm9ybWFsTWF0cml4ICogZmxvYXQ0KGdldE5vcm1hbChwYXJhbV8xLCBpbi5hX25vcm1hbCksIDAuMCkpLnh5eikpOwogICAgb3V0LnZfdXYxID0gZmxvYXQyKDAuMCk7CiAgICBvdXQudl91djIgPSBmbG9hdDIoMC4wKTsKICAgIG91dC52X3V2MSA9IGluLmFfdGV4Y29vcmQxOwogICAgb3V0LnZfY29sb3IgPSBpbi5hX2NvbG9yOwogICAgb3V0LmdsX1Bvc2l0aW9uID0gcGJyUGFyYW1zLm12cE1hdHJpeCAqIF85OTsKICAgIG91dC5nbF9Qb3NpdGlvbi56ID0gKG91dC5nbF9Qb3NpdGlvbi56ICsgb3V0LmdsX1Bvc2l0aW9uLncpICogMC41OyAgICAgICAvLyBBZGp1c3QgY2xpcC1zcGFjZSBmb3IgTWV0YWwKICAgIHJldHVybiBvdXQ7Cn0KClJFRkw1AgAAbWVzaF9VdjFQdWNOb3JWYzRfbXNsMjFpb3MAAAAAAAAEAAAAAAAAAAEAAAADAAAAYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2Ffbm9ybWFsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDNhX3RleGNvb3JkMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQyYV9jb2xvcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAARkxUNAMAAAB1X3ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAW1vZGVsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAbm9ybWFsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAEAAAABtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAgAAAAFNUQUezNAAARlJBR0NPREUpMQAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IE1hdGVyaWFsSW5mbwp7CiAgICBmbG9hdCBwZXJjZXB0dWFsUm91Z2huZXNzOwogICAgZmxvYXQzIGYwOwogICAgZmxvYXQgYWxwaGFSb3VnaG5lc3M7CiAgICBmbG9hdDMgYWxiZWRvQ29sb3I7CiAgICBmbG9hdDMgZjkwOwogICAgZmxvYXQgbWV0YWxsaWM7CiAgICBmbG9hdDMgbjsKICAgIGZsb2F0MyBiYXNlQ29sb3I7Cn07CgpzdHJ1Y3QgTm9ybWFsSW5mbwp7CiAgICBmbG9hdDMgbmc7CiAgICBmbG9hdDMgbjsKICAgIGZsb2F0MyB0OwogICAgZmxvYXQzIGI7Cn07CgpzdHJ1Y3QgTGlnaHQKewogICAgaW50IHR5cGU7CiAgICBmbG9hdDMgZGlyZWN0aW9uOwogICAgZmxvYXQzIGNvbG9yOwogICAgZmxvYXQzIHBvc2l0aW9uOwogICAgZmxvYXQgcmFuZ2U7CiAgICBmbG9hdCBpbnRlbnNpdHk7CiAgICBmbG9hdCBpbm5lckNvbmVDb3M7CiAgICBmbG9hdCBvdXRlckNvbmVDb3M7CiAgICBib29sIHNoYWRvd3M7CiAgICBpbnQgc2hhZG93TWFwSW5kZXg7CiAgICBpbnQgbnVtU2hhZG93Q2FzY2FkZXM7Cn07CgpzdHJ1Y3QgdV9mc19wYnJQYXJhbXMKewogICAgZmxvYXQ0IGJhc2VDb2xvckZhY3RvcjsKICAgIGZsb2F0IG1ldGFsbGljRmFjdG9yOwogICAgZmxvYXQgcm91Z2huZXNzRmFjdG9yOwogICAgZmxvYXQzIGVtaXNzaXZlRmFjdG9yOwogICAgcGFja2VkX2Zsb2F0MyBhbWJpZW50TGlnaHQ7CiAgICBmbG9hdCBhbWJpZW50RmFjdG9yOwp9OwoKc3RydWN0IHVfZnNfbGlnaHRpbmcKewogICAgZmxvYXQ0IGRpcmVjdGlvbl9yYW5nZVs2XTsKICAgIGZsb2F0NCBjb2xvcl9pbnRlbnNpdHlbNl07CiAgICBmbG9hdDQgcG9zaXRpb25fdHlwZVs2XTsKICAgIGZsb2F0NCBpbkNvbmVfb3VDb25lX3NoYWRvd3NfY2FzY2FkZXNbNl07CiAgICBmbG9hdDQgZXllUG9zOwp9OwoKc3RydWN0IG1haW4wX291dAp7CiAgICBmbG9hdDQgZ19maW5hbENvbG9yIFtbY29sb3IoMCldXTsKfTsKCnN0cnVjdCBtYWluMF9pbgp7CiAgICBmbG9hdDMgdl9wb3NpdGlvbiBbW3VzZXIobG9jbjApXV07CiAgICBmbG9hdDMgdl9ub3JtYWwgW1t1c2VyKGxvY24xKV1dOwogICAgZmxvYXQyIHZfdXYxIFtbdXNlcihsb2NuMildXTsKICAgIGZsb2F0NCB2X2NvbG9yIFtbdXNlcihsb2NuNCldXTsKfTsKCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBzUkdCVG9MaW5lYXIodGhyZWFkIGNvbnN0IGZsb2F0MyYgc3JnYkluKQp7CiAgICByZXR1cm4gcG93KHNyZ2JJbiwgZmxvYXQzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgc1JHQlRvTGluZWFyKHRocmVhZCBjb25zdCBmbG9hdDQmIHNyZ2JJbikKewogICAgZmxvYXQzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiBmbG9hdDQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgZ2V0VmVydGV4Q29sb3IodGhyZWFkIGZsb2F0NCYgdl9jb2xvcikKewogICAgcmV0dXJuIHZfY29sb3I7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0NCBnZXRCYXNlQ29sb3IodGhyZWFkIGZsb2F0NCYgdl9jb2xvciwgY29uc3RhbnQgdV9mc19wYnJQYXJhbXMmIHBiclBhcmFtcywgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9iYXNlQ29sb3JUZXh0dXJlLCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X2Jhc2VDb2xvclRleHR1cmVTbXBsciwgdGhyZWFkIGZsb2F0MiYgdl91djEpCnsKICAgIGZsb2F0NCBiYXNlQ29sb3IgPSBwYnJQYXJhbXMuYmFzZUNvbG9yRmFjdG9yOwogICAgZmxvYXQ0IHBhcmFtID0gdV9iYXNlQ29sb3JUZXh0dXJlLnNhbXBsZSh1X2Jhc2VDb2xvclRleHR1cmVTbXBsciwgdl91djEpOwogICAgZmxvYXQ0IF8xNjggPSBiYXNlQ29sb3I7CiAgICBmbG9hdDQgXzE2OSA9IF8xNjggKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzE2OTsKICAgIHJldHVybiBfMTY5ICogZ2V0VmVydGV4Q29sb3Iodl9jb2xvcik7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCk5vcm1hbEluZm8gZ2V0Tm9ybWFsSW5mbyh0aHJlYWQgZmxvYXQyJiB2X3V2MSwgdGhyZWFkIGZsb2F0MyYgdl9wb3NpdGlvbiwgdGhyZWFkIGZsb2F0MyYgdl9ub3JtYWwpCnsKICAgIGZsb2F0MyBfMjUxID0gZmxvYXQzKHZfdXYxLCAwLjApOwogICAgZmxvYXQzIF8yNTIgPSBkZmR4KF8yNTEpOwogICAgZmxvYXQzIF8yNTggPSBkZmR5KF8yNTEpOwogICAgZmxvYXQgXzI2MSA9IF8yNTgueTsKICAgIGZsb2F0IF8yNjggPSBfMjUyLnk7CiAgICBmbG9hdDMgXzI4NiA9ICgoZGZkeCh2X3Bvc2l0aW9uKSAqIF8yNjEpIC0gKGRmZHkodl9wb3NpdGlvbikgKiBfMjY4KSkgLyBmbG9hdDMoKF8yNTIueCAqIF8yNjEpIC0gKF8yNTgueCAqIF8yNjgpKTsKICAgIGZsb2F0MyBfMjkwID0gbm9ybWFsaXplKHZfbm9ybWFsKTsKICAgIGZsb2F0MyBfMjk5ID0gbm9ybWFsaXplKF8yODYgLSAoXzI5MCAqIGRvdChfMjkwLCBfMjg2KSkpOwogICAgcmV0dXJuIE5vcm1hbEluZm97IF8yOTAsIF8yOTAsIF8yOTksIGNyb3NzKF8yOTAsIF8yOTkpIH07Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCk1hdGVyaWFsSW5mbyBnZXRNZXRhbGxpY1JvdWdobmVzc0luZm8odGhyZWFkIE1hdGVyaWFsSW5mbyYgaW5mbywgdGhyZWFkIGNvbnN0IGZsb2F0JiBmMF9pb3IsIGNvbnN0YW50IHVfZnNfcGJyUGFyYW1zJiBwYnJQYXJhbXMsIHRocmVhZCBmbG9hdDImIHZfdXYxLCB0aHJlYWQgdGV4dHVyZTJkPGZsb2F0PiB1X21ldGFsbGljUm91Z2huZXNzVGV4dHVyZSwgdGhyZWFkIGNvbnN0IHNhbXBsZXIgdV9tZXRhbGxpY1JvdWdobmVzc1RleHR1cmVTbXBscikKewogICAgaW5mby5tZXRhbGxpYyA9IHBiclBhcmFtcy5tZXRhbGxpY0ZhY3RvcjsKICAgIGluZm8ucGVyY2VwdHVhbFJvdWdobmVzcyA9IHBiclBhcmFtcy5yb3VnaG5lc3NGYWN0b3I7CiAgICBmbG9hdDQgXzE4OSA9IHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlLnNhbXBsZSh1X21ldGFsbGljUm91Z2huZXNzVGV4dHVyZVNtcGxyLCB2X3V2MSk7CiAgICBpbmZvLnBlcmNlcHR1YWxSb3VnaG5lc3MgKj0gXzE4OS55OwogICAgaW5mby5tZXRhbGxpYyAqPSBfMTg5Lno7CiAgICBmbG9hdDMgXzIwNiA9IGZsb2F0MyhmMF9pb3IpOwogICAgaW5mby5hbGJlZG9Db2xvciA9IG1peChpbmZvLmJhc2VDb2xvciAqIChmbG9hdDMoMS4wKSAtIF8yMDYpLCBmbG9hdDMoMC4wKSwgZmxvYXQzKGluZm8ubWV0YWxsaWMpKTsKICAgIGluZm8uZjAgPSBtaXgoXzIwNiwgaW5mby5iYXNlQ29sb3IsIGZsb2F0MyhpbmZvLm1ldGFsbGljKSk7CiAgICByZXR1cm4gaW5mbzsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0IGdldE9jY2x1c2lvblRleHR1cmUodGhyZWFkIGZsb2F0MiYgdl91djEsIHRocmVhZCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfb2NjbHVzaW9uVGV4dHVyZSwgdGhyZWFkIGNvbnN0IHNhbXBsZXIgdV9vY2NsdXNpb25UZXh0dXJlU21wbHIpCnsKICAgIHJldHVybiB1X29jY2x1c2lvblRleHR1cmUuc2FtcGxlKHVfb2NjbHVzaW9uVGV4dHVyZVNtcGxyLCB2X3V2MSk7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0IGNsYW1wZWREb3QodGhyZWFkIGNvbnN0IGZsb2F0MyYgeCwgdGhyZWFkIGNvbnN0IGZsb2F0MyYgeSkKewogICAgcmV0dXJuIGZhc3Q6OmNsYW1wKGRvdCh4LCB5KSwgMC4wLCAxLjApOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdCBnZXRSYW5nZUF0dGVudWF0aW9uKHRocmVhZCBjb25zdCBmbG9hdCYgcmFuZ2UsIHRocmVhZCBjb25zdCBmbG9hdCYgX2Rpc3RhbmNlKQp7CiAgICBpZiAocmFuZ2UgPD0gMC4wKQogICAgewogICAgICAgIHJldHVybiAxLjAgLyBwb3coX2Rpc3RhbmNlLCAyLjApOwogICAgfQogICAgcmV0dXJuIGZhc3Q6Om1heChmYXN0OjptaW4oMS4wIC0gcG93KF9kaXN0YW5jZSAvIHJhbmdlLCA0LjApLCAxLjApLCAwLjApIC8gcG93KF9kaXN0YW5jZSwgMi4wKTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQgZ2V0U3BvdEF0dGVudWF0aW9uKHRocmVhZCBjb25zdCBmbG9hdDMmIHBvaW50VG9MaWdodCwgdGhyZWFkIGNvbnN0IGZsb2F0MyYgc3BvdERpcmVjdGlvbiwgdGhyZWFkIGNvbnN0IGZsb2F0JiBvdXRlckNvbmVDb3MsIHRocmVhZCBjb25zdCBmbG9hdCYgaW5uZXJDb25lQ29zKQp7CiAgICBmbG9hdCBfNDY3ID0gZG90KG5vcm1hbGl6ZShzcG90RGlyZWN0aW9uKSwgbm9ybWFsaXplKC1wb2ludFRvTGlnaHQpKTsKICAgIGlmIChfNDY3ID4gb3V0ZXJDb25lQ29zKQogICAgewogICAgICAgIGlmIChfNDY3IDwgaW5uZXJDb25lQ29zKQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIHNtb290aHN0ZXAob3V0ZXJDb25lQ29zLCBpbm5lckNvbmVDb3MsIF80NjcpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gMS4wOwogICAgfQogICAgcmV0dXJuIDAuMDsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIGdldExpZ2hJbnRlbnNpdHkodGhyZWFkIGNvbnN0IExpZ2h0JiBsaWdodCwgdGhyZWFkIGNvbnN0IGZsb2F0MyYgcG9pbnRUb0xpZ2h0KQp7CiAgICBmbG9hdCByYW5nZUF0dGVudWF0aW9uID0gMS4wOwogICAgZmxvYXQgc3BvdEF0dGVudWF0aW9uID0gMS4wOwogICAgaWYgKGxpZ2h0LnR5cGUgIT0gMCkKICAgIHsKICAgICAgICBmbG9hdCBwYXJhbSA9IGxpZ2h0LnJhbmdlOwogICAgICAgIGZsb2F0IHBhcmFtXzEgPSBsZW5ndGgocG9pbnRUb0xpZ2h0KTsKICAgICAgICByYW5nZUF0dGVudWF0aW9uID0gZ2V0UmFuZ2VBdHRlbnVhdGlvbihwYXJhbSwgcGFyYW1fMSk7CiAgICB9CiAgICBpZiAobGlnaHQudHlwZSA9PSAyKQogICAgewogICAgICAgIGZsb2F0MyBwYXJhbV8yID0gcG9pbnRUb0xpZ2h0OwogICAgICAgIGZsb2F0MyBwYXJhbV8zID0gbGlnaHQuZGlyZWN0aW9uOwogICAgICAgIGZsb2F0IHBhcmFtXzQgPSBsaWdodC5vdXRlckNvbmVDb3M7CiAgICAgICAgZmxvYXQgcGFyYW1fNSA9IGxpZ2h0LmlubmVyQ29uZUNvczsKICAgICAgICBzcG90QXR0ZW51YXRpb24gPSBnZXRTcG90QXR0ZW51YXRpb24ocGFyYW1fMiwgcGFyYW1fMywgcGFyYW1fNCwgcGFyYW1fNSk7CiAgICB9CiAgICByZXR1cm4gbGlnaHQuY29sb3IgKiAoKHJhbmdlQXR0ZW51YXRpb24gKiBzcG90QXR0ZW51YXRpb24pICogbGlnaHQuaW50ZW5zaXR5KTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIEZfU2NobGljayh0aHJlYWQgY29uc3QgZmxvYXQzJiBmMCwgdGhyZWFkIGNvbnN0IGZsb2F0MyYgZjkwLCB0aHJlYWQgY29uc3QgZmxvYXQmIFZkb3RIKQp7CiAgICByZXR1cm4gZjAgKyAoKGY5MCAtIGYwKSAqIHBvdyhmYXN0OjpjbGFtcCgxLjAgLSBWZG90SCwgMC4wLCAxLjApLCA1LjApKTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIEJSREZfbGFtYmVydGlhbih0aHJlYWQgY29uc3QgZmxvYXQzJiBmMCwgdGhyZWFkIGNvbnN0IGZsb2F0MyYgZjkwLCB0aHJlYWQgY29uc3QgZmxvYXQzJiBkaWZmdXNlQ29sb3IsIHRocmVhZCBjb25zdCBmbG9hdCYgVmRvdEgpCnsKICAgIGZsb2F0MyBwYXJhbSA9IGYwOwogICAgZmxvYXQzIHBhcmFtXzEgPSBmOTA7CiAgICBmbG9hdCBwYXJhbV8yID0gVmRvdEg7CiAgICByZXR1cm4gKGZsb2F0MygxLjApIC0gRl9TY2hsaWNrKHBhcmFtLCBwYXJhbV8xLCBwYXJhbV8yKSkgKiAoZGlmZnVzZUNvbG9yICogZmxvYXQzKDAuMzE4MzA5ODczMzQyNTE0MDM4MDg1OTM3NSkpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdCBWX0dHWCh0aHJlYWQgY29uc3QgZmxvYXQmIE5kb3RMLCB0aHJlYWQgY29uc3QgZmxvYXQmIE5kb3RWLCB0aHJlYWQgY29uc3QgZmxvYXQmIGFscGhhUm91Z2huZXNzKQp7CiAgICBmbG9hdCBfMzM1ID0gYWxwaGFSb3VnaG5lc3MgKiBhbHBoYVJvdWdobmVzczsKICAgIGZsb2F0IF8zNDIgPSAxLjAgLSBfMzM1OwogICAgZmxvYXQgXzM2MyA9IChOZG90TCAqIHNxcnQoKChOZG90ViAqIE5kb3RWKSAqIF8zNDIpICsgXzMzNSkpICsgKE5kb3RWICogc3FydCgoKE5kb3RMICogTmRvdEwpICogXzM0MikgKyBfMzM1KSk7CiAgICBpZiAoXzM2MyA+IDAuMCkKICAgIHsKICAgICAgICByZXR1cm4gMC41IC8gXzM2MzsKICAgIH0KICAgIHJldHVybiAwLjA7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0IERfR0dYKHRocmVhZCBjb25zdCBmbG9hdCYgTmRvdEgsIHRocmVhZCBjb25zdCBmbG9hdCYgYWxwaGFSb3VnaG5lc3MpCnsKICAgIGZsb2F0IF8zNzcgPSBhbHBoYVJvdWdobmVzcyAqIGFscGhhUm91Z2huZXNzOwogICAgZmxvYXQgXzM4NSA9ICgoTmRvdEggKiBOZG90SCkgKiAoXzM3NyAtIDEuMCkpICsgMS4wOwogICAgcmV0dXJuIF8zNzcgLyAoKDMuMTQxNTkyNzQxMDEyNTczMjQyMTg3NSAqIF8zODUpICogXzM4NSk7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBCUkRGX3NwZWN1bGFyR0dYKHRocmVhZCBjb25zdCBmbG9hdDMmIGYwLCB0aHJlYWQgY29uc3QgZmxvYXQzJiBmOTAsIHRocmVhZCBjb25zdCBmbG9hdCYgYWxwaGFSb3VnaG5lc3MsIHRocmVhZCBjb25zdCBmbG9hdCYgVmRvdEgsIHRocmVhZCBjb25zdCBmbG9hdCYgTmRvdEwsIHRocmVhZCBjb25zdCBmbG9hdCYgTmRvdFYsIHRocmVhZCBjb25zdCBmbG9hdCYgTmRvdEgpCnsKICAgIGZsb2F0MyBwYXJhbSA9IGYwOwogICAgZmxvYXQzIHBhcmFtXzEgPSBmOTA7CiAgICBmbG9hdCBwYXJhbV8yID0gVmRvdEg7CiAgICBmbG9hdCBwYXJhbV8zID0gTmRvdEw7CiAgICBmbG9hdCBwYXJhbV80ID0gTmRvdFY7CiAgICBmbG9hdCBwYXJhbV81ID0gYWxwaGFSb3VnaG5lc3M7CiAgICBmbG9hdCBwYXJhbV82ID0gTmRvdEg7CiAgICBmbG9hdCBwYXJhbV83ID0gYWxwaGFSb3VnaG5lc3M7CiAgICByZXR1cm4gKEZfU2NobGljayhwYXJhbSwgcGFyYW1fMSwgcGFyYW1fMikgKiBWX0dHWChwYXJhbV8zLCBwYXJhbV80LCBwYXJhbV81KSkgKiBEX0dHWChwYXJhbV82LCBwYXJhbV83KTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0IGdldEVtaXNzaXZlVGV4dHVyZSh0aHJlYWQgZmxvYXQyJiB2X3V2MSwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9lbWlzc2l2ZVRleHR1cmUsIHRocmVhZCBjb25zdCBzYW1wbGVyIHVfZW1pc3NpdmVUZXh0dXJlU21wbHIpCnsKICAgIHJldHVybiB1X2VtaXNzaXZlVGV4dHVyZS5zYW1wbGUodV9lbWlzc2l2ZVRleHR1cmVTbXBsciwgdl91djEpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDMgbGluZWFyVG9zUkdCKHRocmVhZCBjb25zdCBmbG9hdDMmIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCBmbG9hdDMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCmZyYWdtZW50IG1haW4wX291dCBtYWluMChtYWluMF9pbiBpbiBbW3N0YWdlX2luXV0sIGNvbnN0YW50IHVfZnNfcGJyUGFyYW1zJiBwYnJQYXJhbXMgW1tidWZmZXIoMCldXSwgY29uc3RhbnQgdV9mc19saWdodGluZyYgbGlnaHRpbmcgW1tidWZmZXIoMSldXSwgdGV4dHVyZTJkPGZsb2F0PiB1X2Jhc2VDb2xvclRleHR1cmUgW1t0ZXh0dXJlKDApXV0sIHRleHR1cmUyZDxmbG9hdD4gdV9tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUgW1t0ZXh0dXJlKDEpXV0sIHRleHR1cmUyZDxmbG9hdD4gdV9vY2NsdXNpb25UZXh0dXJlIFtbdGV4dHVyZSgyKV1dLCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfZW1pc3NpdmVUZXh0dXJlIFtbdGV4dHVyZSgzKV1dLCBzYW1wbGVyIHVfYmFzZUNvbG9yVGV4dHVyZVNtcGxyIFtbc2FtcGxlcigwKV1dLCBzYW1wbGVyIHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlU21wbHIgW1tzYW1wbGVyKDEpXV0sIHNhbXBsZXIgdV9vY2NsdXNpb25UZXh0dXJlU21wbHIgW1tzYW1wbGVyKDIpXV0sIHNhbXBsZXIgdV9lbWlzc2l2ZVRleHR1cmVTbXBsciBbW3NhbXBsZXIoMyldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgZmxvYXQ0IF81MzIgPSBnZXRCYXNlQ29sb3IoaW4udl9jb2xvciwgcGJyUGFyYW1zLCB1X2Jhc2VDb2xvclRleHR1cmUsIHVfYmFzZUNvbG9yVGV4dHVyZVNtcGxyLCBpbi52X3V2MSk7CiAgICBmbG9hdDMgXzgzNyA9IGdldE5vcm1hbEluZm8oaW4udl91djEsIGluLnZfcG9zaXRpb24sIGluLnZfbm9ybWFsKS5uOwogICAgZmxvYXQzIF84NDEgPSBmbG9hdDMoMC4wKTsKICAgIGZsb2F0IF84NDIgPSAwLjA7CiAgICBmbG9hdDMgXzg0MyA9IGZsb2F0MygwLjApOwogICAgZmxvYXQzIF84NDQgPSBmbG9hdDMoMC4wKTsKICAgIGZsb2F0MyBfNTQ3ID0gXzUzMi54eXo7CiAgICBNYXRlcmlhbEluZm8gcGFyYW0gPSBNYXRlcmlhbEluZm97IDAuMCwgZmxvYXQzKDAuMCksIDAuMCwgZmxvYXQzKDAuMCksIGZsb2F0MygwLjApLCAwLjAsIGZsb2F0MygwLjApLCBfNTQ3IH07CiAgICBmbG9hdCBwYXJhbV8xID0gMC4wMzk5OTk5OTkxMDU5MzAzMjgzNjkxNDA2MjU7CiAgICBNYXRlcmlhbEluZm8gXzU1NyA9IGdldE1ldGFsbGljUm91Z2huZXNzSW5mbyhwYXJhbSwgcGFyYW1fMSwgcGJyUGFyYW1zLCBpbi52X3V2MSwgdV9tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUsIHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlU21wbHIpOwogICAgXzg0MSA9IF81NTcuZjA7CiAgICBfODQzID0gXzU1Ny5hbGJlZG9Db2xvcjsKICAgIGZsb2F0IF81NjAgPSBmYXN0OjpjbGFtcChfNTU3LnBlcmNlcHR1YWxSb3VnaG5lc3MsIDAuMCwgMS4wKTsKICAgIF84NDIgPSBfNTYwICogXzU2MDsKICAgIF84NDQgPSBmbG9hdDMoZmFzdDo6Y2xhbXAoZmFzdDo6bWF4KGZhc3Q6Om1heChfNTU3LmYwLngsIF81NTcuZjAueSksIF81NTcuZjAueikgKiA1MC4wLCAwLjAsIDEuMCkpOwogICAgZmxvYXQzIGZfc3BlY3VsYXIgPSBmbG9hdDMoMC4wKTsKICAgIGZsb2F0MyBmX2VtaXNzaXZlID0gZmxvYXQzKDAuMCk7CiAgICBmbG9hdDMgZl9kaWZmdXNlID0gKGZsb2F0MyhwYnJQYXJhbXMuYW1iaWVudExpZ2h0KSAqIHBvdyhwYnJQYXJhbXMuYW1iaWVudEZhY3RvciwgMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSkgKiBfNTQ3OwogICAgZmxvYXQ0IF82MDUgPSBnZXRPY2NsdXNpb25UZXh0dXJlKGluLnZfdXYxLCB1X29jY2x1c2lvblRleHR1cmUsIHVfb2NjbHVzaW9uVGV4dHVyZVNtcGxyKTsKICAgIGZsb2F0IF82MDYgPSBfNjA1Lng7CiAgICBmX2RpZmZ1c2UgKj0gXzYwNjsKICAgIGZfc3BlY3VsYXIgKj0gXzYwNjsKICAgIGZsb2F0MyBfNjMzID0gbm9ybWFsaXplKGxpZ2h0aW5nLmV5ZVBvcy54eXogLSBpbi52X3Bvc2l0aW9uKTsKICAgIGZsb2F0MyBwb2ludFRvTGlnaHQ7CiAgICBmb3IgKGludCBpID0gMDsgaSA8IDY7IGkrKykKICAgIHsKICAgICAgICBpbnQgXzY0NiA9IGludChsaWdodGluZy5wb3NpdGlvbl90eXBlW2ldLncpOwogICAgICAgIGlmIChsaWdodGluZy5jb2xvcl9pbnRlbnNpdHlbaV0udyA+IDAuMCkKICAgICAgICB7CiAgICAgICAgICAgIGlmIChfNjQ2ICE9IDApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHBvaW50VG9MaWdodCA9IGxpZ2h0aW5nLnBvc2l0aW9uX3R5cGVbaV0ueHl6IC0gaW4udl9wb3NpdGlvbjsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHBvaW50VG9MaWdodCA9IC1saWdodGluZy5kaXJlY3Rpb25fcmFuZ2VbaV0ueHl6OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZsb2F0MyBfNzA4ID0gbm9ybWFsaXplKHBvaW50VG9MaWdodCk7CiAgICAgICAgICAgIGZsb2F0MyBfNzEzID0gbm9ybWFsaXplKF83MDggKyBfNjMzKTsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzIgPSBfODM3OwogICAgICAgICAgICBmbG9hdDMgcGFyYW1fMyA9IF83MDg7CiAgICAgICAgICAgIGZsb2F0IF83MTkgPSBjbGFtcGVkRG90KHBhcmFtXzIsIHBhcmFtXzMpOwogICAgICAgICAgICBmbG9hdDMgcGFyYW1fNCA9IF84Mzc7CiAgICAgICAgICAgIGZsb2F0MyBwYXJhbV81ID0gXzYzMzsKICAgICAgICAgICAgZmxvYXQgXzcyNSA9IGNsYW1wZWREb3QocGFyYW1fNCwgcGFyYW1fNSk7CiAgICAgICAgICAgIGZsb2F0MyBwYXJhbV82ID0gXzgzNzsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzcgPSBfNzEzOwogICAgICAgICAgICBmbG9hdDMgcGFyYW1fOCA9IF83MDg7CiAgICAgICAgICAgIGZsb2F0MyBwYXJhbV85ID0gXzcxMzsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzEwID0gXzYzMzsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzExID0gXzcxMzsKICAgICAgICAgICAgZmxvYXQgXzc0MyA9IGNsYW1wZWREb3QocGFyYW1fMTAsIHBhcmFtXzExKTsKICAgICAgICAgICAgaWYgKChfNzE5ID4gMC4wKSB8fCAoXzcyNSA+IDAuMCkpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIExpZ2h0IHBhcmFtXzEyID0gTGlnaHR7IF82NDYsIGxpZ2h0aW5nLmRpcmVjdGlvbl9yYW5nZVtpXS54eXosIGxpZ2h0aW5nLmNvbG9yX2ludGVuc2l0eVtpXS54eXosIGxpZ2h0aW5nLnBvc2l0aW9uX3R5cGVbaV0ueHl6LCBsaWdodGluZy5kaXJlY3Rpb25fcmFuZ2VbaV0udywgbGlnaHRpbmcuY29sb3JfaW50ZW5zaXR5W2ldLncsIGxpZ2h0aW5nLmluQ29uZV9vdUNvbmVfc2hhZG93c19jYXNjYWRlc1tpXS54LCBsaWdodGluZy5pbkNvbmVfb3VDb25lX3NoYWRvd3NfY2FzY2FkZXNbaV0ueSwgKGxpZ2h0aW5nLmluQ29uZV9vdUNvbmVfc2hhZG93c19jYXNjYWRlc1tpXS56IDwgMC4wKSA/IGZhbHNlIDogdHJ1ZSwgaW50KGxpZ2h0aW5nLmluQ29uZV9vdUNvbmVfc2hhZG93c19jYXNjYWRlc1tpXS56KSwgaW50KGxpZ2h0aW5nLmluQ29uZV9vdUNvbmVfc2hhZG93c19jYXNjYWRlc1tpXS53KSB9OwogICAgICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzEzID0gcG9pbnRUb0xpZ2h0OwogICAgICAgICAgICAgICAgZmxvYXQzIF83NjIgPSAoZ2V0TGlnaEludGVuc2l0eShwYXJhbV8xMiwgcGFyYW1fMTMpICogMS4wKSAqIF83MTk7CiAgICAgICAgICAgICAgICBmbG9hdDMgcGFyYW1fMTQgPSBfODQxOwogICAgICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzE1ID0gXzg0NDsKICAgICAgICAgICAgICAgIGZsb2F0MyBwYXJhbV8xNiA9IF84NDM7CiAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8xNyA9IF83NDM7CiAgICAgICAgICAgICAgICBmX2RpZmZ1c2UgKz0gKF83NjIgKiBCUkRGX2xhbWJlcnRpYW4ocGFyYW1fMTQsIHBhcmFtXzE1LCBwYXJhbV8xNiwgcGFyYW1fMTcpKTsKICAgICAgICAgICAgICAgIGZsb2F0MyBwYXJhbV8xOCA9IF84NDE7CiAgICAgICAgICAgICAgICBmbG9hdDMgcGFyYW1fMTkgPSBfODQ0OwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMjAgPSBfODQyOwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMjEgPSBfNzQzOwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMjIgPSBfNzE5OwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMjMgPSBfNzI1OwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMjQgPSBjbGFtcGVkRG90KHBhcmFtXzYsIHBhcmFtXzcpOwogICAgICAgICAgICAgICAgZl9zcGVjdWxhciArPSAoXzc2MiAqIEJSREZfc3BlY3VsYXJHR1gocGFyYW1fMTgsIHBhcmFtXzE5LCBwYXJhbV8yMCwgcGFyYW1fMjEsIHBhcmFtXzIyLCBwYXJhbV8yMywgcGFyYW1fMjQpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGZfZW1pc3NpdmUgPSBwYnJQYXJhbXMuZW1pc3NpdmVGYWN0b3I7CiAgICBmbG9hdDMgcGFyYW1fMjUgPSBnZXRFbWlzc2l2ZVRleHR1cmUoaW4udl91djEsIHVfZW1pc3NpdmVUZXh0dXJlLCB1X2VtaXNzaXZlVGV4dHVyZVNtcGxyKS54eXo7CiAgICBmbG9hdDMgXzgxMiA9IGZfZW1pc3NpdmU7CiAgICBmbG9hdDMgXzgxMyA9IF84MTIgKiBzUkdCVG9MaW5lYXIocGFyYW1fMjUpOwogICAgZl9lbWlzc2l2ZSA9IF84MTM7CiAgICBmbG9hdDMgcGFyYW1fMjYgPSAoXzgxMyArIGZfZGlmZnVzZSkgKyBmX3NwZWN1bGFyOwogICAgb3V0LmdfZmluYWxDb2xvciA9IGZsb2F0NChsaW5lYXJUb3NSR0IocGFyYW1fMjYpLCBfNTMyLncpOwogICAgcmV0dXJuIG91dDsKfQoKUkVGTHYDAABtZXNoX1V2MVB1Y05vclZjNF9tc2wyMWlvcwAAAAAAAAAAAAAEAAAAAgAAAAsAAAB1X2Jhc2VDb2xvclRleHR1cmUAAAAAAAAAAAAAAAAAAAIAAAAAAAAAMkQgIFRGTFR1X21ldGFsbGljUm91Z2huZXNzVGV4dHVyZQAAAAAAAAIAAAABAAAAMkQgIFRGTFR1X29jY2x1c2lvblRleHR1cmUAAAAAAAAAAAAAAAAAAAIAAAACAAAAMkQgIFRGTFR1X2VtaXNzaXZlVGV4dHVyZQAAAAAAAAAAAAAAAAAAAAIAAAADAAAAMkQgIFRGTFQGAAAAdV9mc19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFiYXNlQ29sb3JGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAG1ldGFsbGljRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAQAAAAcm91Z2huZXNzRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABQAAABlbWlzc2l2ZUZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAIAAAAGFtYmllbnRMaWdodAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAwAAAAYW1iaWVudEZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAADwAAAAFAAAAdV9mc19saWdodGluZwAAAAAAAAAAAAAAAAAAAAAAAABsaWdodGluZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAkAEAAAFkaXJlY3Rpb25fcmFuZ2UAAAAAAAAAAAAAAAAAAAAAAEZMVDQGAAAAAAAAAGNvbG9yX2ludGVuc2l0eQAAAAAAAAAAAAAAAAAAAAAARkxUNAYAAABgAAAAcG9zaXRpb25fdHlwZQAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0BgAAAMAAAABpbkNvbmVfb3VDb25lX3NoYWRvd3NfY2FzY2FkZXMAAEZMVDQGAAAAIAEAAGV5ZVBvcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAACAAQAA";
static const std::string ui_TexVc4_msl21ios = "U0JTIAAAAABkAAAATVNMIIROAAAAAFNUQUetBAAAVkVSVENPREUIAwAAI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfdnNfdWlQYXJhbXMKewogICAgZmxvYXQ0eDQgbXZwTWF0cml4Owp9OwoKc3RydWN0IG1haW4wX291dAp7CiAgICBmbG9hdDQgdl9jb2xvciBbW3VzZXIobG9jbjApXV07CiAgICBmbG9hdDIgdl91djEgW1t1c2VyKGxvY24xKV1dOwogICAgZmxvYXQ0IGdsX1Bvc2l0aW9uIFtbcG9zaXRpb25dXTsKfTsKCnN0cnVjdCBtYWluMF9pbgp7CiAgICBmbG9hdDMgYV9wb3NpdGlvbiBbW2F0dHJpYnV0ZSgwKV1dOwogICAgZmxvYXQ0IGFfY29sb3IgW1thdHRyaWJ1dGUoMSldXTsKICAgIGZsb2F0MiBhX3RleGNvb3JkMSBbW2F0dHJpYnV0ZSgyKV1dOwp9OwoKdmVydGV4IG1haW4wX291dCBtYWluMChtYWluMF9pbiBpbiBbW3N0YWdlX2luXV0sIGNvbnN0YW50IHVfdnNfdWlQYXJhbXMmIHVpUGFyYW1zIFtbYnVmZmVyKDApXV0pCnsKICAgIG1haW4wX291dCBvdXQgPSB7fTsKICAgIG91dC52X2NvbG9yID0gaW4uYV9jb2xvcjsKICAgIG91dC52X3V2MSA9IGluLmFfdGV4Y29vcmQxOwogICAgb3V0LmdsX1Bvc2l0aW9uID0gdWlQYXJhbXMubXZwTWF0cml4ICogZmxvYXQ0KGluLmFfcG9zaXRpb24sIDEuMCk7CiAgICBvdXQuZ2xfUG9zaXRpb24ueiA9IChvdXQuZ2xfUG9zaXRpb24ueiArIG91dC5nbF9Qb3NpdGlvbi53KSAqIDAuNTsgICAgICAgLy8gQWRqdXN0IGNsaXAtc3BhY2UgZm9yIE1ldGFsCiAgICByZXR1cm4gb3V0Owp9CgpSRUZMkQEAAHVpX1RleFZjNF9tc2wyMWlvcwAAAAAAAAAAAAAAAAAAAwAAAAAAAAABAAAAAQAAAGFfY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDRhX3RleGNvb3JkMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQyYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAB1X3ZzX3VpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAHVpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAW12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAU1RBRwYIAABGUkFHQ09ERRUHAAAjcHJhZ21hIGNsYW5nIGRpYWdub3N0aWMgaWdub3JlZCAiLVdtaXNzaW5nLXByb3RvdHlwZXMiCgojaW5jbHVkZSA8bWV0YWxfc3RkbGliPgojaW5jbHVkZSA8c2ltZC9zaW1kLmg+Cgp1c2luZyBuYW1lc3BhY2UgbWV0YWw7CgpzdHJ1Y3QgdV9mc191aVBhcmFtcwp7CiAgICBmbG9hdDQgY29sb3I7Cn07CgpzdHJ1Y3QgbWFpbjBfb3V0CnsKICAgIGZsb2F0NCBnX2ZpbmFsQ29sb3IgW1tjb2xvcigwKV1dOwp9OwoKc3RydWN0IG1haW4wX2luCnsKICAgIGZsb2F0NCB2X2NvbG9yIFtbdXNlcihsb2NuMCldXTsKICAgIGZsb2F0MiB2X3V2MSBbW3VzZXIobG9jbjEpXV07Cn07CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDMgc1JHQlRvTGluZWFyKHRocmVhZCBjb25zdCBmbG9hdDMmIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIGZsb2F0MygyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjUpKTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0IHNSR0JUb0xpbmVhcih0aHJlYWQgY29uc3QgZmxvYXQ0JiBzcmdiSW4pCnsKICAgIGZsb2F0MyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gZmxvYXQ0KHNSR0JUb0xpbmVhcihwYXJhbSksIHNyZ2JJbi53KTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0IGdldFZlcnRleENvbG9yKHRocmVhZCBmbG9hdDQmIHZfY29sb3IpCnsKICAgIHJldHVybiB2X2NvbG9yOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgZ2V0QmFzZUNvbG9yKHRocmVhZCBmbG9hdDQmIHZfY29sb3IsIGNvbnN0YW50IHVfZnNfdWlQYXJhbXMmIHVpUGFyYW1zLCB0aHJlYWQgdGV4dHVyZTJkPGZsb2F0PiB1X3VpVGV4dHVyZSwgdGhyZWFkIGNvbnN0IHNhbXBsZXIgdV91aVRleHR1cmVTbXBsciwgdGhyZWFkIGZsb2F0MiYgdl91djEpCnsKICAgIGZsb2F0NCBiYXNlQ29sb3IgPSB1aVBhcmFtcy5jb2xvcjsKICAgIGZsb2F0NCBwYXJhbSA9IHVfdWlUZXh0dXJlLnNhbXBsZSh1X3VpVGV4dHVyZVNtcGxyLCB2X3V2MSk7CiAgICBmbG9hdDQgXzg4ID0gYmFzZUNvbG9yOwogICAgZmxvYXQ0IF84OSA9IF84OCAqIHNSR0JUb0xpbmVhcihwYXJhbSk7CiAgICBiYXNlQ29sb3IgPSBfODk7CiAgICByZXR1cm4gXzg5ICogZ2V0VmVydGV4Q29sb3Iodl9jb2xvcik7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBsaW5lYXJUb3NSR0IodGhyZWFkIGNvbnN0IGZsb2F0MyYgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIGZsb2F0MygwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzUpKTsKfQoKZnJhZ21lbnQgbWFpbjBfb3V0IG1haW4wKG1haW4wX2luIGluIFtbc3RhZ2VfaW5dXSwgY29uc3RhbnQgdV9mc191aVBhcmFtcyYgdWlQYXJhbXMgW1tidWZmZXIoMCldXSwgdGV4dHVyZTJkPGZsb2F0PiB1X3VpVGV4dHVyZSBbW3RleHR1cmUoMCldXSwgc2FtcGxlciB1X3VpVGV4dHVyZVNtcGxyIFtbc2FtcGxlcigwKV1dKQp7CiAgICBtYWluMF9vdXQgb3V0ID0ge307CiAgICBmbG9hdDQgXzk2ID0gZ2V0QmFzZUNvbG9yKGluLnZfY29sb3IsIHVpUGFyYW1zLCB1X3VpVGV4dHVyZSwgdV91aVRleHR1cmVTbXBsciwgaW4udl91djEpOwogICAgZmxvYXQzIHBhcmFtID0gXzk2Lnh5ejsKICAgIG91dC5nX2ZpbmFsQ29sb3IgPSBmbG9hdDQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzk2LncpOwogICAgcmV0dXJuIG91dDsKfQoKUkVGTN0AAAB1aV9UZXhWYzRfbXNsMjFpb3MAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAEAAAB1X3VpVGV4dHVyZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAMkQgIFRGTFQBAAAAdV9mc191aVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAB1aVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAFjb2xvcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAA==";
static const std::string points_TexVc4_msl21ios = "U0JTIAAAAABkAAAATVNMIIROAAAAAFNUQUetBQAAVkVSVENPREW8AwAAI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfdnNfcG9pbnRzUGFyYW1zCnsKICAgIGZsb2F0NHg0IG12cE1hdHJpeDsKfTsKCnN0cnVjdCBtYWluMF9vdXQKewogICAgZmxvYXQgdl9wb2ludHJvdGF0aW9uIFtbdXNlcihsb2NuMCldXTsKICAgIGZsb2F0NCB2X2NvbG9yIFtbdXNlcihsb2NuMSldXTsKICAgIGZsb2F0NCBnbF9Qb3NpdGlvbiBbW3Bvc2l0aW9uXV07CiAgICBmbG9hdCBnbF9Qb2ludFNpemUgW1twb2ludF9zaXplXV07Cn07CgpzdHJ1Y3QgbWFpbjBfaW4KewogICAgZmxvYXQzIGFfcG9zaXRpb24gW1thdHRyaWJ1dGUoMCldXTsKICAgIGZsb2F0IGFfcG9pbnRzaXplIFtbYXR0cmlidXRlKDEpXV07CiAgICBmbG9hdCBhX3BvaW50cm90YXRpb24gW1thdHRyaWJ1dGUoMildXTsKICAgIGZsb2F0NCBhX2NvbG9yIFtbYXR0cmlidXRlKDMpXV07Cn07Cgp2ZXJ0ZXggbWFpbjBfb3V0IG1haW4wKG1haW4wX2luIGluIFtbc3RhZ2VfaW5dXSwgY29uc3RhbnQgdV92c19wb2ludHNQYXJhbXMmIHBvaW50c1BhcmFtcyBbW2J1ZmZlcigwKV1dKQp7CiAgICBtYWluMF9vdXQgb3V0ID0ge307CiAgICBvdXQudl9wb2ludHJvdGF0aW9uID0gaW4uYV9wb2ludHJvdGF0aW9uOwogICAgb3V0LnZfY29sb3IgPSBpbi5hX2NvbG9yOwogICAgb3V0LmdsX1Bvc2l0aW9uID0gcG9pbnRzUGFyYW1zLm12cE1hdHJpeCAqIGZsb2F0NChpbi5hX3Bvc2l0aW9uLCAxLjApOwogICAgb3V0LmdsX1BvaW50U2l6ZSA9IGluLmFfcG9pbnRzaXplIC8gb3V0LmdsX1Bvc2l0aW9uLnc7CiAgICBvdXQuZ2xfUG9zaXRpb24ueiA9IChvdXQuZ2xfUG9zaXRpb24ueiArIG91dC5nbF9Qb3NpdGlvbi53KSAqIDAuNTsgICAgICAgLy8gQWRqdXN0IGNsaXAtc3BhY2UgZm9yIE1ldGFsCiAgICByZXR1cm4gb3V0Owp9CgpSRUZM3QEAAHBvaW50c19UZXhWYzRfbXNsMjFpb3MAAAAAAAAAAAAABAAAAAAAAAABAAAAAQAAAGFfcG9pbnRyb3RhdGlvbgAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDFhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABGTFQ0YV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfcG9pbnRzaXplAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAdV92c19wb2ludHNQYXJhbXMAAAAAAAAAAAAAAAAAAABwb2ludHNQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUcfCQAARlJBR0NPREWrCAAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IG1haW4wX291dAp7CiAgICBmbG9hdDQgZ19maW5hbENvbG9yIFtbY29sb3IoMCldXTsKfTsKCnN0cnVjdCBtYWluMF9pbgp7CiAgICBmbG9hdCB2X3BvaW50cm90YXRpb24gW1t1c2VyKGxvY24wKV1dOwogICAgZmxvYXQ0IHZfY29sb3IgW1t1c2VyKGxvY24xKV1dOwp9OwoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIHNSR0JUb0xpbmVhcih0aHJlYWQgY29uc3QgZmxvYXQzJiBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCBmbG9hdDMoMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSk7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0NCBzUkdCVG9MaW5lYXIodGhyZWFkIGNvbnN0IGZsb2F0NCYgc3JnYkluKQp7CiAgICBmbG9hdDMgcGFyYW0gPSBzcmdiSW4ueHl6OwogICAgcmV0dXJuIGZsb2F0NChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0NCBnZXRWZXJ0ZXhDb2xvcih0aHJlYWQgZmxvYXQ0JiB2X2NvbG9yKQp7CiAgICByZXR1cm4gdl9jb2xvcjsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0IGdldEJhc2VDb2xvcih0aHJlYWQgZmxvYXQ0JiB2X2NvbG9yLCB0aHJlYWQgZmxvYXQyJiBnbF9Qb2ludENvb3JkLCB0aHJlYWQgZmxvYXQmIHZfcG9pbnRyb3RhdGlvbiwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9wb2ludHNUZXh0dXJlLCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X3BvaW50c1RleHR1cmVTbXBscikKewogICAgZmxvYXQ0IGJhc2VDb2xvciA9IGZsb2F0NCgxLjApOwogICAgZmxvYXQyIHJlc3VsdENvb3JkID0gZ2xfUG9pbnRDb29yZDsKICAgIGlmICgoaXN1bm9yZGVyZWQodl9wb2ludHJvdGF0aW9uLCAwLjApIHx8IHZfcG9pbnRyb3RhdGlvbiAhPSAwLjApKQogICAgewogICAgICAgIGZsb2F0IF84MyA9IGNvcyh2X3BvaW50cm90YXRpb24pOwogICAgICAgIGZsb2F0IF84OCA9IHJlc3VsdENvb3JkLnggLSAwLjU7CiAgICAgICAgZmxvYXQgXzkxID0gc2luKHZfcG9pbnRyb3RhdGlvbik7CiAgICAgICAgZmxvYXQgXzk1ID0gcmVzdWx0Q29vcmQueSAtIDAuNTsKICAgICAgICByZXN1bHRDb29yZCA9IGZsb2F0MigoKF84MyAqIF84OCkgKyAoXzkxICogXzk1KSkgKyAwLjUsICgoXzgzICogXzk1KSAtIChfOTEgKiBfODgpKSArIDAuNSk7CiAgICB9CiAgICBmbG9hdDQgcGFyYW0gPSB1X3BvaW50c1RleHR1cmUuc2FtcGxlKHVfcG9pbnRzVGV4dHVyZVNtcGxyLCByZXN1bHRDb29yZCk7CiAgICBmbG9hdDQgXzEyMyA9IGJhc2VDb2xvcjsKICAgIGZsb2F0NCBfMTI0ID0gXzEyMyAqIHNSR0JUb0xpbmVhcihwYXJhbSk7CiAgICBiYXNlQ29sb3IgPSBfMTI0OwogICAgcmV0dXJuIF8xMjQgKiBnZXRWZXJ0ZXhDb2xvcih2X2NvbG9yKTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIGxpbmVhclRvc1JHQih0aHJlYWQgY29uc3QgZmxvYXQzJiBjb2xvcikKewogICAgcmV0dXJuIHBvdyhjb2xvciwgZmxvYXQzKDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NSkpOwp9CgpmcmFnbWVudCBtYWluMF9vdXQgbWFpbjAobWFpbjBfaW4gaW4gW1tzdGFnZV9pbl1dLCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfcG9pbnRzVGV4dHVyZSBbW3RleHR1cmUoMCldXSwgc2FtcGxlciB1X3BvaW50c1RleHR1cmVTbXBsciBbW3NhbXBsZXIoMCldXSwgZmxvYXQyIGdsX1BvaW50Q29vcmQgW1twb2ludF9jb29yZF1dKQp7CiAgICBtYWluMF9vdXQgb3V0ID0ge307CiAgICBmbG9hdDQgXzEzMSA9IGdldEJhc2VDb2xvcihpbi52X2NvbG9yLCBnbF9Qb2ludENvb3JkLCBpbi52X3BvaW50cm90YXRpb24sIHVfcG9pbnRzVGV4dHVyZSwgdV9wb2ludHNUZXh0dXJlU21wbHIpOwogICAgZmxvYXQzIHBhcmFtID0gXzEzMS54eXo7CiAgICBvdXQuZ19maW5hbENvbG9yID0gZmxvYXQ0KGxpbmVhclRvc1JHQihwYXJhbSksIF8xMzEudyk7CiAgICByZXR1cm4gb3V0Owp9CgpSRUZMYAAAAHBvaW50c19UZXhWYzRfbXNsMjFpb3MAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAHVfcG9pbnRzVGV4dHVyZQAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVA==";
static const std::string mesh_Uv1PucShwPcfNor_msl21ios = "";
static const std::string depth_Ski_msl21ios = "U0JTIAAAAABkAAAATVNMIIROAAAAAFNUQUfsCgAAVkVSVENPREXKCAAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfdnNfc2tpbm5pbmcKewogICAgZmxvYXQ0eDQgYm9uZXNNYXRyaXhbNzBdOwp9OwoKc3RydWN0IHVfdnNfZGVwdGhQYXJhbXMKewogICAgZmxvYXQ0eDQgbGlnaHRNVlBNYXRyaXg7Cn07CgpzdHJ1Y3QgbWFpbjBfb3V0CnsKICAgIGZsb2F0MiB2X3Byb2paVyBbW3VzZXIobG9jbjApXV07CiAgICBmbG9hdDQgZ2xfUG9zaXRpb24gW1twb3NpdGlvbl1dOwp9OwoKc3RydWN0IG1haW4wX2luCnsKICAgIGZsb2F0MyBhX3Bvc2l0aW9uIFtbYXR0cmlidXRlKDApXV07CiAgICBmbG9hdDQgYV9ib25lV2VpZ2h0cyBbW2F0dHJpYnV0ZSgxKV1dOwogICAgZmxvYXQ0IGFfYm9uZUlkcyBbW2F0dHJpYnV0ZSgyKV1dOwp9OwoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIGdldE1vcnBoUG9zaXRpb24odGhyZWFkIGNvbnN0IGZsb2F0MyYgcG9zKQp7CiAgICByZXR1cm4gcG9zOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDR4NCBnZXRCb25lVHJhbnNmb3JtKGNvbnN0YW50IHVfdnNfc2tpbm5pbmcmIHZfMzMsIHRocmVhZCBmbG9hdDQmIGFfYm9uZUlkcywgdGhyZWFkIGZsb2F0NCYgYV9ib25lV2VpZ2h0cykKewogICAgZmxvYXQ0eDQgXzUxID0gdl8zMy5ib25lc01hdHJpeFtpbnQoYV9ib25lSWRzLnggKiA2NTUzNS4wKV0gKiBhX2JvbmVXZWlnaHRzLng7CiAgICBmbG9hdDR4NCBfNzUgPSB2XzMzLmJvbmVzTWF0cml4W2ludChhX2JvbmVJZHMueSAqIDY1NTM1LjApXSAqIGFfYm9uZVdlaWdodHMueTsKICAgIGZsb2F0NHg0IF85OSA9IHZfMzMuYm9uZXNNYXRyaXhbaW50KGFfYm9uZUlkcy56ICogNjU1MzUuMCldICogYV9ib25lV2VpZ2h0cy56OwogICAgZmxvYXQ0eDQgXzEyMyA9IHZfMzMuYm9uZXNNYXRyaXhbaW50KGFfYm9uZUlkcy53ICogNjU1MzUuMCldICogYV9ib25lV2VpZ2h0cy53OwogICAgcmV0dXJuIGZsb2F0NHg0KCgoXzUxWzBdICsgXzc1WzBdKSArIF85OVswXSkgKyBfMTIzWzBdLCAoKF81MVsxXSArIF83NVsxXSkgKyBfOTlbMV0pICsgXzEyM1sxXSwgKChfNTFbMl0gKyBfNzVbMl0pICsgXzk5WzJdKSArIF8xMjNbMl0sICgoXzUxWzNdICsgXzc1WzNdKSArIF85OVszXSkgKyBfMTIzWzNdKTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIGdldFNraW5Qb3NpdGlvbih0aHJlYWQgZmxvYXQzJiBwb3MsIHRocmVhZCBjb25zdCBmbG9hdDR4NCYgYm9uZVRyYW5zZm9ybSkKewogICAgZmxvYXQ0IF8xNTEgPSBib25lVHJhbnNmb3JtICogZmxvYXQ0KHBvcywgMS4wKTsKICAgIHBvcyA9IGZsb2F0MyhfMTUxLnh5eikgLyBmbG9hdDMoXzE1MS53KTsKICAgIHJldHVybiBwb3M7Cn0KCnZlcnRleCBtYWluMF9vdXQgbWFpbjAobWFpbjBfaW4gaW4gW1tzdGFnZV9pbl1dLCBjb25zdGFudCB1X3ZzX3NraW5uaW5nJiB2XzMzIFtbYnVmZmVyKDApXV0sIGNvbnN0YW50IHVfdnNfZGVwdGhQYXJhbXMmIGRlcHRoUGFyYW1zIFtbYnVmZmVyKDEpXV0pCnsKICAgIG1haW4wX291dCBvdXQgPSB7fTsKICAgIGZsb2F0MyBwb3MgPSBpbi5hX3Bvc2l0aW9uOwogICAgZmxvYXQzIHBhcmFtID0gaW4uYV9wb3NpdGlvbjsKICAgIHBvcyA9IGdldE1vcnBoUG9zaXRpb24ocGFyYW0pOwogICAgZmxvYXQzIHBhcmFtXzEgPSBwb3M7CiAgICBmbG9hdDR4NCBwYXJhbV8yID0gZ2V0Qm9uZVRyYW5zZm9ybSh2XzMzLCBpbi5hX2JvbmVJZHMsIGluLmFfYm9uZVdlaWdodHMpOwogICAgZmxvYXQzIF8xNzkgPSBnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMik7CiAgICBwb3MgPSBfMTc5OwogICAgb3V0LmdsX1Bvc2l0aW9uID0gZGVwdGhQYXJhbXMubGlnaHRNVlBNYXRyaXggKiBmbG9hdDQoXzE3OSwgMS4wKTsKICAgIG91dC52X3Byb2paVyA9IG91dC5nbF9Qb3NpdGlvbi56dzsKICAgIG91dC5nbF9Qb3NpdGlvbi55ID0gLW91dC5nbF9Qb3NpdGlvbi55OwogICAgb3V0LmdsX1Bvc2l0aW9uLnogPSAob3V0LmdsX1Bvc2l0aW9uLnogKyBvdXQuZ2xfUG9zaXRpb24udykgKiAwLjU7ICAgICAgIC8vIEFkanVzdCBjbGlwLXNwYWNlIGZvciBNZXRhbAogICAgcmV0dXJuIG91dDsKfQoKUkVGTA4CAABkZXB0aF9Ta2lfbXNsMjFpb3MAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAgAAAAIAAABhX2JvbmVJZHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0YV9ib25lV2VpZ2h0cwAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNGFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAdV92c19za2lubmluZwAAAAAAAAAAAAAAAAAAAAAAAAB2XzMzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgBEAAAFib25lc01hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDRGAAAAAAAAAAEAAAB1X3ZzX2RlcHRoUGFyYW1zAAAAAAAAAAAAAAAAAAAAAGRlcHRoUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABAAAAAAWxpZ2h0TVZQTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAU1RBRzoDAABGUkFHQ09ERfYCAAAjcHJhZ21hIGNsYW5nIGRpYWdub3N0aWMgaWdub3JlZCAiLVdtaXNzaW5nLXByb3RvdHlwZXMiCgojaW5jbHVkZSA8bWV0YWxfc3RkbGliPgojaW5jbHVkZSA8c2ltZC9zaW1kLmg+Cgp1c2luZyBuYW1lc3BhY2UgbWV0YWw7CgpzdHJ1Y3QgbWFpbjBfb3V0CnsKICAgIGZsb2F0NCBmcmFnX2NvbG9yIFtbY29sb3IoMCldXTsKfTsKCnN0cnVjdCBtYWluMF9pbgp7CiAgICBmbG9hdDIgdl9wcm9qWlcgW1t1c2VyKGxvY24wKV1dOwp9OwoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0IGVuY29kZURlcHRoKHRocmVhZCBjb25zdCBmbG9hdCYgdikKewogICAgZmxvYXQ0IF8yMyA9IGZyYWN0KGZsb2F0NCgxLjAsIDI1NS4wLCA2NTAyNS4wLCAxNjU4MTM3NS4wKSAqIHYpOwogICAgcmV0dXJuIF8yMyAtIChfMjMueXp3dyAqIGZsb2F0NCgwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjUsIDAuMDAzOTIxNTY4ODU5MzY4NTYyNjk4MzY0MjU3ODEyNSwgMC4wMDM5MjE1Njg4NTkzNjg1NjI2OTgzNjQyNTc4MTI1LCAwLjApKTsKfQoKZnJhZ21lbnQgbWFpbjBfb3V0IG1haW4wKG1haW4wX2luIGluIFtbc3RhZ2VfaW5dXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgZmxvYXQgcGFyYW0gPSAoKDAuNSAqIGluLnZfcHJvalpXLngpIC8gaW4udl9wcm9qWlcueSkgKyAwLjU7CiAgICBvdXQuZnJhZ19jb2xvciA9IGVuY29kZURlcHRoKHBhcmFtKTsKICAgIHJldHVybiBvdXQ7Cn0KClJFRkwwAAAAZGVwdGhfU2tpX21zbDIxaW9zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
static const std::string mesh_PucShwPcfNorTanMtaMnr_msl21ios = "";
static const std::string mesh_Uv1PucShwPcfNorNmpTanVc4Fog_msl21ios = "";
static const std::string mesh_Uv1PucNorNmpTanFog_msl21ios = "";
static const std::string mesh_PucShwPcfNorTanFogMtaMnrMtg_msl21ios = "";
static const std::string mesh_Uv1PucNorVc4Fog_msl21ios = "";
static const std::string mesh_Uv1PucNor_msl21ios = "";
static const std::string ui_Ftx_msl21ios = "U0JTIAAAAABkAAAATVNMIIROAAAAAFNUQUf6AwAAVkVSVENPREWhAgAAI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfdnNfdWlQYXJhbXMKewogICAgZmxvYXQ0eDQgbXZwTWF0cml4Owp9OwoKc3RydWN0IG1haW4wX291dAp7CiAgICBmbG9hdDIgdl91djEgW1t1c2VyKGxvY24wKV1dOwogICAgZmxvYXQ0IGdsX1Bvc2l0aW9uIFtbcG9zaXRpb25dXTsKfTsKCnN0cnVjdCBtYWluMF9pbgp7CiAgICBmbG9hdDMgYV9wb3NpdGlvbiBbW2F0dHJpYnV0ZSgwKV1dOwogICAgZmxvYXQyIGFfdGV4Y29vcmQxIFtbYXR0cmlidXRlKDEpXV07Cn07Cgp2ZXJ0ZXggbWFpbjBfb3V0IG1haW4wKG1haW4wX2luIGluIFtbc3RhZ2VfaW5dXSwgY29uc3RhbnQgdV92c191aVBhcmFtcyYgdWlQYXJhbXMgW1tidWZmZXIoMCldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgb3V0LnZfdXYxID0gaW4uYV90ZXhjb29yZDE7CiAgICBvdXQuZ2xfUG9zaXRpb24gPSB1aVBhcmFtcy5tdnBNYXRyaXggKiBmbG9hdDQoaW4uYV9wb3NpdGlvbiwgMS4wKTsKICAgIG91dC5nbF9Qb3NpdGlvbi56ID0gKG91dC5nbF9Qb3NpdGlvbi56ICsgb3V0LmdsX1Bvc2l0aW9uLncpICogMC41OyAgICAgICAvLyBBZGp1c3QgY2xpcC1zcGFjZSBmb3IgTWV0YWwKICAgIHJldHVybiBvdXQ7Cn0KClJFRkxFAQAAdWlfRnR4X21zbDIxaW9zAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAEAAAABAAAAYV90ZXhjb29yZDEAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMmFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAdV92c191aVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAB1aVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUfkBQAARlJBR0NPREXzBAAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfZnNfdWlQYXJhbXMKewogICAgZmxvYXQ0IGNvbG9yOwp9OwoKc3RydWN0IG1haW4wX291dAp7CiAgICBmbG9hdDQgZ19maW5hbENvbG9yIFtbY29sb3IoMCldXTsKfTsKCnN0cnVjdCBtYWluMF9pbgp7CiAgICBmbG9hdDIgdl91djEgW1t1c2VyKGxvY24wKV1dOwp9OwoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0IGdldFZlcnRleENvbG9yKCkKewogICAgcmV0dXJuIGZsb2F0NCgxLjApOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgZ2V0QmFzZUNvbG9yKGNvbnN0YW50IHVfZnNfdWlQYXJhbXMmIHVpUGFyYW1zLCB0aHJlYWQgdGV4dHVyZTJkPGZsb2F0PiB1X3VpVGV4dHVyZSwgdGhyZWFkIGNvbnN0IHNhbXBsZXIgdV91aVRleHR1cmVTbXBsciwgdGhyZWFkIGZsb2F0MiYgdl91djEpCnsKICAgIHJldHVybiAodWlQYXJhbXMuY29sb3IgKiBmbG9hdDQoMS4wLCAxLjAsIDEuMCwgdV91aVRleHR1cmUuc2FtcGxlKHVfdWlUZXh0dXJlU21wbHIsIHZfdXYxKS54KSkgKiBnZXRWZXJ0ZXhDb2xvcigpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDMgbGluZWFyVG9zUkdCKHRocmVhZCBjb25zdCBmbG9hdDMmIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCBmbG9hdDMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCmZyYWdtZW50IG1haW4wX291dCBtYWluMChtYWluMF9pbiBpbiBbW3N0YWdlX2luXV0sIGNvbnN0YW50IHVfZnNfdWlQYXJhbXMmIHVpUGFyYW1zIFtbYnVmZmVyKDApXV0sIHRleHR1cmUyZDxmbG9hdD4gdV91aVRleHR1cmUgW1t0ZXh0dXJlKDApXV0sIHNhbXBsZXIgdV91aVRleHR1cmVTbXBsciBbW3NhbXBsZXIoMCldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgZmxvYXQ0IF82MyA9IGdldEJhc2VDb2xvcih1aVBhcmFtcywgdV91aVRleHR1cmUsIHVfdWlUZXh0dXJlU21wbHIsIGluLnZfdXYxKTsKICAgIGZsb2F0MyBwYXJhbSA9IF82My54eXo7CiAgICBvdXQuZ19maW5hbENvbG9yID0gZmxvYXQ0KGxpbmVhclRvc1JHQihwYXJhbSksIF82My53KTsKICAgIHJldHVybiBvdXQ7Cn0KClJFRkzdAAAAdWlfRnR4X21zbDIxaW9zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAdV91aVRleHR1cmUAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUAQAAAHVfZnNfdWlQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAdWlQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAABY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAAA=";
static const std::string mesh_PucShwPcfNorTanMtaMnrMtg_msl21ios = "";
static const std::string mesh_Uv1PucShwPcfNorSki_msl21ios = "";
static const std::string mesh_Uv1PucNorFog_msl21ios = "";
static const std::string mesh_Uv1PucNorNmpTanVc4Fog_msl21ios = "";
static const std::string mesh_PucShwPcfNorSki_msl21ios = "";
static const std::string points_Vc4_msl21ios = "U0JTIAAAAABkAAAATVNMIIROAAAAAFNUQUetBQAAVkVSVENPREW8AwAAI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfdnNfcG9pbnRzUGFyYW1zCnsKICAgIGZsb2F0NHg0IG12cE1hdHJpeDsKfTsKCnN0cnVjdCBtYWluMF9vdXQKewogICAgZmxvYXQgdl9wb2ludHJvdGF0aW9uIFtbdXNlcihsb2NuMCldXTsKICAgIGZsb2F0NCB2X2NvbG9yIFtbdXNlcihsb2NuMSldXTsKICAgIGZsb2F0NCBnbF9Qb3NpdGlvbiBbW3Bvc2l0aW9uXV07CiAgICBmbG9hdCBnbF9Qb2ludFNpemUgW1twb2ludF9zaXplXV07Cn07CgpzdHJ1Y3QgbWFpbjBfaW4KewogICAgZmxvYXQzIGFfcG9zaXRpb24gW1thdHRyaWJ1dGUoMCldXTsKICAgIGZsb2F0IGFfcG9pbnRzaXplIFtbYXR0cmlidXRlKDEpXV07CiAgICBmbG9hdCBhX3BvaW50cm90YXRpb24gW1thdHRyaWJ1dGUoMildXTsKICAgIGZsb2F0NCBhX2NvbG9yIFtbYXR0cmlidXRlKDMpXV07Cn07Cgp2ZXJ0ZXggbWFpbjBfb3V0IG1haW4wKG1haW4wX2luIGluIFtbc3RhZ2VfaW5dXSwgY29uc3RhbnQgdV92c19wb2ludHNQYXJhbXMmIHBvaW50c1BhcmFtcyBbW2J1ZmZlcigwKV1dKQp7CiAgICBtYWluMF9vdXQgb3V0ID0ge307CiAgICBvdXQudl9wb2ludHJvdGF0aW9uID0gaW4uYV9wb2ludHJvdGF0aW9uOwogICAgb3V0LnZfY29sb3IgPSBpbi5hX2NvbG9yOwogICAgb3V0LmdsX1Bvc2l0aW9uID0gcG9pbnRzUGFyYW1zLm12cE1hdHJpeCAqIGZsb2F0NChpbi5hX3Bvc2l0aW9uLCAxLjApOwogICAgb3V0LmdsX1BvaW50U2l6ZSA9IGluLmFfcG9pbnRzaXplIC8gb3V0LmdsX1Bvc2l0aW9uLnc7CiAgICBvdXQuZ2xfUG9zaXRpb24ueiA9IChvdXQuZ2xfUG9zaXRpb24ueiArIG91dC5nbF9Qb3NpdGlvbi53KSAqIDAuNTsgICAgICAgLy8gQWRqdXN0IGNsaXAtc3BhY2UgZm9yIE1ldGFsCiAgICByZXR1cm4gb3V0Owp9CgpSRUZM3QEAAHBvaW50c19WYzRfbXNsMjFpb3MAAAAAAAAAAAAAAAAABAAAAAAAAAABAAAAAQAAAGFfcG9pbnRyb3RhdGlvbgAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDFhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABGTFQ0YV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfcG9pbnRzaXplAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAdV92c19wb2ludHNQYXJhbXMAAAAAAAAAAAAAAAAAAABwb2ludHNQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUeyAwAARlJBR0NPREVuAwAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IG1haW4wX291dAp7CiAgICBmbG9hdDQgZ19maW5hbENvbG9yIFtbY29sb3IoMCldXTsKfTsKCnN0cnVjdCBtYWluMF9pbgp7CiAgICBmbG9hdDQgdl9jb2xvciBbW3VzZXIobG9jbjEpXV07Cn07CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgZ2V0VmVydGV4Q29sb3IodGhyZWFkIGZsb2F0NCYgdl9jb2xvcikKewogICAgcmV0dXJuIHZfY29sb3I7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0NCBnZXRCYXNlQ29sb3IodGhyZWFkIGZsb2F0NCYgdl9jb2xvcikKewogICAgcmV0dXJuIGdldFZlcnRleENvbG9yKHZfY29sb3IpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDMgbGluZWFyVG9zUkdCKHRocmVhZCBjb25zdCBmbG9hdDMmIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCBmbG9hdDMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCmZyYWdtZW50IG1haW4wX291dCBtYWluMChtYWluMF9pbiBpbiBbW3N0YWdlX2luXV0pCnsKICAgIG1haW4wX291dCBvdXQgPSB7fTsKICAgIGZsb2F0NCBfNDIgPSBnZXRCYXNlQ29sb3IoaW4udl9jb2xvcik7CiAgICBmbG9hdDMgcGFyYW0gPSBfNDIueHl6OwogICAgb3V0LmdfZmluYWxDb2xvciA9IGZsb2F0NChsaW5lYXJUb3NSR0IocGFyYW0pLCBfNDIudyk7CiAgICByZXR1cm4gb3V0Owp9CgpSRUZMMAAAAHBvaW50c19WYzRfbXNsMjFpb3MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==";
static const std::string mesh_Uv1PucShwPcfNorNmpTan_msl21ios = "";
static const std::string mesh_Uv1PucShwPcfNorNmpTanVc4_msl21ios = "";
static const std::string mesh_Uv1PucNorNmpTan_msl21ios = "";
static const std::string mesh_UltUv1Vc4Fog_msl21ios = "U0JTIAAAAABkAAAATVNMIIROAAAAAFNUQUd8CQAAVkVSVENPREV/BwAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfdnNfcGJyUGFyYW1zCnsKICAgIGZsb2F0NHg0IG1vZGVsTWF0cml4OwogICAgZmxvYXQ0eDQgbm9ybWFsTWF0cml4OwogICAgZmxvYXQ0eDQgbXZwTWF0cml4Owp9OwoKc3RydWN0IG1haW4wX291dAp7CiAgICBmbG9hdDMgdl9wb3NpdGlvbiBbW3VzZXIobG9jbjApXV07CiAgICBmbG9hdDIgdl91djEgW1t1c2VyKGxvY24xKV1dOwogICAgZmxvYXQyIHZfdXYyIFtbdXNlcihsb2NuMildXTsKICAgIGZsb2F0NCB2X2NvbG9yIFtbdXNlcihsb2NuMyldXTsKICAgIGZsb2F0NCBnbF9Qb3NpdGlvbiBbW3Bvc2l0aW9uXV07Cn07CgpzdHJ1Y3QgbWFpbjBfaW4KewogICAgZmxvYXQzIGFfcG9zaXRpb24gW1thdHRyaWJ1dGUoMCldXTsKICAgIGZsb2F0MiBhX3RleGNvb3JkMSBbW2F0dHJpYnV0ZSgxKV1dOwogICAgZmxvYXQ0IGFfY29sb3IgW1thdHRyaWJ1dGUoMildXTsKfTsKCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0NHg0IGdldEJvbmVUcmFuc2Zvcm0oKQp7CiAgICByZXR1cm4gZmxvYXQ0eDQoZmxvYXQ0KDAuMCksIGZsb2F0NCgwLjApLCBmbG9hdDQoMC4wKSwgZmxvYXQ0KDAuMCkpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDMgZ2V0TW9ycGhQb3NpdGlvbih0aHJlYWQgY29uc3QgZmxvYXQzJiBwb3MpCnsKICAgIHJldHVybiBwb3M7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBnZXRTa2luUG9zaXRpb24odGhyZWFkIGNvbnN0IGZsb2F0MyYgcG9zLCB0aHJlYWQgY29uc3QgZmxvYXQ0eDQmIGJvbmVUcmFuc2Zvcm0pCnsKICAgIHJldHVybiBwb3M7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0NCBnZXRQb3NpdGlvbih0aHJlYWQgY29uc3QgZmxvYXQ0eDQmIGJvbmVUcmFuc2Zvcm0sIHRocmVhZCBmbG9hdDMmIGFfcG9zaXRpb24pCnsKICAgIGZsb2F0MyBwYXJhbSA9IGFfcG9zaXRpb247CiAgICBmbG9hdDMgcGFyYW1fMSA9IGdldE1vcnBoUG9zaXRpb24ocGFyYW0pOwogICAgZmxvYXQ0eDQgcGFyYW1fMiA9IGJvbmVUcmFuc2Zvcm07CiAgICByZXR1cm4gZmxvYXQ0KGdldFNraW5Qb3NpdGlvbihwYXJhbV8xLCBwYXJhbV8yKSwgMS4wKTsKfQoKdmVydGV4IG1haW4wX291dCBtYWluMChtYWluMF9pbiBpbiBbW3N0YWdlX2luXV0sIGNvbnN0YW50IHVfdnNfcGJyUGFyYW1zJiBwYnJQYXJhbXMgW1tidWZmZXIoMCldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgZmxvYXQ0eDQgcGFyYW0gPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICBmbG9hdDQgXzY3ID0gZ2V0UG9zaXRpb24ocGFyYW0sIGluLmFfcG9zaXRpb24pOwogICAgZmxvYXQ0IF83OCA9IHBiclBhcmFtcy5tb2RlbE1hdHJpeCAqIF82NzsKICAgIG91dC52X3Bvc2l0aW9uID0gZmxvYXQzKF83OC54eXopIC8gZmxvYXQzKF83OC53KTsKICAgIG91dC52X3V2MSA9IGZsb2F0MigwLjApOwogICAgb3V0LnZfdXYyID0gZmxvYXQyKDAuMCk7CiAgICBvdXQudl91djEgPSBpbi5hX3RleGNvb3JkMTsKICAgIG91dC52X2NvbG9yID0gaW4uYV9jb2xvcjsKICAgIG91dC5nbF9Qb3NpdGlvbiA9IHBiclBhcmFtcy5tdnBNYXRyaXggKiBfNjc7CiAgICBvdXQuZ2xfUG9zaXRpb24ueiA9IChvdXQuZ2xfUG9zaXRpb24ueiArIG91dC5nbF9Qb3NpdGlvbi53KSAqIDAuNTsgICAgICAgLy8gQWRqdXN0IGNsaXAtc3BhY2UgZm9yIE1ldGFsCiAgICByZXR1cm4gb3V0Owp9CgpSRUZM6QEAAG1lc2hfVWx0VXYxVmM0Rm9nX21zbDIxaW9zAAAAAAAAAwAAAAAAAAABAAAAAwAAAGFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDNhX3RleGNvb3JkMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABOT1JNQUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQyYV9jb2xvcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNAMAAAB1X3ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAW1vZGVsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAbm9ybWFsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAEAAAABtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAgAAAAFNUQUfGCQAARlJBR0NPREX5BwAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfZnNfcGJyUGFyYW1zCnsKICAgIGZsb2F0NCBiYXNlQ29sb3JGYWN0b3I7CiAgICBmbG9hdCBtZXRhbGxpY0ZhY3RvcjsKICAgIGZsb2F0IHJvdWdobmVzc0ZhY3RvcjsKICAgIGZsb2F0MyBlbWlzc2l2ZUZhY3RvcjsKICAgIHBhY2tlZF9mbG9hdDMgYW1iaWVudExpZ2h0OwogICAgZmxvYXQgYW1iaWVudEZhY3RvcjsKfTsKCnN0cnVjdCBtYWluMF9vdXQKewogICAgZmxvYXQ0IGdfZmluYWxDb2xvciBbW2NvbG9yKDApXV07Cn07CgpzdHJ1Y3QgbWFpbjBfaW4KewogICAgZmxvYXQyIHZfdXYxIFtbdXNlcihsb2NuMSldXTsKICAgIGZsb2F0NCB2X2NvbG9yIFtbdXNlcihsb2NuMyldXTsKfTsKCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBzUkdCVG9MaW5lYXIodGhyZWFkIGNvbnN0IGZsb2F0MyYgc3JnYkluKQp7CiAgICByZXR1cm4gcG93KHNyZ2JJbiwgZmxvYXQzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgc1JHQlRvTGluZWFyKHRocmVhZCBjb25zdCBmbG9hdDQmIHNyZ2JJbikKewogICAgZmxvYXQzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiBmbG9hdDQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgZ2V0VmVydGV4Q29sb3IodGhyZWFkIGZsb2F0NCYgdl9jb2xvcikKewogICAgcmV0dXJuIHZfY29sb3I7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0NCBnZXRCYXNlQ29sb3IodGhyZWFkIGZsb2F0NCYgdl9jb2xvciwgY29uc3RhbnQgdV9mc19wYnJQYXJhbXMmIHBiclBhcmFtcywgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9iYXNlQ29sb3JUZXh0dXJlLCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X2Jhc2VDb2xvclRleHR1cmVTbXBsciwgdGhyZWFkIGZsb2F0MiYgdl91djEpCnsKICAgIGZsb2F0NCBiYXNlQ29sb3IgPSBwYnJQYXJhbXMuYmFzZUNvbG9yRmFjdG9yOwogICAgZmxvYXQ0IHBhcmFtID0gdV9iYXNlQ29sb3JUZXh0dXJlLnNhbXBsZSh1X2Jhc2VDb2xvclRleHR1cmVTbXBsciwgdl91djEpOwogICAgZmxvYXQ0IF8xMDMgPSBiYXNlQ29sb3I7CiAgICBmbG9hdDQgXzEwNCA9IF8xMDMgKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzEwNDsKICAgIHJldHVybiBfMTA0ICogZ2V0VmVydGV4Q29sb3Iodl9jb2xvcik7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBsaW5lYXJUb3NSR0IodGhyZWFkIGNvbnN0IGZsb2F0MyYgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIGZsb2F0MygwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzUpKTsKfQoKZnJhZ21lbnQgbWFpbjBfb3V0IG1haW4wKG1haW4wX2luIGluIFtbc3RhZ2VfaW5dXSwgY29uc3RhbnQgdV9mc19wYnJQYXJhbXMmIHBiclBhcmFtcyBbW2J1ZmZlcigwKV1dLCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfYmFzZUNvbG9yVGV4dHVyZSBbW3RleHR1cmUoMCldXSwgc2FtcGxlciB1X2Jhc2VDb2xvclRleHR1cmVTbXBsciBbW3NhbXBsZXIoMCldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgZmxvYXQ0IF8yNTkgPSBnZXRCYXNlQ29sb3IoaW4udl9jb2xvciwgcGJyUGFyYW1zLCB1X2Jhc2VDb2xvclRleHR1cmUsIHVfYmFzZUNvbG9yVGV4dHVyZVNtcGxyLCBpbi52X3V2MSk7CiAgICBmbG9hdDMgcGFyYW0gPSBfMjU5Lnh5ejsKICAgIG91dC5nX2ZpbmFsQ29sb3IgPSBmbG9hdDQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzI1OS53KTsKICAgIHJldHVybiBvdXQ7Cn0KClJFRky5AQAAbWVzaF9VbHRVdjFWYzRGb2dfbXNsMjFpb3MAAAAAAAAAAAAAAQAAAAEAAAAGAAAAdV9iYXNlQ29sb3JUZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUBgAAAHVfZnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABYmFzZUNvbG9yRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABtZXRhbGxpY0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAEAAAAHJvdWdobmVzc0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAUAAAAZW1pc3NpdmVGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAACAAAABhbWJpZW50TGlnaHQAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAMAAAAGFtYmllbnRGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAA8AAAA";
static const std::string mesh_Uv1PucNorNmpTanVc4_msl21ios = "";
static const std::string mesh_UltUv1_msl21ios = "U0JTIAAAAABkAAAATVNMIIROAAAAAFNUQUfJCAAAVkVSVENPREUYBwAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfdnNfcGJyUGFyYW1zCnsKICAgIGZsb2F0NHg0IG1vZGVsTWF0cml4OwogICAgZmxvYXQ0eDQgbm9ybWFsTWF0cml4OwogICAgZmxvYXQ0eDQgbXZwTWF0cml4Owp9OwoKc3RydWN0IG1haW4wX291dAp7CiAgICBmbG9hdDMgdl9wb3NpdGlvbiBbW3VzZXIobG9jbjApXV07CiAgICBmbG9hdDIgdl91djEgW1t1c2VyKGxvY24xKV1dOwogICAgZmxvYXQyIHZfdXYyIFtbdXNlcihsb2NuMildXTsKICAgIGZsb2F0NCBnbF9Qb3NpdGlvbiBbW3Bvc2l0aW9uXV07Cn07CgpzdHJ1Y3QgbWFpbjBfaW4KewogICAgZmxvYXQzIGFfcG9zaXRpb24gW1thdHRyaWJ1dGUoMCldXTsKICAgIGZsb2F0MiBhX3RleGNvb3JkMSBbW2F0dHJpYnV0ZSgxKV1dOwp9OwoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0eDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIHJldHVybiBmbG9hdDR4NChmbG9hdDQoMC4wKSwgZmxvYXQ0KDAuMCksIGZsb2F0NCgwLjApLCBmbG9hdDQoMC4wKSk7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBnZXRNb3JwaFBvc2l0aW9uKHRocmVhZCBjb25zdCBmbG9hdDMmIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIGdldFNraW5Qb3NpdGlvbih0aHJlYWQgY29uc3QgZmxvYXQzJiBwb3MsIHRocmVhZCBjb25zdCBmbG9hdDR4NCYgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0IGdldFBvc2l0aW9uKHRocmVhZCBjb25zdCBmbG9hdDR4NCYgYm9uZVRyYW5zZm9ybSwgdGhyZWFkIGZsb2F0MyYgYV9wb3NpdGlvbikKewogICAgZmxvYXQzIHBhcmFtID0gYV9wb3NpdGlvbjsKICAgIGZsb2F0MyBwYXJhbV8xID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBmbG9hdDR4NCBwYXJhbV8yID0gYm9uZVRyYW5zZm9ybTsKICAgIHJldHVybiBmbG9hdDQoZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpLCAxLjApOwp9Cgp2ZXJ0ZXggbWFpbjBfb3V0IG1haW4wKG1haW4wX2luIGluIFtbc3RhZ2VfaW5dXSwgY29uc3RhbnQgdV92c19wYnJQYXJhbXMmIHBiclBhcmFtcyBbW2J1ZmZlcigwKV1dKQp7CiAgICBtYWluMF9vdXQgb3V0ID0ge307CiAgICBmbG9hdDR4NCBwYXJhbSA9IGdldEJvbmVUcmFuc2Zvcm0oKTsKICAgIGZsb2F0NCBfNjcgPSBnZXRQb3NpdGlvbihwYXJhbSwgaW4uYV9wb3NpdGlvbik7CiAgICBmbG9hdDQgXzc4ID0gcGJyUGFyYW1zLm1vZGVsTWF0cml4ICogXzY3OwogICAgb3V0LnZfcG9zaXRpb24gPSBmbG9hdDMoXzc4Lnh5eikgLyBmbG9hdDMoXzc4LncpOwogICAgb3V0LnZfdXYxID0gZmxvYXQyKDAuMCk7CiAgICBvdXQudl91djIgPSBmbG9hdDIoMC4wKTsKICAgIG91dC52X3V2MSA9IGluLmFfdGV4Y29vcmQxOwogICAgb3V0LmdsX1Bvc2l0aW9uID0gcGJyUGFyYW1zLm12cE1hdHJpeCAqIF82NzsKICAgIG91dC5nbF9Qb3NpdGlvbi56ID0gKG91dC5nbF9Qb3NpdGlvbi56ICsgb3V0LmdsX1Bvc2l0aW9uLncpICogMC41OyAgICAgICAvLyBBZGp1c3QgY2xpcC1zcGFjZSBmb3IgTWV0YWwKICAgIHJldHVybiBvdXQ7Cn0KClJFRkydAQAAbWVzaF9VbHRVdjFfbXNsMjFpb3MAAAAAAAAAAAAAAAACAAAAAAAAAAEAAAADAAAAYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfdGV4Y29vcmQxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDIDAAAAdV92c19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAFtb2RlbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAG5vcm1hbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAABAAAAAbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAIAAAABTVEFHZQkAAEZSQUdDT0RFmAcAACNwcmFnbWEgY2xhbmcgZGlhZ25vc3RpYyBpZ25vcmVkICItV21pc3NpbmctcHJvdG90eXBlcyIKCiNpbmNsdWRlIDxtZXRhbF9zdGRsaWI+CiNpbmNsdWRlIDxzaW1kL3NpbWQuaD4KCnVzaW5nIG5hbWVzcGFjZSBtZXRhbDsKCnN0cnVjdCB1X2ZzX3BiclBhcmFtcwp7CiAgICBmbG9hdDQgYmFzZUNvbG9yRmFjdG9yOwogICAgZmxvYXQgbWV0YWxsaWNGYWN0b3I7CiAgICBmbG9hdCByb3VnaG5lc3NGYWN0b3I7CiAgICBmbG9hdDMgZW1pc3NpdmVGYWN0b3I7CiAgICBwYWNrZWRfZmxvYXQzIGFtYmllbnRMaWdodDsKICAgIGZsb2F0IGFtYmllbnRGYWN0b3I7Cn07CgpzdHJ1Y3QgbWFpbjBfb3V0CnsKICAgIGZsb2F0NCBnX2ZpbmFsQ29sb3IgW1tjb2xvcigwKV1dOwp9OwoKc3RydWN0IG1haW4wX2luCnsKICAgIGZsb2F0MiB2X3V2MSBbW3VzZXIobG9jbjEpXV07Cn07CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDMgc1JHQlRvTGluZWFyKHRocmVhZCBjb25zdCBmbG9hdDMmIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIGZsb2F0MygyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjUpKTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0IHNSR0JUb0xpbmVhcih0aHJlYWQgY29uc3QgZmxvYXQ0JiBzcmdiSW4pCnsKICAgIGZsb2F0MyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gZmxvYXQ0KHNSR0JUb0xpbmVhcihwYXJhbSksIHNyZ2JJbi53KTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0IGdldFZlcnRleENvbG9yKCkKewogICAgcmV0dXJuIGZsb2F0NCgxLjApOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgZ2V0QmFzZUNvbG9yKGNvbnN0YW50IHVfZnNfcGJyUGFyYW1zJiBwYnJQYXJhbXMsIHRocmVhZCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfYmFzZUNvbG9yVGV4dHVyZSwgdGhyZWFkIGNvbnN0IHNhbXBsZXIgdV9iYXNlQ29sb3JUZXh0dXJlU21wbHIsIHRocmVhZCBmbG9hdDImIHZfdXYxKQp7CiAgICBmbG9hdDQgYmFzZUNvbG9yID0gcGJyUGFyYW1zLmJhc2VDb2xvckZhY3RvcjsKICAgIGZsb2F0NCBwYXJhbSA9IHVfYmFzZUNvbG9yVGV4dHVyZS5zYW1wbGUodV9iYXNlQ29sb3JUZXh0dXJlU21wbHIsIHZfdXYxKTsKICAgIGZsb2F0NCBfMTAwID0gYmFzZUNvbG9yOwogICAgZmxvYXQ0IF8xMDEgPSBfMTAwICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8xMDE7CiAgICByZXR1cm4gXzEwMSAqIGdldFZlcnRleENvbG9yKCk7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBsaW5lYXJUb3NSR0IodGhyZWFkIGNvbnN0IGZsb2F0MyYgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIGZsb2F0MygwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzUpKTsKfQoKZnJhZ21lbnQgbWFpbjBfb3V0IG1haW4wKG1haW4wX2luIGluIFtbc3RhZ2VfaW5dXSwgY29uc3RhbnQgdV9mc19wYnJQYXJhbXMmIHBiclBhcmFtcyBbW2J1ZmZlcigwKV1dLCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfYmFzZUNvbG9yVGV4dHVyZSBbW3RleHR1cmUoMCldXSwgc2FtcGxlciB1X2Jhc2VDb2xvclRleHR1cmVTbXBsciBbW3NhbXBsZXIoMCldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgZmxvYXQ0IF8yNTYgPSBnZXRCYXNlQ29sb3IocGJyUGFyYW1zLCB1X2Jhc2VDb2xvclRleHR1cmUsIHVfYmFzZUNvbG9yVGV4dHVyZVNtcGxyLCBpbi52X3V2MSk7CiAgICBmbG9hdDMgcGFyYW0gPSBfMjU2Lnh5ejsKICAgIG91dC5nX2ZpbmFsQ29sb3IgPSBmbG9hdDQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzI1Ni53KTsKICAgIHJldHVybiBvdXQ7Cn0KClJFRky5AQAAbWVzaF9VbHRVdjFfbXNsMjFpb3MAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAAGAAAAdV9iYXNlQ29sb3JUZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUBgAAAHVfZnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABYmFzZUNvbG9yRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABtZXRhbGxpY0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAEAAAAHJvdWdobmVzc0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAUAAAAZW1pc3NpdmVGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAACAAAABhbWJpZW50TGlnaHQAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAMAAAAGFtYmllbnRGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAA8AAAA";
static const std::string depth_Mta_msl21ios = "U0JTIAAAAABkAAAATVNMIIROAAAAAFNUQUfxDAAAVkVSVENPREWfCQAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IHVfdnNfbW9ycGh0YXJnZXQKewogICAgZmxvYXQ0IG1vcnBoV2VpZ2h0c1syXTsKfTsKCnN0cnVjdCB1X3ZzX2RlcHRoUGFyYW1zCnsKICAgIGZsb2F0NHg0IGxpZ2h0TVZQTWF0cml4Owp9OwoKc3RydWN0IG1haW4wX291dAp7CiAgICBmbG9hdDIgdl9wcm9qWlcgW1t1c2VyKGxvY24wKV1dOwogICAgZmxvYXQ0IGdsX1Bvc2l0aW9uIFtbcG9zaXRpb25dXTsKfTsKCnN0cnVjdCBtYWluMF9pbgp7CiAgICBmbG9hdDMgYV9wb3NpdGlvbiBbW2F0dHJpYnV0ZSgwKV1dOwogICAgZmxvYXQzIGFfbW9ycGhUYXJnZXQwIFtbYXR0cmlidXRlKDEpXV07CiAgICBmbG9hdDMgYV9tb3JwaFRhcmdldDEgW1thdHRyaWJ1dGUoMildXTsKICAgIGZsb2F0MyBhX21vcnBoVGFyZ2V0NCBbW2F0dHJpYnV0ZSgzKV1dOwogICAgZmxvYXQzIGFfbW9ycGhUYXJnZXQ1IFtbYXR0cmlidXRlKDQpXV07CiAgICBmbG9hdDMgYV9tb3JwaFRhcmdldDYgW1thdHRyaWJ1dGUoNSldXTsKICAgIGZsb2F0MyBhX21vcnBoVGFyZ2V0NyBbW2F0dHJpYnV0ZSg2KV1dOwp9OwoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIGdldE1vcnBoUG9zaXRpb24odGhyZWFkIGZsb2F0MyYgcG9zLCBjb25zdGFudCB1X3ZzX21vcnBodGFyZ2V0JiB2XzM5LCB0aHJlYWQgZmxvYXQzJiBhX21vcnBoVGFyZ2V0MCwgdGhyZWFkIGZsb2F0MyYgYV9tb3JwaFRhcmdldDEsIHRocmVhZCBmbG9hdDMmIGFfbW9ycGhUYXJnZXQ0LCB0aHJlYWQgZmxvYXQzJiBhX21vcnBoVGFyZ2V0NSwgdGhyZWFkIGZsb2F0MyYgYV9tb3JwaFRhcmdldDYsIHRocmVhZCBmbG9hdDMmIGFfbW9ycGhUYXJnZXQ3KQp7CiAgICBwb3MgKz0gKGFfbW9ycGhUYXJnZXQwICogdl8zOS5tb3JwaFdlaWdodHNbMF0ueCk7CiAgICBwb3MgKz0gKGFfbW9ycGhUYXJnZXQxICogdl8zOS5tb3JwaFdlaWdodHNbMF0ueSk7CiAgICBwb3MgKz0gKGFfbW9ycGhUYXJnZXQ0ICogdl8zOS5tb3JwaFdlaWdodHNbMV0ueCk7CiAgICBwb3MgKz0gKGFfbW9ycGhUYXJnZXQ1ICogdl8zOS5tb3JwaFdlaWdodHNbMV0ueSk7CiAgICBwb3MgKz0gKGFfbW9ycGhUYXJnZXQ2ICogdl8zOS5tb3JwaFdlaWdodHNbMV0ueik7CiAgICBwb3MgKz0gKGFfbW9ycGhUYXJnZXQ3ICogdl8zOS5tb3JwaFdlaWdodHNbMV0udyk7CiAgICByZXR1cm4gcG9zOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDR4NCBnZXRCb25lVHJhbnNmb3JtKCkKewogICAgcmV0dXJuIGZsb2F0NHg0KGZsb2F0NCgwLjApLCBmbG9hdDQoMC4wKSwgZmxvYXQ0KDAuMCksIGZsb2F0NCgwLjApKTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIGdldFNraW5Qb3NpdGlvbih0aHJlYWQgY29uc3QgZmxvYXQzJiBwb3MsIHRocmVhZCBjb25zdCBmbG9hdDR4NCYgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKdmVydGV4IG1haW4wX291dCBtYWluMChtYWluMF9pbiBpbiBbW3N0YWdlX2luXV0sIGNvbnN0YW50IHVfdnNfbW9ycGh0YXJnZXQmIHZfMzkgW1tidWZmZXIoMCldXSwgY29uc3RhbnQgdV92c19kZXB0aFBhcmFtcyYgZGVwdGhQYXJhbXMgW1tidWZmZXIoMSldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgZmxvYXQzIHBvcyA9IGluLmFfcG9zaXRpb247CiAgICBmbG9hdDMgcGFyYW0gPSBpbi5hX3Bvc2l0aW9uOwogICAgZmxvYXQzIF85OCA9IGdldE1vcnBoUG9zaXRpb24ocGFyYW0sIHZfMzksIGluLmFfbW9ycGhUYXJnZXQwLCBpbi5hX21vcnBoVGFyZ2V0MSwgaW4uYV9tb3JwaFRhcmdldDQsIGluLmFfbW9ycGhUYXJnZXQ1LCBpbi5hX21vcnBoVGFyZ2V0NiwgaW4uYV9tb3JwaFRhcmdldDcpOwogICAgcG9zID0gXzk4OwogICAgZmxvYXQzIHBhcmFtXzEgPSBwb3M7CiAgICBmbG9hdDR4NCBwYXJhbV8yID0gZ2V0Qm9uZVRyYW5zZm9ybSgpOwogICAgZmxvYXQzIF8xMDMgPSBnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMik7CiAgICBwb3MgPSBfMTAzOwogICAgb3V0LmdsX1Bvc2l0aW9uID0gZGVwdGhQYXJhbXMubGlnaHRNVlBNYXRyaXggKiBmbG9hdDQoXzEwMywgMS4wKTsKICAgIG91dC52X3Byb2paVyA9IG91dC5nbF9Qb3NpdGlvbi56dzsKICAgIG91dC5nbF9Qb3NpdGlvbi55ID0gLW91dC5nbF9Qb3NpdGlvbi55OwogICAgb3V0LmdsX1Bvc2l0aW9uLnogPSAob3V0LmdsX1Bvc2l0aW9uLnogKyBvdXQuZ2xfUG9zaXRpb24udykgKiAwLjU7ICAgICAgIC8vIEFkanVzdCBjbGlwLXNwYWNlIGZvciBNZXRhbAogICAgcmV0dXJuIG91dDsKfQoKUkVGTD4DAABkZXB0aF9NdGFfbXNsMjFpb3MAAAAAAAAAAAAAAAAAAAcAAAAAAAAAAgAAAAIAAABhX21vcnBoVGFyZ2V0MAAAAAAAAAAAAAAAAAAAAAAAAAEAAABOT1JNQUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV9tb3JwaFRhcmdldDEAAAAAAAAAAAAAAAAAAAAAAAACAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfbW9ycGhUYXJnZXQ0AAAAAAAAAAAAAAAAAAAAAAAAAwAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAEZMVDNhX21vcnBoVGFyZ2V0NQAAAAAAAAAAAAAAAAAAAAAAAAQAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAABGTFQzYV9tb3JwaFRhcmdldDYAAAAAAAAAAAAAAAAAAAAAAAAFAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAARkxUM2FfbW9ycGhUYXJnZXQ3AAAAAAAAAAAAAAAAAAAAAAAABgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAEZMVDNhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAAHVfdnNfbW9ycGh0YXJnZXQAAAAAAAAAAAAAAAAAAAAAdl8zOQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAABbW9ycGhXZWlnaHRzAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AgAAAAAAAAABAAAAdV92c19kZXB0aFBhcmFtcwAAAAAAAAAAAAAAAAAAAABkZXB0aFBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAQAAAAAFsaWdodE1WUE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUc6AwAARlJBR0NPREX2AgAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgoKI2luY2x1ZGUgPG1ldGFsX3N0ZGxpYj4KI2luY2x1ZGUgPHNpbWQvc2ltZC5oPgoKdXNpbmcgbmFtZXNwYWNlIG1ldGFsOwoKc3RydWN0IG1haW4wX291dAp7CiAgICBmbG9hdDQgZnJhZ19jb2xvciBbW2NvbG9yKDApXV07Cn07CgpzdHJ1Y3QgbWFpbjBfaW4KewogICAgZmxvYXQyIHZfcHJvalpXIFtbdXNlcihsb2NuMCldXTsKfTsKCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0NCBlbmNvZGVEZXB0aCh0aHJlYWQgY29uc3QgZmxvYXQmIHYpCnsKICAgIGZsb2F0NCBfMjMgPSBmcmFjdChmbG9hdDQoMS4wLCAyNTUuMCwgNjUwMjUuMCwgMTY1ODEzNzUuMCkgKiB2KTsKICAgIHJldHVybiBfMjMgLSAoXzIzLnl6d3cgKiBmbG9hdDQoMC4wMDM5MjE1Njg4NTkzNjg1NjI2OTgzNjQyNTc4MTI1LCAwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjUsIDAuMDAzOTIxNTY4ODU5MzY4NTYyNjk4MzY0MjU3ODEyNSwgMC4wKSk7Cn0KCmZyYWdtZW50IG1haW4wX291dCBtYWluMChtYWluMF9pbiBpbiBbW3N0YWdlX2luXV0pCnsKICAgIG1haW4wX291dCBvdXQgPSB7fTsKICAgIGZsb2F0IHBhcmFtID0gKCgwLjUgKiBpbi52X3Byb2paVy54KSAvIGluLnZfcHJvalpXLnkpICsgMC41OwogICAgb3V0LmZyYWdfY29sb3IgPSBlbmNvZGVEZXB0aChwYXJhbSk7CiAgICByZXR1cm4gb3V0Owp9CgpSRUZMMAAAAGRlcHRoX010YV9tc2wyMWlvcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==";
static const std::string mesh_Uv1PucShwPcfNorNmpTanFog_msl21ios = "";
static const std::string mesh_Uv1PucShwPcfNorVc4_msl21ios = "";
static const std::string mesh_Uv1PucShwPcfNorFog_msl21ios = "U0JTIAAAAABkAAAATVNMIIROAAAAAFNUQUe4EwAAVkVSVENPREU+EQAAI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1wcm90b3R5cGVzIgojcHJhZ21hIGNsYW5nIGRpYWdub3N0aWMgaWdub3JlZCAiLVdtaXNzaW5nLWJyYWNlcyIKCiNpbmNsdWRlIDxtZXRhbF9zdGRsaWI+CiNpbmNsdWRlIDxzaW1kL3NpbWQuaD4KCnVzaW5nIG5hbWVzcGFjZSBtZXRhbDsKCnRlbXBsYXRlPHR5cGVuYW1lIFQsIHNpemVfdCBOdW0+CnN0cnVjdCBzcHZVbnNhZmVBcnJheQp7CiAgICBUIGVsZW1lbnRzW051bSA/IE51bSA6IDFdOwogICAgCiAgICB0aHJlYWQgVCYgb3BlcmF0b3IgW10gKHNpemVfdCBwb3MpIHRocmVhZAogICAgewogICAgICAgIHJldHVybiBlbGVtZW50c1twb3NdOwogICAgfQogICAgY29uc3RleHByIGNvbnN0IHRocmVhZCBUJiBvcGVyYXRvciBbXSAoc2l6ZV90IHBvcykgY29uc3QgdGhyZWFkCiAgICB7CiAgICAgICAgcmV0dXJuIGVsZW1lbnRzW3Bvc107CiAgICB9CiAgICAKICAgIGRldmljZSBUJiBvcGVyYXRvciBbXSAoc2l6ZV90IHBvcykgZGV2aWNlCiAgICB7CiAgICAgICAgcmV0dXJuIGVsZW1lbnRzW3Bvc107CiAgICB9CiAgICBjb25zdGV4cHIgY29uc3QgZGV2aWNlIFQmIG9wZXJhdG9yIFtdIChzaXplX3QgcG9zKSBjb25zdCBkZXZpY2UKICAgIHsKICAgICAgICByZXR1cm4gZWxlbWVudHNbcG9zXTsKICAgIH0KICAgIAogICAgY29uc3RleHByIGNvbnN0IGNvbnN0YW50IFQmIG9wZXJhdG9yIFtdIChzaXplX3QgcG9zKSBjb25zdCBjb25zdGFudAogICAgewogICAgICAgIHJldHVybiBlbGVtZW50c1twb3NdOwogICAgfQogICAgCiAgICB0aHJlYWRncm91cCBUJiBvcGVyYXRvciBbXSAoc2l6ZV90IHBvcykgdGhyZWFkZ3JvdXAKICAgIHsKICAgICAgICByZXR1cm4gZWxlbWVudHNbcG9zXTsKICAgIH0KICAgIGNvbnN0ZXhwciBjb25zdCB0aHJlYWRncm91cCBUJiBvcGVyYXRvciBbXSAoc2l6ZV90IHBvcykgY29uc3QgdGhyZWFkZ3JvdXAKICAgIHsKICAgICAgICByZXR1cm4gZWxlbWVudHNbcG9zXTsKICAgIH0KfTsKCnN0cnVjdCB1X3ZzX3BiclBhcmFtcwp7CiAgICBmbG9hdDR4NCBtb2RlbE1hdHJpeDsKICAgIGZsb2F0NHg0IG5vcm1hbE1hdHJpeDsKICAgIGZsb2F0NHg0IG12cE1hdHJpeDsKfTsKCnN0cnVjdCB1X3ZzX3NoYWRvd3MKewogICAgZmxvYXQ0eDQgbGlnaHRWUE1hdHJpeFs2XTsKfTsKCnN0cnVjdCBtYWluMF9vdXQKewogICAgZmxvYXQzIHZfcG9zaXRpb24gW1t1c2VyKGxvY24wKV1dOwogICAgZmxvYXQzIHZfbm9ybWFsIFtbdXNlcihsb2NuMSldXTsKICAgIGZsb2F0MiB2X3V2MSBbW3VzZXIobG9jbjIpXV07CiAgICBmbG9hdDIgdl91djIgW1t1c2VyKGxvY24zKV1dOwogICAgZmxvYXQ0IHZfbGlnaHRQcm9qUG9zXzAgW1t1c2VyKGxvY240KV1dOwogICAgZmxvYXQ0IHZfbGlnaHRQcm9qUG9zXzEgW1t1c2VyKGxvY241KV1dOwogICAgZmxvYXQ0IHZfbGlnaHRQcm9qUG9zXzIgW1t1c2VyKGxvY242KV1dOwogICAgZmxvYXQ0IHZfbGlnaHRQcm9qUG9zXzMgW1t1c2VyKGxvY243KV1dOwogICAgZmxvYXQ0IHZfbGlnaHRQcm9qUG9zXzQgW1t1c2VyKGxvY244KV1dOwogICAgZmxvYXQ0IHZfbGlnaHRQcm9qUG9zXzUgW1t1c2VyKGxvY245KV1dOwogICAgZmxvYXQgdl9jbGlwU3BhY2VQb3NaIFtbdXNlcihsb2NuMTApXV07CiAgICBmbG9hdDQgZ2xfUG9zaXRpb24gW1twb3NpdGlvbl1dOwp9OwoKc3RydWN0IG1haW4wX2luCnsKICAgIGZsb2F0MyBhX3Bvc2l0aW9uIFtbYXR0cmlidXRlKDApXV07CiAgICBmbG9hdDMgYV9ub3JtYWwgW1thdHRyaWJ1dGUoMSldXTsKICAgIGZsb2F0MiBhX3RleGNvb3JkMSBbW2F0dHJpYnV0ZSgyKV1dOwp9OwoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0eDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIHJldHVybiBmbG9hdDR4NChmbG9hdDQoMC4wKSwgZmxvYXQ0KDAuMCksIGZsb2F0NCgwLjApLCBmbG9hdDQoMC4wKSk7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBnZXRNb3JwaFBvc2l0aW9uKHRocmVhZCBjb25zdCBmbG9hdDMmIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIGdldFNraW5Qb3NpdGlvbih0aHJlYWQgY29uc3QgZmxvYXQzJiBwb3MsIHRocmVhZCBjb25zdCBmbG9hdDR4NCYgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0IGdldFBvc2l0aW9uKHRocmVhZCBjb25zdCBmbG9hdDR4NCYgYm9uZVRyYW5zZm9ybSwgdGhyZWFkIGZsb2F0MyYgYV9wb3NpdGlvbikKewogICAgZmxvYXQzIHBhcmFtID0gYV9wb3NpdGlvbjsKICAgIGZsb2F0MyBwYXJhbV8xID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBmbG9hdDR4NCBwYXJhbV8yID0gYm9uZVRyYW5zZm9ybTsKICAgIHJldHVybiBmbG9hdDQoZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpLCAxLjApOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDMgZ2V0TW9ycGhOb3JtYWwodGhyZWFkIGNvbnN0IGZsb2F0MyYgbm9ybWFsKQp7CiAgICByZXR1cm4gbm9ybWFsOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDMgZ2V0U2tpbk5vcm1hbCh0aHJlYWQgY29uc3QgZmxvYXQzJiBub3JtYWwsIHRocmVhZCBjb25zdCBmbG9hdDR4NCYgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIG5vcm1hbDsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIGdldE5vcm1hbCh0aHJlYWQgY29uc3QgZmxvYXQ0eDQmIGJvbmVUcmFuc2Zvcm0sIHRocmVhZCBmbG9hdDMmIGFfbm9ybWFsKQp7CiAgICBmbG9hdDMgcGFyYW0gPSBhX25vcm1hbDsKICAgIGZsb2F0MyBwYXJhbV8xID0gZ2V0TW9ycGhOb3JtYWwocGFyYW0pOwogICAgZmxvYXQ0eDQgcGFyYW1fMiA9IGJvbmVUcmFuc2Zvcm07CiAgICByZXR1cm4gbm9ybWFsaXplKGdldFNraW5Ob3JtYWwocGFyYW1fMSwgcGFyYW1fMikpOwp9Cgp2ZXJ0ZXggbWFpbjBfb3V0IG1haW4wKG1haW4wX2luIGluIFtbc3RhZ2VfaW5dXSwgY29uc3RhbnQgdV92c19wYnJQYXJhbXMmIHBiclBhcmFtcyBbW2J1ZmZlcigwKV1dLCBjb25zdGFudCB1X3ZzX3NoYWRvd3MmIF8xNzAgW1tidWZmZXIoMSldXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgc3B2VW5zYWZlQXJyYXk8ZmxvYXQ0LCA2PiB2X2xpZ2h0UHJvalBvcyA9IHt9OwogICAgZmxvYXQ0eDQgXzk0ID0gZ2V0Qm9uZVRyYW5zZm9ybSgpOwogICAgZmxvYXQ0eDQgcGFyYW0gPSBfOTQ7CiAgICBmbG9hdDQgXzk5ID0gZ2V0UG9zaXRpb24ocGFyYW0sIGluLmFfcG9zaXRpb24pOwogICAgZmxvYXQ0IF8xMTAgPSBwYnJQYXJhbXMubW9kZWxNYXRyaXggKiBfOTk7CiAgICBvdXQudl9wb3NpdGlvbiA9IGZsb2F0MyhfMTEwLnh5eikgLyBmbG9hdDMoXzExMC53KTsKICAgIGZsb2F0NHg0IHBhcmFtXzEgPSBfOTQ7CiAgICBvdXQudl9ub3JtYWwgPSBub3JtYWxpemUoZmxvYXQzKChwYnJQYXJhbXMubm9ybWFsTWF0cml4ICogZmxvYXQ0KGdldE5vcm1hbChwYXJhbV8xLCBpbi5hX25vcm1hbCksIDAuMCkpLnh5eikpOwogICAgb3V0LnZfdXYxID0gZmxvYXQyKDAuMCk7CiAgICBvdXQudl91djIgPSBmbG9hdDIoMC4wKTsKICAgIG91dC52X3V2MSA9IGluLmFfdGV4Y29vcmQxOwogICAgZm9yIChpbnQgaSA9IDA7IGkgPCA2OyBpKyspCiAgICB7CiAgICAgICAgdl9saWdodFByb2pQb3NbaV0gPSBfMTcwLmxpZ2h0VlBNYXRyaXhbaV0gKiBfMTEwOwogICAgfQogICAgb3V0LmdsX1Bvc2l0aW9uID0gcGJyUGFyYW1zLm12cE1hdHJpeCAqIF85OTsKICAgIG91dC52X2NsaXBTcGFjZVBvc1ogPSBvdXQuZ2xfUG9zaXRpb24uejsKICAgIG91dC52X2xpZ2h0UHJvalBvc18wID0gdl9saWdodFByb2pQb3NbMF07CiAgICBvdXQudl9saWdodFByb2pQb3NfMSA9IHZfbGlnaHRQcm9qUG9zWzFdOwogICAgb3V0LnZfbGlnaHRQcm9qUG9zXzIgPSB2X2xpZ2h0UHJvalBvc1syXTsKICAgIG91dC52X2xpZ2h0UHJvalBvc18zID0gdl9saWdodFByb2pQb3NbM107CiAgICBvdXQudl9saWdodFByb2pQb3NfNCA9IHZfbGlnaHRQcm9qUG9zWzRdOwogICAgb3V0LnZfbGlnaHRQcm9qUG9zXzUgPSB2X2xpZ2h0UHJvalBvc1s1XTsKICAgIG91dC5nbF9Qb3NpdGlvbi56ID0gKG91dC5nbF9Qb3NpdGlvbi56ICsgb3V0LmdsX1Bvc2l0aW9uLncpICogMC41OyAgICAgICAvLyBBZGp1c3QgY2xpcC1zcGFjZSBmb3IgTWV0YWwKICAgIHJldHVybiBvdXQ7Cn0KClJFRkxmAgAAbWVzaF9VdjFQdWNTaHdQY2ZOb3JGb2dfbXNsMjFpbwADAAAAAAAAAAIAAAAEAAAAYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2Ffbm9ybWFsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDNhX3RleGNvb3JkMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQyAwAAAHVfdnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAABbW9kZWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABub3JtYWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAQAAAAG12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAACAAAAAAQAAAHVfdnNfc2hhZG93cwAAAAAAAAAAAAAAAAAAAAAAAAAAXzE3MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAIABAAABbGlnaHRWUE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0BgAAAAAAAABTVEFH5X0AAEZSQUdDT0RF5XcAACNwcmFnbWEgY2xhbmcgZGlhZ25vc3RpYyBpZ25vcmVkICItV21pc3NpbmctcHJvdG90eXBlcyIKI3ByYWdtYSBjbGFuZyBkaWFnbm9zdGljIGlnbm9yZWQgIi1XbWlzc2luZy1icmFjZXMiCgojaW5jbHVkZSA8bWV0YWxfc3RkbGliPgojaW5jbHVkZSA8c2ltZC9zaW1kLmg+Cgp1c2luZyBuYW1lc3BhY2UgbWV0YWw7Cgp0ZW1wbGF0ZTx0eXBlbmFtZSBULCBzaXplX3QgTnVtPgpzdHJ1Y3Qgc3B2VW5zYWZlQXJyYXkKewogICAgVCBlbGVtZW50c1tOdW0gPyBOdW0gOiAxXTsKICAgIAogICAgdGhyZWFkIFQmIG9wZXJhdG9yIFtdIChzaXplX3QgcG9zKSB0aHJlYWQKICAgIHsKICAgICAgICByZXR1cm4gZWxlbWVudHNbcG9zXTsKICAgIH0KICAgIGNvbnN0ZXhwciBjb25zdCB0aHJlYWQgVCYgb3BlcmF0b3IgW10gKHNpemVfdCBwb3MpIGNvbnN0IHRocmVhZAogICAgewogICAgICAgIHJldHVybiBlbGVtZW50c1twb3NdOwogICAgfQogICAgCiAgICBkZXZpY2UgVCYgb3BlcmF0b3IgW10gKHNpemVfdCBwb3MpIGRldmljZQogICAgewogICAgICAgIHJldHVybiBlbGVtZW50c1twb3NdOwogICAgfQogICAgY29uc3RleHByIGNvbnN0IGRldmljZSBUJiBvcGVyYXRvciBbXSAoc2l6ZV90IHBvcykgY29uc3QgZGV2aWNlCiAgICB7CiAgICAgICAgcmV0dXJuIGVsZW1lbnRzW3Bvc107CiAgICB9CiAgICAKICAgIGNvbnN0ZXhwciBjb25zdCBjb25zdGFudCBUJiBvcGVyYXRvciBbXSAoc2l6ZV90IHBvcykgY29uc3QgY29uc3RhbnQKICAgIHsKICAgICAgICByZXR1cm4gZWxlbWVudHNbcG9zXTsKICAgIH0KICAgIAogICAgdGhyZWFkZ3JvdXAgVCYgb3BlcmF0b3IgW10gKHNpemVfdCBwb3MpIHRocmVhZGdyb3VwCiAgICB7CiAgICAgICAgcmV0dXJuIGVsZW1lbnRzW3Bvc107CiAgICB9CiAgICBjb25zdGV4cHIgY29uc3QgdGhyZWFkZ3JvdXAgVCYgb3BlcmF0b3IgW10gKHNpemVfdCBwb3MpIGNvbnN0IHRocmVhZGdyb3VwCiAgICB7CiAgICAgICAgcmV0dXJuIGVsZW1lbnRzW3Bvc107CiAgICB9Cn07CgpzdHJ1Y3QgTWF0ZXJpYWxJbmZvCnsKICAgIGZsb2F0IHBlcmNlcHR1YWxSb3VnaG5lc3M7CiAgICBmbG9hdDMgZjA7CiAgICBmbG9hdCBhbHBoYVJvdWdobmVzczsKICAgIGZsb2F0MyBhbGJlZG9Db2xvcjsKICAgIGZsb2F0MyBmOTA7CiAgICBmbG9hdCBtZXRhbGxpYzsKICAgIGZsb2F0MyBuOwogICAgZmxvYXQzIGJhc2VDb2xvcjsKfTsKCnN0cnVjdCBOb3JtYWxJbmZvCnsKICAgIGZsb2F0MyBuZzsKICAgIGZsb2F0MyBuOwogICAgZmxvYXQzIHQ7CiAgICBmbG9hdDMgYjsKfTsKCnN0cnVjdCBMaWdodAp7CiAgICBpbnQgdHlwZTsKICAgIGZsb2F0MyBkaXJlY3Rpb247CiAgICBmbG9hdDMgY29sb3I7CiAgICBmbG9hdDMgcG9zaXRpb247CiAgICBmbG9hdCByYW5nZTsKICAgIGZsb2F0IGludGVuc2l0eTsKICAgIGZsb2F0IGlubmVyQ29uZUNvczsKICAgIGZsb2F0IG91dGVyQ29uZUNvczsKICAgIGJvb2wgc2hhZG93czsKICAgIGludCBzaGFkb3dNYXBJbmRleDsKICAgIGludCBudW1TaGFkb3dDYXNjYWRlczsKfTsKCnN0cnVjdCBTaGFkb3cKewogICAgZmxvYXQgbWF4QmlhczsKICAgIGZsb2F0IG1pbkJpYXM7CiAgICBmbG9hdDIgbWFwU2l6ZTsKICAgIGZsb2F0MiBuZWFyRmFyOwogICAgZmxvYXQ0IGxpZ2h0UHJvalBvczsKfTsKCnN0cnVjdCB1X2ZzX3BiclBhcmFtcwp7CiAgICBmbG9hdDQgYmFzZUNvbG9yRmFjdG9yOwogICAgZmxvYXQgbWV0YWxsaWNGYWN0b3I7CiAgICBmbG9hdCByb3VnaG5lc3NGYWN0b3I7CiAgICBmbG9hdDMgZW1pc3NpdmVGYWN0b3I7CiAgICBwYWNrZWRfZmxvYXQzIGFtYmllbnRMaWdodDsKICAgIGZsb2F0IGFtYmllbnRGYWN0b3I7Cn07CgpzdHJ1Y3QgdV9mc19zaGFkb3dzCnsKICAgIGZsb2F0NCBiaWFzX3RleFNpemVfbmVhckZhcls3XTsKfTsKCnN0cnVjdCB1X2ZzX2xpZ2h0aW5nCnsKICAgIGZsb2F0NCBkaXJlY3Rpb25fcmFuZ2VbNl07CiAgICBmbG9hdDQgY29sb3JfaW50ZW5zaXR5WzZdOwogICAgZmxvYXQ0IHBvc2l0aW9uX3R5cGVbNl07CiAgICBmbG9hdDQgaW5Db25lX291Q29uZV9zaGFkb3dzX2Nhc2NhZGVzWzZdOwogICAgZmxvYXQ0IGV5ZVBvczsKfTsKCnN0cnVjdCB1X2ZzX2ZvZwp7CiAgICBmbG9hdDQgY29sb3JfdHlwZTsKICAgIGZsb2F0NCBkZW5zaXR5X3N0YXJ0X2VuZDsKfTsKCnN0cnVjdCBtYWluMF9vdXQKewogICAgZmxvYXQ0IGdfZmluYWxDb2xvciBbW2NvbG9yKDApXV07Cn07CgpzdHJ1Y3QgbWFpbjBfaW4KewogICAgZmxvYXQzIHZfcG9zaXRpb24gW1t1c2VyKGxvY24wKV1dOwogICAgZmxvYXQzIHZfbm9ybWFsIFtbdXNlcihsb2NuMSldXTsKICAgIGZsb2F0MiB2X3V2MSBbW3VzZXIobG9jbjIpXV07CiAgICBmbG9hdDQgdl9saWdodFByb2pQb3NfMCBbW3VzZXIobG9jbjQpXV07CiAgICBmbG9hdDQgdl9saWdodFByb2pQb3NfMSBbW3VzZXIobG9jbjUpXV07CiAgICBmbG9hdDQgdl9saWdodFByb2pQb3NfMiBbW3VzZXIobG9jbjYpXV07CiAgICBmbG9hdDQgdl9saWdodFByb2pQb3NfMyBbW3VzZXIobG9jbjcpXV07CiAgICBmbG9hdDQgdl9saWdodFByb2pQb3NfNCBbW3VzZXIobG9jbjgpXV07CiAgICBmbG9hdDQgdl9saWdodFByb2pQb3NfNSBbW3VzZXIobG9jbjkpXV07CiAgICBmbG9hdCB2X2NsaXBTcGFjZVBvc1ogW1t1c2VyKGxvY24xMCldXTsKfTsKCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBzUkdCVG9MaW5lYXIodGhyZWFkIGNvbnN0IGZsb2F0MyYgc3JnYkluKQp7CiAgICByZXR1cm4gcG93KHNyZ2JJbiwgZmxvYXQzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgc1JHQlRvTGluZWFyKHRocmVhZCBjb25zdCBmbG9hdDQmIHNyZ2JJbikKewogICAgZmxvYXQzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiBmbG9hdDQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gZmxvYXQ0KDEuMCk7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0NCBnZXRCYXNlQ29sb3IoY29uc3RhbnQgdV9mc19wYnJQYXJhbXMmIHBiclBhcmFtcywgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9iYXNlQ29sb3JUZXh0dXJlLCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X2Jhc2VDb2xvclRleHR1cmVTbXBsciwgdGhyZWFkIGZsb2F0MiYgdl91djEpCnsKICAgIGZsb2F0NCBiYXNlQ29sb3IgPSBwYnJQYXJhbXMuYmFzZUNvbG9yRmFjdG9yOwogICAgZmxvYXQ0IHBhcmFtID0gdV9iYXNlQ29sb3JUZXh0dXJlLnNhbXBsZSh1X2Jhc2VDb2xvclRleHR1cmVTbXBsciwgdl91djEpOwogICAgZmxvYXQ0IF8yMzIgPSBiYXNlQ29sb3I7CiAgICBmbG9hdDQgXzIzMyA9IF8yMzIgKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzIzMzsKICAgIHJldHVybiBfMjMzICogZ2V0VmVydGV4Q29sb3IoKTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKTm9ybWFsSW5mbyBnZXROb3JtYWxJbmZvKHRocmVhZCBmbG9hdDImIHZfdXYxLCB0aHJlYWQgZmxvYXQzJiB2X3Bvc2l0aW9uLCB0aHJlYWQgZmxvYXQzJiB2X25vcm1hbCkKewogICAgZmxvYXQzIF8zMTQgPSBmbG9hdDModl91djEsIDAuMCk7CiAgICBmbG9hdDMgXzMxNSA9IGRmZHgoXzMxNCk7CiAgICBmbG9hdDMgXzMyMSA9IGRmZHkoXzMxNCk7CiAgICBmbG9hdCBfMzI0ID0gXzMyMS55OwogICAgZmxvYXQgXzMzMSA9IF8zMTUueTsKICAgIGZsb2F0MyBfMzQ5ID0gKChkZmR4KHZfcG9zaXRpb24pICogXzMyNCkgLSAoZGZkeSh2X3Bvc2l0aW9uKSAqIF8zMzEpKSAvIGZsb2F0MygoXzMxNS54ICogXzMyNCkgLSAoXzMyMS54ICogXzMzMSkpOwogICAgZmxvYXQzIF8zNTMgPSBub3JtYWxpemUodl9ub3JtYWwpOwogICAgZmxvYXQzIF8zNjIgPSBub3JtYWxpemUoXzM0OSAtIChfMzUzICogZG90KF8zNTMsIF8zNDkpKSk7CiAgICByZXR1cm4gTm9ybWFsSW5mb3sgXzM1MywgXzM1MywgXzM2MiwgY3Jvc3MoXzM1MywgXzM2MikgfTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKTWF0ZXJpYWxJbmZvIGdldE1ldGFsbGljUm91Z2huZXNzSW5mbyh0aHJlYWQgTWF0ZXJpYWxJbmZvJiBpbmZvLCB0aHJlYWQgY29uc3QgZmxvYXQmIGYwX2lvciwgY29uc3RhbnQgdV9mc19wYnJQYXJhbXMmIHBiclBhcmFtcywgdGhyZWFkIGZsb2F0MiYgdl91djEsIHRocmVhZCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlLCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X21ldGFsbGljUm91Z2huZXNzVGV4dHVyZVNtcGxyKQp7CiAgICBpbmZvLm1ldGFsbGljID0gcGJyUGFyYW1zLm1ldGFsbGljRmFjdG9yOwogICAgaW5mby5wZXJjZXB0dWFsUm91Z2huZXNzID0gcGJyUGFyYW1zLnJvdWdobmVzc0ZhY3RvcjsKICAgIGZsb2F0NCBfMjUzID0gdV9tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUuc2FtcGxlKHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlU21wbHIsIHZfdXYxKTsKICAgIGluZm8ucGVyY2VwdHVhbFJvdWdobmVzcyAqPSBfMjUzLnk7CiAgICBpbmZvLm1ldGFsbGljICo9IF8yNTMuejsKICAgIGZsb2F0MyBfMjcwID0gZmxvYXQzKGYwX2lvcik7CiAgICBpbmZvLmFsYmVkb0NvbG9yID0gbWl4KGluZm8uYmFzZUNvbG9yICogKGZsb2F0MygxLjApIC0gXzI3MCksIGZsb2F0MygwLjApLCBmbG9hdDMoaW5mby5tZXRhbGxpYykpOwogICAgaW5mby5mMCA9IG1peChfMjcwLCBpbmZvLmJhc2VDb2xvciwgZmxvYXQzKGluZm8ubWV0YWxsaWMpKTsKICAgIHJldHVybiBpbmZvOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgZ2V0T2NjbHVzaW9uVGV4dHVyZSh0aHJlYWQgZmxvYXQyJiB2X3V2MSwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9vY2NsdXNpb25UZXh0dXJlLCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X29jY2x1c2lvblRleHR1cmVTbXBscikKewogICAgcmV0dXJuIHVfb2NjbHVzaW9uVGV4dHVyZS5zYW1wbGUodV9vY2NsdXNpb25UZXh0dXJlU21wbHIsIHZfdXYxKTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQgY2xhbXBlZERvdCh0aHJlYWQgY29uc3QgZmxvYXQzJiB4LCB0aHJlYWQgY29uc3QgZmxvYXQzJiB5KQp7CiAgICByZXR1cm4gZmFzdDo6Y2xhbXAoZG90KHgsIHkpLCAwLjAsIDEuMCk7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpClNoYWRvdyBnZXRTaGFkb3cyRENvbmYodGhyZWFkIGNvbnN0IGludCYgaW5kZXgsIGNvbnN0YW50IHVfZnNfc2hhZG93cyYgdVNoYWRvd3MsIHRocmVhZCBzcHZVbnNhZmVBcnJheTxmbG9hdDQsIDY+JiB2X2xpZ2h0UHJvalBvcykKewogICAgZm9yIChpbnQgaSA9IDA7IGkgPCA2OyBpKyspCiAgICB7CiAgICAgICAgaWYgKGkgPT0gaW5kZXgpCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gU2hhZG93eyB1U2hhZG93cy5iaWFzX3RleFNpemVfbmVhckZhcltpXS54LCB1U2hhZG93cy5iaWFzX3RleFNpemVfbmVhckZhcltpXS54ICogMC4xMDAwMDAwMDE0OTAxMTYxMTkzODQ3NjU2MjUsIHVTaGFkb3dzLmJpYXNfdGV4U2l6ZV9uZWFyRmFyW2ldLnl5LCB1U2hhZG93cy5iaWFzX3RleFNpemVfbmVhckZhcltpXS56dywgdl9saWdodFByb2pQb3NbaV0gfTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gU2hhZG93eyAwLjAsIDAuMCwgZmxvYXQyKDAuMCksIGZsb2F0MigwLjApLCBmbG9hdDQoMC4wKSB9Owp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgZ2V0U2hhZG93TWFwKHRocmVhZCBjb25zdCBpbnQmIGluZGV4LCB0aHJlYWQgY29uc3QgZmxvYXQyJiBjb29yZHMsIHRocmVhZCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfc2hhZG93TWFwMSwgdGhyZWFkIGNvbnN0IHNhbXBsZXIgdV9zaGFkb3dNYXAxU21wbHIsIHRocmVhZCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfc2hhZG93TWFwMiwgdGhyZWFkIGNvbnN0IHNhbXBsZXIgdV9zaGFkb3dNYXAyU21wbHIsIHRocmVhZCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfc2hhZG93TWFwMywgdGhyZWFkIGNvbnN0IHNhbXBsZXIgdV9zaGFkb3dNYXAzU21wbHIsIHRocmVhZCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfc2hhZG93TWFwNCwgdGhyZWFkIGNvbnN0IHNhbXBsZXIgdV9zaGFkb3dNYXA0U21wbHIsIHRocmVhZCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfc2hhZG93TWFwNSwgdGhyZWFkIGNvbnN0IHNhbXBsZXIgdV9zaGFkb3dNYXA1U21wbHIsIHRocmVhZCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfc2hhZG93TWFwNiwgdGhyZWFkIGNvbnN0IHNhbXBsZXIgdV9zaGFkb3dNYXA2U21wbHIpCnsKICAgIGlmIChpbmRleCA9PSAwKQogICAgewogICAgICAgIHJldHVybiB1X3NoYWRvd01hcDEuc2FtcGxlKHVfc2hhZG93TWFwMVNtcGxyLCBjb29yZHMpOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIGlmIChpbmRleCA9PSAxKQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIHVfc2hhZG93TWFwMi5zYW1wbGUodV9zaGFkb3dNYXAyU21wbHIsIGNvb3Jkcyk7CiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgIGlmIChpbmRleCA9PSAyKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICByZXR1cm4gdV9zaGFkb3dNYXAzLnNhbXBsZSh1X3NoYWRvd01hcDNTbXBsciwgY29vcmRzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSAzKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB1X3NoYWRvd01hcDQuc2FtcGxlKHVfc2hhZG93TWFwNFNtcGxyLCBjb29yZHMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSA0KQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVfc2hhZG93TWFwNS5zYW1wbGUodV9zaGFkb3dNYXA1U21wbHIsIGNvb3Jkcyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSA1KQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdV9zaGFkb3dNYXA2LnNhbXBsZSh1X3NoYWRvd01hcDZTbXBsciwgY29vcmRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBmbG9hdDQoMC4wKTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQgZGVjb2RlRGVwdGgodGhyZWFkIGNvbnN0IGZsb2F0NCYgcmdiYSkKewogICAgcmV0dXJuIGRvdChyZ2JhLCBmbG9hdDQoMS4wLCAwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjUsIDEuNTM3ODcwMDQ4MTk2MDU0OTk1MDU5OTY3MDQxMDE1NmUtMDUsIDYuMDMwODYyOTIwMTY5OTY1OTQ2MTE1NTUzMzc5MDU4OGUtMDgpKTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQgc2hhZG93Q29tcGFyZSh0aHJlYWQgY29uc3QgaW50JiBzaGFkb3dNYXBJbmRleCwgdGhyZWFkIGNvbnN0IGZsb2F0JiBjdXJyZW50RGVwdGgsIHRocmVhZCBjb25zdCBmbG9hdCYgYmlhczAsIHRocmVhZCBjb25zdCBmbG9hdDImIHRleENvb3JkcywgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXAxLCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X3NoYWRvd01hcDFTbXBsciwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXAyLCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X3NoYWRvd01hcDJTbXBsciwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXAzLCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X3NoYWRvd01hcDNTbXBsciwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXA0LCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X3NoYWRvd01hcDRTbXBsciwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXA1LCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X3NoYWRvd01hcDVTbXBsciwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXA2LCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X3NoYWRvd01hcDZTbXBscikKewogICAgaW50IHBhcmFtID0gc2hhZG93TWFwSW5kZXg7CiAgICBmbG9hdDIgcGFyYW1fMSA9IHRleENvb3JkczsKICAgIGZsb2F0NCBwYXJhbV8yID0gZ2V0U2hhZG93TWFwKHBhcmFtLCBwYXJhbV8xLCB1X3NoYWRvd01hcDEsIHVfc2hhZG93TWFwMVNtcGxyLCB1X3NoYWRvd01hcDIsIHVfc2hhZG93TWFwMlNtcGxyLCB1X3NoYWRvd01hcDMsIHVfc2hhZG93TWFwM1NtcGxyLCB1X3NoYWRvd01hcDQsIHVfc2hhZG93TWFwNFNtcGxyLCB1X3NoYWRvd01hcDUsIHVfc2hhZG93TWFwNVNtcGxyLCB1X3NoYWRvd01hcDYsIHVfc2hhZG93TWFwNlNtcGxyKTsKICAgIHJldHVybiBmbG9hdCgoY3VycmVudERlcHRoIC0gYmlhczApID4gZGVjb2RlRGVwdGgocGFyYW1fMikpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdCBzaGFkb3dDYWxjdWxhdGlvbkF1eCh0aHJlYWQgY29uc3QgaW50JiBzaGFkb3dNYXBJbmRleCwgdGhyZWFkIGNvbnN0IFNoYWRvdyYgc2hhZG93Q29uZiwgdGhyZWFkIGNvbnN0IGZsb2F0JiBOZG90TCwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXAxLCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X3NoYWRvd01hcDFTbXBsciwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXAyLCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X3NoYWRvd01hcDJTbXBsciwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXAzLCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X3NoYWRvd01hcDNTbXBsciwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXA0LCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X3NoYWRvd01hcDRTbXBsciwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXA1LCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X3NoYWRvd01hcDVTbXBsciwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXA2LCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X3NoYWRvd01hcDZTbXBscikKewogICAgZmxvYXQgc2hhZG93ID0gMC4wOwogICAgZmxvYXQzIF84MTYgPSAoKHNoYWRvd0NvbmYubGlnaHRQcm9qUG9zLnh5eiAvIGZsb2F0MyhzaGFkb3dDb25mLmxpZ2h0UHJvalBvcy53KSkgKiAwLjUpICsgZmxvYXQzKDAuNSk7CiAgICBmbG9hdCBfODE5ID0gXzgxNi56OwogICAgZmxvYXQgXzgyOCA9IGZhc3Q6Om1heChzaGFkb3dDb25mLm1heEJpYXMgKiAoMS4wIC0gTmRvdEwpLCBzaGFkb3dDb25mLm1pbkJpYXMpOwogICAgZmxvYXQyIF84MzMgPSBmbG9hdDIoMS4wKSAvIHNoYWRvd0NvbmYubWFwU2l6ZTsKICAgIGZvciAoaW50IHggPSAtMTsgeCA8PSAxOyB4KyspCiAgICB7CiAgICAgICAgZm9yIChpbnQgeSA9IC0xOyB5IDw9IDE7IHkrKykKICAgICAgICB7CiAgICAgICAgICAgIGludCBwYXJhbSA9IHNoYWRvd01hcEluZGV4OwogICAgICAgICAgICBmbG9hdCBwYXJhbV8xID0gXzgxOTsKICAgICAgICAgICAgZmxvYXQgcGFyYW1fMiA9IF84Mjg7CiAgICAgICAgICAgIGZsb2F0MiBwYXJhbV8zID0gXzgxNi54eSArIChmbG9hdDIoZmxvYXQoeCksIGZsb2F0KHkpKSAqIF84MzMpOwogICAgICAgICAgICBzaGFkb3cgKz0gc2hhZG93Q29tcGFyZShwYXJhbSwgcGFyYW1fMSwgcGFyYW1fMiwgcGFyYW1fMywgdV9zaGFkb3dNYXAxLCB1X3NoYWRvd01hcDFTbXBsciwgdV9zaGFkb3dNYXAyLCB1X3NoYWRvd01hcDJTbXBsciwgdV9zaGFkb3dNYXAzLCB1X3NoYWRvd01hcDNTbXBsciwgdV9zaGFkb3dNYXA0LCB1X3NoYWRvd01hcDRTbXBsciwgdV9zaGFkb3dNYXA1LCB1X3NoYWRvd01hcDVTbXBsciwgdV9zaGFkb3dNYXA2LCB1X3NoYWRvd01hcDZTbXBscik7CiAgICAgICAgfQogICAgfQogICAgc2hhZG93ICo9IDAuMTExMTExMTExOTM4OTUzMzk5NjU4MjAzMTI1OwogICAgaWYgKF84MTkgPiAxLjApCiAgICB7CiAgICAgICAgc2hhZG93ID0gMC4wOwogICAgfQogICAgcmV0dXJuIHNoYWRvdzsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQgc2hhZG93Q2FsY3VsYXRpb25QQ0YodGhyZWFkIGNvbnN0IGludCYgc2hhZG93TWFwSW5kZXgsIHRocmVhZCBjb25zdCBmbG9hdCYgTmRvdEwsIGNvbnN0YW50IHVfZnNfc2hhZG93cyYgdVNoYWRvd3MsIHRocmVhZCBzcHZVbnNhZmVBcnJheTxmbG9hdDQsIDY+JiB2X2xpZ2h0UHJvalBvcywgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXAxLCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X3NoYWRvd01hcDFTbXBsciwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXAyLCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X3NoYWRvd01hcDJTbXBsciwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXAzLCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X3NoYWRvd01hcDNTbXBsciwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXA0LCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X3NoYWRvd01hcDRTbXBsciwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXA1LCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X3NoYWRvd01hcDVTbXBsciwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXA2LCB0aHJlYWQgY29uc3Qgc2FtcGxlciB1X3NoYWRvd01hcDZTbXBscikKewogICAgaW50IHBhcmFtID0gc2hhZG93TWFwSW5kZXg7CiAgICBpbnQgcGFyYW1fMSA9IHNoYWRvd01hcEluZGV4OwogICAgU2hhZG93IHBhcmFtXzIgPSBnZXRTaGFkb3cyRENvbmYocGFyYW0sIHVTaGFkb3dzLCB2X2xpZ2h0UHJvalBvcyk7CiAgICBmbG9hdCBwYXJhbV8zID0gTmRvdEw7CiAgICByZXR1cm4gc2hhZG93Q2FsY3VsYXRpb25BdXgocGFyYW1fMSwgcGFyYW1fMiwgcGFyYW1fMywgdV9zaGFkb3dNYXAxLCB1X3NoYWRvd01hcDFTbXBsciwgdV9zaGFkb3dNYXAyLCB1X3NoYWRvd01hcDJTbXBsciwgdV9zaGFkb3dNYXAzLCB1X3NoYWRvd01hcDNTbXBsciwgdV9zaGFkb3dNYXA0LCB1X3NoYWRvd01hcDRTbXBsciwgdV9zaGFkb3dNYXA1LCB1X3NoYWRvd01hcDVTbXBsciwgdV9zaGFkb3dNYXA2LCB1X3NoYWRvd01hcDZTbXBscik7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0IHNoYWRvd0Nhc2NhZGVkQ2FsY3VsYXRpb25QQ0YodGhyZWFkIGNvbnN0IGludCYgc2hhZG93TWFwSW5kZXgsIHRocmVhZCBjb25zdCBpbnQmIG51bVNoYWRvd0Nhc2NhZGVzLCB0aHJlYWQgY29uc3QgZmxvYXQmIE5kb3RMLCBjb25zdGFudCB1X2ZzX3NoYWRvd3MmIHVTaGFkb3dzLCB0aHJlYWQgc3B2VW5zYWZlQXJyYXk8ZmxvYXQ0LCA2PiYgdl9saWdodFByb2pQb3MsIHRocmVhZCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfc2hhZG93TWFwMSwgdGhyZWFkIGNvbnN0IHNhbXBsZXIgdV9zaGFkb3dNYXAxU21wbHIsIHRocmVhZCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfc2hhZG93TWFwMiwgdGhyZWFkIGNvbnN0IHNhbXBsZXIgdV9zaGFkb3dNYXAyU21wbHIsIHRocmVhZCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfc2hhZG93TWFwMywgdGhyZWFkIGNvbnN0IHNhbXBsZXIgdV9zaGFkb3dNYXAzU21wbHIsIHRocmVhZCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfc2hhZG93TWFwNCwgdGhyZWFkIGNvbnN0IHNhbXBsZXIgdV9zaGFkb3dNYXA0U21wbHIsIHRocmVhZCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfc2hhZG93TWFwNSwgdGhyZWFkIGNvbnN0IHNhbXBsZXIgdV9zaGFkb3dNYXA1U21wbHIsIHRocmVhZCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfc2hhZG93TWFwNiwgdGhyZWFkIGNvbnN0IHNhbXBsZXIgdV9zaGFkb3dNYXA2U21wbHIsIHRocmVhZCBmbG9hdCYgdl9jbGlwU3BhY2VQb3NaKQp7CiAgICBmb3IgKGludCBjID0gMDsgYyA8IDQ7IGMrKykKICAgIHsKICAgICAgICBpZiAoYyA8IG51bVNoYWRvd0Nhc2NhZGVzKQogICAgICAgIHsKICAgICAgICAgICAgaW50IF85MTUgPSBzaGFkb3dNYXBJbmRleCArIGM7CiAgICAgICAgICAgIGludCBwYXJhbSA9IF85MTU7CiAgICAgICAgICAgIFNoYWRvdyBfOTE5ID0gZ2V0U2hhZG93MkRDb25mKHBhcmFtLCB1U2hhZG93cywgdl9saWdodFByb2pQb3MpOwogICAgICAgICAgICBmbG9hdDIgXzE2ODcgPSBfOTE5Lm5lYXJGYXI7CiAgICAgICAgICAgIGJvb2wgXzkyNSA9IHZfY2xpcFNwYWNlUG9zWiA+PSBfMTY4Ny54OwogICAgICAgICAgICBib29sIF85MzI7CiAgICAgICAgICAgIGlmIChfOTI1KQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBfOTMyID0gdl9jbGlwU3BhY2VQb3NaIDw9IF8xNjg3Lnk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBfOTMyID0gXzkyNTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoXzkzMikKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaW50IHBhcmFtXzEgPSBfOTE1OwogICAgICAgICAgICAgICAgU2hhZG93IHBhcmFtXzIgPSBfOTE5OwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMyA9IE5kb3RMOwogICAgICAgICAgICAgICAgcmV0dXJuIHNoYWRvd0NhbGN1bGF0aW9uQXV4KHBhcmFtXzEsIHBhcmFtXzIsIHBhcmFtXzMsIHVfc2hhZG93TWFwMSwgdV9zaGFkb3dNYXAxU21wbHIsIHVfc2hhZG93TWFwMiwgdV9zaGFkb3dNYXAyU21wbHIsIHVfc2hhZG93TWFwMywgdV9zaGFkb3dNYXAzU21wbHIsIHVfc2hhZG93TWFwNCwgdV9zaGFkb3dNYXA0U21wbHIsIHVfc2hhZG93TWFwNSwgdV9zaGFkb3dNYXA1U21wbHIsIHVfc2hhZG93TWFwNiwgdV9zaGFkb3dNYXA2U21wbHIpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIDAuMDsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKU2hhZG93IGdldFNoYWRvd0N1YmVDb25mKHRocmVhZCBjb25zdCBpbnQmIGluZGV4LCBjb25zdGFudCB1X2ZzX3NoYWRvd3MmIHVTaGFkb3dzKQp7CiAgICBmb3IgKGludCBpID0gNjsgaSA8IDc7IGkrKykKICAgIHsKICAgICAgICBpZiAoaSA9PSBpbmRleCkKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiBTaGFkb3d7IHVTaGFkb3dzLmJpYXNfdGV4U2l6ZV9uZWFyRmFyW2ldLngsIHVTaGFkb3dzLmJpYXNfdGV4U2l6ZV9uZWFyRmFyW2ldLnggKiAwLjEwMDAwMDAwMTQ5MDExNjExOTM4NDc2NTYyNSwgdVNoYWRvd3MuYmlhc190ZXhTaXplX25lYXJGYXJbaV0ueXksIHVTaGFkb3dzLmJpYXNfdGV4U2l6ZV9uZWFyRmFyW2ldLnp3LCBmbG9hdDQoMC4wKSB9OwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBTaGFkb3d7IDAuMCwgMC4wLCBmbG9hdDIoMC4wKSwgZmxvYXQyKDAuMCksIGZsb2F0NCgwLjApIH07Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0IGRpc3RhbmNlVG9EZXB0aFZhbHVlKHRocmVhZCBjb25zdCBmbG9hdDMmIF9kaXN0YW5jZSwgdGhyZWFkIGNvbnN0IGZsb2F0MiYgY2FsY05lYXJGYXIpCnsKICAgIGZsb2F0MyBfOTQ5ID0gYWJzKF9kaXN0YW5jZSk7CiAgICByZXR1cm4gY2FsY05lYXJGYXIueCArIChjYWxjTmVhckZhci55IC8gZmFzdDo6bWF4KF85NDkueCwgZmFzdDo6bWF4KF85NDkueSwgXzk0OS56KSkpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDQgZ2V0U2hhZG93Q3ViZU1hcCh0aHJlYWQgaW50JiBpbmRleCwgdGhyZWFkIGNvbnN0IGZsb2F0MyYgY29vcmRzLCB0aHJlYWQgdGV4dHVyZWN1YmU8ZmxvYXQ+IHVfc2hhZG93Q3ViZU1hcDEsIHRocmVhZCBjb25zdCBzYW1wbGVyIHVfc2hhZG93Q3ViZU1hcDFTbXBscikKewogICAgaW5kZXggLT0gNjsKICAgIGlmIChpbmRleCA9PSAwKQogICAgewogICAgICAgIHJldHVybiB1X3NoYWRvd0N1YmVNYXAxLnNhbXBsZSh1X3NoYWRvd0N1YmVNYXAxU21wbHIsIGNvb3Jkcyk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICB9CiAgICByZXR1cm4gZmxvYXQ0KDAuMCk7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0IHNoYWRvd0N1YmVDb21wYXJlKHRocmVhZCBjb25zdCBpbnQmIHNoYWRvd01hcEluZGV4LCB0aHJlYWQgY29uc3QgZmxvYXQmIGN1cnJlbnREZXB0aCwgdGhyZWFkIGNvbnN0IGZsb2F0JiBiaWFzMCwgdGhyZWFkIGNvbnN0IGZsb2F0MyYgdGV4Q29vcmRzLCB0aHJlYWQgdGV4dHVyZWN1YmU8ZmxvYXQ+IHVfc2hhZG93Q3ViZU1hcDEsIHRocmVhZCBjb25zdCBzYW1wbGVyIHVfc2hhZG93Q3ViZU1hcDFTbXBscikKewogICAgaW50IHBhcmFtID0gc2hhZG93TWFwSW5kZXg7CiAgICBmbG9hdDMgcGFyYW1fMSA9IHRleENvb3JkczsKICAgIGZsb2F0NCBfOTczID0gZ2V0U2hhZG93Q3ViZU1hcChwYXJhbSwgcGFyYW1fMSwgdV9zaGFkb3dDdWJlTWFwMSwgdV9zaGFkb3dDdWJlTWFwMVNtcGxyKTsKICAgIGZsb2F0NCBwYXJhbV8yID0gXzk3MzsKICAgIGlmICgoY3VycmVudERlcHRoIC0gYmlhczApID4gZGVjb2RlRGVwdGgocGFyYW1fMikpCiAgICB7CiAgICAgICAgcmV0dXJuIDEuMDsKICAgIH0KICAgIHJldHVybiAwLjA7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0IHNoYWRvd0N1YmVDYWxjdWxhdGlvblBDRih0aHJlYWQgY29uc3QgaW50JiBzaGFkb3dNYXBJbmRleCwgdGhyZWFkIGNvbnN0IGZsb2F0MyYgZnJhZ1RvTGlnaHQsIHRocmVhZCBjb25zdCBmbG9hdCYgTmRvdEwsIGNvbnN0YW50IHVfZnNfc2hhZG93cyYgdVNoYWRvd3MsIHRocmVhZCB0ZXh0dXJlY3ViZTxmbG9hdD4gdV9zaGFkb3dDdWJlTWFwMSwgdGhyZWFkIGNvbnN0IHNhbXBsZXIgdV9zaGFkb3dDdWJlTWFwMVNtcGxyKQp7CiAgICBpbnQgcGFyYW0gPSBzaGFkb3dNYXBJbmRleDsKICAgIFNoYWRvdyBfOTg5ID0gZ2V0U2hhZG93Q3ViZUNvbmYocGFyYW0sIHVTaGFkb3dzKTsKICAgIGZsb2F0MyBwYXJhbV8xID0gZnJhZ1RvTGlnaHQ7CiAgICBmbG9hdDIgcGFyYW1fMiA9IF85ODkubmVhckZhcjsKICAgIGZsb2F0IF85OTYgPSBkaXN0YW5jZVRvRGVwdGhWYWx1ZShwYXJhbV8xLCBwYXJhbV8yKTsKICAgIGZsb2F0IHNoYWRvdyA9IDAuMDsKICAgIGZsb2F0IF8xMDA2ID0gZmFzdDo6bWF4KF85ODkubWF4QmlhcyAqICgxLjAgLSBOZG90TCksIF85ODkubWluQmlhcyk7CiAgICBmbG9hdCBfMTAxMSA9IGxlbmd0aChmcmFnVG9MaWdodCkgKiAwLjAwMDUwMDAwMDAyMzc0ODcyNTY1MjY5NDcwMjE0ODQzNzU7CiAgICBpbnQgcGFyYW1fMyA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fNCA9IF85OTY7CiAgICBmbG9hdCBwYXJhbV81ID0gXzEwMDY7CiAgICBmbG9hdDMgcGFyYW1fNiA9IGZyYWdUb0xpZ2h0OwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzMsIHBhcmFtXzQsIHBhcmFtXzUsIHBhcmFtXzYsIHVfc2hhZG93Q3ViZU1hcDEsIHVfc2hhZG93Q3ViZU1hcDFTbXBscik7CiAgICBpbnQgcGFyYW1fNyA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fOCA9IF85OTY7CiAgICBmbG9hdCBwYXJhbV85ID0gXzEwMDY7CiAgICBmbG9hdDMgcGFyYW1fMTAgPSBmcmFnVG9MaWdodCArIChmbG9hdDMoMS4wKSAqIF8xMDExKTsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV83LCBwYXJhbV84LCBwYXJhbV85LCBwYXJhbV8xMCwgdV9zaGFkb3dDdWJlTWFwMSwgdV9zaGFkb3dDdWJlTWFwMVNtcGxyKTsKICAgIGludCBwYXJhbV8xMSA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fMTIgPSBfOTk2OwogICAgZmxvYXQgcGFyYW1fMTMgPSBfMTAwNjsKICAgIGZsb2F0MyBwYXJhbV8xNCA9IGZyYWdUb0xpZ2h0ICsgKGZsb2F0MygxLjAsIC0xLjAsIDEuMCkgKiBfMTAxMSk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMTEsIHBhcmFtXzEyLCBwYXJhbV8xMywgcGFyYW1fMTQsIHVfc2hhZG93Q3ViZU1hcDEsIHVfc2hhZG93Q3ViZU1hcDFTbXBscik7CiAgICBpbnQgcGFyYW1fMTUgPSBzaGFkb3dNYXBJbmRleDsKICAgIGZsb2F0IHBhcmFtXzE2ID0gXzk5NjsKICAgIGZsb2F0IHBhcmFtXzE3ID0gXzEwMDY7CiAgICBmbG9hdDMgcGFyYW1fMTggPSBmcmFnVG9MaWdodCArIChmbG9hdDMoLTEuMCwgLTEuMCwgMS4wKSAqIF8xMDExKTsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8xNSwgcGFyYW1fMTYsIHBhcmFtXzE3LCBwYXJhbV8xOCwgdV9zaGFkb3dDdWJlTWFwMSwgdV9zaGFkb3dDdWJlTWFwMVNtcGxyKTsKICAgIGludCBwYXJhbV8xOSA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fMjAgPSBfOTk2OwogICAgZmxvYXQgcGFyYW1fMjEgPSBfMTAwNjsKICAgIGZsb2F0MyBwYXJhbV8yMiA9IGZyYWdUb0xpZ2h0ICsgKGZsb2F0MygtMS4wLCAxLjAsIDEuMCkgKiBfMTAxMSk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMTksIHBhcmFtXzIwLCBwYXJhbV8yMSwgcGFyYW1fMjIsIHVfc2hhZG93Q3ViZU1hcDEsIHVfc2hhZG93Q3ViZU1hcDFTbXBscik7CiAgICBpbnQgcGFyYW1fMjMgPSBzaGFkb3dNYXBJbmRleDsKICAgIGZsb2F0IHBhcmFtXzI0ID0gXzk5NjsKICAgIGZsb2F0IHBhcmFtXzI1ID0gXzEwMDY7CiAgICBmbG9hdDMgcGFyYW1fMjYgPSBmcmFnVG9MaWdodCArIChmbG9hdDMoMS4wLCAxLjAsIC0xLjApICogXzEwMTEpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzIzLCBwYXJhbV8yNCwgcGFyYW1fMjUsIHBhcmFtXzI2LCB1X3NoYWRvd0N1YmVNYXAxLCB1X3NoYWRvd0N1YmVNYXAxU21wbHIpOwogICAgaW50IHBhcmFtXzI3ID0gc2hhZG93TWFwSW5kZXg7CiAgICBmbG9hdCBwYXJhbV8yOCA9IF85OTY7CiAgICBmbG9hdCBwYXJhbV8yOSA9IF8xMDA2OwogICAgZmxvYXQzIHBhcmFtXzMwID0gZnJhZ1RvTGlnaHQgKyAoZmxvYXQzKDEuMCwgLTEuMCwgLTEuMCkgKiBfMTAxMSk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMjcsIHBhcmFtXzI4LCBwYXJhbV8yOSwgcGFyYW1fMzAsIHVfc2hhZG93Q3ViZU1hcDEsIHVfc2hhZG93Q3ViZU1hcDFTbXBscik7CiAgICBpbnQgcGFyYW1fMzEgPSBzaGFkb3dNYXBJbmRleDsKICAgIGZsb2F0IHBhcmFtXzMyID0gXzk5NjsKICAgIGZsb2F0IHBhcmFtXzMzID0gXzEwMDY7CiAgICBmbG9hdDMgcGFyYW1fMzQgPSBmcmFnVG9MaWdodCArIChmbG9hdDMoLTEuMCkgKiBfMTAxMSk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMzEsIHBhcmFtXzMyLCBwYXJhbV8zMywgcGFyYW1fMzQsIHVfc2hhZG93Q3ViZU1hcDEsIHVfc2hhZG93Q3ViZU1hcDFTbXBscik7CiAgICBpbnQgcGFyYW1fMzUgPSBzaGFkb3dNYXBJbmRleDsKICAgIGZsb2F0IHBhcmFtXzM2ID0gXzk5NjsKICAgIGZsb2F0IHBhcmFtXzM3ID0gXzEwMDY7CiAgICBmbG9hdDMgcGFyYW1fMzggPSBmcmFnVG9MaWdodCArIChmbG9hdDMoLTEuMCwgMS4wLCAtMS4wKSAqIF8xMDExKTsKICAgIGZsb2F0IF8xMTQ0ID0gc2hhZG93OwogICAgZmxvYXQgXzExNDcgPSAoXzExNDQgKyBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8zNSwgcGFyYW1fMzYsIHBhcmFtXzM3LCBwYXJhbV8zOCwgdV9zaGFkb3dDdWJlTWFwMSwgdV9zaGFkb3dDdWJlTWFwMVNtcGxyKSkgKiAwLjExMTExMTExMTkzODk1MzM5OTY1ODIwMzEyNTsKICAgIHNoYWRvdyA9IF8xMTQ3OwogICAgcmV0dXJuIF8xMTQ3Owp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdCBnZXRSYW5nZUF0dGVudWF0aW9uKHRocmVhZCBjb25zdCBmbG9hdCYgcmFuZ2UsIHRocmVhZCBjb25zdCBmbG9hdCYgX2Rpc3RhbmNlKQp7CiAgICBpZiAocmFuZ2UgPD0gMC4wKQogICAgewogICAgICAgIHJldHVybiAxLjAgLyBwb3coX2Rpc3RhbmNlLCAyLjApOwogICAgfQogICAgcmV0dXJuIGZhc3Q6Om1heChmYXN0OjptaW4oMS4wIC0gcG93KF9kaXN0YW5jZSAvIHJhbmdlLCA0LjApLCAxLjApLCAwLjApIC8gcG93KF9kaXN0YW5jZSwgMi4wKTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQgZ2V0U3BvdEF0dGVudWF0aW9uKHRocmVhZCBjb25zdCBmbG9hdDMmIHBvaW50VG9MaWdodCwgdGhyZWFkIGNvbnN0IGZsb2F0MyYgc3BvdERpcmVjdGlvbiwgdGhyZWFkIGNvbnN0IGZsb2F0JiBvdXRlckNvbmVDb3MsIHRocmVhZCBjb25zdCBmbG9hdCYgaW5uZXJDb25lQ29zKQp7CiAgICBmbG9hdCBfNTMwID0gZG90KG5vcm1hbGl6ZShzcG90RGlyZWN0aW9uKSwgbm9ybWFsaXplKC1wb2ludFRvTGlnaHQpKTsKICAgIGlmIChfNTMwID4gb3V0ZXJDb25lQ29zKQogICAgewogICAgICAgIGlmIChfNTMwIDwgaW5uZXJDb25lQ29zKQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIHNtb290aHN0ZXAob3V0ZXJDb25lQ29zLCBpbm5lckNvbmVDb3MsIF81MzApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gMS4wOwogICAgfQogICAgcmV0dXJuIDAuMDsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIGdldExpZ2hJbnRlbnNpdHkodGhyZWFkIGNvbnN0IExpZ2h0JiBsaWdodCwgdGhyZWFkIGNvbnN0IGZsb2F0MyYgcG9pbnRUb0xpZ2h0KQp7CiAgICBmbG9hdCByYW5nZUF0dGVudWF0aW9uID0gMS4wOwogICAgZmxvYXQgc3BvdEF0dGVudWF0aW9uID0gMS4wOwogICAgaWYgKGxpZ2h0LnR5cGUgIT0gMCkKICAgIHsKICAgICAgICBmbG9hdCBwYXJhbSA9IGxpZ2h0LnJhbmdlOwogICAgICAgIGZsb2F0IHBhcmFtXzEgPSBsZW5ndGgocG9pbnRUb0xpZ2h0KTsKICAgICAgICByYW5nZUF0dGVudWF0aW9uID0gZ2V0UmFuZ2VBdHRlbnVhdGlvbihwYXJhbSwgcGFyYW1fMSk7CiAgICB9CiAgICBpZiAobGlnaHQudHlwZSA9PSAyKQogICAgewogICAgICAgIGZsb2F0MyBwYXJhbV8yID0gcG9pbnRUb0xpZ2h0OwogICAgICAgIGZsb2F0MyBwYXJhbV8zID0gbGlnaHQuZGlyZWN0aW9uOwogICAgICAgIGZsb2F0IHBhcmFtXzQgPSBsaWdodC5vdXRlckNvbmVDb3M7CiAgICAgICAgZmxvYXQgcGFyYW1fNSA9IGxpZ2h0LmlubmVyQ29uZUNvczsKICAgICAgICBzcG90QXR0ZW51YXRpb24gPSBnZXRTcG90QXR0ZW51YXRpb24ocGFyYW1fMiwgcGFyYW1fMywgcGFyYW1fNCwgcGFyYW1fNSk7CiAgICB9CiAgICByZXR1cm4gbGlnaHQuY29sb3IgKiAoKHJhbmdlQXR0ZW51YXRpb24gKiBzcG90QXR0ZW51YXRpb24pICogbGlnaHQuaW50ZW5zaXR5KTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIEZfU2NobGljayh0aHJlYWQgY29uc3QgZmxvYXQzJiBmMCwgdGhyZWFkIGNvbnN0IGZsb2F0MyYgZjkwLCB0aHJlYWQgY29uc3QgZmxvYXQmIFZkb3RIKQp7CiAgICByZXR1cm4gZjAgKyAoKGY5MCAtIGYwKSAqIHBvdyhmYXN0OjpjbGFtcCgxLjAgLSBWZG90SCwgMC4wLCAxLjApLCA1LjApKTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQzIEJSREZfbGFtYmVydGlhbih0aHJlYWQgY29uc3QgZmxvYXQzJiBmMCwgdGhyZWFkIGNvbnN0IGZsb2F0MyYgZjkwLCB0aHJlYWQgY29uc3QgZmxvYXQzJiBkaWZmdXNlQ29sb3IsIHRocmVhZCBjb25zdCBmbG9hdCYgVmRvdEgpCnsKICAgIGZsb2F0MyBwYXJhbSA9IGYwOwogICAgZmxvYXQzIHBhcmFtXzEgPSBmOTA7CiAgICBmbG9hdCBwYXJhbV8yID0gVmRvdEg7CiAgICByZXR1cm4gKGZsb2F0MygxLjApIC0gRl9TY2hsaWNrKHBhcmFtLCBwYXJhbV8xLCBwYXJhbV8yKSkgKiAoZGlmZnVzZUNvbG9yICogZmxvYXQzKDAuMzE4MzA5ODczMzQyNTE0MDM4MDg1OTM3NSkpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdCBWX0dHWCh0aHJlYWQgY29uc3QgZmxvYXQmIE5kb3RMLCB0aHJlYWQgY29uc3QgZmxvYXQmIE5kb3RWLCB0aHJlYWQgY29uc3QgZmxvYXQmIGFscGhhUm91Z2huZXNzKQp7CiAgICBmbG9hdCBfMzk4ID0gYWxwaGFSb3VnaG5lc3MgKiBhbHBoYVJvdWdobmVzczsKICAgIGZsb2F0IF80MDUgPSAxLjAgLSBfMzk4OwogICAgZmxvYXQgXzQyNiA9IChOZG90TCAqIHNxcnQoKChOZG90ViAqIE5kb3RWKSAqIF80MDUpICsgXzM5OCkpICsgKE5kb3RWICogc3FydCgoKE5kb3RMICogTmRvdEwpICogXzQwNSkgKyBfMzk4KSk7CiAgICBpZiAoXzQyNiA+IDAuMCkKICAgIHsKICAgICAgICByZXR1cm4gMC41IC8gXzQyNjsKICAgIH0KICAgIHJldHVybiAwLjA7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0IERfR0dYKHRocmVhZCBjb25zdCBmbG9hdCYgTmRvdEgsIHRocmVhZCBjb25zdCBmbG9hdCYgYWxwaGFSb3VnaG5lc3MpCnsKICAgIGZsb2F0IF80NDAgPSBhbHBoYVJvdWdobmVzcyAqIGFscGhhUm91Z2huZXNzOwogICAgZmxvYXQgXzQ0OCA9ICgoTmRvdEggKiBOZG90SCkgKiAoXzQ0MCAtIDEuMCkpICsgMS4wOwogICAgcmV0dXJuIF80NDAgLyAoKDMuMTQxNTkyNzQxMDEyNTczMjQyMTg3NSAqIF80NDgpICogXzQ0OCk7Cn0KCnN0YXRpYyBpbmxpbmUgX19hdHRyaWJ1dGVfXygoYWx3YXlzX2lubGluZSkpCmZsb2F0MyBCUkRGX3NwZWN1bGFyR0dYKHRocmVhZCBjb25zdCBmbG9hdDMmIGYwLCB0aHJlYWQgY29uc3QgZmxvYXQzJiBmOTAsIHRocmVhZCBjb25zdCBmbG9hdCYgYWxwaGFSb3VnaG5lc3MsIHRocmVhZCBjb25zdCBmbG9hdCYgVmRvdEgsIHRocmVhZCBjb25zdCBmbG9hdCYgTmRvdEwsIHRocmVhZCBjb25zdCBmbG9hdCYgTmRvdFYsIHRocmVhZCBjb25zdCBmbG9hdCYgTmRvdEgpCnsKICAgIGZsb2F0MyBwYXJhbSA9IGYwOwogICAgZmxvYXQzIHBhcmFtXzEgPSBmOTA7CiAgICBmbG9hdCBwYXJhbV8yID0gVmRvdEg7CiAgICBmbG9hdCBwYXJhbV8zID0gTmRvdEw7CiAgICBmbG9hdCBwYXJhbV80ID0gTmRvdFY7CiAgICBmbG9hdCBwYXJhbV81ID0gYWxwaGFSb3VnaG5lc3M7CiAgICBmbG9hdCBwYXJhbV82ID0gTmRvdEg7CiAgICBmbG9hdCBwYXJhbV83ID0gYWxwaGFSb3VnaG5lc3M7CiAgICByZXR1cm4gKEZfU2NobGljayhwYXJhbSwgcGFyYW1fMSwgcGFyYW1fMikgKiBWX0dHWChwYXJhbV8zLCBwYXJhbV80LCBwYXJhbV81KSkgKiBEX0dHWChwYXJhbV82LCBwYXJhbV83KTsKfQoKc3RhdGljIGlubGluZSBfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSkKZmxvYXQ0IGdldEVtaXNzaXZlVGV4dHVyZSh0aHJlYWQgZmxvYXQyJiB2X3V2MSwgdGhyZWFkIHRleHR1cmUyZDxmbG9hdD4gdV9lbWlzc2l2ZVRleHR1cmUsIHRocmVhZCBjb25zdCBzYW1wbGVyIHVfZW1pc3NpdmVUZXh0dXJlU21wbHIpCnsKICAgIHJldHVybiB1X2VtaXNzaXZlVGV4dHVyZS5zYW1wbGUodV9lbWlzc2l2ZVRleHR1cmVTbXBsciwgdl91djEpOwp9CgpzdGF0aWMgaW5saW5lIF9fYXR0cmlidXRlX18oKGFsd2F5c19pbmxpbmUpKQpmbG9hdDMgbGluZWFyVG9zUkdCKHRocmVhZCBjb25zdCBmbG9hdDMmIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCBmbG9hdDMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCmZyYWdtZW50IG1haW4wX291dCBtYWluMChtYWluMF9pbiBpbiBbW3N0YWdlX2luXV0sIGNvbnN0YW50IHVfZnNfcGJyUGFyYW1zJiBwYnJQYXJhbXMgW1tidWZmZXIoMCldXSwgY29uc3RhbnQgdV9mc19zaGFkb3dzJiB1U2hhZG93cyBbW2J1ZmZlcigxKV1dLCBjb25zdGFudCB1X2ZzX2xpZ2h0aW5nJiBsaWdodGluZyBbW2J1ZmZlcigyKV1dLCBjb25zdGFudCB1X2ZzX2ZvZyYgZm9nIFtbYnVmZmVyKDMpXV0sIHRleHR1cmUyZDxmbG9hdD4gdV9iYXNlQ29sb3JUZXh0dXJlIFtbdGV4dHVyZSgwKV1dLCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlIFtbdGV4dHVyZSgxKV1dLCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfb2NjbHVzaW9uVGV4dHVyZSBbW3RleHR1cmUoMildXSwgdGV4dHVyZTJkPGZsb2F0PiB1X2VtaXNzaXZlVGV4dHVyZSBbW3RleHR1cmUoMyldXSwgdGV4dHVyZTJkPGZsb2F0PiB1X3NoYWRvd01hcDEgW1t0ZXh0dXJlKDQpXV0sIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXAyIFtbdGV4dHVyZSg1KV1dLCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfc2hhZG93TWFwMyBbW3RleHR1cmUoNildXSwgdGV4dHVyZTJkPGZsb2F0PiB1X3NoYWRvd01hcDQgW1t0ZXh0dXJlKDcpXV0sIHRleHR1cmUyZDxmbG9hdD4gdV9zaGFkb3dNYXA1IFtbdGV4dHVyZSg4KV1dLCB0ZXh0dXJlMmQ8ZmxvYXQ+IHVfc2hhZG93TWFwNiBbW3RleHR1cmUoOSldXSwgdGV4dHVyZWN1YmU8ZmxvYXQ+IHVfc2hhZG93Q3ViZU1hcDEgW1t0ZXh0dXJlKDEwKV1dLCBzYW1wbGVyIHVfYmFzZUNvbG9yVGV4dHVyZVNtcGxyIFtbc2FtcGxlcigwKV1dLCBzYW1wbGVyIHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlU21wbHIgW1tzYW1wbGVyKDEpXV0sIHNhbXBsZXIgdV9vY2NsdXNpb25UZXh0dXJlU21wbHIgW1tzYW1wbGVyKDIpXV0sIHNhbXBsZXIgdV9lbWlzc2l2ZVRleHR1cmVTbXBsciBbW3NhbXBsZXIoMyldXSwgc2FtcGxlciB1X3NoYWRvd01hcDFTbXBsciBbW3NhbXBsZXIoNCldXSwgc2FtcGxlciB1X3NoYWRvd01hcDJTbXBsciBbW3NhbXBsZXIoNSldXSwgc2FtcGxlciB1X3NoYWRvd01hcDNTbXBsciBbW3NhbXBsZXIoNildXSwgc2FtcGxlciB1X3NoYWRvd01hcDRTbXBsciBbW3NhbXBsZXIoNyldXSwgc2FtcGxlciB1X3NoYWRvd01hcDVTbXBsciBbW3NhbXBsZXIoOCldXSwgc2FtcGxlciB1X3NoYWRvd01hcDZTbXBsciBbW3NhbXBsZXIoOSldXSwgc2FtcGxlciB1X3NoYWRvd0N1YmVNYXAxU21wbHIgW1tzYW1wbGVyKDEwKV1dLCBmbG9hdDQgZ2xfRnJhZ0Nvb3JkIFtbcG9zaXRpb25dXSkKewogICAgbWFpbjBfb3V0IG91dCA9IHt9OwogICAgc3B2VW5zYWZlQXJyYXk8ZmxvYXQ0LCA2PiB2X2xpZ2h0UHJvalBvcyA9IHt9OwogICAgdl9saWdodFByb2pQb3NbMF0gPSBpbi52X2xpZ2h0UHJvalBvc18wOwogICAgdl9saWdodFByb2pQb3NbMV0gPSBpbi52X2xpZ2h0UHJvalBvc18xOwogICAgdl9saWdodFByb2pQb3NbMl0gPSBpbi52X2xpZ2h0UHJvalBvc18yOwogICAgdl9saWdodFByb2pQb3NbM10gPSBpbi52X2xpZ2h0UHJvalBvc18zOwogICAgdl9saWdodFByb2pQb3NbNF0gPSBpbi52X2xpZ2h0UHJvalBvc180OwogICAgdl9saWdodFByb2pQb3NbNV0gPSBpbi52X2xpZ2h0UHJvalBvc181OwogICAgZmxvYXQ0IF8xMTUyID0gZ2V0QmFzZUNvbG9yKHBiclBhcmFtcywgdV9iYXNlQ29sb3JUZXh0dXJlLCB1X2Jhc2VDb2xvclRleHR1cmVTbXBsciwgaW4udl91djEpOwogICAgZmxvYXQzIF8xNTgxID0gZ2V0Tm9ybWFsSW5mbyhpbi52X3V2MSwgaW4udl9wb3NpdGlvbiwgaW4udl9ub3JtYWwpLm47CiAgICBmbG9hdDMgXzE1ODUgPSBmbG9hdDMoMC4wKTsKICAgIGZsb2F0IF8xNTg2ID0gMC4wOwogICAgZmxvYXQzIF8xNTg3ID0gZmxvYXQzKDAuMCk7CiAgICBmbG9hdDMgXzE1ODggPSBmbG9hdDMoMC4wKTsKICAgIGZsb2F0MyBfMTE2NyA9IF8xMTUyLnh5ejsKICAgIE1hdGVyaWFsSW5mbyBwYXJhbSA9IE1hdGVyaWFsSW5mb3sgMC4wLCBmbG9hdDMoMC4wKSwgMC4wLCBmbG9hdDMoMC4wKSwgZmxvYXQzKDAuMCksIDAuMCwgZmxvYXQzKDAuMCksIF8xMTY3IH07CiAgICBmbG9hdCBwYXJhbV8xID0gMC4wMzk5OTk5OTkxMDU5MzAzMjgzNjkxNDA2MjU7CiAgICBNYXRlcmlhbEluZm8gXzExNzcgPSBnZXRNZXRhbGxpY1JvdWdobmVzc0luZm8ocGFyYW0sIHBhcmFtXzEsIHBiclBhcmFtcywgaW4udl91djEsIHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlLCB1X21ldGFsbGljUm91Z2huZXNzVGV4dHVyZVNtcGxyKTsKICAgIF8xNTg1ID0gXzExNzcuZjA7CiAgICBfMTU4NyA9IF8xMTc3LmFsYmVkb0NvbG9yOwogICAgZmxvYXQgXzExODAgPSBmYXN0OjpjbGFtcChfMTE3Ny5wZXJjZXB0dWFsUm91Z2huZXNzLCAwLjAsIDEuMCk7CiAgICBfMTU4NiA9IF8xMTgwICogXzExODA7CiAgICBfMTU4OCA9IGZsb2F0MyhmYXN0OjpjbGFtcChmYXN0OjptYXgoZmFzdDo6bWF4KF8xMTc3LmYwLngsIF8xMTc3LmYwLnkpLCBfMTE3Ny5mMC56KSAqIDUwLjAsIDAuMCwgMS4wKSk7CiAgICBmbG9hdDMgZl9zcGVjdWxhciA9IGZsb2F0MygwLjApOwogICAgZmxvYXQzIGZfZW1pc3NpdmUgPSBmbG9hdDMoMC4wKTsKICAgIGZsb2F0MyBmX2RpZmZ1c2UgPSAoZmxvYXQzKHBiclBhcmFtcy5hbWJpZW50TGlnaHQpICogcG93KHBiclBhcmFtcy5hbWJpZW50RmFjdG9yLCAyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjUpKSAqIF8xMTY3OwogICAgZmxvYXQ0IF8xMjI1ID0gZ2V0T2NjbHVzaW9uVGV4dHVyZShpbi52X3V2MSwgdV9vY2NsdXNpb25UZXh0dXJlLCB1X29jY2x1c2lvblRleHR1cmVTbXBscik7CiAgICBmbG9hdCBfMTIyNiA9IF8xMjI1Lng7CiAgICBmX2RpZmZ1c2UgKj0gXzEyMjY7CiAgICBmX3NwZWN1bGFyICo9IF8xMjI2OwogICAgZmxvYXQzIF8xMjUyID0gbm9ybWFsaXplKGxpZ2h0aW5nLmV5ZVBvcy54eXogLSBpbi52X3Bvc2l0aW9uKTsKICAgIGZsb2F0MyBwb2ludFRvTGlnaHQ7CiAgICBmb3IgKGludCBpID0gMDsgaSA8IDY7IGkrKykKICAgIHsKICAgICAgICBpbnQgXzEyNjUgPSBpbnQobGlnaHRpbmcucG9zaXRpb25fdHlwZVtpXS53KTsKICAgICAgICBib29sIF8xMjk2ID0gKGxpZ2h0aW5nLmluQ29uZV9vdUNvbmVfc2hhZG93c19jYXNjYWRlc1tpXS56IDwgMC4wKSA/IGZhbHNlIDogdHJ1ZTsKICAgICAgICBpbnQgXzEzMDAgPSBpbnQobGlnaHRpbmcuaW5Db25lX291Q29uZV9zaGFkb3dzX2Nhc2NhZGVzW2ldLnopOwogICAgICAgIGludCBfMTMwNCA9IGludChsaWdodGluZy5pbkNvbmVfb3VDb25lX3NoYWRvd3NfY2FzY2FkZXNbaV0udyk7CiAgICAgICAgaWYgKGxpZ2h0aW5nLmNvbG9yX2ludGVuc2l0eVtpXS53ID4gMC4wKQogICAgICAgIHsKICAgICAgICAgICAgaWYgKF8xMjY1ICE9IDApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHBvaW50VG9MaWdodCA9IGxpZ2h0aW5nLnBvc2l0aW9uX3R5cGVbaV0ueHl6IC0gaW4udl9wb3NpdGlvbjsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHBvaW50VG9MaWdodCA9IC1saWdodGluZy5kaXJlY3Rpb25fcmFuZ2VbaV0ueHl6OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZsb2F0MyBfMTMyNyA9IG5vcm1hbGl6ZShwb2ludFRvTGlnaHQpOwogICAgICAgICAgICBmbG9hdDMgXzEzMzIgPSBub3JtYWxpemUoXzEzMjcgKyBfMTI1Mik7CiAgICAgICAgICAgIGZsb2F0MyBwYXJhbV8yID0gXzE1ODE7CiAgICAgICAgICAgIGZsb2F0MyBwYXJhbV8zID0gXzEzMjc7CiAgICAgICAgICAgIGZsb2F0IF8xMzM4ID0gY2xhbXBlZERvdChwYXJhbV8yLCBwYXJhbV8zKTsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzQgPSBfMTU4MTsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzUgPSBfMTI1MjsKICAgICAgICAgICAgZmxvYXQgXzEzNDQgPSBjbGFtcGVkRG90KHBhcmFtXzQsIHBhcmFtXzUpOwogICAgICAgICAgICBmbG9hdDMgcGFyYW1fNiA9IF8xNTgxOwogICAgICAgICAgICBmbG9hdDMgcGFyYW1fNyA9IF8xMzMyOwogICAgICAgICAgICBmbG9hdDMgcGFyYW1fOCA9IF8xMzI3OwogICAgICAgICAgICBmbG9hdDMgcGFyYW1fOSA9IF8xMzMyOwogICAgICAgICAgICBmbG9hdDMgcGFyYW1fMTAgPSBfMTI1MjsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzExID0gXzEzMzI7CiAgICAgICAgICAgIGZsb2F0IF8xMzYyID0gY2xhbXBlZERvdChwYXJhbV8xMCwgcGFyYW1fMTEpOwogICAgICAgICAgICBmbG9hdCBzaGFkb3cgPSAxLjA7CiAgICAgICAgICAgIGlmIChfMTI5NikKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaWYgKF8xMjY1ID09IDIpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaW50IHBhcmFtXzEyID0gXzEzMDA7CiAgICAgICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMTMgPSBfMTMzODsKICAgICAgICAgICAgICAgICAgICBzaGFkb3cgPSAxLjAgLSBzaGFkb3dDYWxjdWxhdGlvblBDRihwYXJhbV8xMiwgcGFyYW1fMTMsIHVTaGFkb3dzLCB2X2xpZ2h0UHJvalBvcywgdV9zaGFkb3dNYXAxLCB1X3NoYWRvd01hcDFTbXBsciwgdV9zaGFkb3dNYXAyLCB1X3NoYWRvd01hcDJTbXBsciwgdV9zaGFkb3dNYXAzLCB1X3NoYWRvd01hcDNTbXBsciwgdV9zaGFkb3dNYXA0LCB1X3NoYWRvd01hcDRTbXBsciwgdV9zaGFkb3dNYXA1LCB1X3NoYWRvd01hcDVTbXBsciwgdV9zaGFkb3dNYXA2LCB1X3NoYWRvd01hcDZTbXBscik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWYgKF8xMjY1ID09IDApCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBpbnQgcGFyYW1fMTQgPSBfMTMwMDsKICAgICAgICAgICAgICAgICAgICAgICAgaW50IHBhcmFtXzE1ID0gXzEzMDQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzE2ID0gXzEzMzg7CiAgICAgICAgICAgICAgICAgICAgICAgIHNoYWRvdyA9IDEuMCAtIHNoYWRvd0Nhc2NhZGVkQ2FsY3VsYXRpb25QQ0YocGFyYW1fMTQsIHBhcmFtXzE1LCBwYXJhbV8xNiwgdVNoYWRvd3MsIHZfbGlnaHRQcm9qUG9zLCB1X3NoYWRvd01hcDEsIHVfc2hhZG93TWFwMVNtcGxyLCB1X3NoYWRvd01hcDIsIHVfc2hhZG93TWFwMlNtcGxyLCB1X3NoYWRvd01hcDMsIHVfc2hhZG93TWFwM1NtcGxyLCB1X3NoYWRvd01hcDQsIHVfc2hhZG93TWFwNFNtcGxyLCB1X3NoYWRvd01hcDUsIHVfc2hhZG93TWFwNVNtcGxyLCB1X3NoYWRvd01hcDYsIHVfc2hhZG93TWFwNlNtcGxyLCBpbi52X2NsaXBTcGFjZVBvc1opOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoXzEyNjUgPT0gMSkKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50IHBhcmFtXzE3ID0gXzEzMDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdDMgcGFyYW1fMTggPSAtcG9pbnRUb0xpZ2h0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMTkgPSBfMTMzODsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYWRvdyA9IDEuMCAtIHNoYWRvd0N1YmVDYWxjdWxhdGlvblBDRihwYXJhbV8xNywgcGFyYW1fMTgsIHBhcmFtXzE5LCB1U2hhZG93cywgdV9zaGFkb3dDdWJlTWFwMSwgdV9zaGFkb3dDdWJlTWFwMVNtcGxyKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoKF8xMzM4ID4gMC4wKSB8fCAoXzEzNDQgPiAwLjApKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBMaWdodCBwYXJhbV8yMCA9IExpZ2h0eyBfMTI2NSwgbGlnaHRpbmcuZGlyZWN0aW9uX3JhbmdlW2ldLnh5eiwgbGlnaHRpbmcuY29sb3JfaW50ZW5zaXR5W2ldLnh5eiwgbGlnaHRpbmcucG9zaXRpb25fdHlwZVtpXS54eXosIGxpZ2h0aW5nLmRpcmVjdGlvbl9yYW5nZVtpXS53LCBsaWdodGluZy5jb2xvcl9pbnRlbnNpdHlbaV0udywgbGlnaHRpbmcuaW5Db25lX291Q29uZV9zaGFkb3dzX2Nhc2NhZGVzW2ldLngsIGxpZ2h0aW5nLmluQ29uZV9vdUNvbmVfc2hhZG93c19jYXNjYWRlc1tpXS55LCBfMTI5NiwgXzEzMDAsIF8xMzA0IH07CiAgICAgICAgICAgICAgICBmbG9hdDMgcGFyYW1fMjEgPSBwb2ludFRvTGlnaHQ7CiAgICAgICAgICAgICAgICBmbG9hdDMgXzE0MjggPSBnZXRMaWdoSW50ZW5zaXR5KHBhcmFtXzIwLCBwYXJhbV8yMSk7CiAgICAgICAgICAgICAgICBmbG9hdDMgcGFyYW1fMjIgPSBfMTU4NTsKICAgICAgICAgICAgICAgIGZsb2F0MyBwYXJhbV8yMyA9IF8xNTg4OwogICAgICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzI0ID0gXzE1ODc7CiAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8yNSA9IF8xMzYyOwogICAgICAgICAgICAgICAgZl9kaWZmdXNlICs9ICgoKF8xNDI4ICogc2hhZG93KSAqIF8xMzM4KSAqIEJSREZfbGFtYmVydGlhbihwYXJhbV8yMiwgcGFyYW1fMjMsIHBhcmFtXzI0LCBwYXJhbV8yNSkpOwogICAgICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzI2ID0gXzE1ODU7CiAgICAgICAgICAgICAgICBmbG9hdDMgcGFyYW1fMjcgPSBfMTU4ODsKICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzI4ID0gXzE1ODY7CiAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8yOSA9IF8xMzYyOwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMzAgPSBfMTMzODsKICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzMxID0gXzEzNDQ7CiAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8zMiA9IGNsYW1wZWREb3QocGFyYW1fNiwgcGFyYW1fNyk7CiAgICAgICAgICAgICAgICBmX3NwZWN1bGFyICs9ICgoKF8xNDI4ICogc2hhZG93KSAqIF8xMzM4KSAqIEJSREZfc3BlY3VsYXJHR1gocGFyYW1fMjYsIHBhcmFtXzI3LCBwYXJhbV8yOCwgcGFyYW1fMjksIHBhcmFtXzMwLCBwYXJhbV8zMSwgcGFyYW1fMzIpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGZfZW1pc3NpdmUgPSBwYnJQYXJhbXMuZW1pc3NpdmVGYWN0b3I7CiAgICBmbG9hdDMgcGFyYW1fMzMgPSBnZXRFbWlzc2l2ZVRleHR1cmUoaW4udl91djEsIHVfZW1pc3NpdmVUZXh0dXJlLCB1X2VtaXNzaXZlVGV4dHVyZVNtcGxyKS54eXo7CiAgICBmbG9hdDMgXzE0ODMgPSBmX2VtaXNzaXZlOwogICAgZmxvYXQzIF8xNDg0ID0gXzE0ODMgKiBzUkdCVG9MaW5lYXIocGFyYW1fMzMpOwogICAgZl9lbWlzc2l2ZSA9IF8xNDg0OwogICAgZmxvYXQzIGNvbG9yID0gKF8xNDg0ICsgZl9kaWZmdXNlKSArIGZfc3BlY3VsYXI7CiAgICBpbnQgXzE0OTcgPSBpbnQoZm9nLmNvbG9yX3R5cGUudyk7CiAgICBmbG9hdCBmb2dGYWN0b3IgPSAwLjA7CiAgICBmbG9hdCBfMTUxOCA9IGdsX0ZyYWdDb29yZC56IC8gZ2xfRnJhZ0Nvb3JkLnc7CiAgICBpZiAoXzE0OTcgPT0gMCkKICAgIHsKICAgICAgICBmb2dGYWN0b3IgPSAoZm9nLmRlbnNpdHlfc3RhcnRfZW5kLncgLSBfMTUxOCkgLyAoZm9nLmRlbnNpdHlfc3RhcnRfZW5kLncgLSBmb2cuZGVuc2l0eV9zdGFydF9lbmQueik7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgaWYgKF8xNDk3ID09IDEpCiAgICAgICAgewogICAgICAgICAgICBmb2dGYWN0b3IgPSBleHAyKCgoLWZvZy5kZW5zaXR5X3N0YXJ0X2VuZC54KSAqIF8xNTE4KSAqIDEuNDQyNjk1MDIxNjI5MzMzNDk2MDkzNzUpOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICBpZiAoXzE0OTcgPT0gMikKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZm9nRmFjdG9yID0gZXhwMigoKCgoLWZvZy5kZW5zaXR5X3N0YXJ0X2VuZC54KSAqIGZvZy5kZW5zaXR5X3N0YXJ0X2VuZC54KSAqIF8xNTE4KSAqIF8xNTE4KSAqIDEuNDQyNjk1MDIxNjI5MzMzNDk2MDkzNzUpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgZmxvYXQgXzE1NTcgPSBmb2dGYWN0b3I7CiAgICBmbG9hdCBfMTU1OCA9IGZhc3Q6OmNsYW1wKF8xNTU3LCAwLjAsIDEuMCk7CiAgICBmb2dGYWN0b3IgPSBfMTU1ODsKICAgIGZsb2F0MyBfMTU2MCA9IGNvbG9yOwogICAgZmxvYXQzIF8xNTYzID0gbWl4KGZvZy5jb2xvcl90eXBlLnh5eiwgXzE1NjAsIGZsb2F0MyhfMTU1OCkpOwogICAgY29sb3IgPSBfMTU2MzsKICAgIGZsb2F0MyBwYXJhbV8zNCA9IF8xNTYzOwogICAgb3V0LmdfZmluYWxDb2xvciA9IGZsb2F0NChsaW5lYXJUb3NSR0IocGFyYW1fMzQpLCBfMTE1Mi53KTsKICAgIHJldHVybiBvdXQ7Cn0KClJFRkzsBQAAbWVzaF9VdjFQdWNTaHdQY2ZOb3JGb2dfbXNsMjFpbwAAAAAACwAAAAQAAAAOAAAAdV9iYXNlQ29sb3JUZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUdV9tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUAAAAAAAACAAAAAQAAADJEICBURkxUdV9vY2NsdXNpb25UZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAgAAADJEICBURkxUdV9lbWlzc2l2ZVRleHR1cmUAAAAAAAAAAAAAAAAAAAACAAAAAwAAADJEICBURkxUdV9zaGFkb3dNYXAxAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABAAAADJEICBURkxUdV9zaGFkb3dNYXAyAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABQAAADJEICBURkxUdV9zaGFkb3dNYXAzAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAADJEICBURkxUdV9zaGFkb3dNYXA0AAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABwAAADJEICBURkxUdV9zaGFkb3dNYXA1AAAAAAAAAAAAAAAAAAAAAAAAAAACAAAACAAAADJEICBURkxUdV9zaGFkb3dNYXA2AAAAAAAAAAAAAAAAAAAAAAAAAAACAAAACQAAADJEICBURkxUdV9zaGFkb3dDdWJlTWFwMQAAAAAAAAAAAAAAAAAAAAACAAAACgAAAENVQkVURkxUBgAAAHVfZnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABYmFzZUNvbG9yRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABtZXRhbGxpY0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAEAAAAHJvdWdobmVzc0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAUAAAAZW1pc3NpdmVGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAACAAAABhbWJpZW50TGlnaHQAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAMAAAAGFtYmllbnRGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAA8AAAAAQAAAHVfZnNfc2hhZG93cwAAAAAAAAAAAAAAAAAAAAAAAAAAdVNoYWRvd3MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAHAAAAABYmlhc190ZXhTaXplX25lYXJGYXIAAAAAAAAAAAAAAABGTFQ0BwAAAAAAAAAFAAAAdV9mc19saWdodGluZwAAAAAAAAAAAAAAAAAAAAAAAABsaWdodGluZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAkAEAAAFkaXJlY3Rpb25fcmFuZ2UAAAAAAAAAAAAAAAAAAAAAAEZMVDQGAAAAAAAAAGNvbG9yX2ludGVuc2l0eQAAAAAAAAAAAAAAAAAAAAAARkxUNAYAAABgAAAAcG9zaXRpb25fdHlwZQAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0BgAAAMAAAABpbkNvbmVfb3VDb25lX3NoYWRvd3NfY2FzY2FkZXMAAEZMVDQGAAAAIAEAAGV5ZVBvcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAACAAQAAAgAAAHVfZnNfZm9nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZm9nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAACAAAAABY29sb3JfdHlwZQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABkZW5zaXR5X3N0YXJ0X2VuZAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAEAAAAA==";

std::string getBase64Shader(std::string name) {
    if (name == "mesh_UltUv1Vc4Txr_msl21ios") {
        return mesh_UltUv1Vc4Txr_msl21ios;
    } else if (name == "depth_msl21ios") {
        return depth_msl21ios;
    } else if (name == "mesh_Uv1PucNorNmpTanVc4Ski_msl21ios") {
        return mesh_Uv1PucNorNmpTanVc4Ski_msl21ios;
    } else if (name == "mesh_UltUv1Vc4TxrFog_msl21ios") {
        return mesh_UltUv1Vc4TxrFog_msl21ios;
    } else if (name == "mesh_PucShwPcfNor_msl21ios") {
        return mesh_PucShwPcfNor_msl21ios;
    } else if (name == "ui_Vc4_msl21ios") {
        return ui_Vc4_msl21ios;
    } else if (name == "mesh_UltUv1Fog_msl21ios") {
        return mesh_UltUv1Fog_msl21ios;
    } else if (name == "points_TexVc4Txr_msl21ios") {
        return points_TexVc4Txr_msl21ios;
    } else if (name == "mesh_Uv1PucShwPcfNorVc4Fog_msl21ios") {
        return mesh_Uv1PucShwPcfNorVc4Fog_msl21ios;
    } else if (name == "mesh_Uv1PucShwPcfNorFogSki_msl21ios") {
        return mesh_Uv1PucShwPcfNorFogSki_msl21ios;
    } else if (name == "mesh_PucShwPcfNorTanFogMtaMnr_msl21ios") {
        return mesh_PucShwPcfNorTanFogMtaMnr_msl21ios;
    } else if (name == "mesh_UltUv1Vc4_msl21ios") {
        return mesh_UltUv1Vc4_msl21ios;
    } else if (name == "mesh_Uv1PucNorNmpTanVc4FogSki_msl21ios") {
        return mesh_Uv1PucNorNmpTanVc4FogSki_msl21ios;
    } else if (name == "sky_msl21ios") {
        return sky_msl21ios;
    } else if (name == "mesh_Uv1PucNorVc4_msl21ios") {
        return mesh_Uv1PucNorVc4_msl21ios;
    } else if (name == "ui_TexVc4_msl21ios") {
        return ui_TexVc4_msl21ios;
    } else if (name == "points_TexVc4_msl21ios") {
        return points_TexVc4_msl21ios;
    } else if (name == "mesh_Uv1PucShwPcfNor_msl21ios") {
        return mesh_Uv1PucShwPcfNor_msl21ios;
    } else if (name == "depth_Ski_msl21ios") {
        return depth_Ski_msl21ios;
    } else if (name == "mesh_PucShwPcfNorTanMtaMnr_msl21ios") {
        return mesh_PucShwPcfNorTanMtaMnr_msl21ios;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTanVc4Fog_msl21ios") {
        return mesh_Uv1PucShwPcfNorNmpTanVc4Fog_msl21ios;
    } else if (name == "mesh_Uv1PucNorNmpTanFog_msl21ios") {
        return mesh_Uv1PucNorNmpTanFog_msl21ios;
    } else if (name == "mesh_PucShwPcfNorTanFogMtaMnrMtg_msl21ios") {
        return mesh_PucShwPcfNorTanFogMtaMnrMtg_msl21ios;
    } else if (name == "mesh_Uv1PucNorVc4Fog_msl21ios") {
        return mesh_Uv1PucNorVc4Fog_msl21ios;
    } else if (name == "mesh_Uv1PucNor_msl21ios") {
        return mesh_Uv1PucNor_msl21ios;
    } else if (name == "ui_Ftx_msl21ios") {
        return ui_Ftx_msl21ios;
    } else if (name == "mesh_PucShwPcfNorTanMtaMnrMtg_msl21ios") {
        return mesh_PucShwPcfNorTanMtaMnrMtg_msl21ios;
    } else if (name == "mesh_Uv1PucShwPcfNorSki_msl21ios") {
        return mesh_Uv1PucShwPcfNorSki_msl21ios;
    } else if (name == "mesh_Uv1PucNorFog_msl21ios") {
        return mesh_Uv1PucNorFog_msl21ios;
    } else if (name == "mesh_Uv1PucNorNmpTanVc4Fog_msl21ios") {
        return mesh_Uv1PucNorNmpTanVc4Fog_msl21ios;
    } else if (name == "mesh_PucShwPcfNorSki_msl21ios") {
        return mesh_PucShwPcfNorSki_msl21ios;
    } else if (name == "points_Vc4_msl21ios") {
        return points_Vc4_msl21ios;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTan_msl21ios") {
        return mesh_Uv1PucShwPcfNorNmpTan_msl21ios;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTanVc4_msl21ios") {
        return mesh_Uv1PucShwPcfNorNmpTanVc4_msl21ios;
    } else if (name == "mesh_Uv1PucNorNmpTan_msl21ios") {
        return mesh_Uv1PucNorNmpTan_msl21ios;
    } else if (name == "mesh_UltUv1Vc4Fog_msl21ios") {
        return mesh_UltUv1Vc4Fog_msl21ios;
    } else if (name == "mesh_Uv1PucNorNmpTanVc4_msl21ios") {
        return mesh_Uv1PucNorNmpTanVc4_msl21ios;
    } else if (name == "mesh_UltUv1_msl21ios") {
        return mesh_UltUv1_msl21ios;
    } else if (name == "depth_Mta_msl21ios") {
        return depth_Mta_msl21ios;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTanFog_msl21ios") {
        return mesh_Uv1PucShwPcfNorNmpTanFog_msl21ios;
    } else if (name == "mesh_Uv1PucShwPcfNorVc4_msl21ios") {
        return mesh_Uv1PucShwPcfNorVc4_msl21ios;
    } else if (name == "mesh_Uv1PucShwPcfNorFog_msl21ios") {
        return mesh_Uv1PucShwPcfNorFog_msl21ios;
    }
    return "";
}
#endif //SHADER_msl21ios_h
