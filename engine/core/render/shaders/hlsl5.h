#ifndef SHADER_hlsl5_h
#define SHADER_hlsl5_h

#include <string>

static const std::string mesh_Uv1PucNorNmpTanVc4Fog_hlsl5 = "";
static const std::string mesh_Uv1PucNorNmpTanFog_hlsl5 = "";
static const std::string sky_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUcJBAAAVkVSVENPREX8AgAAY2J1ZmZlciB1X3ZzX3NreVBhcmFtcyA6IHJlZ2lzdGVyKGIwKQp7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgc2t5UGFyYW1zX3ZwTWF0cml4IDogcGFja29mZnNldChjMCk7Cn07CgoKc3RhdGljIGZsb2F0NCBnbF9Qb3NpdGlvbjsKc3RhdGljIGZsb2F0MyB1djsKc3RhdGljIGZsb2F0MyBhX3Bvc2l0aW9uOwoKc3RydWN0IFNQSVJWX0Nyb3NzX0lucHV0CnsKICAgIGZsb2F0MyBhX3Bvc2l0aW9uIDogUE9TSVRJT047Cn07CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfT3V0cHV0CnsKICAgIGZsb2F0MyB1diA6IFRFWENPT1JEMDsKICAgIGZsb2F0NCBnbF9Qb3NpdGlvbiA6IFNWX1Bvc2l0aW9uOwp9OwoKdm9pZCB2ZXJ0X21haW4oKQp7CiAgICB1diA9IGFfcG9zaXRpb247CiAgICBnbF9Qb3NpdGlvbiA9IG11bChmbG9hdDQoYV9wb3NpdGlvbiwgMS4wZiksIHNreVBhcmFtc192cE1hdHJpeCkueHl3dzsKICAgIGdsX1Bvc2l0aW9uLnogPSAoZ2xfUG9zaXRpb24ueiArIGdsX1Bvc2l0aW9uLncpICogMC41Owp9CgpTUElSVl9Dcm9zc19PdXRwdXQgbWFpbihTUElSVl9Dcm9zc19JbnB1dCBzdGFnZV9pbnB1dCkKewogICAgYV9wb3NpdGlvbiA9IHN0YWdlX2lucHV0LmFfcG9zaXRpb247CiAgICB2ZXJ0X21haW4oKTsKICAgIFNQSVJWX0Nyb3NzX091dHB1dCBzdGFnZV9vdXRwdXQ7CiAgICBzdGFnZV9vdXRwdXQuZ2xfUG9zaXRpb24gPSBnbF9Qb3NpdGlvbjsKICAgIHN0YWdlX291dHB1dC51diA9IHV2OwogICAgcmV0dXJuIHN0YWdlX291dHB1dDsKfQpSRUZM+QAAAHNreV9obHNsNQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAQAAAGFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAdV92c19za3lQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABza3lQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAF2cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUeQAwAARlJBR0NPREWfAgAAY2J1ZmZlciB1X2ZzX3NreVBhcmFtcyA6IHJlZ2lzdGVyKGIwKQp7CiAgICBmbG9hdDQgc2t5UGFyYW1zX2NvbG9yIDogcGFja29mZnNldChjMCk7Cn07CgpUZXh0dXJlQ3ViZTxmbG9hdDQ+IHVfc2t5VGV4dHVyZSA6IHJlZ2lzdGVyKHQwKTsKU2FtcGxlclN0YXRlIF91X3NreVRleHR1cmVfc2FtcGxlciA6IHJlZ2lzdGVyKHMwKTsKCnN0YXRpYyBmbG9hdDQgZnJhZ19jb2xvcjsKc3RhdGljIGZsb2F0MyB1djsKCnN0cnVjdCBTUElSVl9Dcm9zc19JbnB1dAp7CiAgICBmbG9hdDMgdXYgOiBURVhDT09SRDA7Cn07CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfT3V0cHV0CnsKICAgIGZsb2F0NCBmcmFnX2NvbG9yIDogU1ZfVGFyZ2V0MDsKfTsKCnZvaWQgZnJhZ19tYWluKCkKewogICAgZnJhZ19jb2xvciA9IHNreVBhcmFtc19jb2xvciAqIHVfc2t5VGV4dHVyZS5TYW1wbGUoX3Vfc2t5VGV4dHVyZV9zYW1wbGVyLCB1dik7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICB1diA9IHN0YWdlX2lucHV0LnV2OwogICAgZnJhZ19tYWluKCk7CiAgICBTUElSVl9Dcm9zc19PdXRwdXQgc3RhZ2Vfb3V0cHV0OwogICAgc3RhZ2Vfb3V0cHV0LmZyYWdfY29sb3IgPSBmcmFnX2NvbG9yOwogICAgcmV0dXJuIHN0YWdlX291dHB1dDsKfQpSRUZM3QAAAHNreV9obHNsNQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAQAAAHVfc2t5VGV4dHVyZQAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAABDVUJFVEZMVAEAAAB1X2ZzX3NreVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHNreVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAWNvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAA";
static const std::string ui_TexVc4_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUfeBQAAVkVSVENPREU5BAAAY2J1ZmZlciB1X3ZzX3VpUGFyYW1zIDogcmVnaXN0ZXIoYjApCnsKICAgIHJvd19tYWpvciBmbG9hdDR4NCB1aVBhcmFtc19tdnBNYXRyaXggOiBwYWNrb2Zmc2V0KGMwKTsKfTsKCgpzdGF0aWMgZmxvYXQ0IGdsX1Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQ0IHZfY29sb3I7CnN0YXRpYyBmbG9hdDQgYV9jb2xvcjsKc3RhdGljIGZsb2F0MiB2X3V2MTsKc3RhdGljIGZsb2F0MiBhX3RleGNvb3JkMTsKc3RhdGljIGZsb2F0MyBhX3Bvc2l0aW9uOwoKc3RydWN0IFNQSVJWX0Nyb3NzX0lucHV0CnsKICAgIGZsb2F0MyBhX3Bvc2l0aW9uIDogUE9TSVRJT047CiAgICBmbG9hdDQgYV9jb2xvciA6IE5PUk1BTDsKICAgIGZsb2F0MiBhX3RleGNvb3JkMSA6IFRFWENPT1JEMDsKfTsKCnN0cnVjdCBTUElSVl9Dcm9zc19PdXRwdXQKewogICAgZmxvYXQ0IHZfY29sb3IgOiBURVhDT09SRDA7CiAgICBmbG9hdDIgdl91djEgOiBURVhDT09SRDE7CiAgICBmbG9hdDQgZ2xfUG9zaXRpb24gOiBTVl9Qb3NpdGlvbjsKfTsKCnZvaWQgdmVydF9tYWluKCkKewogICAgdl9jb2xvciA9IGFfY29sb3I7CiAgICB2X3V2MSA9IGFfdGV4Y29vcmQxOwogICAgZ2xfUG9zaXRpb24gPSBtdWwoZmxvYXQ0KGFfcG9zaXRpb24sIDEuMGYpLCB1aVBhcmFtc19tdnBNYXRyaXgpOwogICAgZ2xfUG9zaXRpb24ueiA9IChnbF9Qb3NpdGlvbi56ICsgZ2xfUG9zaXRpb24udykgKiAwLjU7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICBhX2NvbG9yID0gc3RhZ2VfaW5wdXQuYV9jb2xvcjsKICAgIGFfdGV4Y29vcmQxID0gc3RhZ2VfaW5wdXQuYV90ZXhjb29yZDE7CiAgICBhX3Bvc2l0aW9uID0gc3RhZ2VfaW5wdXQuYV9wb3NpdGlvbjsKICAgIHZlcnRfbWFpbigpOwogICAgU1BJUlZfQ3Jvc3NfT3V0cHV0IHN0YWdlX291dHB1dDsKICAgIHN0YWdlX291dHB1dC5nbF9Qb3NpdGlvbiA9IGdsX1Bvc2l0aW9uOwogICAgc3RhZ2Vfb3V0cHV0LnZfY29sb3IgPSB2X2NvbG9yOwogICAgc3RhZ2Vfb3V0cHV0LnZfdXYxID0gdl91djE7CiAgICByZXR1cm4gc3RhZ2Vfb3V0cHV0Owp9ClJFRkyRAQAAdWlfVGV4VmM0X2hsc2w1AAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAEAAAABAAAAYV9jb2xvcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNGFfdGV4Y29vcmQxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDJhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAAHVfdnNfdWlQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAdWlQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABTVEFHiAYAAEZSQUdDT0RFlwUAAGNidWZmZXIgdV9mc191aVBhcmFtcyA6IHJlZ2lzdGVyKGIwKQp7CiAgICBmbG9hdDQgdWlQYXJhbXNfY29sb3IgOiBwYWNrb2Zmc2V0KGMwKTsKfTsKClRleHR1cmUyRDxmbG9hdDQ+IHVfdWlUZXh0dXJlIDogcmVnaXN0ZXIodDApOwpTYW1wbGVyU3RhdGUgX3VfdWlUZXh0dXJlX3NhbXBsZXIgOiByZWdpc3RlcihzMCk7CgpzdGF0aWMgZmxvYXQ0IHZfY29sb3I7CnN0YXRpYyBmbG9hdDIgdl91djE7CnN0YXRpYyBmbG9hdDQgZ19maW5hbENvbG9yOwoKc3RydWN0IFNQSVJWX0Nyb3NzX0lucHV0CnsKICAgIGZsb2F0NCB2X2NvbG9yIDogVEVYQ09PUkQwOwogICAgZmxvYXQyIHZfdXYxIDogVEVYQ09PUkQxOwp9OwoKc3RydWN0IFNQSVJWX0Nyb3NzX091dHB1dAp7CiAgICBmbG9hdDQgZ19maW5hbENvbG9yIDogU1ZfVGFyZ2V0MDsKfTsKCmZsb2F0MyBzUkdCVG9MaW5lYXIoZmxvYXQzIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNWYueHh4KTsKfQoKZmxvYXQ0IHNSR0JUb0xpbmVhcihmbG9hdDQgc3JnYkluKQp7CiAgICBmbG9hdDMgcGFyYW0gPSBzcmdiSW4ueHl6OwogICAgcmV0dXJuIGZsb2F0NChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCmZsb2F0NCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2X2NvbG9yOwp9CgpmbG9hdDQgZ2V0QmFzZUNvbG9yKCkKewogICAgZmxvYXQ0IGJhc2VDb2xvciA9IHVpUGFyYW1zX2NvbG9yOwogICAgZmxvYXQ0IHBhcmFtID0gdV91aVRleHR1cmUuU2FtcGxlKF91X3VpVGV4dHVyZV9zYW1wbGVyLCB2X3V2MSk7CiAgICBmbG9hdDQgXzg4ID0gYmFzZUNvbG9yOwogICAgZmxvYXQ0IF84OSA9IF84OCAqIHNSR0JUb0xpbmVhcihwYXJhbSk7CiAgICBiYXNlQ29sb3IgPSBfODk7CiAgICByZXR1cm4gXzg5ICogZ2V0VmVydGV4Q29sb3IoKTsKfQoKZmxvYXQzIGxpbmVhclRvc1JHQihmbG9hdDMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NWYueHh4KTsKfQoKdm9pZCBmcmFnX21haW4oKQp7CiAgICBmbG9hdDQgXzk2ID0gZ2V0QmFzZUNvbG9yKCk7CiAgICBmbG9hdDMgcGFyYW0gPSBfOTYueHl6OwogICAgZ19maW5hbENvbG9yID0gZmxvYXQ0KGxpbmVhclRvc1JHQihwYXJhbSksIF85Ni53KTsKfQoKU1BJUlZfQ3Jvc3NfT3V0cHV0IG1haW4oU1BJUlZfQ3Jvc3NfSW5wdXQgc3RhZ2VfaW5wdXQpCnsKICAgIHZfY29sb3IgPSBzdGFnZV9pbnB1dC52X2NvbG9yOwogICAgdl91djEgPSBzdGFnZV9pbnB1dC52X3V2MTsKICAgIGZyYWdfbWFpbigpOwogICAgU1BJUlZfQ3Jvc3NfT3V0cHV0IHN0YWdlX291dHB1dDsKICAgIHN0YWdlX291dHB1dC5nX2ZpbmFsQ29sb3IgPSBnX2ZpbmFsQ29sb3I7CiAgICByZXR1cm4gc3RhZ2Vfb3V0cHV0Owp9ClJFRkzdAAAAdWlfVGV4VmM0X2hsc2w1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAdV91aVRleHR1cmUAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUAQAAAHVfZnNfdWlQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAdWlQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAABY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAAA=";
static const std::string mesh_UltUv1Vc4TxrFog_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUc4CwAAVkVSVENPREW+CAAAY2J1ZmZlciB1X3ZzX3BiclBhcmFtcyA6IHJlZ2lzdGVyKGIwKQp7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcGJyUGFyYW1zX21vZGVsTWF0cml4IDogcGFja29mZnNldChjMCk7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcGJyUGFyYW1zX25vcm1hbE1hdHJpeCA6IHBhY2tvZmZzZXQoYzQpOwogICAgcm93X21ham9yIGZsb2F0NHg0IHBiclBhcmFtc19tdnBNYXRyaXggOiBwYWNrb2Zmc2V0KGM4KTsKfTsKCmNidWZmZXIgdV92c19zcHJpdGVQYXJhbXMgOiByZWdpc3RlcihiMSkKewogICAgZmxvYXQ0IHNwcml0ZVBhcmFtc190ZXh0dXJlUmVjdCA6IHBhY2tvZmZzZXQoYzApOwp9OwoKCnN0YXRpYyBmbG9hdDQgZ2xfUG9zaXRpb247CnN0YXRpYyBmbG9hdDMgYV9wb3NpdGlvbjsKc3RhdGljIGZsb2F0MyB2X3Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQyIHZfdXYxOwpzdGF0aWMgZmxvYXQyIHZfdXYyOwpzdGF0aWMgZmxvYXQyIGFfdGV4Y29vcmQxOwpzdGF0aWMgZmxvYXQ0IHZfY29sb3I7CnN0YXRpYyBmbG9hdDQgYV9jb2xvcjsKCnN0cnVjdCBTUElSVl9Dcm9zc19JbnB1dAp7CiAgICBmbG9hdDMgYV9wb3NpdGlvbiA6IFBPU0lUSU9OOwogICAgZmxvYXQyIGFfdGV4Y29vcmQxIDogTk9STUFMOwogICAgZmxvYXQ0IGFfY29sb3IgOiBURVhDT09SRDA7Cn07CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfT3V0cHV0CnsKICAgIGZsb2F0MyB2X3Bvc2l0aW9uIDogVEVYQ09PUkQwOwogICAgZmxvYXQyIHZfdXYxIDogVEVYQ09PUkQxOwogICAgZmxvYXQyIHZfdXYyIDogVEVYQ09PUkQyOwogICAgZmxvYXQ0IHZfY29sb3IgOiBURVhDT09SRDM7CiAgICBmbG9hdDQgZ2xfUG9zaXRpb24gOiBTVl9Qb3NpdGlvbjsKfTsKCmZsb2F0NHg0IGdldEJvbmVUcmFuc2Zvcm0oKQp7CiAgICByZXR1cm4gZmxvYXQ0eDQoMC4wZi54eHh4LCAwLjBmLnh4eHgsIDAuMGYueHh4eCwgMC4wZi54eHh4KTsKfQoKZmxvYXQzIGdldE1vcnBoUG9zaXRpb24oZmxvYXQzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKZmxvYXQzIGdldFNraW5Qb3NpdGlvbihmbG9hdDMgcG9zLCBmbG9hdDR4NCBib25lVHJhbnNmb3JtKQp7CiAgICByZXR1cm4gcG9zOwp9CgpmbG9hdDQgZ2V0UG9zaXRpb24oZmxvYXQ0eDQgYm9uZVRyYW5zZm9ybSkKewogICAgZmxvYXQzIHBhcmFtID0gYV9wb3NpdGlvbjsKICAgIGZsb2F0MyBwYXJhbV8xID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBmbG9hdDR4NCBwYXJhbV8yID0gYm9uZVRyYW5zZm9ybTsKICAgIHJldHVybiBmbG9hdDQoZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpLCAxLjBmKTsKfQoKdm9pZCB2ZXJ0X21haW4oKQp7CiAgICBmbG9hdDR4NCBwYXJhbSA9IGdldEJvbmVUcmFuc2Zvcm0oKTsKICAgIGZsb2F0NCBfNjcgPSBnZXRQb3NpdGlvbihwYXJhbSk7CiAgICBmbG9hdDQgXzc4ID0gbXVsKF82NywgcGJyUGFyYW1zX21vZGVsTWF0cml4KTsKICAgIHZfcG9zaXRpb24gPSBmbG9hdDMoXzc4Lnh5eikgLyBfNzgudy54eHg7CiAgICB2X3V2MSA9IDAuMGYueHg7CiAgICB2X3V2MiA9IDAuMGYueHg7CiAgICB2X3V2MSA9IGFfdGV4Y29vcmQxOwogICAgdl91djEgPSAoYV90ZXhjb29yZDEgKiBzcHJpdGVQYXJhbXNfdGV4dHVyZVJlY3QuencpICsgc3ByaXRlUGFyYW1zX3RleHR1cmVSZWN0Lnh5OwogICAgdl9jb2xvciA9IGFfY29sb3I7CiAgICBnbF9Qb3NpdGlvbiA9IG11bChfNjcsIHBiclBhcmFtc19tdnBNYXRyaXgpOwogICAgZ2xfUG9zaXRpb24ueiA9IChnbF9Qb3NpdGlvbi56ICsgZ2xfUG9zaXRpb24udykgKiAwLjU7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICBhX3Bvc2l0aW9uID0gc3RhZ2VfaW5wdXQuYV9wb3NpdGlvbjsKICAgIGFfdGV4Y29vcmQxID0gc3RhZ2VfaW5wdXQuYV90ZXhjb29yZDE7CiAgICBhX2NvbG9yID0gc3RhZ2VfaW5wdXQuYV9jb2xvcjsKICAgIHZlcnRfbWFpbigpOwogICAgU1BJUlZfQ3Jvc3NfT3V0cHV0IHN0YWdlX291dHB1dDsKICAgIHN0YWdlX291dHB1dC5nbF9Qb3NpdGlvbiA9IGdsX1Bvc2l0aW9uOwogICAgc3RhZ2Vfb3V0cHV0LnZfcG9zaXRpb24gPSB2X3Bvc2l0aW9uOwogICAgc3RhZ2Vfb3V0cHV0LnZfdXYxID0gdl91djE7CiAgICBzdGFnZV9vdXRwdXQudl91djIgPSB2X3V2MjsKICAgIHN0YWdlX291dHB1dC52X2NvbG9yID0gdl9jb2xvcjsKICAgIHJldHVybiBzdGFnZV9vdXRwdXQ7Cn0KUkVGTGYCAABtZXNoX1VsdFV2MVZjNFR4ckZvZ19obHNsNQAAAAAAAAMAAAAAAAAAAgAAAAQAAABhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV90ZXhjb29yZDEAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMmFfY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQDAAAAdV92c19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAFtb2RlbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAG5vcm1hbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAABAAAAAbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAIAAAAABAAAAdV92c19zcHJpdGVQYXJhbXMAAAAAAAAAAAAAAAAAAABzcHJpdGVQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAEAAAAAF0ZXh0dXJlUmVjdAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAFNUQUdkCQAARlJBR0NPREWXBwAAY2J1ZmZlciB1X2ZzX3BiclBhcmFtcyA6IHJlZ2lzdGVyKGIwKQp7CiAgICBmbG9hdDQgcGJyUGFyYW1zX2Jhc2VDb2xvckZhY3RvciA6IHBhY2tvZmZzZXQoYzApOwogICAgZmxvYXQgcGJyUGFyYW1zX21ldGFsbGljRmFjdG9yIDogcGFja29mZnNldChjMSk7CiAgICBmbG9hdCBwYnJQYXJhbXNfcm91Z2huZXNzRmFjdG9yIDogcGFja29mZnNldChjMS55KTsKICAgIGZsb2F0MyBwYnJQYXJhbXNfZW1pc3NpdmVGYWN0b3IgOiBwYWNrb2Zmc2V0KGMyKTsKICAgIGZsb2F0MyBwYnJQYXJhbXNfYW1iaWVudExpZ2h0IDogcGFja29mZnNldChjMyk7CiAgICBmbG9hdCBwYnJQYXJhbXNfYW1iaWVudEZhY3RvciA6IHBhY2tvZmZzZXQoYzMudyk7Cn07CgpUZXh0dXJlMkQ8ZmxvYXQ0PiB1X2Jhc2VDb2xvclRleHR1cmUgOiByZWdpc3Rlcih0MCk7ClNhbXBsZXJTdGF0ZSBfdV9iYXNlQ29sb3JUZXh0dXJlX3NhbXBsZXIgOiByZWdpc3RlcihzMCk7CgpzdGF0aWMgZmxvYXQ0IHZfY29sb3I7CnN0YXRpYyBmbG9hdDIgdl91djE7CnN0YXRpYyBmbG9hdDMgdl9wb3NpdGlvbjsKc3RhdGljIGZsb2F0NCBnX2ZpbmFsQ29sb3I7CnN0YXRpYyBmbG9hdDIgdl91djI7CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfSW5wdXQKewogICAgZmxvYXQzIHZfcG9zaXRpb24gOiBURVhDT09SRDA7CiAgICBmbG9hdDIgdl91djEgOiBURVhDT09SRDE7CiAgICBmbG9hdDIgdl91djIgOiBURVhDT09SRDI7CiAgICBmbG9hdDQgdl9jb2xvciA6IFRFWENPT1JEMzsKfTsKCnN0cnVjdCBTUElSVl9Dcm9zc19PdXRwdXQKewogICAgZmxvYXQ0IGdfZmluYWxDb2xvciA6IFNWX1RhcmdldDA7Cn07CgpmbG9hdDMgc1JHQlRvTGluZWFyKGZsb2F0MyBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCAyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjVmLnh4eCk7Cn0KCmZsb2F0NCBzUkdCVG9MaW5lYXIoZmxvYXQ0IHNyZ2JJbikKewogICAgZmxvYXQzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiBmbG9hdDQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9CgpmbG9hdDQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdl9jb2xvcjsKfQoKZmxvYXQ0IGdldEJhc2VDb2xvcigpCnsKICAgIGZsb2F0NCBiYXNlQ29sb3IgPSBwYnJQYXJhbXNfYmFzZUNvbG9yRmFjdG9yOwogICAgZmxvYXQ0IHBhcmFtID0gdV9iYXNlQ29sb3JUZXh0dXJlLlNhbXBsZShfdV9iYXNlQ29sb3JUZXh0dXJlX3NhbXBsZXIsIHZfdXYxKTsKICAgIGZsb2F0NCBfMTAzID0gYmFzZUNvbG9yOwogICAgZmxvYXQ0IF8xMDQgPSBfMTAzICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8xMDQ7CiAgICByZXR1cm4gXzEwNCAqIGdldFZlcnRleENvbG9yKCk7Cn0KCmZsb2F0MyBsaW5lYXJUb3NSR0IoZmxvYXQzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCAwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzVmLnh4eCk7Cn0KCnZvaWQgZnJhZ19tYWluKCkKewogICAgZmxvYXQ0IF8yNTkgPSBnZXRCYXNlQ29sb3IoKTsKICAgIGZsb2F0MyBwYXJhbSA9IF8yNTkueHl6OwogICAgZ19maW5hbENvbG9yID0gZmxvYXQ0KGxpbmVhclRvc1JHQihwYXJhbSksIF8yNTkudyk7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICB2X2NvbG9yID0gc3RhZ2VfaW5wdXQudl9jb2xvcjsKICAgIHZfdXYxID0gc3RhZ2VfaW5wdXQudl91djE7CiAgICB2X3Bvc2l0aW9uID0gc3RhZ2VfaW5wdXQudl9wb3NpdGlvbjsKICAgIHZfdXYyID0gc3RhZ2VfaW5wdXQudl91djI7CiAgICBmcmFnX21haW4oKTsKICAgIFNQSVJWX0Nyb3NzX091dHB1dCBzdGFnZV9vdXRwdXQ7CiAgICBzdGFnZV9vdXRwdXQuZ19maW5hbENvbG9yID0gZ19maW5hbENvbG9yOwogICAgcmV0dXJuIHN0YWdlX291dHB1dDsKfQpSRUZMuQEAAG1lc2hfVWx0VXYxVmM0VHhyRm9nX2hsc2w1AAAAAAAAAAAAAAEAAAABAAAABgAAAHVfYmFzZUNvbG9yVGV4dHVyZQAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVAYAAAB1X2ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAWJhc2VDb2xvckZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAAbWV0YWxsaWNGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABAAAAByb3VnaG5lc3NGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAFAAAAGVtaXNzaXZlRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAgAAAAYW1iaWVudExpZ2h0AAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAADAAAABhbWJpZW50RmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAPAAAAA==";
static const std::string mesh_Uv1PucNorVc4_hlsl5 = "";
static const std::string mesh_PucShwPcfNorTanFogMtaMnrMtg_hlsl5 = "";
static const std::string mesh_Uv1PucShwPcfNorVc4Fog_hlsl5 = "";
static const std::string mesh_Uv1PucShwPcfNorFog_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUddDgAAVkVSVENPREXjCwAAY2J1ZmZlciB1X3ZzX3BiclBhcmFtcyA6IHJlZ2lzdGVyKGIwKQp7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcGJyUGFyYW1zX21vZGVsTWF0cml4IDogcGFja29mZnNldChjMCk7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcGJyUGFyYW1zX25vcm1hbE1hdHJpeCA6IHBhY2tvZmZzZXQoYzQpOwogICAgcm93X21ham9yIGZsb2F0NHg0IHBiclBhcmFtc19tdnBNYXRyaXggOiBwYWNrb2Zmc2V0KGM4KTsKfTsKCmNidWZmZXIgdV92c19zaGFkb3dzIDogcmVnaXN0ZXIoYjEpCnsKICAgIHJvd19tYWpvciBmbG9hdDR4NCBfMTcwX2xpZ2h0VlBNYXRyaXhbNl0gOiBwYWNrb2Zmc2V0KGMwKTsKfTsKCgpzdGF0aWMgZmxvYXQ0IGdsX1Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQzIGFfcG9zaXRpb247CnN0YXRpYyBmbG9hdDMgYV9ub3JtYWw7CnN0YXRpYyBmbG9hdDMgdl9wb3NpdGlvbjsKc3RhdGljIGZsb2F0MyB2X25vcm1hbDsKc3RhdGljIGZsb2F0MiB2X3V2MTsKc3RhdGljIGZsb2F0MiB2X3V2MjsKc3RhdGljIGZsb2F0MiBhX3RleGNvb3JkMTsKc3RhdGljIGZsb2F0NCB2X2xpZ2h0UHJvalBvc1s2XTsKc3RhdGljIGZsb2F0IHZfY2xpcFNwYWNlUG9zWjsKCnN0cnVjdCBTUElSVl9Dcm9zc19JbnB1dAp7CiAgICBmbG9hdDMgYV9wb3NpdGlvbiA6IFBPU0lUSU9OOwogICAgZmxvYXQzIGFfbm9ybWFsIDogTk9STUFMOwogICAgZmxvYXQyIGFfdGV4Y29vcmQxIDogVEVYQ09PUkQwOwp9OwoKc3RydWN0IFNQSVJWX0Nyb3NzX091dHB1dAp7CiAgICBmbG9hdDMgdl9wb3NpdGlvbiA6IFRFWENPT1JEMDsKICAgIGZsb2F0MyB2X25vcm1hbCA6IFRFWENPT1JEMTsKICAgIGZsb2F0MiB2X3V2MSA6IFRFWENPT1JEMjsKICAgIGZsb2F0MiB2X3V2MiA6IFRFWENPT1JEMzsKICAgIGZsb2F0NCB2X2xpZ2h0UHJvalBvc1s2XSA6IFRFWENPT1JENDsKICAgIGZsb2F0IHZfY2xpcFNwYWNlUG9zWiA6IFRFWENPT1JEMTA7CiAgICBmbG9hdDQgZ2xfUG9zaXRpb24gOiBTVl9Qb3NpdGlvbjsKfTsKCmZsb2F0NHg0IGdldEJvbmVUcmFuc2Zvcm0oKQp7CiAgICByZXR1cm4gZmxvYXQ0eDQoMC4wZi54eHh4LCAwLjBmLnh4eHgsIDAuMGYueHh4eCwgMC4wZi54eHh4KTsKfQoKZmxvYXQzIGdldE1vcnBoUG9zaXRpb24oZmxvYXQzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKZmxvYXQzIGdldFNraW5Qb3NpdGlvbihmbG9hdDMgcG9zLCBmbG9hdDR4NCBib25lVHJhbnNmb3JtKQp7CiAgICByZXR1cm4gcG9zOwp9CgpmbG9hdDQgZ2V0UG9zaXRpb24oZmxvYXQ0eDQgYm9uZVRyYW5zZm9ybSkKewogICAgZmxvYXQzIHBhcmFtID0gYV9wb3NpdGlvbjsKICAgIGZsb2F0MyBwYXJhbV8xID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBmbG9hdDR4NCBwYXJhbV8yID0gYm9uZVRyYW5zZm9ybTsKICAgIHJldHVybiBmbG9hdDQoZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpLCAxLjBmKTsKfQoKZmxvYXQzIGdldE1vcnBoTm9ybWFsKGZsb2F0MyBub3JtYWwpCnsKICAgIHJldHVybiBub3JtYWw7Cn0KCmZsb2F0MyBnZXRTa2luTm9ybWFsKGZsb2F0MyBub3JtYWwsIGZsb2F0NHg0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHJldHVybiBub3JtYWw7Cn0KCmZsb2F0MyBnZXROb3JtYWwoZmxvYXQ0eDQgYm9uZVRyYW5zZm9ybSkKewogICAgZmxvYXQzIHBhcmFtID0gYV9ub3JtYWw7CiAgICBmbG9hdDMgcGFyYW1fMSA9IGdldE1vcnBoTm9ybWFsKHBhcmFtKTsKICAgIGZsb2F0NHg0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIG5vcm1hbGl6ZShnZXRTa2luTm9ybWFsKHBhcmFtXzEsIHBhcmFtXzIpKTsKfQoKdm9pZCB2ZXJ0X21haW4oKQp7CiAgICBmbG9hdDR4NCBfOTQgPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICBmbG9hdDR4NCBwYXJhbSA9IF85NDsKICAgIGZsb2F0NCBfOTkgPSBnZXRQb3NpdGlvbihwYXJhbSk7CiAgICBmbG9hdDQgXzExMCA9IG11bChfOTksIHBiclBhcmFtc19tb2RlbE1hdHJpeCk7CiAgICB2X3Bvc2l0aW9uID0gZmxvYXQzKF8xMTAueHl6KSAvIF8xMTAudy54eHg7CiAgICBmbG9hdDR4NCBwYXJhbV8xID0gXzk0OwogICAgdl9ub3JtYWwgPSBub3JtYWxpemUoZmxvYXQzKG11bChmbG9hdDQoZ2V0Tm9ybWFsKHBhcmFtXzEpLCAwLjBmKSwgcGJyUGFyYW1zX25vcm1hbE1hdHJpeCkueHl6KSk7CiAgICB2X3V2MSA9IDAuMGYueHg7CiAgICB2X3V2MiA9IDAuMGYueHg7CiAgICB2X3V2MSA9IGFfdGV4Y29vcmQxOwogICAgZm9yIChpbnQgaSA9IDA7IGkgPCA2OyBpKyspCiAgICB7CiAgICAgICAgdl9saWdodFByb2pQb3NbaV0gPSBtdWwoXzExMCwgXzE3MF9saWdodFZQTWF0cml4W2ldKTsKICAgIH0KICAgIGdsX1Bvc2l0aW9uID0gbXVsKF85OSwgcGJyUGFyYW1zX212cE1hdHJpeCk7CiAgICB2X2NsaXBTcGFjZVBvc1ogPSBnbF9Qb3NpdGlvbi56OwogICAgZ2xfUG9zaXRpb24ueiA9IChnbF9Qb3NpdGlvbi56ICsgZ2xfUG9zaXRpb24udykgKiAwLjU7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICBhX3Bvc2l0aW9uID0gc3RhZ2VfaW5wdXQuYV9wb3NpdGlvbjsKICAgIGFfbm9ybWFsID0gc3RhZ2VfaW5wdXQuYV9ub3JtYWw7CiAgICBhX3RleGNvb3JkMSA9IHN0YWdlX2lucHV0LmFfdGV4Y29vcmQxOwogICAgdmVydF9tYWluKCk7CiAgICBTUElSVl9Dcm9zc19PdXRwdXQgc3RhZ2Vfb3V0cHV0OwogICAgc3RhZ2Vfb3V0cHV0LmdsX1Bvc2l0aW9uID0gZ2xfUG9zaXRpb247CiAgICBzdGFnZV9vdXRwdXQudl9wb3NpdGlvbiA9IHZfcG9zaXRpb247CiAgICBzdGFnZV9vdXRwdXQudl9ub3JtYWwgPSB2X25vcm1hbDsKICAgIHN0YWdlX291dHB1dC52X3V2MSA9IHZfdXYxOwogICAgc3RhZ2Vfb3V0cHV0LnZfdXYyID0gdl91djI7CiAgICBzdGFnZV9vdXRwdXQudl9saWdodFByb2pQb3MgPSB2X2xpZ2h0UHJvalBvczsKICAgIHN0YWdlX291dHB1dC52X2NsaXBTcGFjZVBvc1ogPSB2X2NsaXBTcGFjZVBvc1o7CiAgICByZXR1cm4gc3RhZ2Vfb3V0cHV0Owp9ClJFRkxmAgAAbWVzaF9VdjFQdWNTaHdQY2ZOb3JGb2dfaGxzbDUAAAADAAAAAAAAAAIAAAAEAAAAYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2Ffbm9ybWFsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDNhX3RleGNvb3JkMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQyAwAAAHVfdnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAABbW9kZWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABub3JtYWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAQAAAAG12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAACAAAAAAQAAAHVfdnNfc2hhZG93cwAAAAAAAAAAAAAAAAAAAAAAAAAAXzE3MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAIABAAABbGlnaHRWUE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0BgAAAAAAAABTVEFHbF0AAEZSQUdDT0RFbFcAAHN0cnVjdCBNYXRlcmlhbEluZm8KewogICAgZmxvYXQgcGVyY2VwdHVhbFJvdWdobmVzczsKICAgIGZsb2F0MyBmMDsKICAgIGZsb2F0IGFscGhhUm91Z2huZXNzOwogICAgZmxvYXQzIGFsYmVkb0NvbG9yOwogICAgZmxvYXQzIGY5MDsKICAgIGZsb2F0IG1ldGFsbGljOwogICAgZmxvYXQzIG47CiAgICBmbG9hdDMgYmFzZUNvbG9yOwp9OwoKc3RydWN0IE5vcm1hbEluZm8KewogICAgZmxvYXQzIG5nOwogICAgZmxvYXQzIG47CiAgICBmbG9hdDMgdDsKICAgIGZsb2F0MyBiOwp9OwoKc3RydWN0IExpZ2h0CnsKICAgIGludCB0eXBlOwogICAgZmxvYXQzIGRpcmVjdGlvbjsKICAgIGZsb2F0MyBjb2xvcjsKICAgIGZsb2F0MyBwb3NpdGlvbjsKICAgIGZsb2F0IHJhbmdlOwogICAgZmxvYXQgaW50ZW5zaXR5OwogICAgZmxvYXQgaW5uZXJDb25lQ29zOwogICAgZmxvYXQgb3V0ZXJDb25lQ29zOwogICAgYm9vbCBzaGFkb3dzOwogICAgaW50IHNoYWRvd01hcEluZGV4OwogICAgaW50IG51bVNoYWRvd0Nhc2NhZGVzOwp9OwoKc3RydWN0IFNoYWRvdwp7CiAgICBmbG9hdCBtYXhCaWFzOwogICAgZmxvYXQgbWluQmlhczsKICAgIGZsb2F0MiBtYXBTaXplOwogICAgZmxvYXQyIG5lYXJGYXI7CiAgICBmbG9hdDQgbGlnaHRQcm9qUG9zOwp9OwoKc3RhdGljIGNvbnN0IFNoYWRvdyBfNjQ5ID0geyAwLjBmLCAwLjBmLCAwLjBmLnh4LCAwLjBmLnh4LCAwLjBmLnh4eHggfTsKCmNidWZmZXIgdV9mc19wYnJQYXJhbXMgOiByZWdpc3RlcihiMCkKewogICAgZmxvYXQ0IHBiclBhcmFtc19iYXNlQ29sb3JGYWN0b3IgOiBwYWNrb2Zmc2V0KGMwKTsKICAgIGZsb2F0IHBiclBhcmFtc19tZXRhbGxpY0ZhY3RvciA6IHBhY2tvZmZzZXQoYzEpOwogICAgZmxvYXQgcGJyUGFyYW1zX3JvdWdobmVzc0ZhY3RvciA6IHBhY2tvZmZzZXQoYzEueSk7CiAgICBmbG9hdDMgcGJyUGFyYW1zX2VtaXNzaXZlRmFjdG9yIDogcGFja29mZnNldChjMik7CiAgICBmbG9hdDMgcGJyUGFyYW1zX2FtYmllbnRMaWdodCA6IHBhY2tvZmZzZXQoYzMpOwogICAgZmxvYXQgcGJyUGFyYW1zX2FtYmllbnRGYWN0b3IgOiBwYWNrb2Zmc2V0KGMzLncpOwp9OwoKY2J1ZmZlciB1X2ZzX3NoYWRvd3MgOiByZWdpc3RlcihiMSkKewogICAgZmxvYXQ0IHVTaGFkb3dzX2JpYXNfdGV4U2l6ZV9uZWFyRmFyWzddIDogcGFja29mZnNldChjMCk7Cn07CgpjYnVmZmVyIHVfZnNfbGlnaHRpbmcgOiByZWdpc3RlcihiMikKewogICAgZmxvYXQ0IGxpZ2h0aW5nX2RpcmVjdGlvbl9yYW5nZVs2XSA6IHBhY2tvZmZzZXQoYzApOwogICAgZmxvYXQ0IGxpZ2h0aW5nX2NvbG9yX2ludGVuc2l0eVs2XSA6IHBhY2tvZmZzZXQoYzYpOwogICAgZmxvYXQ0IGxpZ2h0aW5nX3Bvc2l0aW9uX3R5cGVbNl0gOiBwYWNrb2Zmc2V0KGMxMik7CiAgICBmbG9hdDQgbGlnaHRpbmdfaW5Db25lX291Q29uZV9zaGFkb3dzX2Nhc2NhZGVzWzZdIDogcGFja29mZnNldChjMTgpOwogICAgZmxvYXQ0IGxpZ2h0aW5nX2V5ZVBvcyA6IHBhY2tvZmZzZXQoYzI0KTsKfTsKCmNidWZmZXIgdV9mc19mb2cgOiByZWdpc3RlcihiMykKewogICAgZmxvYXQ0IGZvZ19jb2xvcl90eXBlIDogcGFja29mZnNldChjMCk7CiAgICBmbG9hdDQgZm9nX2RlbnNpdHlfc3RhcnRfZW5kIDogcGFja29mZnNldChjMSk7Cn07CgpUZXh0dXJlMkQ8ZmxvYXQ0PiB1X2Jhc2VDb2xvclRleHR1cmUgOiByZWdpc3Rlcih0MCk7ClNhbXBsZXJTdGF0ZSBfdV9iYXNlQ29sb3JUZXh0dXJlX3NhbXBsZXIgOiByZWdpc3RlcihzMCk7ClRleHR1cmUyRDxmbG9hdDQ+IHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlIDogcmVnaXN0ZXIodDEpOwpTYW1wbGVyU3RhdGUgX3VfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlX3NhbXBsZXIgOiByZWdpc3RlcihzMSk7ClRleHR1cmUyRDxmbG9hdDQ+IHVfb2NjbHVzaW9uVGV4dHVyZSA6IHJlZ2lzdGVyKHQyKTsKU2FtcGxlclN0YXRlIF91X29jY2x1c2lvblRleHR1cmVfc2FtcGxlciA6IHJlZ2lzdGVyKHMyKTsKVGV4dHVyZTJEPGZsb2F0ND4gdV9lbWlzc2l2ZVRleHR1cmUgOiByZWdpc3Rlcih0Myk7ClNhbXBsZXJTdGF0ZSBfdV9lbWlzc2l2ZVRleHR1cmVfc2FtcGxlciA6IHJlZ2lzdGVyKHMzKTsKVGV4dHVyZTJEPGZsb2F0ND4gdV9zaGFkb3dNYXAxIDogcmVnaXN0ZXIodDQpOwpTYW1wbGVyU3RhdGUgX3Vfc2hhZG93TWFwMV9zYW1wbGVyIDogcmVnaXN0ZXIoczQpOwpUZXh0dXJlMkQ8ZmxvYXQ0PiB1X3NoYWRvd01hcDIgOiByZWdpc3Rlcih0NSk7ClNhbXBsZXJTdGF0ZSBfdV9zaGFkb3dNYXAyX3NhbXBsZXIgOiByZWdpc3RlcihzNSk7ClRleHR1cmUyRDxmbG9hdDQ+IHVfc2hhZG93TWFwMyA6IHJlZ2lzdGVyKHQ2KTsKU2FtcGxlclN0YXRlIF91X3NoYWRvd01hcDNfc2FtcGxlciA6IHJlZ2lzdGVyKHM2KTsKVGV4dHVyZTJEPGZsb2F0ND4gdV9zaGFkb3dNYXA0IDogcmVnaXN0ZXIodDcpOwpTYW1wbGVyU3RhdGUgX3Vfc2hhZG93TWFwNF9zYW1wbGVyIDogcmVnaXN0ZXIoczcpOwpUZXh0dXJlMkQ8ZmxvYXQ0PiB1X3NoYWRvd01hcDUgOiByZWdpc3Rlcih0OCk7ClNhbXBsZXJTdGF0ZSBfdV9zaGFkb3dNYXA1X3NhbXBsZXIgOiByZWdpc3RlcihzOCk7ClRleHR1cmUyRDxmbG9hdDQ+IHVfc2hhZG93TWFwNiA6IHJlZ2lzdGVyKHQ5KTsKU2FtcGxlclN0YXRlIF91X3NoYWRvd01hcDZfc2FtcGxlciA6IHJlZ2lzdGVyKHM5KTsKVGV4dHVyZUN1YmU8ZmxvYXQ0PiB1X3NoYWRvd0N1YmVNYXAxIDogcmVnaXN0ZXIodDEwKTsKU2FtcGxlclN0YXRlIF91X3NoYWRvd0N1YmVNYXAxX3NhbXBsZXIgOiByZWdpc3RlcihzMTApOwoKc3RhdGljIGZsb2F0NCBnbF9GcmFnQ29vcmQ7CnN0YXRpYyBmbG9hdDIgdl91djE7CnN0YXRpYyBmbG9hdDMgdl9wb3NpdGlvbjsKc3RhdGljIGZsb2F0MyB2X25vcm1hbDsKc3RhdGljIGZsb2F0NCB2X2xpZ2h0UHJvalBvc1s2XTsKc3RhdGljIGZsb2F0IHZfY2xpcFNwYWNlUG9zWjsKc3RhdGljIGZsb2F0NCBnX2ZpbmFsQ29sb3I7CnN0YXRpYyBmbG9hdDIgdl91djI7CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfSW5wdXQKewogICAgZmxvYXQzIHZfcG9zaXRpb24gOiBURVhDT09SRDA7CiAgICBmbG9hdDMgdl9ub3JtYWwgOiBURVhDT09SRDE7CiAgICBmbG9hdDIgdl91djEgOiBURVhDT09SRDI7CiAgICBmbG9hdDIgdl91djIgOiBURVhDT09SRDM7CiAgICBmbG9hdDQgdl9saWdodFByb2pQb3NbNl0gOiBURVhDT09SRDQ7CiAgICBmbG9hdCB2X2NsaXBTcGFjZVBvc1ogOiBURVhDT09SRDEwOwogICAgZmxvYXQ0IGdsX0ZyYWdDb29yZCA6IFNWX1Bvc2l0aW9uOwp9OwoKc3RydWN0IFNQSVJWX0Nyb3NzX091dHB1dAp7CiAgICBmbG9hdDQgZ19maW5hbENvbG9yIDogU1ZfVGFyZ2V0MDsKfTsKCmZsb2F0MyBzUkdCVG9MaW5lYXIoZmxvYXQzIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNWYueHh4KTsKfQoKZmxvYXQ0IHNSR0JUb0xpbmVhcihmbG9hdDQgc3JnYkluKQp7CiAgICBmbG9hdDMgcGFyYW0gPSBzcmdiSW4ueHl6OwogICAgcmV0dXJuIGZsb2F0NChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCmZsb2F0NCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiAxLjBmLnh4eHg7Cn0KCmZsb2F0NCBnZXRCYXNlQ29sb3IoKQp7CiAgICBmbG9hdDQgYmFzZUNvbG9yID0gcGJyUGFyYW1zX2Jhc2VDb2xvckZhY3RvcjsKICAgIGZsb2F0NCBwYXJhbSA9IHVfYmFzZUNvbG9yVGV4dHVyZS5TYW1wbGUoX3VfYmFzZUNvbG9yVGV4dHVyZV9zYW1wbGVyLCB2X3V2MSk7CiAgICBmbG9hdDQgXzIzMiA9IGJhc2VDb2xvcjsKICAgIGZsb2F0NCBfMjMzID0gXzIzMiAqIHNSR0JUb0xpbmVhcihwYXJhbSk7CiAgICBiYXNlQ29sb3IgPSBfMjMzOwogICAgcmV0dXJuIF8yMzMgKiBnZXRWZXJ0ZXhDb2xvcigpOwp9CgpOb3JtYWxJbmZvIGdldE5vcm1hbEluZm8oKQp7CiAgICBmbG9hdDMgXzMxNCA9IGZsb2F0Myh2X3V2MSwgMC4wZik7CiAgICBmbG9hdDMgXzMxNSA9IGRkeChfMzE0KTsKICAgIGZsb2F0MyBfMzIxID0gZGR5KF8zMTQpOwogICAgZmxvYXQgXzMyNCA9IF8zMjEueTsKICAgIGZsb2F0IF8zMzEgPSBfMzE1Lnk7CiAgICBmbG9hdDMgXzM0OSA9ICgoZGR4KHZfcG9zaXRpb24pICogXzMyNCkgLSAoZGR5KHZfcG9zaXRpb24pICogXzMzMSkpIC8gKChfMzE1LnggKiBfMzI0KSAtIChfMzIxLnggKiBfMzMxKSkueHh4OwogICAgZmxvYXQzIF8zNTMgPSBub3JtYWxpemUodl9ub3JtYWwpOwogICAgZmxvYXQzIF8zNjIgPSBub3JtYWxpemUoXzM0OSAtIChfMzUzICogZG90KF8zNTMsIF8zNDkpKSk7CiAgICBOb3JtYWxJbmZvIF8xNjYyID0geyBfMzUzLCBfMzUzLCBfMzYyLCBjcm9zcyhfMzUzLCBfMzYyKSB9OwogICAgcmV0dXJuIF8xNjYyOwp9CgpNYXRlcmlhbEluZm8gZ2V0TWV0YWxsaWNSb3VnaG5lc3NJbmZvKGlub3V0IE1hdGVyaWFsSW5mbyBpbmZvLCBmbG9hdCBmMF9pb3IpCnsKICAgIGluZm8ubWV0YWxsaWMgPSBwYnJQYXJhbXNfbWV0YWxsaWNGYWN0b3I7CiAgICBpbmZvLnBlcmNlcHR1YWxSb3VnaG5lc3MgPSBwYnJQYXJhbXNfcm91Z2huZXNzRmFjdG9yOwogICAgZmxvYXQ0IF8yNTMgPSB1X21ldGFsbGljUm91Z2huZXNzVGV4dHVyZS5TYW1wbGUoX3VfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlX3NhbXBsZXIsIHZfdXYxKTsKICAgIGluZm8ucGVyY2VwdHVhbFJvdWdobmVzcyAqPSBfMjUzLnk7CiAgICBpbmZvLm1ldGFsbGljICo9IF8yNTMuejsKICAgIGZsb2F0MyBfMjcwID0gZjBfaW9yLnh4eDsKICAgIGluZm8uYWxiZWRvQ29sb3IgPSBsZXJwKGluZm8uYmFzZUNvbG9yICogKDEuMGYueHh4IC0gXzI3MCksIDAuMGYueHh4LCBpbmZvLm1ldGFsbGljLnh4eCk7CiAgICBpbmZvLmYwID0gbGVycChfMjcwLCBpbmZvLmJhc2VDb2xvciwgaW5mby5tZXRhbGxpYy54eHgpOwogICAgcmV0dXJuIGluZm87Cn0KCmZsb2F0NCBnZXRPY2NsdXNpb25UZXh0dXJlKCkKewogICAgcmV0dXJuIHVfb2NjbHVzaW9uVGV4dHVyZS5TYW1wbGUoX3Vfb2NjbHVzaW9uVGV4dHVyZV9zYW1wbGVyLCB2X3V2MSk7Cn0KCmZsb2F0IGNsYW1wZWREb3QoZmxvYXQzIHgsIGZsb2F0MyB5KQp7CiAgICByZXR1cm4gY2xhbXAoZG90KHgsIHkpLCAwLjBmLCAxLjBmKTsKfQoKU2hhZG93IGdldFNoYWRvdzJEQ29uZihpbnQgaW5kZXgpCnsKICAgIGZvciAoaW50IGkgPSAwOyBpIDwgNjsgaSsrKQogICAgewogICAgICAgIGlmIChpID09IGluZGV4KQogICAgICAgIHsKICAgICAgICAgICAgU2hhZG93IF82NDMgPSB7IHVTaGFkb3dzX2JpYXNfdGV4U2l6ZV9uZWFyRmFyW2ldLngsIHVTaGFkb3dzX2JpYXNfdGV4U2l6ZV9uZWFyRmFyW2ldLnggKiAwLjEwMDAwMDAwMTQ5MDExNjExOTM4NDc2NTYyNWYsIHVTaGFkb3dzX2JpYXNfdGV4U2l6ZV9uZWFyRmFyW2ldLnl5LCB1U2hhZG93c19iaWFzX3RleFNpemVfbmVhckZhcltpXS56dywgdl9saWdodFByb2pQb3NbaV0gfTsKICAgICAgICAgICAgcmV0dXJuIF82NDM7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIF82NDk7Cn0KCmZsb2F0NCBnZXRTaGFkb3dNYXAoaW50IGluZGV4LCBmbG9hdDIgY29vcmRzKQp7CiAgICBpZiAoaW5kZXggPT0gMCkKICAgIHsKICAgICAgICByZXR1cm4gdV9zaGFkb3dNYXAxLlNhbXBsZShfdV9zaGFkb3dNYXAxX3NhbXBsZXIsIGNvb3Jkcyk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgaWYgKGluZGV4ID09IDEpCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gdV9zaGFkb3dNYXAyLlNhbXBsZShfdV9zaGFkb3dNYXAyX3NhbXBsZXIsIGNvb3Jkcyk7CiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgIGlmIChpbmRleCA9PSAyKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICByZXR1cm4gdV9zaGFkb3dNYXAzLlNhbXBsZShfdV9zaGFkb3dNYXAzX3NhbXBsZXIsIGNvb3Jkcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT0gMykKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdV9zaGFkb3dNYXA0LlNhbXBsZShfdV9zaGFkb3dNYXA0X3NhbXBsZXIsIGNvb3Jkcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IDQpCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdV9zaGFkb3dNYXA1LlNhbXBsZShfdV9zaGFkb3dNYXA1X3NhbXBsZXIsIGNvb3Jkcyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSA1KQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdV9zaGFkb3dNYXA2LlNhbXBsZShfdV9zaGFkb3dNYXA2X3NhbXBsZXIsIGNvb3Jkcyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gMC4wZi54eHh4Owp9CgpmbG9hdCBkZWNvZGVEZXB0aChmbG9hdDQgcmdiYSkKewogICAgcmV0dXJuIGRvdChyZ2JhLCBmbG9hdDQoMS4wZiwgMC4wMDM5MjE1Njg4NTkzNjg1NjI2OTgzNjQyNTc4MTI1ZiwgMS41Mzc4NzAwNDgxOTYwNTQ5OTUwNTk5NjcwNDEwMTU2ZS0wNWYsIDYuMDMwODYyOTIwMTY5OTY1OTQ2MTE1NTUzMzc5MDU4OGUtMDhmKSk7Cn0KCmZsb2F0IHNoYWRvd0NvbXBhcmUoaW50IHNoYWRvd01hcEluZGV4LCBmbG9hdCBjdXJyZW50RGVwdGgsIGZsb2F0IGJpYXMsIGZsb2F0MiB0ZXhDb29yZHMpCnsKICAgIGludCBwYXJhbSA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQyIHBhcmFtXzEgPSB0ZXhDb29yZHM7CiAgICBmbG9hdDQgcGFyYW1fMiA9IGdldFNoYWRvd01hcChwYXJhbSwgcGFyYW1fMSk7CiAgICByZXR1cm4gZmxvYXQoKGN1cnJlbnREZXB0aCAtIGJpYXMpID4gZGVjb2RlRGVwdGgocGFyYW1fMikpOwp9CgpmbG9hdCBzaGFkb3dDYWxjdWxhdGlvbkF1eChpbnQgc2hhZG93TWFwSW5kZXgsIFNoYWRvdyBzaGFkb3dDb25mLCBmbG9hdCBOZG90TCkKewogICAgZmxvYXQgc2hhZG93ID0gMC4wZjsKICAgIGZsb2F0MyBfODE2ID0gKChzaGFkb3dDb25mLmxpZ2h0UHJvalBvcy54eXogLyBzaGFkb3dDb25mLmxpZ2h0UHJvalBvcy53Lnh4eCkgKiAwLjVmKSArIDAuNWYueHh4OwogICAgZmxvYXQgXzgxOSA9IF84MTYuejsKICAgIGZsb2F0IF84MjggPSBtYXgoc2hhZG93Q29uZi5tYXhCaWFzICogKDEuMGYgLSBOZG90TCksIHNoYWRvd0NvbmYubWluQmlhcyk7CiAgICBmbG9hdDIgXzgzMyA9IDEuMGYueHggLyBzaGFkb3dDb25mLm1hcFNpemU7CiAgICBmb3IgKGludCB4ID0gLTE7IHggPD0gMTsgeCsrKQogICAgewogICAgICAgIGZvciAoaW50IHkgPSAtMTsgeSA8PSAxOyB5KyspCiAgICAgICAgewogICAgICAgICAgICBpbnQgcGFyYW0gPSBzaGFkb3dNYXBJbmRleDsKICAgICAgICAgICAgZmxvYXQgcGFyYW1fMSA9IF84MTk7CiAgICAgICAgICAgIGZsb2F0IHBhcmFtXzIgPSBfODI4OwogICAgICAgICAgICBmbG9hdDIgcGFyYW1fMyA9IF84MTYueHkgKyAoZmxvYXQyKGZsb2F0KHgpLCBmbG9hdCh5KSkgKiBfODMzKTsKICAgICAgICAgICAgc2hhZG93ICs9IHNoYWRvd0NvbXBhcmUocGFyYW0sIHBhcmFtXzEsIHBhcmFtXzIsIHBhcmFtXzMpOwogICAgICAgIH0KICAgIH0KICAgIHNoYWRvdyAqPSAwLjExMTExMTExMTkzODk1MzM5OTY1ODIwMzEyNWY7CiAgICBpZiAoXzgxOSA+IDEuMGYpCiAgICB7CiAgICAgICAgc2hhZG93ID0gMC4wZjsKICAgIH0KICAgIHJldHVybiBzaGFkb3c7Cn0KCmZsb2F0IHNoYWRvd0NhbGN1bGF0aW9uUENGKGludCBzaGFkb3dNYXBJbmRleCwgZmxvYXQgTmRvdEwpCnsKICAgIGludCBwYXJhbSA9IHNoYWRvd01hcEluZGV4OwogICAgaW50IHBhcmFtXzEgPSBzaGFkb3dNYXBJbmRleDsKICAgIFNoYWRvdyBwYXJhbV8yID0gZ2V0U2hhZG93MkRDb25mKHBhcmFtKTsKICAgIGZsb2F0IHBhcmFtXzMgPSBOZG90TDsKICAgIHJldHVybiBzaGFkb3dDYWxjdWxhdGlvbkF1eChwYXJhbV8xLCBwYXJhbV8yLCBwYXJhbV8zKTsKfQoKZmxvYXQgc2hhZG93Q2FzY2FkZWRDYWxjdWxhdGlvblBDRihpbnQgc2hhZG93TWFwSW5kZXgsIGludCBudW1TaGFkb3dDYXNjYWRlcywgZmxvYXQgTmRvdEwpCnsKICAgIGZvciAoaW50IGMgPSAwOyBjIDwgNDsgYysrKQogICAgewogICAgICAgIGlmIChjIDwgbnVtU2hhZG93Q2FzY2FkZXMpCiAgICAgICAgewogICAgICAgICAgICBpbnQgXzkxNSA9IHNoYWRvd01hcEluZGV4ICsgYzsKICAgICAgICAgICAgaW50IHBhcmFtID0gXzkxNTsKICAgICAgICAgICAgU2hhZG93IF85MTkgPSBnZXRTaGFkb3cyRENvbmYocGFyYW0pOwogICAgICAgICAgICBmbG9hdDIgXzE2ODcgPSBfOTE5Lm5lYXJGYXI7CiAgICAgICAgICAgIGJvb2wgXzkyNSA9IHZfY2xpcFNwYWNlUG9zWiA+PSBfMTY4Ny54OwogICAgICAgICAgICBib29sIF85MzI7CiAgICAgICAgICAgIGlmIChfOTI1KQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBfOTMyID0gdl9jbGlwU3BhY2VQb3NaIDw9IF8xNjg3Lnk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBfOTMyID0gXzkyNTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoXzkzMikKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaW50IHBhcmFtXzEgPSBfOTE1OwogICAgICAgICAgICAgICAgU2hhZG93IHBhcmFtXzIgPSBfOTE5OwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMyA9IE5kb3RMOwogICAgICAgICAgICAgICAgcmV0dXJuIHNoYWRvd0NhbGN1bGF0aW9uQXV4KHBhcmFtXzEsIHBhcmFtXzIsIHBhcmFtXzMpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIDAuMGY7Cn0KClNoYWRvdyBnZXRTaGFkb3dDdWJlQ29uZihpbnQgaW5kZXgpCnsKICAgIGZvciAoaW50IGkgPSA2OyBpIDwgNzsgaSsrKQogICAgewogICAgICAgIGlmIChpID09IGluZGV4KQogICAgICAgIHsKICAgICAgICAgICAgU2hhZG93IF82ODAgPSB7IHVTaGFkb3dzX2JpYXNfdGV4U2l6ZV9uZWFyRmFyW2ldLngsIHVTaGFkb3dzX2JpYXNfdGV4U2l6ZV9uZWFyRmFyW2ldLnggKiAwLjEwMDAwMDAwMTQ5MDExNjExOTM4NDc2NTYyNWYsIHVTaGFkb3dzX2JpYXNfdGV4U2l6ZV9uZWFyRmFyW2ldLnl5LCB1U2hhZG93c19iaWFzX3RleFNpemVfbmVhckZhcltpXS56dywgMC4wZi54eHh4IH07CiAgICAgICAgICAgIHJldHVybiBfNjgwOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBfNjQ5Owp9CgpmbG9hdCBkaXN0YW5jZVRvRGVwdGhWYWx1ZShmbG9hdDMgX2Rpc3RhbmNlLCBmbG9hdDIgY2FsY05lYXJGYXIpCnsKICAgIGZsb2F0MyBfOTQ5ID0gYWJzKF9kaXN0YW5jZSk7CiAgICByZXR1cm4gY2FsY05lYXJGYXIueCArIChjYWxjTmVhckZhci55IC8gbWF4KF85NDkueCwgbWF4KF85NDkueSwgXzk0OS56KSkpOwp9CgpmbG9hdDQgZ2V0U2hhZG93Q3ViZU1hcChpbm91dCBpbnQgaW5kZXgsIGZsb2F0MyBjb29yZHMpCnsKICAgIGluZGV4IC09IDY7CiAgICBpZiAoaW5kZXggPT0gMCkKICAgIHsKICAgICAgICByZXR1cm4gdV9zaGFkb3dDdWJlTWFwMS5TYW1wbGUoX3Vfc2hhZG93Q3ViZU1hcDFfc2FtcGxlciwgY29vcmRzKTsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgIH0KICAgIHJldHVybiAwLjBmLnh4eHg7Cn0KCmZsb2F0IHNoYWRvd0N1YmVDb21wYXJlKGludCBzaGFkb3dNYXBJbmRleCwgZmxvYXQgY3VycmVudERlcHRoLCBmbG9hdCBiaWFzLCBmbG9hdDMgdGV4Q29vcmRzKQp7CiAgICBpbnQgcGFyYW0gPSBzaGFkb3dNYXBJbmRleDsKICAgIGZsb2F0MyBwYXJhbV8xID0gdGV4Q29vcmRzOwogICAgZmxvYXQ0IF85NzMgPSBnZXRTaGFkb3dDdWJlTWFwKHBhcmFtLCBwYXJhbV8xKTsKICAgIGZsb2F0NCBwYXJhbV8yID0gXzk3MzsKICAgIGlmICgoY3VycmVudERlcHRoIC0gYmlhcykgPiBkZWNvZGVEZXB0aChwYXJhbV8yKSkKICAgIHsKICAgICAgICByZXR1cm4gMS4wZjsKICAgIH0KICAgIHJldHVybiAwLjBmOwp9CgpmbG9hdCBzaGFkb3dDdWJlQ2FsY3VsYXRpb25QQ0YoaW50IHNoYWRvd01hcEluZGV4LCBmbG9hdDMgZnJhZ1RvTGlnaHQsIGZsb2F0IE5kb3RMKQp7CiAgICBpbnQgcGFyYW0gPSBzaGFkb3dNYXBJbmRleDsKICAgIFNoYWRvdyBfOTg5ID0gZ2V0U2hhZG93Q3ViZUNvbmYocGFyYW0pOwogICAgZmxvYXQzIHBhcmFtXzEgPSBmcmFnVG9MaWdodDsKICAgIGZsb2F0MiBwYXJhbV8yID0gXzk4OS5uZWFyRmFyOwogICAgZmxvYXQgXzk5NiA9IGRpc3RhbmNlVG9EZXB0aFZhbHVlKHBhcmFtXzEsIHBhcmFtXzIpOwogICAgZmxvYXQgc2hhZG93ID0gMC4wZjsKICAgIGZsb2F0IF8xMDA2ID0gbWF4KF85ODkubWF4QmlhcyAqICgxLjBmIC0gTmRvdEwpLCBfOTg5Lm1pbkJpYXMpOwogICAgZmxvYXQgXzEwMTEgPSBsZW5ndGgoZnJhZ1RvTGlnaHQpICogMC4wMDA1MDAwMDAwMjM3NDg3MjU2NTI2OTQ3MDIxNDg0Mzc1ZjsKICAgIGludCBwYXJhbV8zID0gc2hhZG93TWFwSW5kZXg7CiAgICBmbG9hdCBwYXJhbV80ID0gXzk5NjsKICAgIGZsb2F0IHBhcmFtXzUgPSBfMTAwNjsKICAgIGZsb2F0MyBwYXJhbV82ID0gZnJhZ1RvTGlnaHQ7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMywgcGFyYW1fNCwgcGFyYW1fNSwgcGFyYW1fNik7CiAgICBpbnQgcGFyYW1fNyA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fOCA9IF85OTY7CiAgICBmbG9hdCBwYXJhbV85ID0gXzEwMDY7CiAgICBmbG9hdDMgcGFyYW1fMTAgPSBmcmFnVG9MaWdodCArICgxLjBmLnh4eCAqIF8xMDExKTsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV83LCBwYXJhbV84LCBwYXJhbV85LCBwYXJhbV8xMCk7CiAgICBpbnQgcGFyYW1fMTEgPSBzaGFkb3dNYXBJbmRleDsKICAgIGZsb2F0IHBhcmFtXzEyID0gXzk5NjsKICAgIGZsb2F0IHBhcmFtXzEzID0gXzEwMDY7CiAgICBmbG9hdDMgcGFyYW1fMTQgPSBmcmFnVG9MaWdodCArIChmbG9hdDMoMS4wZiwgLTEuMGYsIDEuMGYpICogXzEwMTEpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzExLCBwYXJhbV8xMiwgcGFyYW1fMTMsIHBhcmFtXzE0KTsKICAgIGludCBwYXJhbV8xNSA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fMTYgPSBfOTk2OwogICAgZmxvYXQgcGFyYW1fMTcgPSBfMTAwNjsKICAgIGZsb2F0MyBwYXJhbV8xOCA9IGZyYWdUb0xpZ2h0ICsgKGZsb2F0MygtMS4wZiwgLTEuMGYsIDEuMGYpICogXzEwMTEpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzE1LCBwYXJhbV8xNiwgcGFyYW1fMTcsIHBhcmFtXzE4KTsKICAgIGludCBwYXJhbV8xOSA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fMjAgPSBfOTk2OwogICAgZmxvYXQgcGFyYW1fMjEgPSBfMTAwNjsKICAgIGZsb2F0MyBwYXJhbV8yMiA9IGZyYWdUb0xpZ2h0ICsgKGZsb2F0MygtMS4wZiwgMS4wZiwgMS4wZikgKiBfMTAxMSk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMTksIHBhcmFtXzIwLCBwYXJhbV8yMSwgcGFyYW1fMjIpOwogICAgaW50IHBhcmFtXzIzID0gc2hhZG93TWFwSW5kZXg7CiAgICBmbG9hdCBwYXJhbV8yNCA9IF85OTY7CiAgICBmbG9hdCBwYXJhbV8yNSA9IF8xMDA2OwogICAgZmxvYXQzIHBhcmFtXzI2ID0gZnJhZ1RvTGlnaHQgKyAoZmxvYXQzKDEuMGYsIDEuMGYsIC0xLjBmKSAqIF8xMDExKTsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8yMywgcGFyYW1fMjQsIHBhcmFtXzI1LCBwYXJhbV8yNik7CiAgICBpbnQgcGFyYW1fMjcgPSBzaGFkb3dNYXBJbmRleDsKICAgIGZsb2F0IHBhcmFtXzI4ID0gXzk5NjsKICAgIGZsb2F0IHBhcmFtXzI5ID0gXzEwMDY7CiAgICBmbG9hdDMgcGFyYW1fMzAgPSBmcmFnVG9MaWdodCArIChmbG9hdDMoMS4wZiwgLTEuMGYsIC0xLjBmKSAqIF8xMDExKTsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8yNywgcGFyYW1fMjgsIHBhcmFtXzI5LCBwYXJhbV8zMCk7CiAgICBpbnQgcGFyYW1fMzEgPSBzaGFkb3dNYXBJbmRleDsKICAgIGZsb2F0IHBhcmFtXzMyID0gXzk5NjsKICAgIGZsb2F0IHBhcmFtXzMzID0gXzEwMDY7CiAgICBmbG9hdDMgcGFyYW1fMzQgPSBmcmFnVG9MaWdodCArICgoLTEuMGYpLnh4eCAqIF8xMDExKTsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8zMSwgcGFyYW1fMzIsIHBhcmFtXzMzLCBwYXJhbV8zNCk7CiAgICBpbnQgcGFyYW1fMzUgPSBzaGFkb3dNYXBJbmRleDsKICAgIGZsb2F0IHBhcmFtXzM2ID0gXzk5NjsKICAgIGZsb2F0IHBhcmFtXzM3ID0gXzEwMDY7CiAgICBmbG9hdDMgcGFyYW1fMzggPSBmcmFnVG9MaWdodCArIChmbG9hdDMoLTEuMGYsIDEuMGYsIC0xLjBmKSAqIF8xMDExKTsKICAgIGZsb2F0IF8xMTQ0ID0gc2hhZG93OwogICAgZmxvYXQgXzExNDcgPSAoXzExNDQgKyBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8zNSwgcGFyYW1fMzYsIHBhcmFtXzM3LCBwYXJhbV8zOCkpICogMC4xMTExMTExMTE5Mzg5NTMzOTk2NTgyMDMxMjVmOwogICAgc2hhZG93ID0gXzExNDc7CiAgICByZXR1cm4gXzExNDc7Cn0KCmZsb2F0IGdldFJhbmdlQXR0ZW51YXRpb24oZmxvYXQgcmFuZ2UsIGZsb2F0IF9kaXN0YW5jZSkKewogICAgaWYgKHJhbmdlIDw9IDAuMGYpCiAgICB7CiAgICAgICAgcmV0dXJuIDEuMGYgLyBwb3coX2Rpc3RhbmNlLCAyLjBmKTsKICAgIH0KICAgIHJldHVybiBtYXgobWluKDEuMGYgLSBwb3coX2Rpc3RhbmNlIC8gcmFuZ2UsIDQuMGYpLCAxLjBmKSwgMC4wZikgLyBwb3coX2Rpc3RhbmNlLCAyLjBmKTsKfQoKZmxvYXQgZ2V0U3BvdEF0dGVudWF0aW9uKGZsb2F0MyBwb2ludFRvTGlnaHQsIGZsb2F0MyBzcG90RGlyZWN0aW9uLCBmbG9hdCBvdXRlckNvbmVDb3MsIGZsb2F0IGlubmVyQ29uZUNvcykKewogICAgZmxvYXQgXzUzMCA9IGRvdChub3JtYWxpemUoc3BvdERpcmVjdGlvbiksIG5vcm1hbGl6ZSgtcG9pbnRUb0xpZ2h0KSk7CiAgICBpZiAoXzUzMCA+IG91dGVyQ29uZUNvcykKICAgIHsKICAgICAgICBpZiAoXzUzMCA8IGlubmVyQ29uZUNvcykKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiBzbW9vdGhzdGVwKG91dGVyQ29uZUNvcywgaW5uZXJDb25lQ29zLCBfNTMwKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIDEuMGY7CiAgICB9CiAgICByZXR1cm4gMC4wZjsKfQoKZmxvYXQzIGdldExpZ2hJbnRlbnNpdHkoTGlnaHQgbGlnaHQsIGZsb2F0MyBwb2ludFRvTGlnaHQpCnsKICAgIGZsb2F0IHJhbmdlQXR0ZW51YXRpb24gPSAxLjBmOwogICAgZmxvYXQgc3BvdEF0dGVudWF0aW9uID0gMS4wZjsKICAgIGlmIChsaWdodC50eXBlICE9IDApCiAgICB7CiAgICAgICAgZmxvYXQgcGFyYW0gPSBsaWdodC5yYW5nZTsKICAgICAgICBmbG9hdCBwYXJhbV8xID0gbGVuZ3RoKHBvaW50VG9MaWdodCk7CiAgICAgICAgcmFuZ2VBdHRlbnVhdGlvbiA9IGdldFJhbmdlQXR0ZW51YXRpb24ocGFyYW0sIHBhcmFtXzEpOwogICAgfQogICAgaWYgKGxpZ2h0LnR5cGUgPT0gMikKICAgIHsKICAgICAgICBmbG9hdDMgcGFyYW1fMiA9IHBvaW50VG9MaWdodDsKICAgICAgICBmbG9hdDMgcGFyYW1fMyA9IGxpZ2h0LmRpcmVjdGlvbjsKICAgICAgICBmbG9hdCBwYXJhbV80ID0gbGlnaHQub3V0ZXJDb25lQ29zOwogICAgICAgIGZsb2F0IHBhcmFtXzUgPSBsaWdodC5pbm5lckNvbmVDb3M7CiAgICAgICAgc3BvdEF0dGVudWF0aW9uID0gZ2V0U3BvdEF0dGVudWF0aW9uKHBhcmFtXzIsIHBhcmFtXzMsIHBhcmFtXzQsIHBhcmFtXzUpOwogICAgfQogICAgcmV0dXJuIGxpZ2h0LmNvbG9yICogKChyYW5nZUF0dGVudWF0aW9uICogc3BvdEF0dGVudWF0aW9uKSAqIGxpZ2h0LmludGVuc2l0eSk7Cn0KCmZsb2F0MyBGX1NjaGxpY2soZmxvYXQzIGYwLCBmbG9hdDMgZjkwLCBmbG9hdCBWZG90SCkKewogICAgcmV0dXJuIGYwICsgKChmOTAgLSBmMCkgKiBwb3coY2xhbXAoMS4wZiAtIFZkb3RILCAwLjBmLCAxLjBmKSwgNS4wZikpOwp9CgpmbG9hdDMgQlJERl9sYW1iZXJ0aWFuKGZsb2F0MyBmMCwgZmxvYXQzIGY5MCwgZmxvYXQzIGRpZmZ1c2VDb2xvciwgZmxvYXQgVmRvdEgpCnsKICAgIGZsb2F0MyBwYXJhbSA9IGYwOwogICAgZmxvYXQzIHBhcmFtXzEgPSBmOTA7CiAgICBmbG9hdCBwYXJhbV8yID0gVmRvdEg7CiAgICByZXR1cm4gKDEuMGYueHh4IC0gRl9TY2hsaWNrKHBhcmFtLCBwYXJhbV8xLCBwYXJhbV8yKSkgKiAoZGlmZnVzZUNvbG9yICogMC4zMTgzMDk4NzMzNDI1MTQwMzgwODU5Mzc1Zi54eHgpOwp9CgpmbG9hdCBWX0dHWChmbG9hdCBOZG90TCwgZmxvYXQgTmRvdFYsIGZsb2F0IGFscGhhUm91Z2huZXNzKQp7CiAgICBmbG9hdCBfMzk4ID0gYWxwaGFSb3VnaG5lc3MgKiBhbHBoYVJvdWdobmVzczsKICAgIGZsb2F0IF80MDUgPSAxLjBmIC0gXzM5ODsKICAgIGZsb2F0IF80MjYgPSAoTmRvdEwgKiBzcXJ0KCgoTmRvdFYgKiBOZG90VikgKiBfNDA1KSArIF8zOTgpKSArIChOZG90ViAqIHNxcnQoKChOZG90TCAqIE5kb3RMKSAqIF80MDUpICsgXzM5OCkpOwogICAgaWYgKF80MjYgPiAwLjBmKQogICAgewogICAgICAgIHJldHVybiAwLjVmIC8gXzQyNjsKICAgIH0KICAgIHJldHVybiAwLjBmOwp9CgpmbG9hdCBEX0dHWChmbG9hdCBOZG90SCwgZmxvYXQgYWxwaGFSb3VnaG5lc3MpCnsKICAgIGZsb2F0IF80NDAgPSBhbHBoYVJvdWdobmVzcyAqIGFscGhhUm91Z2huZXNzOwogICAgZmxvYXQgXzQ0OCA9ICgoTmRvdEggKiBOZG90SCkgKiAoXzQ0MCAtIDEuMGYpKSArIDEuMGY7CiAgICByZXR1cm4gXzQ0MCAvICgoMy4xNDE1OTI3NDEwMTI1NzMyNDIxODc1ZiAqIF80NDgpICogXzQ0OCk7Cn0KCmZsb2F0MyBCUkRGX3NwZWN1bGFyR0dYKGZsb2F0MyBmMCwgZmxvYXQzIGY5MCwgZmxvYXQgYWxwaGFSb3VnaG5lc3MsIGZsb2F0IFZkb3RILCBmbG9hdCBOZG90TCwgZmxvYXQgTmRvdFYsIGZsb2F0IE5kb3RIKQp7CiAgICBmbG9hdDMgcGFyYW0gPSBmMDsKICAgIGZsb2F0MyBwYXJhbV8xID0gZjkwOwogICAgZmxvYXQgcGFyYW1fMiA9IFZkb3RIOwogICAgZmxvYXQgcGFyYW1fMyA9IE5kb3RMOwogICAgZmxvYXQgcGFyYW1fNCA9IE5kb3RWOwogICAgZmxvYXQgcGFyYW1fNSA9IGFscGhhUm91Z2huZXNzOwogICAgZmxvYXQgcGFyYW1fNiA9IE5kb3RIOwogICAgZmxvYXQgcGFyYW1fNyA9IGFscGhhUm91Z2huZXNzOwogICAgcmV0dXJuIChGX1NjaGxpY2socGFyYW0sIHBhcmFtXzEsIHBhcmFtXzIpICogVl9HR1gocGFyYW1fMywgcGFyYW1fNCwgcGFyYW1fNSkpICogRF9HR1gocGFyYW1fNiwgcGFyYW1fNyk7Cn0KCmZsb2F0NCBnZXRFbWlzc2l2ZVRleHR1cmUoKQp7CiAgICByZXR1cm4gdV9lbWlzc2l2ZVRleHR1cmUuU2FtcGxlKF91X2VtaXNzaXZlVGV4dHVyZV9zYW1wbGVyLCB2X3V2MSk7Cn0KCmZsb2F0MyBsaW5lYXJUb3NSR0IoZmxvYXQzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCAwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzVmLnh4eCk7Cn0KCnZvaWQgZnJhZ19tYWluKCkKewogICAgZmxvYXQ0IF8xMTUyID0gZ2V0QmFzZUNvbG9yKCk7CiAgICBmbG9hdDMgXzE1ODEgPSBnZXROb3JtYWxJbmZvKCkubjsKICAgIGZsb2F0MyBfMTU4NSA9IDAuMGYueHh4OwogICAgZmxvYXQgXzE1ODYgPSAwLjBmOwogICAgZmxvYXQzIF8xNTg3ID0gMC4wZi54eHg7CiAgICBmbG9hdDMgXzE1ODggPSAwLjBmLnh4eDsKICAgIGZsb2F0MyBfMTE2NyA9IF8xMTUyLnh5ejsKICAgIE1hdGVyaWFsSW5mbyBfMTYwOCA9IHsgMC4wZiwgMC4wZi54eHgsIDAuMGYsIDAuMGYueHh4LCAwLjBmLnh4eCwgMC4wZiwgMC4wZi54eHgsIF8xMTY3IH07CiAgICBNYXRlcmlhbEluZm8gcGFyYW0gPSBfMTYwODsKICAgIGZsb2F0IHBhcmFtXzEgPSAwLjAzOTk5OTk5OTEwNTkzMDMyODM2OTE0MDYyNWY7CiAgICBNYXRlcmlhbEluZm8gXzExNzcgPSBnZXRNZXRhbGxpY1JvdWdobmVzc0luZm8ocGFyYW0sIHBhcmFtXzEpOwogICAgXzE1ODUgPSBfMTE3Ny5mMDsKICAgIF8xNTg3ID0gXzExNzcuYWxiZWRvQ29sb3I7CiAgICBmbG9hdCBfMTE4MCA9IGNsYW1wKF8xMTc3LnBlcmNlcHR1YWxSb3VnaG5lc3MsIDAuMGYsIDEuMGYpOwogICAgXzE1ODYgPSBfMTE4MCAqIF8xMTgwOwogICAgXzE1ODggPSBjbGFtcChtYXgobWF4KF8xMTc3LmYwLngsIF8xMTc3LmYwLnkpLCBfMTE3Ny5mMC56KSAqIDUwLjBmLCAwLjBmLCAxLjBmKS54eHg7CiAgICBmbG9hdDMgZl9zcGVjdWxhciA9IDAuMGYueHh4OwogICAgZmxvYXQzIGZfZW1pc3NpdmUgPSAwLjBmLnh4eDsKICAgIGZsb2F0MyBmX2RpZmZ1c2UgPSAocGJyUGFyYW1zX2FtYmllbnRMaWdodCAqIHBvdyhwYnJQYXJhbXNfYW1iaWVudEZhY3RvciwgMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1ZikpICogXzExNjc7CiAgICBmbG9hdDQgXzEyMjUgPSBnZXRPY2NsdXNpb25UZXh0dXJlKCk7CiAgICBmbG9hdCBfMTIyNiA9IF8xMjI1Lng7CiAgICBmX2RpZmZ1c2UgKj0gXzEyMjY7CiAgICBmX3NwZWN1bGFyICo9IF8xMjI2OwogICAgZmxvYXQzIF8xMjUyID0gbm9ybWFsaXplKGxpZ2h0aW5nX2V5ZVBvcy54eXogLSB2X3Bvc2l0aW9uKTsKICAgIGZsb2F0MyBwb2ludFRvTGlnaHQ7CiAgICBmb3IgKGludCBpID0gMDsgaSA8IDY7IGkrKykKICAgIHsKICAgICAgICBpbnQgXzEyNjUgPSBpbnQobGlnaHRpbmdfcG9zaXRpb25fdHlwZVtpXS53KTsKICAgICAgICBib29sIF8xMjk2ID0gKGxpZ2h0aW5nX2luQ29uZV9vdUNvbmVfc2hhZG93c19jYXNjYWRlc1tpXS56IDwgMC4wZikgPyBmYWxzZSA6IHRydWU7CiAgICAgICAgaW50IF8xMzAwID0gaW50KGxpZ2h0aW5nX2luQ29uZV9vdUNvbmVfc2hhZG93c19jYXNjYWRlc1tpXS56KTsKICAgICAgICBpbnQgXzEzMDQgPSBpbnQobGlnaHRpbmdfaW5Db25lX291Q29uZV9zaGFkb3dzX2Nhc2NhZGVzW2ldLncpOwogICAgICAgIGlmIChsaWdodGluZ19jb2xvcl9pbnRlbnNpdHlbaV0udyA+IDAuMGYpCiAgICAgICAgewogICAgICAgICAgICBpZiAoXzEyNjUgIT0gMCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcG9pbnRUb0xpZ2h0ID0gbGlnaHRpbmdfcG9zaXRpb25fdHlwZVtpXS54eXogLSB2X3Bvc2l0aW9uOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcG9pbnRUb0xpZ2h0ID0gLWxpZ2h0aW5nX2RpcmVjdGlvbl9yYW5nZVtpXS54eXo7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZmxvYXQzIF8xMzI3ID0gbm9ybWFsaXplKHBvaW50VG9MaWdodCk7CiAgICAgICAgICAgIGZsb2F0MyBfMTMzMiA9IG5vcm1hbGl6ZShfMTMyNyArIF8xMjUyKTsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzIgPSBfMTU4MTsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzMgPSBfMTMyNzsKICAgICAgICAgICAgZmxvYXQgXzEzMzggPSBjbGFtcGVkRG90KHBhcmFtXzIsIHBhcmFtXzMpOwogICAgICAgICAgICBmbG9hdDMgcGFyYW1fNCA9IF8xNTgxOwogICAgICAgICAgICBmbG9hdDMgcGFyYW1fNSA9IF8xMjUyOwogICAgICAgICAgICBmbG9hdCBfMTM0NCA9IGNsYW1wZWREb3QocGFyYW1fNCwgcGFyYW1fNSk7CiAgICAgICAgICAgIGZsb2F0MyBwYXJhbV82ID0gXzE1ODE7CiAgICAgICAgICAgIGZsb2F0MyBwYXJhbV83ID0gXzEzMzI7CiAgICAgICAgICAgIGZsb2F0MyBwYXJhbV84ID0gXzEzMjc7CiAgICAgICAgICAgIGZsb2F0MyBwYXJhbV85ID0gXzEzMzI7CiAgICAgICAgICAgIGZsb2F0MyBwYXJhbV8xMCA9IF8xMjUyOwogICAgICAgICAgICBmbG9hdDMgcGFyYW1fMTEgPSBfMTMzMjsKICAgICAgICAgICAgZmxvYXQgXzEzNjIgPSBjbGFtcGVkRG90KHBhcmFtXzEwLCBwYXJhbV8xMSk7CiAgICAgICAgICAgIGZsb2F0IHNoYWRvdyA9IDEuMGY7CiAgICAgICAgICAgIGlmIChfMTI5NikKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaWYgKF8xMjY1ID09IDIpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaW50IHBhcmFtXzEyID0gXzEzMDA7CiAgICAgICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMTMgPSBfMTMzODsKICAgICAgICAgICAgICAgICAgICBzaGFkb3cgPSAxLjBmIC0gc2hhZG93Q2FsY3VsYXRpb25QQ0YocGFyYW1fMTIsIHBhcmFtXzEzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpZiAoXzEyNjUgPT0gMCkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGludCBwYXJhbV8xNCA9IF8xMzAwOwogICAgICAgICAgICAgICAgICAgICAgICBpbnQgcGFyYW1fMTUgPSBfMTMwNDsKICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMTYgPSBfMTMzODsKICAgICAgICAgICAgICAgICAgICAgICAgc2hhZG93ID0gMS4wZiAtIHNoYWRvd0Nhc2NhZGVkQ2FsY3VsYXRpb25QQ0YocGFyYW1fMTQsIHBhcmFtXzE1LCBwYXJhbV8xNik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfMTI2NSA9PSAxKQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnQgcGFyYW1fMTcgPSBfMTMwMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0MyBwYXJhbV8xOCA9IC1wb2ludFRvTGlnaHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8xOSA9IF8xMzM4OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhZG93ID0gMS4wZiAtIHNoYWRvd0N1YmVDYWxjdWxhdGlvblBDRihwYXJhbV8xNywgcGFyYW1fMTgsIHBhcmFtXzE5KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoKF8xMzM4ID4gMC4wZikgfHwgKF8xMzQ0ID4gMC4wZikpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIExpZ2h0IF8xNjUzID0geyBfMTI2NSwgbGlnaHRpbmdfZGlyZWN0aW9uX3JhbmdlW2ldLnh5eiwgbGlnaHRpbmdfY29sb3JfaW50ZW5zaXR5W2ldLnh5eiwgbGlnaHRpbmdfcG9zaXRpb25fdHlwZVtpXS54eXosIGxpZ2h0aW5nX2RpcmVjdGlvbl9yYW5nZVtpXS53LCBsaWdodGluZ19jb2xvcl9pbnRlbnNpdHlbaV0udywgbGlnaHRpbmdfaW5Db25lX291Q29uZV9zaGFkb3dzX2Nhc2NhZGVzW2ldLngsIGxpZ2h0aW5nX2luQ29uZV9vdUNvbmVfc2hhZG93c19jYXNjYWRlc1tpXS55LCBfMTI5NiwgXzEzMDAsIF8xMzA0IH07CiAgICAgICAgICAgICAgICBMaWdodCBwYXJhbV8yMCA9IF8xNjUzOwogICAgICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzIxID0gcG9pbnRUb0xpZ2h0OwogICAgICAgICAgICAgICAgZmxvYXQzIF8xNDI4ID0gZ2V0TGlnaEludGVuc2l0eShwYXJhbV8yMCwgcGFyYW1fMjEpOwogICAgICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzIyID0gXzE1ODU7CiAgICAgICAgICAgICAgICBmbG9hdDMgcGFyYW1fMjMgPSBfMTU4ODsKICAgICAgICAgICAgICAgIGZsb2F0MyBwYXJhbV8yNCA9IF8xNTg3OwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMjUgPSBfMTM2MjsKICAgICAgICAgICAgICAgIGZfZGlmZnVzZSArPSAoKChfMTQyOCAqIHNoYWRvdykgKiBfMTMzOCkgKiBCUkRGX2xhbWJlcnRpYW4ocGFyYW1fMjIsIHBhcmFtXzIzLCBwYXJhbV8yNCwgcGFyYW1fMjUpKTsKICAgICAgICAgICAgICAgIGZsb2F0MyBwYXJhbV8yNiA9IF8xNTg1OwogICAgICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzI3ID0gXzE1ODg7CiAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8yOCA9IF8xNTg2OwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMjkgPSBfMTM2MjsKICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzMwID0gXzEzMzg7CiAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8zMSA9IF8xMzQ0OwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMzIgPSBjbGFtcGVkRG90KHBhcmFtXzYsIHBhcmFtXzcpOwogICAgICAgICAgICAgICAgZl9zcGVjdWxhciArPSAoKChfMTQyOCAqIHNoYWRvdykgKiBfMTMzOCkgKiBCUkRGX3NwZWN1bGFyR0dYKHBhcmFtXzI2LCBwYXJhbV8yNywgcGFyYW1fMjgsIHBhcmFtXzI5LCBwYXJhbV8zMCwgcGFyYW1fMzEsIHBhcmFtXzMyKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBmX2VtaXNzaXZlID0gcGJyUGFyYW1zX2VtaXNzaXZlRmFjdG9yOwogICAgZmxvYXQzIHBhcmFtXzMzID0gZ2V0RW1pc3NpdmVUZXh0dXJlKCkueHl6OwogICAgZmxvYXQzIF8xNDgzID0gZl9lbWlzc2l2ZTsKICAgIGZsb2F0MyBfMTQ4NCA9IF8xNDgzICogc1JHQlRvTGluZWFyKHBhcmFtXzMzKTsKICAgIGZfZW1pc3NpdmUgPSBfMTQ4NDsKICAgIGZsb2F0MyBjb2xvciA9IChfMTQ4NCArIGZfZGlmZnVzZSkgKyBmX3NwZWN1bGFyOwogICAgaW50IF8xNDk3ID0gaW50KGZvZ19jb2xvcl90eXBlLncpOwogICAgZmxvYXQgZm9nRmFjdG9yID0gMC4wZjsKICAgIGZsb2F0IF8xNTE4ID0gZ2xfRnJhZ0Nvb3JkLnogLyBnbF9GcmFnQ29vcmQudzsKICAgIGlmIChfMTQ5NyA9PSAwKQogICAgewogICAgICAgIGZvZ0ZhY3RvciA9IChmb2dfZGVuc2l0eV9zdGFydF9lbmQudyAtIF8xNTE4KSAvIChmb2dfZGVuc2l0eV9zdGFydF9lbmQudyAtIGZvZ19kZW5zaXR5X3N0YXJ0X2VuZC56KTsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBpZiAoXzE0OTcgPT0gMSkKICAgICAgICB7CiAgICAgICAgICAgIGZvZ0ZhY3RvciA9IGV4cDIoKCgtZm9nX2RlbnNpdHlfc3RhcnRfZW5kLngpICogXzE1MTgpICogMS40NDI2OTUwMjE2MjkzMzM0OTYwOTM3NWYpOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICBpZiAoXzE0OTcgPT0gMikKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZm9nRmFjdG9yID0gZXhwMigoKCgoLWZvZ19kZW5zaXR5X3N0YXJ0X2VuZC54KSAqIGZvZ19kZW5zaXR5X3N0YXJ0X2VuZC54KSAqIF8xNTE4KSAqIF8xNTE4KSAqIDEuNDQyNjk1MDIxNjI5MzMzNDk2MDkzNzVmKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGZsb2F0IF8xNTU3ID0gZm9nRmFjdG9yOwogICAgZmxvYXQgXzE1NTggPSBjbGFtcChfMTU1NywgMC4wZiwgMS4wZik7CiAgICBmb2dGYWN0b3IgPSBfMTU1ODsKICAgIGZsb2F0MyBfMTU2MCA9IGNvbG9yOwogICAgZmxvYXQzIF8xNTYzID0gbGVycChmb2dfY29sb3JfdHlwZS54eXosIF8xNTYwLCBfMTU1OC54eHgpOwogICAgY29sb3IgPSBfMTU2MzsKICAgIGZsb2F0MyBwYXJhbV8zNCA9IF8xNTYzOwogICAgZ19maW5hbENvbG9yID0gZmxvYXQ0KGxpbmVhclRvc1JHQihwYXJhbV8zNCksIF8xMTUyLncpOwp9CgpTUElSVl9Dcm9zc19PdXRwdXQgbWFpbihTUElSVl9Dcm9zc19JbnB1dCBzdGFnZV9pbnB1dCkKewogICAgZ2xfRnJhZ0Nvb3JkID0gc3RhZ2VfaW5wdXQuZ2xfRnJhZ0Nvb3JkOwogICAgZ2xfRnJhZ0Nvb3JkLncgPSAxLjAgLyBnbF9GcmFnQ29vcmQudzsKICAgIHZfdXYxID0gc3RhZ2VfaW5wdXQudl91djE7CiAgICB2X3Bvc2l0aW9uID0gc3RhZ2VfaW5wdXQudl9wb3NpdGlvbjsKICAgIHZfbm9ybWFsID0gc3RhZ2VfaW5wdXQudl9ub3JtYWw7CiAgICB2X2xpZ2h0UHJvalBvcyA9IHN0YWdlX2lucHV0LnZfbGlnaHRQcm9qUG9zOwogICAgdl9jbGlwU3BhY2VQb3NaID0gc3RhZ2VfaW5wdXQudl9jbGlwU3BhY2VQb3NaOwogICAgdl91djIgPSBzdGFnZV9pbnB1dC52X3V2MjsKICAgIGZyYWdfbWFpbigpOwogICAgU1BJUlZfQ3Jvc3NfT3V0cHV0IHN0YWdlX291dHB1dDsKICAgIHN0YWdlX291dHB1dC5nX2ZpbmFsQ29sb3IgPSBnX2ZpbmFsQ29sb3I7CiAgICByZXR1cm4gc3RhZ2Vfb3V0cHV0Owp9ClJFRkzsBQAAbWVzaF9VdjFQdWNTaHdQY2ZOb3JGb2dfaGxzbDUAAAAAAAAACwAAAAQAAAAOAAAAdV9iYXNlQ29sb3JUZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUdV9tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUAAAAAAAACAAAAAQAAADJEICBURkxUdV9vY2NsdXNpb25UZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAgAAADJEICBURkxUdV9lbWlzc2l2ZVRleHR1cmUAAAAAAAAAAAAAAAAAAAACAAAAAwAAADJEICBURkxUdV9zaGFkb3dNYXAxAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABAAAADJEICBURkxUdV9zaGFkb3dNYXAyAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABQAAADJEICBURkxUdV9zaGFkb3dNYXAzAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAADJEICBURkxUdV9zaGFkb3dNYXA0AAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABwAAADJEICBURkxUdV9zaGFkb3dNYXA1AAAAAAAAAAAAAAAAAAAAAAAAAAACAAAACAAAADJEICBURkxUdV9zaGFkb3dNYXA2AAAAAAAAAAAAAAAAAAAAAAAAAAACAAAACQAAADJEICBURkxUdV9zaGFkb3dDdWJlTWFwMQAAAAAAAAAAAAAAAAAAAAACAAAACgAAAENVQkVURkxUBgAAAHVfZnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABYmFzZUNvbG9yRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABtZXRhbGxpY0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAEAAAAHJvdWdobmVzc0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAUAAAAZW1pc3NpdmVGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAACAAAABhbWJpZW50TGlnaHQAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAMAAAAGFtYmllbnRGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAA8AAAAAQAAAHVfZnNfc2hhZG93cwAAAAAAAAAAAAAAAAAAAAAAAAAAdVNoYWRvd3MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAHAAAAABYmlhc190ZXhTaXplX25lYXJGYXIAAAAAAAAAAAAAAABGTFQ0BwAAAAAAAAAFAAAAdV9mc19saWdodGluZwAAAAAAAAAAAAAAAAAAAAAAAABsaWdodGluZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAkAEAAAFkaXJlY3Rpb25fcmFuZ2UAAAAAAAAAAAAAAAAAAAAAAEZMVDQGAAAAAAAAAGNvbG9yX2ludGVuc2l0eQAAAAAAAAAAAAAAAAAAAAAARkxUNAYAAABgAAAAcG9zaXRpb25fdHlwZQAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0BgAAAMAAAABpbkNvbmVfb3VDb25lX3NoYWRvd3NfY2FzY2FkZXMAAEZMVDQGAAAAIAEAAGV5ZVBvcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAACAAQAAAgAAAHVfZnNfZm9nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZm9nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAACAAAAABY29sb3JfdHlwZQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABkZW5zaXR5X3N0YXJ0X2VuZAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAEAAAAA==";
static const std::string mesh_Uv1PucNorNmpTanVc4Ski_hlsl5 = "";
static const std::string mesh_UltUv1_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUfnCAAAVkVSVENPREU2BwAAY2J1ZmZlciB1X3ZzX3BiclBhcmFtcyA6IHJlZ2lzdGVyKGIwKQp7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcGJyUGFyYW1zX21vZGVsTWF0cml4IDogcGFja29mZnNldChjMCk7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcGJyUGFyYW1zX25vcm1hbE1hdHJpeCA6IHBhY2tvZmZzZXQoYzQpOwogICAgcm93X21ham9yIGZsb2F0NHg0IHBiclBhcmFtc19tdnBNYXRyaXggOiBwYWNrb2Zmc2V0KGM4KTsKfTsKCgpzdGF0aWMgZmxvYXQ0IGdsX1Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQzIGFfcG9zaXRpb247CnN0YXRpYyBmbG9hdDMgdl9wb3NpdGlvbjsKc3RhdGljIGZsb2F0MiB2X3V2MTsKc3RhdGljIGZsb2F0MiB2X3V2MjsKc3RhdGljIGZsb2F0MiBhX3RleGNvb3JkMTsKCnN0cnVjdCBTUElSVl9Dcm9zc19JbnB1dAp7CiAgICBmbG9hdDMgYV9wb3NpdGlvbiA6IFBPU0lUSU9OOwogICAgZmxvYXQyIGFfdGV4Y29vcmQxIDogTk9STUFMOwp9OwoKc3RydWN0IFNQSVJWX0Nyb3NzX091dHB1dAp7CiAgICBmbG9hdDMgdl9wb3NpdGlvbiA6IFRFWENPT1JEMDsKICAgIGZsb2F0MiB2X3V2MSA6IFRFWENPT1JEMTsKICAgIGZsb2F0MiB2X3V2MiA6IFRFWENPT1JEMjsKICAgIGZsb2F0NCBnbF9Qb3NpdGlvbiA6IFNWX1Bvc2l0aW9uOwp9OwoKZmxvYXQ0eDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIHJldHVybiBmbG9hdDR4NCgwLjBmLnh4eHgsIDAuMGYueHh4eCwgMC4wZi54eHh4LCAwLjBmLnh4eHgpOwp9CgpmbG9hdDMgZ2V0TW9ycGhQb3NpdGlvbihmbG9hdDMgcG9zKQp7CiAgICByZXR1cm4gcG9zOwp9CgpmbG9hdDMgZ2V0U2tpblBvc2l0aW9uKGZsb2F0MyBwb3MsIGZsb2F0NHg0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHJldHVybiBwb3M7Cn0KCmZsb2F0NCBnZXRQb3NpdGlvbihmbG9hdDR4NCBib25lVHJhbnNmb3JtKQp7CiAgICBmbG9hdDMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgZmxvYXQzIHBhcmFtXzEgPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIGZsb2F0NHg0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIGZsb2F0NChnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMiksIDEuMGYpOwp9Cgp2b2lkIHZlcnRfbWFpbigpCnsKICAgIGZsb2F0NHg0IHBhcmFtID0gZ2V0Qm9uZVRyYW5zZm9ybSgpOwogICAgZmxvYXQ0IF82NyA9IGdldFBvc2l0aW9uKHBhcmFtKTsKICAgIGZsb2F0NCBfNzggPSBtdWwoXzY3LCBwYnJQYXJhbXNfbW9kZWxNYXRyaXgpOwogICAgdl9wb3NpdGlvbiA9IGZsb2F0MyhfNzgueHl6KSAvIF83OC53Lnh4eDsKICAgIHZfdXYxID0gMC4wZi54eDsKICAgIHZfdXYyID0gMC4wZi54eDsKICAgIHZfdXYxID0gYV90ZXhjb29yZDE7CiAgICBnbF9Qb3NpdGlvbiA9IG11bChfNjcsIHBiclBhcmFtc19tdnBNYXRyaXgpOwogICAgZ2xfUG9zaXRpb24ueiA9IChnbF9Qb3NpdGlvbi56ICsgZ2xfUG9zaXRpb24udykgKiAwLjU7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICBhX3Bvc2l0aW9uID0gc3RhZ2VfaW5wdXQuYV9wb3NpdGlvbjsKICAgIGFfdGV4Y29vcmQxID0gc3RhZ2VfaW5wdXQuYV90ZXhjb29yZDE7CiAgICB2ZXJ0X21haW4oKTsKICAgIFNQSVJWX0Nyb3NzX091dHB1dCBzdGFnZV9vdXRwdXQ7CiAgICBzdGFnZV9vdXRwdXQuZ2xfUG9zaXRpb24gPSBnbF9Qb3NpdGlvbjsKICAgIHN0YWdlX291dHB1dC52X3Bvc2l0aW9uID0gdl9wb3NpdGlvbjsKICAgIHN0YWdlX291dHB1dC52X3V2MSA9IHZfdXYxOwogICAgc3RhZ2Vfb3V0cHV0LnZfdXYyID0gdl91djI7CiAgICByZXR1cm4gc3RhZ2Vfb3V0cHV0Owp9ClJFRkydAQAAbWVzaF9VbHRVdjFfaGxzbDUAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAEAAAADAAAAYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfdGV4Y29vcmQxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDIDAAAAdV92c19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAFtb2RlbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAG5vcm1hbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAABAAAAAbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAIAAAABTVEFHDAkAAEZSQUdDT0RFPwcAAGNidWZmZXIgdV9mc19wYnJQYXJhbXMgOiByZWdpc3RlcihiMCkKewogICAgZmxvYXQ0IHBiclBhcmFtc19iYXNlQ29sb3JGYWN0b3IgOiBwYWNrb2Zmc2V0KGMwKTsKICAgIGZsb2F0IHBiclBhcmFtc19tZXRhbGxpY0ZhY3RvciA6IHBhY2tvZmZzZXQoYzEpOwogICAgZmxvYXQgcGJyUGFyYW1zX3JvdWdobmVzc0ZhY3RvciA6IHBhY2tvZmZzZXQoYzEueSk7CiAgICBmbG9hdDMgcGJyUGFyYW1zX2VtaXNzaXZlRmFjdG9yIDogcGFja29mZnNldChjMik7CiAgICBmbG9hdDMgcGJyUGFyYW1zX2FtYmllbnRMaWdodCA6IHBhY2tvZmZzZXQoYzMpOwogICAgZmxvYXQgcGJyUGFyYW1zX2FtYmllbnRGYWN0b3IgOiBwYWNrb2Zmc2V0KGMzLncpOwp9OwoKVGV4dHVyZTJEPGZsb2F0ND4gdV9iYXNlQ29sb3JUZXh0dXJlIDogcmVnaXN0ZXIodDApOwpTYW1wbGVyU3RhdGUgX3VfYmFzZUNvbG9yVGV4dHVyZV9zYW1wbGVyIDogcmVnaXN0ZXIoczApOwoKc3RhdGljIGZsb2F0MiB2X3V2MTsKc3RhdGljIGZsb2F0MyB2X3Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQ0IGdfZmluYWxDb2xvcjsKc3RhdGljIGZsb2F0MiB2X3V2MjsKCnN0cnVjdCBTUElSVl9Dcm9zc19JbnB1dAp7CiAgICBmbG9hdDMgdl9wb3NpdGlvbiA6IFRFWENPT1JEMDsKICAgIGZsb2F0MiB2X3V2MSA6IFRFWENPT1JEMTsKICAgIGZsb2F0MiB2X3V2MiA6IFRFWENPT1JEMjsKfTsKCnN0cnVjdCBTUElSVl9Dcm9zc19PdXRwdXQKewogICAgZmxvYXQ0IGdfZmluYWxDb2xvciA6IFNWX1RhcmdldDA7Cn07CgpmbG9hdDMgc1JHQlRvTGluZWFyKGZsb2F0MyBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCAyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjVmLnh4eCk7Cn0KCmZsb2F0NCBzUkdCVG9MaW5lYXIoZmxvYXQ0IHNyZ2JJbikKewogICAgZmxvYXQzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiBmbG9hdDQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9CgpmbG9hdDQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gMS4wZi54eHh4Owp9CgpmbG9hdDQgZ2V0QmFzZUNvbG9yKCkKewogICAgZmxvYXQ0IGJhc2VDb2xvciA9IHBiclBhcmFtc19iYXNlQ29sb3JGYWN0b3I7CiAgICBmbG9hdDQgcGFyYW0gPSB1X2Jhc2VDb2xvclRleHR1cmUuU2FtcGxlKF91X2Jhc2VDb2xvclRleHR1cmVfc2FtcGxlciwgdl91djEpOwogICAgZmxvYXQ0IF8xMDAgPSBiYXNlQ29sb3I7CiAgICBmbG9hdDQgXzEwMSA9IF8xMDAgKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzEwMTsKICAgIHJldHVybiBfMTAxICogZ2V0VmVydGV4Q29sb3IoKTsKfQoKZmxvYXQzIGxpbmVhclRvc1JHQihmbG9hdDMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NWYueHh4KTsKfQoKdm9pZCBmcmFnX21haW4oKQp7CiAgICBmbG9hdDQgXzI1NiA9IGdldEJhc2VDb2xvcigpOwogICAgZmxvYXQzIHBhcmFtID0gXzI1Ni54eXo7CiAgICBnX2ZpbmFsQ29sb3IgPSBmbG9hdDQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzI1Ni53KTsKfQoKU1BJUlZfQ3Jvc3NfT3V0cHV0IG1haW4oU1BJUlZfQ3Jvc3NfSW5wdXQgc3RhZ2VfaW5wdXQpCnsKICAgIHZfdXYxID0gc3RhZ2VfaW5wdXQudl91djE7CiAgICB2X3Bvc2l0aW9uID0gc3RhZ2VfaW5wdXQudl9wb3NpdGlvbjsKICAgIHZfdXYyID0gc3RhZ2VfaW5wdXQudl91djI7CiAgICBmcmFnX21haW4oKTsKICAgIFNQSVJWX0Nyb3NzX091dHB1dCBzdGFnZV9vdXRwdXQ7CiAgICBzdGFnZV9vdXRwdXQuZ19maW5hbENvbG9yID0gZ19maW5hbENvbG9yOwogICAgcmV0dXJuIHN0YWdlX291dHB1dDsKfQpSRUZMuQEAAG1lc2hfVWx0VXYxX2hsc2w1AAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAABgAAAHVfYmFzZUNvbG9yVGV4dHVyZQAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVAYAAAB1X2ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAWJhc2VDb2xvckZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAAbWV0YWxsaWNGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABAAAAByb3VnaG5lc3NGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAFAAAAGVtaXNzaXZlRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAgAAAAYW1iaWVudExpZ2h0AAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAADAAAABhbWJpZW50RmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAPAAAAA==";
static const std::string depth_Ski_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUehCgAAVkVSVENPREV/CAAAY2J1ZmZlciB1X3ZzX3NraW5uaW5nIDogcmVnaXN0ZXIoYjApCnsKICAgIHJvd19tYWpvciBmbG9hdDR4NCBfMzNfYm9uZXNNYXRyaXhbNzBdIDogcGFja29mZnNldChjMCk7Cn07CgpjYnVmZmVyIHVfdnNfZGVwdGhQYXJhbXMgOiByZWdpc3RlcihiMSkKewogICAgcm93X21ham9yIGZsb2F0NHg0IGRlcHRoUGFyYW1zX2xpZ2h0TVZQTWF0cml4IDogcGFja29mZnNldChjMCk7Cn07CgoKc3RhdGljIGZsb2F0NCBnbF9Qb3NpdGlvbjsKc3RhdGljIGZsb2F0NCBhX2JvbmVJZHM7CnN0YXRpYyBmbG9hdDQgYV9ib25lV2VpZ2h0czsKc3RhdGljIGZsb2F0MyBhX3Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQyIHZfcHJvalpXOwoKc3RydWN0IFNQSVJWX0Nyb3NzX0lucHV0CnsKICAgIGZsb2F0MyBhX3Bvc2l0aW9uIDogUE9TSVRJT047CiAgICBmbG9hdDQgYV9ib25lV2VpZ2h0cyA6IE5PUk1BTDsKICAgIGZsb2F0NCBhX2JvbmVJZHMgOiBURVhDT09SRDA7Cn07CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfT3V0cHV0CnsKICAgIGZsb2F0MiB2X3Byb2paVyA6IFRFWENPT1JEMDsKICAgIGZsb2F0NCBnbF9Qb3NpdGlvbiA6IFNWX1Bvc2l0aW9uOwp9OwoKZmxvYXQzIGdldE1vcnBoUG9zaXRpb24oZmxvYXQzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKZmxvYXQ0eDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIGZsb2F0NHg0IF81MSA9IF8zM19ib25lc01hdHJpeFtpbnQoYV9ib25lSWRzLnggKiA2NTUzNS4wZildICogYV9ib25lV2VpZ2h0cy54OwogICAgZmxvYXQ0eDQgXzc1ID0gXzMzX2JvbmVzTWF0cml4W2ludChhX2JvbmVJZHMueSAqIDY1NTM1LjBmKV0gKiBhX2JvbmVXZWlnaHRzLnk7CiAgICBmbG9hdDR4NCBfOTkgPSBfMzNfYm9uZXNNYXRyaXhbaW50KGFfYm9uZUlkcy56ICogNjU1MzUuMGYpXSAqIGFfYm9uZVdlaWdodHMuejsKICAgIGZsb2F0NHg0IF8xMjMgPSBfMzNfYm9uZXNNYXRyaXhbaW50KGFfYm9uZUlkcy53ICogNjU1MzUuMGYpXSAqIGFfYm9uZVdlaWdodHMudzsKICAgIHJldHVybiBmbG9hdDR4NCgoKF81MVswXSArIF83NVswXSkgKyBfOTlbMF0pICsgXzEyM1swXSwgKChfNTFbMV0gKyBfNzVbMV0pICsgXzk5WzFdKSArIF8xMjNbMV0sICgoXzUxWzJdICsgXzc1WzJdKSArIF85OVsyXSkgKyBfMTIzWzJdLCAoKF81MVszXSArIF83NVszXSkgKyBfOTlbM10pICsgXzEyM1szXSk7Cn0KCmZsb2F0MyBnZXRTa2luUG9zaXRpb24oaW5vdXQgZmxvYXQzIHBvcywgZmxvYXQ0eDQgYm9uZVRyYW5zZm9ybSkKewogICAgZmxvYXQ0IF8xNTEgPSBtdWwoZmxvYXQ0KHBvcywgMS4wZiksIGJvbmVUcmFuc2Zvcm0pOwogICAgcG9zID0gZmxvYXQzKF8xNTEueHl6KSAvIF8xNTEudy54eHg7CiAgICByZXR1cm4gcG9zOwp9Cgp2b2lkIHZlcnRfbWFpbigpCnsKICAgIGZsb2F0MyBwb3MgPSBhX3Bvc2l0aW9uOwogICAgZmxvYXQzIHBhcmFtID0gYV9wb3NpdGlvbjsKICAgIHBvcyA9IGdldE1vcnBoUG9zaXRpb24ocGFyYW0pOwogICAgZmxvYXQzIHBhcmFtXzEgPSBwb3M7CiAgICBmbG9hdDR4NCBwYXJhbV8yID0gZ2V0Qm9uZVRyYW5zZm9ybSgpOwogICAgZmxvYXQzIF8xNzkgPSBnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMik7CiAgICBwb3MgPSBfMTc5OwogICAgZ2xfUG9zaXRpb24gPSBtdWwoZmxvYXQ0KF8xNzksIDEuMGYpLCBkZXB0aFBhcmFtc19saWdodE1WUE1hdHJpeCk7CiAgICB2X3Byb2paVyA9IGdsX1Bvc2l0aW9uLnp3OwogICAgZ2xfUG9zaXRpb24ueSA9IC1nbF9Qb3NpdGlvbi55OwogICAgZ2xfUG9zaXRpb24ueiA9IChnbF9Qb3NpdGlvbi56ICsgZ2xfUG9zaXRpb24udykgKiAwLjU7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICBhX2JvbmVJZHMgPSBzdGFnZV9pbnB1dC5hX2JvbmVJZHM7CiAgICBhX2JvbmVXZWlnaHRzID0gc3RhZ2VfaW5wdXQuYV9ib25lV2VpZ2h0czsKICAgIGFfcG9zaXRpb24gPSBzdGFnZV9pbnB1dC5hX3Bvc2l0aW9uOwogICAgdmVydF9tYWluKCk7CiAgICBTUElSVl9Dcm9zc19PdXRwdXQgc3RhZ2Vfb3V0cHV0OwogICAgc3RhZ2Vfb3V0cHV0LmdsX1Bvc2l0aW9uID0gZ2xfUG9zaXRpb247CiAgICBzdGFnZV9vdXRwdXQudl9wcm9qWlcgPSB2X3Byb2paVzsKICAgIHJldHVybiBzdGFnZV9vdXRwdXQ7Cn0KUkVGTA4CAABkZXB0aF9Ta2lfaGxzbDUAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAgAAAAIAAABhX2JvbmVJZHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0YV9ib25lV2VpZ2h0cwAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNGFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAdV92c19za2lubmluZwAAAAAAAAAAAAAAAAAAAAAAAABfMzMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgBEAAAFib25lc01hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDRGAAAAAAAAAAEAAAB1X3ZzX2RlcHRoUGFyYW1zAAAAAAAAAAAAAAAAAAAAAGRlcHRoUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABAAAAAAWxpZ2h0TVZQTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAU1RBR00DAABGUkFHQ09ERQkDAABzdGF0aWMgZmxvYXQ0IGZyYWdfY29sb3I7CnN0YXRpYyBmbG9hdDIgdl9wcm9qWlc7CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfSW5wdXQKewogICAgZmxvYXQyIHZfcHJvalpXIDogVEVYQ09PUkQwOwp9OwoKc3RydWN0IFNQSVJWX0Nyb3NzX091dHB1dAp7CiAgICBmbG9hdDQgZnJhZ19jb2xvciA6IFNWX1RhcmdldDA7Cn07CgpmbG9hdDQgZW5jb2RlRGVwdGgoZmxvYXQgdikKewogICAgZmxvYXQ0IF8yMyA9IGZyYWMoZmxvYXQ0KDEuMGYsIDI1NS4wZiwgNjUwMjUuMGYsIDE2NTgxMzc1LjBmKSAqIHYpOwogICAgcmV0dXJuIF8yMyAtIChfMjMueXp3dyAqIGZsb2F0NCgwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjVmLCAwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjVmLCAwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjVmLCAwLjBmKSk7Cn0KCnZvaWQgZnJhZ19tYWluKCkKewogICAgZmxvYXQgcGFyYW0gPSAoKDAuNWYgKiB2X3Byb2paVy54KSAvIHZfcHJvalpXLnkpICsgMC41ZjsKICAgIGZyYWdfY29sb3IgPSBlbmNvZGVEZXB0aChwYXJhbSk7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICB2X3Byb2paVyA9IHN0YWdlX2lucHV0LnZfcHJvalpXOwogICAgZnJhZ19tYWluKCk7CiAgICBTUElSVl9Dcm9zc19PdXRwdXQgc3RhZ2Vfb3V0cHV0OwogICAgc3RhZ2Vfb3V0cHV0LmZyYWdfY29sb3IgPSBmcmFnX2NvbG9yOwogICAgcmV0dXJuIHN0YWdlX291dHB1dDsKfQpSRUZMMAAAAGRlcHRoX1NraV9obHNsNQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==";
static const std::string depth_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUcnBgAAVkVSVENPREUaBQAAY2J1ZmZlciB1X3ZzX2RlcHRoUGFyYW1zIDogcmVnaXN0ZXIoYjApCnsKICAgIHJvd19tYWpvciBmbG9hdDR4NCBkZXB0aFBhcmFtc19saWdodE1WUE1hdHJpeCA6IHBhY2tvZmZzZXQoYzApOwp9OwoKCnN0YXRpYyBmbG9hdDQgZ2xfUG9zaXRpb247CnN0YXRpYyBmbG9hdDMgYV9wb3NpdGlvbjsKc3RhdGljIGZsb2F0MiB2X3Byb2paVzsKCnN0cnVjdCBTUElSVl9Dcm9zc19JbnB1dAp7CiAgICBmbG9hdDMgYV9wb3NpdGlvbiA6IFBPU0lUSU9OOwp9OwoKc3RydWN0IFNQSVJWX0Nyb3NzX091dHB1dAp7CiAgICBmbG9hdDIgdl9wcm9qWlcgOiBURVhDT09SRDA7CiAgICBmbG9hdDQgZ2xfUG9zaXRpb24gOiBTVl9Qb3NpdGlvbjsKfTsKCmZsb2F0MyBnZXRNb3JwaFBvc2l0aW9uKGZsb2F0MyBwb3MpCnsKICAgIHJldHVybiBwb3M7Cn0KCmZsb2F0NHg0IGdldEJvbmVUcmFuc2Zvcm0oKQp7CiAgICByZXR1cm4gZmxvYXQ0eDQoMC4wZi54eHh4LCAwLjBmLnh4eHgsIDAuMGYueHh4eCwgMC4wZi54eHh4KTsKfQoKZmxvYXQzIGdldFNraW5Qb3NpdGlvbihmbG9hdDMgcG9zLCBmbG9hdDR4NCBib25lVHJhbnNmb3JtKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2b2lkIHZlcnRfbWFpbigpCnsKICAgIGZsb2F0MyBwb3MgPSBhX3Bvc2l0aW9uOwogICAgZmxvYXQzIHBhcmFtID0gYV9wb3NpdGlvbjsKICAgIHBvcyA9IGdldE1vcnBoUG9zaXRpb24ocGFyYW0pOwogICAgZmxvYXQzIHBhcmFtXzEgPSBwb3M7CiAgICBmbG9hdDR4NCBwYXJhbV8yID0gZ2V0Qm9uZVRyYW5zZm9ybSgpOwogICAgZmxvYXQzIF80OCA9IGdldFNraW5Qb3NpdGlvbihwYXJhbV8xLCBwYXJhbV8yKTsKICAgIHBvcyA9IF80ODsKICAgIGdsX1Bvc2l0aW9uID0gbXVsKGZsb2F0NChfNDgsIDEuMGYpLCBkZXB0aFBhcmFtc19saWdodE1WUE1hdHJpeCk7CiAgICB2X3Byb2paVyA9IGdsX1Bvc2l0aW9uLnp3OwogICAgZ2xfUG9zaXRpb24ueSA9IC1nbF9Qb3NpdGlvbi55OwogICAgZ2xfUG9zaXRpb24ueiA9IChnbF9Qb3NpdGlvbi56ICsgZ2xfUG9zaXRpb24udykgKiAwLjU7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICBhX3Bvc2l0aW9uID0gc3RhZ2VfaW5wdXQuYV9wb3NpdGlvbjsKICAgIHZlcnRfbWFpbigpOwogICAgU1BJUlZfQ3Jvc3NfT3V0cHV0IHN0YWdlX291dHB1dDsKICAgIHN0YWdlX291dHB1dC5nbF9Qb3NpdGlvbiA9IGdsX1Bvc2l0aW9uOwogICAgc3RhZ2Vfb3V0cHV0LnZfcHJvalpXID0gdl9wcm9qWlc7CiAgICByZXR1cm4gc3RhZ2Vfb3V0cHV0Owp9ClJFRkz5AAAAZGVwdGhfaGxzbDUAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAABAAAAYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAB1X3ZzX2RlcHRoUGFyYW1zAAAAAAAAAAAAAAAAAAAAAGRlcHRoUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAWxpZ2h0TVZQTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAU1RBR00DAABGUkFHQ09ERQkDAABzdGF0aWMgZmxvYXQ0IGZyYWdfY29sb3I7CnN0YXRpYyBmbG9hdDIgdl9wcm9qWlc7CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfSW5wdXQKewogICAgZmxvYXQyIHZfcHJvalpXIDogVEVYQ09PUkQwOwp9OwoKc3RydWN0IFNQSVJWX0Nyb3NzX091dHB1dAp7CiAgICBmbG9hdDQgZnJhZ19jb2xvciA6IFNWX1RhcmdldDA7Cn07CgpmbG9hdDQgZW5jb2RlRGVwdGgoZmxvYXQgdikKewogICAgZmxvYXQ0IF8yMyA9IGZyYWMoZmxvYXQ0KDEuMGYsIDI1NS4wZiwgNjUwMjUuMGYsIDE2NTgxMzc1LjBmKSAqIHYpOwogICAgcmV0dXJuIF8yMyAtIChfMjMueXp3dyAqIGZsb2F0NCgwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjVmLCAwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjVmLCAwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjVmLCAwLjBmKSk7Cn0KCnZvaWQgZnJhZ19tYWluKCkKewogICAgZmxvYXQgcGFyYW0gPSAoKDAuNWYgKiB2X3Byb2paVy54KSAvIHZfcHJvalpXLnkpICsgMC41ZjsKICAgIGZyYWdfY29sb3IgPSBlbmNvZGVEZXB0aChwYXJhbSk7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICB2X3Byb2paVyA9IHN0YWdlX2lucHV0LnZfcHJvalpXOwogICAgZnJhZ19tYWluKCk7CiAgICBTUElSVl9Dcm9zc19PdXRwdXQgc3RhZ2Vfb3V0cHV0OwogICAgc3RhZ2Vfb3V0cHV0LmZyYWdfY29sb3IgPSBmcmFnX2NvbG9yOwogICAgcmV0dXJuIHN0YWdlX291dHB1dDsKfQpSRUZMMAAAAGRlcHRoX2hsc2w1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==";
static const std::string mesh_Uv1PucNor_hlsl5 = "";
static const std::string mesh_Uv1PucShwPcfNorNmpTan_hlsl5 = "";
static const std::string mesh_Uv1PucShwPcfNorNmpTanVc4Fog_hlsl5 = "";
static const std::string mesh_Uv1PucNorNmpTanVc4FogSki_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUedFQAAVkVSVENPREXzEQAAY2J1ZmZlciB1X3ZzX3NraW5uaW5nIDogcmVnaXN0ZXIoYjApCnsKICAgIHJvd19tYWpvciBmbG9hdDR4NCBfNThfYm9uZXNNYXRyaXhbNzBdIDogcGFja29mZnNldChjMCk7Cn07CgpjYnVmZmVyIHVfdnNfcGJyUGFyYW1zIDogcmVnaXN0ZXIoYjEpCnsKICAgIHJvd19tYWpvciBmbG9hdDR4NCBwYnJQYXJhbXNfbW9kZWxNYXRyaXggOiBwYWNrb2Zmc2V0KGMwKTsKICAgIHJvd19tYWpvciBmbG9hdDR4NCBwYnJQYXJhbXNfbm9ybWFsTWF0cml4IDogcGFja29mZnNldChjNCk7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcGJyUGFyYW1zX212cE1hdHJpeCA6IHBhY2tvZmZzZXQoYzgpOwp9OwoKCnN0YXRpYyBmbG9hdDQgZ2xfUG9zaXRpb247CnN0YXRpYyBmbG9hdDQgYV9ib25lSWRzOwpzdGF0aWMgZmxvYXQ0IGFfYm9uZVdlaWdodHM7CnN0YXRpYyBmbG9hdDMgYV9wb3NpdGlvbjsKc3RhdGljIGZsb2F0MyBhX25vcm1hbDsKc3RhdGljIGZsb2F0NCBhX3RhbmdlbnQ7CnN0YXRpYyBmbG9hdDMgdl9wb3NpdGlvbjsKc3RhdGljIGZsb2F0M3gzIHZfdGJuOwpzdGF0aWMgZmxvYXQyIHZfdXYxOwpzdGF0aWMgZmxvYXQyIHZfdXYyOwpzdGF0aWMgZmxvYXQyIGFfdGV4Y29vcmQxOwpzdGF0aWMgZmxvYXQ0IHZfY29sb3I7CnN0YXRpYyBmbG9hdDQgYV9jb2xvcjsKCnN0cnVjdCBTUElSVl9Dcm9zc19JbnB1dAp7CiAgICBmbG9hdDMgYV9wb3NpdGlvbiA6IFBPU0lUSU9OOwogICAgZmxvYXQzIGFfbm9ybWFsIDogTk9STUFMOwogICAgZmxvYXQ0IGFfdGFuZ2VudCA6IFRFWENPT1JEMDsKICAgIGZsb2F0MiBhX3RleGNvb3JkMSA6IFRFWENPT1JEMTsKICAgIGZsb2F0NCBhX2NvbG9yIDogVEVYQ09PUkQyOwogICAgZmxvYXQ0IGFfYm9uZVdlaWdodHMgOiBURVhDT09SRDM7CiAgICBmbG9hdDQgYV9ib25lSWRzIDogVEVYQ09PUkQ0Owp9OwoKc3RydWN0IFNQSVJWX0Nyb3NzX091dHB1dAp7CiAgICBmbG9hdDMgdl9wb3NpdGlvbiA6IFRFWENPT1JEMDsKICAgIGZsb2F0M3gzIHZfdGJuIDogVEVYQ09PUkQxOwogICAgZmxvYXQyIHZfdXYxIDogVEVYQ09PUkQ0OwogICAgZmxvYXQyIHZfdXYyIDogVEVYQ09PUkQ1OwogICAgZmxvYXQ0IHZfY29sb3IgOiBURVhDT09SRDY7CiAgICBmbG9hdDQgZ2xfUG9zaXRpb24gOiBTVl9Qb3NpdGlvbjsKfTsKCmZsb2F0NHg0IGdldEJvbmVUcmFuc2Zvcm0oKQp7CiAgICBmbG9hdDR4NCBfNzYgPSBfNThfYm9uZXNNYXRyaXhbaW50KGFfYm9uZUlkcy54ICogNjU1MzUuMGYpXSAqIGFfYm9uZVdlaWdodHMueDsKICAgIGZsb2F0NHg0IF8xMDAgPSBfNThfYm9uZXNNYXRyaXhbaW50KGFfYm9uZUlkcy55ICogNjU1MzUuMGYpXSAqIGFfYm9uZVdlaWdodHMueTsKICAgIGZsb2F0NHg0IF8xMjQgPSBfNThfYm9uZXNNYXRyaXhbaW50KGFfYm9uZUlkcy56ICogNjU1MzUuMGYpXSAqIGFfYm9uZVdlaWdodHMuejsKICAgIGZsb2F0NHg0IF8xNDggPSBfNThfYm9uZXNNYXRyaXhbaW50KGFfYm9uZUlkcy53ICogNjU1MzUuMGYpXSAqIGFfYm9uZVdlaWdodHMudzsKICAgIHJldHVybiBmbG9hdDR4NCgoKF83NlswXSArIF8xMDBbMF0pICsgXzEyNFswXSkgKyBfMTQ4WzBdLCAoKF83NlsxXSArIF8xMDBbMV0pICsgXzEyNFsxXSkgKyBfMTQ4WzFdLCAoKF83NlsyXSArIF8xMDBbMl0pICsgXzEyNFsyXSkgKyBfMTQ4WzJdLCAoKF83NlszXSArIF8xMDBbM10pICsgXzEyNFszXSkgKyBfMTQ4WzNdKTsKfQoKZmxvYXQzIGdldE1vcnBoUG9zaXRpb24oZmxvYXQzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKZmxvYXQzIGdldFNraW5Qb3NpdGlvbihpbm91dCBmbG9hdDMgcG9zLCBmbG9hdDR4NCBib25lVHJhbnNmb3JtKQp7CiAgICBmbG9hdDQgXzE3NiA9IG11bChmbG9hdDQocG9zLCAxLjBmKSwgYm9uZVRyYW5zZm9ybSk7CiAgICBwb3MgPSBmbG9hdDMoXzE3Ni54eXopIC8gXzE3Ni53Lnh4eDsKICAgIHJldHVybiBwb3M7Cn0KCmZsb2F0NCBnZXRQb3NpdGlvbihmbG9hdDR4NCBib25lVHJhbnNmb3JtKQp7CiAgICBmbG9hdDMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgZmxvYXQzIHBhcmFtXzEgPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIGZsb2F0NHg0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgZmxvYXQzIF8yNTIgPSBnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMik7CiAgICByZXR1cm4gZmxvYXQ0KF8yNTIsIDEuMGYpOwp9CgpmbG9hdDMgZ2V0TW9ycGhUYW5nZW50KGZsb2F0MyB0YW5nZW50KQp7CiAgICByZXR1cm4gdGFuZ2VudDsKfQoKZmxvYXQzIGdldFNraW5UYW5nZW50KGlub3V0IGZsb2F0MyB0YW5nZW50LCBmbG9hdDR4NCBib25lVHJhbnNmb3JtKQp7CiAgICBmbG9hdDQgXzIxOSA9IG11bChmbG9hdDQodGFuZ2VudCwgMS4wZiksIGJvbmVUcmFuc2Zvcm0pOwogICAgdGFuZ2VudCA9IGZsb2F0MyhfMjE5Lnh5eikgLyBfMjE5LncueHh4OwogICAgcmV0dXJuIHRhbmdlbnQ7Cn0KCmZsb2F0MyBnZXRUYW5nZW50KGZsb2F0NHg0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIGZsb2F0MyBwYXJhbSA9IGFfdGFuZ2VudC54eXo7CiAgICBmbG9hdDMgcGFyYW1fMSA9IGdldE1vcnBoVGFuZ2VudChwYXJhbSk7CiAgICBmbG9hdDR4NCBwYXJhbV8yID0gYm9uZVRyYW5zZm9ybTsKICAgIGZsb2F0MyBfMjg2ID0gZ2V0U2tpblRhbmdlbnQocGFyYW1fMSwgcGFyYW1fMik7CiAgICByZXR1cm4gbm9ybWFsaXplKF8yODYpOwp9CgpmbG9hdDMgZ2V0TW9ycGhOb3JtYWwoZmxvYXQzIG5vcm1hbCkKewogICAgcmV0dXJuIG5vcm1hbDsKfQoKZmxvYXQzIGdldFNraW5Ob3JtYWwoaW5vdXQgZmxvYXQzIG5vcm1hbCwgZmxvYXQ0eDQgYm9uZVRyYW5zZm9ybSkKewogICAgZmxvYXQ0IF8xOTggPSBtdWwoZmxvYXQ0KG5vcm1hbCwgMS4wZiksIGJvbmVUcmFuc2Zvcm0pOwogICAgbm9ybWFsID0gZmxvYXQzKF8xOTgueHl6KSAvIF8xOTgudy54eHg7CiAgICByZXR1cm4gbm9ybWFsOwp9CgpmbG9hdDMgZ2V0Tm9ybWFsKGZsb2F0NHg0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIGZsb2F0MyBwYXJhbSA9IGFfbm9ybWFsOwogICAgZmxvYXQzIHBhcmFtXzEgPSBnZXRNb3JwaE5vcm1hbChwYXJhbSk7CiAgICBmbG9hdDR4NCBwYXJhbV8yID0gYm9uZVRyYW5zZm9ybTsKICAgIGZsb2F0MyBfMjcwID0gZ2V0U2tpbk5vcm1hbChwYXJhbV8xLCBwYXJhbV8yKTsKICAgIHJldHVybiBub3JtYWxpemUoXzI3MCk7Cn0KCnZvaWQgdmVydF9tYWluKCkKewogICAgZmxvYXQ0eDQgXzI5MiA9IGdldEJvbmVUcmFuc2Zvcm0oKTsKICAgIGZsb2F0NHg0IHBhcmFtID0gXzI5MjsKICAgIGZsb2F0NCBfMjk2ID0gZ2V0UG9zaXRpb24ocGFyYW0pOwogICAgZmxvYXQ0IF8zMDQgPSBtdWwoXzI5NiwgcGJyUGFyYW1zX21vZGVsTWF0cml4KTsKICAgIHZfcG9zaXRpb24gPSBmbG9hdDMoXzMwNC54eXopIC8gXzMwNC53Lnh4eDsKICAgIGZsb2F0NHg0IHBhcmFtXzEgPSBfMjkyOwogICAgZmxvYXQ0eDQgcGFyYW1fMiA9IF8yOTI7CiAgICBmbG9hdDMgXzMzNyA9IG5vcm1hbGl6ZShmbG9hdDMobXVsKGZsb2F0NChnZXROb3JtYWwocGFyYW1fMiksIDAuMGYpLCBwYnJQYXJhbXNfbm9ybWFsTWF0cml4KS54eXopKTsKICAgIGZsb2F0MyBfMzUxID0gbm9ybWFsaXplKGZsb2F0MyhtdWwoZmxvYXQ0KGdldFRhbmdlbnQocGFyYW1fMSksIDAuMGYpLCBwYnJQYXJhbXNfbW9kZWxNYXRyaXgpLnh5eikpOwogICAgdl90Ym4gPSBmbG9hdDN4MyhfMzUxLCBjcm9zcyhfMzM3LCBfMzUxKSAqIGFfdGFuZ2VudC53LCBfMzM3KTsKICAgIHZfdXYxID0gMC4wZi54eDsKICAgIHZfdXYyID0gMC4wZi54eDsKICAgIHZfdXYxID0gYV90ZXhjb29yZDE7CiAgICB2X2NvbG9yID0gYV9jb2xvcjsKICAgIGdsX1Bvc2l0aW9uID0gbXVsKF8yOTYsIHBiclBhcmFtc19tdnBNYXRyaXgpOwogICAgZ2xfUG9zaXRpb24ueiA9IChnbF9Qb3NpdGlvbi56ICsgZ2xfUG9zaXRpb24udykgKiAwLjU7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICBhX2JvbmVJZHMgPSBzdGFnZV9pbnB1dC5hX2JvbmVJZHM7CiAgICBhX2JvbmVXZWlnaHRzID0gc3RhZ2VfaW5wdXQuYV9ib25lV2VpZ2h0czsKICAgIGFfcG9zaXRpb24gPSBzdGFnZV9pbnB1dC5hX3Bvc2l0aW9uOwogICAgYV9ub3JtYWwgPSBzdGFnZV9pbnB1dC5hX25vcm1hbDsKICAgIGFfdGFuZ2VudCA9IHN0YWdlX2lucHV0LmFfdGFuZ2VudDsKICAgIGFfdGV4Y29vcmQxID0gc3RhZ2VfaW5wdXQuYV90ZXhjb29yZDE7CiAgICBhX2NvbG9yID0gc3RhZ2VfaW5wdXQuYV9jb2xvcjsKICAgIHZlcnRfbWFpbigpOwogICAgU1BJUlZfQ3Jvc3NfT3V0cHV0IHN0YWdlX291dHB1dDsKICAgIHN0YWdlX291dHB1dC5nbF9Qb3NpdGlvbiA9IGdsX1Bvc2l0aW9uOwogICAgc3RhZ2Vfb3V0cHV0LnZfcG9zaXRpb24gPSB2X3Bvc2l0aW9uOwogICAgc3RhZ2Vfb3V0cHV0LnZfdGJuID0gdl90Ym47CiAgICBzdGFnZV9vdXRwdXQudl91djEgPSB2X3V2MTsKICAgIHN0YWdlX291dHB1dC52X3V2MiA9IHZfdXYyOwogICAgc3RhZ2Vfb3V0cHV0LnZfY29sb3IgPSB2X2NvbG9yOwogICAgcmV0dXJuIHN0YWdlX291dHB1dDsKfQpSRUZMlgMAAG1lc2hfVXYxUHVjTm9yTm1wVGFuVmM0Rm9nU2tpX2gABwAAAAAAAAACAAAABAAAAGFfYm9uZUlkcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAEZMVDRhX2JvbmVXZWlnaHRzAAAAAAAAAAAAAAAAAAAAAAAAAAUAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAABGTFQ0YV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2Ffbm9ybWFsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDNhX3RhbmdlbnQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0YV90ZXhjb29yZDEAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAARkxUMmFfY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAEZMVDQBAAAAdV92c19za2lubmluZwAAAAAAAAAAAAAAAAAAAAAAAABfNTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgBEAAAFib25lc01hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDRGAAAAAAAAAAMAAAB1X3ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAADAAAAAAW1vZGVsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAbm9ybWFsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAEAAAABtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAgAAAAFNUQUd/MwAARlJBR0NPREUcLwAAc3RydWN0IE1hdGVyaWFsSW5mbwp7CiAgICBmbG9hdCBwZXJjZXB0dWFsUm91Z2huZXNzOwogICAgZmxvYXQzIGYwOwogICAgZmxvYXQgYWxwaGFSb3VnaG5lc3M7CiAgICBmbG9hdDMgYWxiZWRvQ29sb3I7CiAgICBmbG9hdDMgZjkwOwogICAgZmxvYXQgbWV0YWxsaWM7CiAgICBmbG9hdDMgbjsKICAgIGZsb2F0MyBiYXNlQ29sb3I7Cn07CgpzdHJ1Y3QgTm9ybWFsSW5mbwp7CiAgICBmbG9hdDMgbmc7CiAgICBmbG9hdDMgbjsKICAgIGZsb2F0MyB0OwogICAgZmxvYXQzIGI7Cn07CgpzdHJ1Y3QgTGlnaHQKewogICAgaW50IHR5cGU7CiAgICBmbG9hdDMgZGlyZWN0aW9uOwogICAgZmxvYXQzIGNvbG9yOwogICAgZmxvYXQzIHBvc2l0aW9uOwogICAgZmxvYXQgcmFuZ2U7CiAgICBmbG9hdCBpbnRlbnNpdHk7CiAgICBmbG9hdCBpbm5lckNvbmVDb3M7CiAgICBmbG9hdCBvdXRlckNvbmVDb3M7CiAgICBib29sIHNoYWRvd3M7CiAgICBpbnQgc2hhZG93TWFwSW5kZXg7CiAgICBpbnQgbnVtU2hhZG93Q2FzY2FkZXM7Cn07CgpjYnVmZmVyIHVfZnNfcGJyUGFyYW1zIDogcmVnaXN0ZXIoYjApCnsKICAgIGZsb2F0NCBwYnJQYXJhbXNfYmFzZUNvbG9yRmFjdG9yIDogcGFja29mZnNldChjMCk7CiAgICBmbG9hdCBwYnJQYXJhbXNfbWV0YWxsaWNGYWN0b3IgOiBwYWNrb2Zmc2V0KGMxKTsKICAgIGZsb2F0IHBiclBhcmFtc19yb3VnaG5lc3NGYWN0b3IgOiBwYWNrb2Zmc2V0KGMxLnkpOwogICAgZmxvYXQzIHBiclBhcmFtc19lbWlzc2l2ZUZhY3RvciA6IHBhY2tvZmZzZXQoYzIpOwogICAgZmxvYXQzIHBiclBhcmFtc19hbWJpZW50TGlnaHQgOiBwYWNrb2Zmc2V0KGMzKTsKICAgIGZsb2F0IHBiclBhcmFtc19hbWJpZW50RmFjdG9yIDogcGFja29mZnNldChjMy53KTsKfTsKCmNidWZmZXIgdV9mc19saWdodGluZyA6IHJlZ2lzdGVyKGIxKQp7CiAgICBmbG9hdDQgbGlnaHRpbmdfZGlyZWN0aW9uX3JhbmdlWzZdIDogcGFja29mZnNldChjMCk7CiAgICBmbG9hdDQgbGlnaHRpbmdfY29sb3JfaW50ZW5zaXR5WzZdIDogcGFja29mZnNldChjNik7CiAgICBmbG9hdDQgbGlnaHRpbmdfcG9zaXRpb25fdHlwZVs2XSA6IHBhY2tvZmZzZXQoYzEyKTsKICAgIGZsb2F0NCBsaWdodGluZ19pbkNvbmVfb3VDb25lX3NoYWRvd3NfY2FzY2FkZXNbNl0gOiBwYWNrb2Zmc2V0KGMxOCk7CiAgICBmbG9hdDQgbGlnaHRpbmdfZXllUG9zIDogcGFja29mZnNldChjMjQpOwp9OwoKY2J1ZmZlciB1X2ZzX2ZvZyA6IHJlZ2lzdGVyKGIyKQp7CiAgICBmbG9hdDQgZm9nX2NvbG9yX3R5cGUgOiBwYWNrb2Zmc2V0KGMwKTsKICAgIGZsb2F0NCBmb2dfZGVuc2l0eV9zdGFydF9lbmQgOiBwYWNrb2Zmc2V0KGMxKTsKfTsKClRleHR1cmUyRDxmbG9hdDQ+IHVfYmFzZUNvbG9yVGV4dHVyZSA6IHJlZ2lzdGVyKHQwKTsKU2FtcGxlclN0YXRlIF91X2Jhc2VDb2xvclRleHR1cmVfc2FtcGxlciA6IHJlZ2lzdGVyKHMwKTsKVGV4dHVyZTJEPGZsb2F0ND4gdV9tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUgOiByZWdpc3Rlcih0MSk7ClNhbXBsZXJTdGF0ZSBfdV9tZXRhbGxpY1JvdWdobmVzc1RleHR1cmVfc2FtcGxlciA6IHJlZ2lzdGVyKHMxKTsKVGV4dHVyZTJEPGZsb2F0ND4gdV9vY2NsdXNpb25UZXh0dXJlIDogcmVnaXN0ZXIodDIpOwpTYW1wbGVyU3RhdGUgX3Vfb2NjbHVzaW9uVGV4dHVyZV9zYW1wbGVyIDogcmVnaXN0ZXIoczIpOwpUZXh0dXJlMkQ8ZmxvYXQ0PiB1X2VtaXNzaXZlVGV4dHVyZSA6IHJlZ2lzdGVyKHQzKTsKU2FtcGxlclN0YXRlIF91X2VtaXNzaXZlVGV4dHVyZV9zYW1wbGVyIDogcmVnaXN0ZXIoczMpOwpUZXh0dXJlMkQ8ZmxvYXQ0PiB1X25vcm1hbFRleHR1cmUgOiByZWdpc3Rlcih0NCk7ClNhbXBsZXJTdGF0ZSBfdV9ub3JtYWxUZXh0dXJlX3NhbXBsZXIgOiByZWdpc3RlcihzNCk7CgpzdGF0aWMgZmxvYXQ0IGdsX0ZyYWdDb29yZDsKc3RhdGljIGZsb2F0NCB2X2NvbG9yOwpzdGF0aWMgZmxvYXQyIHZfdXYxOwpzdGF0aWMgZmxvYXQzIHZfcG9zaXRpb247CnN0YXRpYyBmbG9hdDN4MyB2X3RibjsKc3RhdGljIGZsb2F0NCBnX2ZpbmFsQ29sb3I7CnN0YXRpYyBmbG9hdDIgdl91djI7CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfSW5wdXQKewogICAgZmxvYXQzIHZfcG9zaXRpb24gOiBURVhDT09SRDA7CiAgICBmbG9hdDN4MyB2X3RibiA6IFRFWENPT1JEMTsKICAgIGZsb2F0MiB2X3V2MSA6IFRFWENPT1JENDsKICAgIGZsb2F0MiB2X3V2MiA6IFRFWENPT1JENTsKICAgIGZsb2F0NCB2X2NvbG9yIDogVEVYQ09PUkQ2OwogICAgZmxvYXQ0IGdsX0ZyYWdDb29yZCA6IFNWX1Bvc2l0aW9uOwp9OwoKc3RydWN0IFNQSVJWX0Nyb3NzX091dHB1dAp7CiAgICBmbG9hdDQgZ19maW5hbENvbG9yIDogU1ZfVGFyZ2V0MDsKfTsKCmZsb2F0MyBzUkdCVG9MaW5lYXIoZmxvYXQzIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNWYueHh4KTsKfQoKZmxvYXQ0IHNSR0JUb0xpbmVhcihmbG9hdDQgc3JnYkluKQp7CiAgICBmbG9hdDMgcGFyYW0gPSBzcmdiSW4ueHl6OwogICAgcmV0dXJuIGZsb2F0NChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCmZsb2F0NCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2X2NvbG9yOwp9CgpmbG9hdDQgZ2V0QmFzZUNvbG9yKCkKewogICAgZmxvYXQ0IGJhc2VDb2xvciA9IHBiclBhcmFtc19iYXNlQ29sb3JGYWN0b3I7CiAgICBmbG9hdDQgcGFyYW0gPSB1X2Jhc2VDb2xvclRleHR1cmUuU2FtcGxlKF91X2Jhc2VDb2xvclRleHR1cmVfc2FtcGxlciwgdl91djEpOwogICAgZmxvYXQ0IF8xNjggPSBiYXNlQ29sb3I7CiAgICBmbG9hdDQgXzE2OSA9IF8xNjggKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzE2OTsKICAgIHJldHVybiBfMTY5ICogZ2V0VmVydGV4Q29sb3IoKTsKfQoKTm9ybWFsSW5mbyBnZXROb3JtYWxJbmZvKCkKewogICAgZmxvYXQzIF8yOTMgPSBub3JtYWxpemUodl90Ym5bMF0pOwogICAgZmxvYXQzIF8yOTcgPSBub3JtYWxpemUodl90Ym5bMV0pOwogICAgZmxvYXQzIF8zMDEgPSBub3JtYWxpemUodl90Ym5bMl0pOwogICAgTm9ybWFsSW5mbyBfMTAxNyA9IHsgXzMwMSwgbXVsKG5vcm1hbGl6ZSgodV9ub3JtYWxUZXh0dXJlLlNhbXBsZShfdV9ub3JtYWxUZXh0dXJlX3NhbXBsZXIsIHZfdXYxKS54eXogKiAyLjBmKSAtIDEuMGYueHh4KSwgZmxvYXQzeDMoXzI5MywgXzI5NywgXzMwMSkpLCBfMjkzLCBfMjk3IH07CiAgICByZXR1cm4gXzEwMTc7Cn0KCk1hdGVyaWFsSW5mbyBnZXRNZXRhbGxpY1JvdWdobmVzc0luZm8oaW5vdXQgTWF0ZXJpYWxJbmZvIGluZm8sIGZsb2F0IGYwX2lvcikKewogICAgaW5mby5tZXRhbGxpYyA9IHBiclBhcmFtc19tZXRhbGxpY0ZhY3RvcjsKICAgIGluZm8ucGVyY2VwdHVhbFJvdWdobmVzcyA9IHBiclBhcmFtc19yb3VnaG5lc3NGYWN0b3I7CiAgICBmbG9hdDQgXzE4OSA9IHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlLlNhbXBsZShfdV9tZXRhbGxpY1JvdWdobmVzc1RleHR1cmVfc2FtcGxlciwgdl91djEpOwogICAgaW5mby5wZXJjZXB0dWFsUm91Z2huZXNzICo9IF8xODkueTsKICAgIGluZm8ubWV0YWxsaWMgKj0gXzE4OS56OwogICAgZmxvYXQzIF8yMDYgPSBmMF9pb3IueHh4OwogICAgaW5mby5hbGJlZG9Db2xvciA9IGxlcnAoaW5mby5iYXNlQ29sb3IgKiAoMS4wZi54eHggLSBfMjA2KSwgMC4wZi54eHgsIGluZm8ubWV0YWxsaWMueHh4KTsKICAgIGluZm8uZjAgPSBsZXJwKF8yMDYsIGluZm8uYmFzZUNvbG9yLCBpbmZvLm1ldGFsbGljLnh4eCk7CiAgICByZXR1cm4gaW5mbzsKfQoKZmxvYXQ0IGdldE9jY2x1c2lvblRleHR1cmUoKQp7CiAgICByZXR1cm4gdV9vY2NsdXNpb25UZXh0dXJlLlNhbXBsZShfdV9vY2NsdXNpb25UZXh0dXJlX3NhbXBsZXIsIHZfdXYxKTsKfQoKZmxvYXQgY2xhbXBlZERvdChmbG9hdDMgeCwgZmxvYXQzIHkpCnsKICAgIHJldHVybiBjbGFtcChkb3QoeCwgeSksIDAuMGYsIDEuMGYpOwp9CgpmbG9hdCBnZXRSYW5nZUF0dGVudWF0aW9uKGZsb2F0IHJhbmdlLCBmbG9hdCBfZGlzdGFuY2UpCnsKICAgIGlmIChyYW5nZSA8PSAwLjBmKQogICAgewogICAgICAgIHJldHVybiAxLjBmIC8gcG93KF9kaXN0YW5jZSwgMi4wZik7CiAgICB9CiAgICByZXR1cm4gbWF4KG1pbigxLjBmIC0gcG93KF9kaXN0YW5jZSAvIHJhbmdlLCA0LjBmKSwgMS4wZiksIDAuMGYpIC8gcG93KF9kaXN0YW5jZSwgMi4wZik7Cn0KCmZsb2F0IGdldFNwb3RBdHRlbnVhdGlvbihmbG9hdDMgcG9pbnRUb0xpZ2h0LCBmbG9hdDMgc3BvdERpcmVjdGlvbiwgZmxvYXQgb3V0ZXJDb25lQ29zLCBmbG9hdCBpbm5lckNvbmVDb3MpCnsKICAgIGZsb2F0IF80OTIgPSBkb3Qobm9ybWFsaXplKHNwb3REaXJlY3Rpb24pLCBub3JtYWxpemUoLXBvaW50VG9MaWdodCkpOwogICAgaWYgKF80OTIgPiBvdXRlckNvbmVDb3MpCiAgICB7CiAgICAgICAgaWYgKF80OTIgPCBpbm5lckNvbmVDb3MpCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gc21vb3Roc3RlcChvdXRlckNvbmVDb3MsIGlubmVyQ29uZUNvcywgXzQ5Mik7CiAgICAgICAgfQogICAgICAgIHJldHVybiAxLjBmOwogICAgfQogICAgcmV0dXJuIDAuMGY7Cn0KCmZsb2F0MyBnZXRMaWdoSW50ZW5zaXR5KExpZ2h0IGxpZ2h0LCBmbG9hdDMgcG9pbnRUb0xpZ2h0KQp7CiAgICBmbG9hdCByYW5nZUF0dGVudWF0aW9uID0gMS4wZjsKICAgIGZsb2F0IHNwb3RBdHRlbnVhdGlvbiA9IDEuMGY7CiAgICBpZiAobGlnaHQudHlwZSAhPSAwKQogICAgewogICAgICAgIGZsb2F0IHBhcmFtID0gbGlnaHQucmFuZ2U7CiAgICAgICAgZmxvYXQgcGFyYW1fMSA9IGxlbmd0aChwb2ludFRvTGlnaHQpOwogICAgICAgIHJhbmdlQXR0ZW51YXRpb24gPSBnZXRSYW5nZUF0dGVudWF0aW9uKHBhcmFtLCBwYXJhbV8xKTsKICAgIH0KICAgIGlmIChsaWdodC50eXBlID09IDIpCiAgICB7CiAgICAgICAgZmxvYXQzIHBhcmFtXzIgPSBwb2ludFRvTGlnaHQ7CiAgICAgICAgZmxvYXQzIHBhcmFtXzMgPSBsaWdodC5kaXJlY3Rpb247CiAgICAgICAgZmxvYXQgcGFyYW1fNCA9IGxpZ2h0Lm91dGVyQ29uZUNvczsKICAgICAgICBmbG9hdCBwYXJhbV81ID0gbGlnaHQuaW5uZXJDb25lQ29zOwogICAgICAgIHNwb3RBdHRlbnVhdGlvbiA9IGdldFNwb3RBdHRlbnVhdGlvbihwYXJhbV8yLCBwYXJhbV8zLCBwYXJhbV80LCBwYXJhbV81KTsKICAgIH0KICAgIHJldHVybiBsaWdodC5jb2xvciAqICgocmFuZ2VBdHRlbnVhdGlvbiAqIHNwb3RBdHRlbnVhdGlvbikgKiBsaWdodC5pbnRlbnNpdHkpOwp9CgpmbG9hdDMgRl9TY2hsaWNrKGZsb2F0MyBmMCwgZmxvYXQzIGY5MCwgZmxvYXQgVmRvdEgpCnsKICAgIHJldHVybiBmMCArICgoZjkwIC0gZjApICogcG93KGNsYW1wKDEuMGYgLSBWZG90SCwgMC4wZiwgMS4wZiksIDUuMGYpKTsKfQoKZmxvYXQzIEJSREZfbGFtYmVydGlhbihmbG9hdDMgZjAsIGZsb2F0MyBmOTAsIGZsb2F0MyBkaWZmdXNlQ29sb3IsIGZsb2F0IFZkb3RIKQp7CiAgICBmbG9hdDMgcGFyYW0gPSBmMDsKICAgIGZsb2F0MyBwYXJhbV8xID0gZjkwOwogICAgZmxvYXQgcGFyYW1fMiA9IFZkb3RIOwogICAgcmV0dXJuICgxLjBmLnh4eCAtIEZfU2NobGljayhwYXJhbSwgcGFyYW1fMSwgcGFyYW1fMikpICogKGRpZmZ1c2VDb2xvciAqIDAuMzE4MzA5ODczMzQyNTE0MDM4MDg1OTM3NWYueHh4KTsKfQoKZmxvYXQgVl9HR1goZmxvYXQgTmRvdEwsIGZsb2F0IE5kb3RWLCBmbG9hdCBhbHBoYVJvdWdobmVzcykKewogICAgZmxvYXQgXzM2MSA9IGFscGhhUm91Z2huZXNzICogYWxwaGFSb3VnaG5lc3M7CiAgICBmbG9hdCBfMzY4ID0gMS4wZiAtIF8zNjE7CiAgICBmbG9hdCBfMzg5ID0gKE5kb3RMICogc3FydCgoKE5kb3RWICogTmRvdFYpICogXzM2OCkgKyBfMzYxKSkgKyAoTmRvdFYgKiBzcXJ0KCgoTmRvdEwgKiBOZG90TCkgKiBfMzY4KSArIF8zNjEpKTsKICAgIGlmIChfMzg5ID4gMC4wZikKICAgIHsKICAgICAgICByZXR1cm4gMC41ZiAvIF8zODk7CiAgICB9CiAgICByZXR1cm4gMC4wZjsKfQoKZmxvYXQgRF9HR1goZmxvYXQgTmRvdEgsIGZsb2F0IGFscGhhUm91Z2huZXNzKQp7CiAgICBmbG9hdCBfNDAzID0gYWxwaGFSb3VnaG5lc3MgKiBhbHBoYVJvdWdobmVzczsKICAgIGZsb2F0IF80MTEgPSAoKE5kb3RIICogTmRvdEgpICogKF80MDMgLSAxLjBmKSkgKyAxLjBmOwogICAgcmV0dXJuIF80MDMgLyAoKDMuMTQxNTkyNzQxMDEyNTczMjQyMTg3NWYgKiBfNDExKSAqIF80MTEpOwp9CgpmbG9hdDMgQlJERl9zcGVjdWxhckdHWChmbG9hdDMgZjAsIGZsb2F0MyBmOTAsIGZsb2F0IGFscGhhUm91Z2huZXNzLCBmbG9hdCBWZG90SCwgZmxvYXQgTmRvdEwsIGZsb2F0IE5kb3RWLCBmbG9hdCBOZG90SCkKewogICAgZmxvYXQzIHBhcmFtID0gZjA7CiAgICBmbG9hdDMgcGFyYW1fMSA9IGY5MDsKICAgIGZsb2F0IHBhcmFtXzIgPSBWZG90SDsKICAgIGZsb2F0IHBhcmFtXzMgPSBOZG90TDsKICAgIGZsb2F0IHBhcmFtXzQgPSBOZG90VjsKICAgIGZsb2F0IHBhcmFtXzUgPSBhbHBoYVJvdWdobmVzczsKICAgIGZsb2F0IHBhcmFtXzYgPSBOZG90SDsKICAgIGZsb2F0IHBhcmFtXzcgPSBhbHBoYVJvdWdobmVzczsKICAgIHJldHVybiAoRl9TY2hsaWNrKHBhcmFtLCBwYXJhbV8xLCBwYXJhbV8yKSAqIFZfR0dYKHBhcmFtXzMsIHBhcmFtXzQsIHBhcmFtXzUpKSAqIERfR0dYKHBhcmFtXzYsIHBhcmFtXzcpOwp9CgpmbG9hdDQgZ2V0RW1pc3NpdmVUZXh0dXJlKCkKewogICAgcmV0dXJuIHVfZW1pc3NpdmVUZXh0dXJlLlNhbXBsZShfdV9lbWlzc2l2ZVRleHR1cmVfc2FtcGxlciwgdl91djEpOwp9CgpmbG9hdDMgbGluZWFyVG9zUkdCKGZsb2F0MyBjb2xvcikKewogICAgcmV0dXJuIHBvdyhjb2xvciwgMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1Zi54eHgpOwp9Cgp2b2lkIGZyYWdfbWFpbigpCnsKICAgIGZsb2F0NCBfNTU3ID0gZ2V0QmFzZUNvbG9yKCk7CiAgICBmbG9hdDMgXzkzNSA9IGdldE5vcm1hbEluZm8oKS5uOwogICAgZmxvYXQzIF85MzkgPSAwLjBmLnh4eDsKICAgIGZsb2F0IF85NDAgPSAwLjBmOwogICAgZmxvYXQzIF85NDEgPSAwLjBmLnh4eDsKICAgIGZsb2F0MyBfOTQyID0gMC4wZi54eHg7CiAgICBmbG9hdDMgXzU3MiA9IF81NTcueHl6OwogICAgTWF0ZXJpYWxJbmZvIF85NjIgPSB7IDAuMGYsIDAuMGYueHh4LCAwLjBmLCAwLjBmLnh4eCwgMC4wZi54eHgsIDAuMGYsIDAuMGYueHh4LCBfNTcyIH07CiAgICBNYXRlcmlhbEluZm8gcGFyYW0gPSBfOTYyOwogICAgZmxvYXQgcGFyYW1fMSA9IDAuMDM5OTk5OTk5MTA1OTMwMzI4MzY5MTQwNjI1ZjsKICAgIE1hdGVyaWFsSW5mbyBfNTgyID0gZ2V0TWV0YWxsaWNSb3VnaG5lc3NJbmZvKHBhcmFtLCBwYXJhbV8xKTsKICAgIF85MzkgPSBfNTgyLmYwOwogICAgXzk0MSA9IF81ODIuYWxiZWRvQ29sb3I7CiAgICBmbG9hdCBfNTg1ID0gY2xhbXAoXzU4Mi5wZXJjZXB0dWFsUm91Z2huZXNzLCAwLjBmLCAxLjBmKTsKICAgIF85NDAgPSBfNTg1ICogXzU4NTsKICAgIF85NDIgPSBjbGFtcChtYXgobWF4KF81ODIuZjAueCwgXzU4Mi5mMC55KSwgXzU4Mi5mMC56KSAqIDUwLjBmLCAwLjBmLCAxLjBmKS54eHg7CiAgICBmbG9hdDMgZl9zcGVjdWxhciA9IDAuMGYueHh4OwogICAgZmxvYXQzIGZfZW1pc3NpdmUgPSAwLjBmLnh4eDsKICAgIGZsb2F0MyBmX2RpZmZ1c2UgPSAocGJyUGFyYW1zX2FtYmllbnRMaWdodCAqIHBvdyhwYnJQYXJhbXNfYW1iaWVudEZhY3RvciwgMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1ZikpICogXzU3MjsKICAgIGZsb2F0NCBfNjMwID0gZ2V0T2NjbHVzaW9uVGV4dHVyZSgpOwogICAgZmxvYXQgXzYzMSA9IF82MzAueDsKICAgIGZfZGlmZnVzZSAqPSBfNjMxOwogICAgZl9zcGVjdWxhciAqPSBfNjMxOwogICAgZmxvYXQzIF82NTggPSBub3JtYWxpemUobGlnaHRpbmdfZXllUG9zLnh5eiAtIHZfcG9zaXRpb24pOwogICAgZmxvYXQzIHBvaW50VG9MaWdodDsKICAgIGZvciAoaW50IGkgPSAwOyBpIDwgNjsgaSsrKQogICAgewogICAgICAgIGludCBfNjcxID0gaW50KGxpZ2h0aW5nX3Bvc2l0aW9uX3R5cGVbaV0udyk7CiAgICAgICAgaWYgKGxpZ2h0aW5nX2NvbG9yX2ludGVuc2l0eVtpXS53ID4gMC4wZikKICAgICAgICB7CiAgICAgICAgICAgIGlmIChfNjcxICE9IDApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHBvaW50VG9MaWdodCA9IGxpZ2h0aW5nX3Bvc2l0aW9uX3R5cGVbaV0ueHl6IC0gdl9wb3NpdGlvbjsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHBvaW50VG9MaWdodCA9IC1saWdodGluZ19kaXJlY3Rpb25fcmFuZ2VbaV0ueHl6OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZsb2F0MyBfNzMzID0gbm9ybWFsaXplKHBvaW50VG9MaWdodCk7CiAgICAgICAgICAgIGZsb2F0MyBfNzM4ID0gbm9ybWFsaXplKF83MzMgKyBfNjU4KTsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzIgPSBfOTM1OwogICAgICAgICAgICBmbG9hdDMgcGFyYW1fMyA9IF83MzM7CiAgICAgICAgICAgIGZsb2F0IF83NDQgPSBjbGFtcGVkRG90KHBhcmFtXzIsIHBhcmFtXzMpOwogICAgICAgICAgICBmbG9hdDMgcGFyYW1fNCA9IF85MzU7CiAgICAgICAgICAgIGZsb2F0MyBwYXJhbV81ID0gXzY1ODsKICAgICAgICAgICAgZmxvYXQgXzc1MCA9IGNsYW1wZWREb3QocGFyYW1fNCwgcGFyYW1fNSk7CiAgICAgICAgICAgIGZsb2F0MyBwYXJhbV82ID0gXzkzNTsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzcgPSBfNzM4OwogICAgICAgICAgICBmbG9hdDMgcGFyYW1fOCA9IF83MzM7CiAgICAgICAgICAgIGZsb2F0MyBwYXJhbV85ID0gXzczODsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzEwID0gXzY1ODsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzExID0gXzczODsKICAgICAgICAgICAgZmxvYXQgXzc2OCA9IGNsYW1wZWREb3QocGFyYW1fMTAsIHBhcmFtXzExKTsKICAgICAgICAgICAgaWYgKChfNzQ0ID4gMC4wZikgfHwgKF83NTAgPiAwLjBmKSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgTGlnaHQgXzEwMDggPSB7IF82NzEsIGxpZ2h0aW5nX2RpcmVjdGlvbl9yYW5nZVtpXS54eXosIGxpZ2h0aW5nX2NvbG9yX2ludGVuc2l0eVtpXS54eXosIGxpZ2h0aW5nX3Bvc2l0aW9uX3R5cGVbaV0ueHl6LCBsaWdodGluZ19kaXJlY3Rpb25fcmFuZ2VbaV0udywgbGlnaHRpbmdfY29sb3JfaW50ZW5zaXR5W2ldLncsIGxpZ2h0aW5nX2luQ29uZV9vdUNvbmVfc2hhZG93c19jYXNjYWRlc1tpXS54LCBsaWdodGluZ19pbkNvbmVfb3VDb25lX3NoYWRvd3NfY2FzY2FkZXNbaV0ueSwgKGxpZ2h0aW5nX2luQ29uZV9vdUNvbmVfc2hhZG93c19jYXNjYWRlc1tpXS56IDwgMC4wZikgPyBmYWxzZSA6IHRydWUsIGludChsaWdodGluZ19pbkNvbmVfb3VDb25lX3NoYWRvd3NfY2FzY2FkZXNbaV0ueiksIGludChsaWdodGluZ19pbkNvbmVfb3VDb25lX3NoYWRvd3NfY2FzY2FkZXNbaV0udykgfTsKICAgICAgICAgICAgICAgIExpZ2h0IHBhcmFtXzEyID0gXzEwMDg7CiAgICAgICAgICAgICAgICBmbG9hdDMgcGFyYW1fMTMgPSBwb2ludFRvTGlnaHQ7CiAgICAgICAgICAgICAgICBmbG9hdDMgXzc4NyA9IChnZXRMaWdoSW50ZW5zaXR5KHBhcmFtXzEyLCBwYXJhbV8xMykgKiAxLjBmKSAqIF83NDQ7CiAgICAgICAgICAgICAgICBmbG9hdDMgcGFyYW1fMTQgPSBfOTM5OwogICAgICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzE1ID0gXzk0MjsKICAgICAgICAgICAgICAgIGZsb2F0MyBwYXJhbV8xNiA9IF85NDE7CiAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8xNyA9IF83Njg7CiAgICAgICAgICAgICAgICBmX2RpZmZ1c2UgKz0gKF83ODcgKiBCUkRGX2xhbWJlcnRpYW4ocGFyYW1fMTQsIHBhcmFtXzE1LCBwYXJhbV8xNiwgcGFyYW1fMTcpKTsKICAgICAgICAgICAgICAgIGZsb2F0MyBwYXJhbV8xOCA9IF85Mzk7CiAgICAgICAgICAgICAgICBmbG9hdDMgcGFyYW1fMTkgPSBfOTQyOwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMjAgPSBfOTQwOwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMjEgPSBfNzY4OwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMjIgPSBfNzQ0OwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMjMgPSBfNzUwOwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMjQgPSBjbGFtcGVkRG90KHBhcmFtXzYsIHBhcmFtXzcpOwogICAgICAgICAgICAgICAgZl9zcGVjdWxhciArPSAoXzc4NyAqIEJSREZfc3BlY3VsYXJHR1gocGFyYW1fMTgsIHBhcmFtXzE5LCBwYXJhbV8yMCwgcGFyYW1fMjEsIHBhcmFtXzIyLCBwYXJhbV8yMywgcGFyYW1fMjQpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGZfZW1pc3NpdmUgPSBwYnJQYXJhbXNfZW1pc3NpdmVGYWN0b3I7CiAgICBmbG9hdDMgcGFyYW1fMjUgPSBnZXRFbWlzc2l2ZVRleHR1cmUoKS54eXo7CiAgICBmbG9hdDMgXzgzNyA9IGZfZW1pc3NpdmU7CiAgICBmbG9hdDMgXzgzOCA9IF84MzcgKiBzUkdCVG9MaW5lYXIocGFyYW1fMjUpOwogICAgZl9lbWlzc2l2ZSA9IF84Mzg7CiAgICBmbG9hdDMgY29sb3IgPSAoXzgzOCArIGZfZGlmZnVzZSkgKyBmX3NwZWN1bGFyOwogICAgaW50IF84NTEgPSBpbnQoZm9nX2NvbG9yX3R5cGUudyk7CiAgICBmbG9hdCBmb2dGYWN0b3IgPSAwLjBmOwogICAgZmxvYXQgXzg3MyA9IGdsX0ZyYWdDb29yZC56IC8gZ2xfRnJhZ0Nvb3JkLnc7CiAgICBpZiAoXzg1MSA9PSAwKQogICAgewogICAgICAgIGZvZ0ZhY3RvciA9IChmb2dfZGVuc2l0eV9zdGFydF9lbmQudyAtIF84NzMpIC8gKGZvZ19kZW5zaXR5X3N0YXJ0X2VuZC53IC0gZm9nX2RlbnNpdHlfc3RhcnRfZW5kLnopOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIGlmIChfODUxID09IDEpCiAgICAgICAgewogICAgICAgICAgICBmb2dGYWN0b3IgPSBleHAyKCgoLWZvZ19kZW5zaXR5X3N0YXJ0X2VuZC54KSAqIF84NzMpICogMS40NDI2OTUwMjE2MjkzMzM0OTYwOTM3NWYpOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICBpZiAoXzg1MSA9PSAyKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBmb2dGYWN0b3IgPSBleHAyKCgoKCgtZm9nX2RlbnNpdHlfc3RhcnRfZW5kLngpICogZm9nX2RlbnNpdHlfc3RhcnRfZW5kLngpICogXzg3MykgKiBfODczKSAqIDEuNDQyNjk1MDIxNjI5MzMzNDk2MDkzNzVmKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGZsb2F0IF85MTIgPSBmb2dGYWN0b3I7CiAgICBmbG9hdCBfOTEzID0gY2xhbXAoXzkxMiwgMC4wZiwgMS4wZik7CiAgICBmb2dGYWN0b3IgPSBfOTEzOwogICAgZmxvYXQzIF85MTUgPSBjb2xvcjsKICAgIGZsb2F0MyBfOTE4ID0gbGVycChmb2dfY29sb3JfdHlwZS54eXosIF85MTUsIF85MTMueHh4KTsKICAgIGNvbG9yID0gXzkxODsKICAgIGZsb2F0MyBwYXJhbV8yNiA9IF85MTg7CiAgICBnX2ZpbmFsQ29sb3IgPSBmbG9hdDQobGluZWFyVG9zUkdCKHBhcmFtXzI2KSwgXzU1Ny53KTsKfQoKU1BJUlZfQ3Jvc3NfT3V0cHV0IG1haW4oU1BJUlZfQ3Jvc3NfSW5wdXQgc3RhZ2VfaW5wdXQpCnsKICAgIGdsX0ZyYWdDb29yZCA9IHN0YWdlX2lucHV0LmdsX0ZyYWdDb29yZDsKICAgIGdsX0ZyYWdDb29yZC53ID0gMS4wIC8gZ2xfRnJhZ0Nvb3JkLnc7CiAgICB2X2NvbG9yID0gc3RhZ2VfaW5wdXQudl9jb2xvcjsKICAgIHZfdXYxID0gc3RhZ2VfaW5wdXQudl91djE7CiAgICB2X3Bvc2l0aW9uID0gc3RhZ2VfaW5wdXQudl9wb3NpdGlvbjsKICAgIHZfdGJuID0gc3RhZ2VfaW5wdXQudl90Ym47CiAgICB2X3V2MiA9IHN0YWdlX2lucHV0LnZfdXYyOwogICAgZnJhZ19tYWluKCk7CiAgICBTUElSVl9Dcm9zc19PdXRwdXQgc3RhZ2Vfb3V0cHV0OwogICAgc3RhZ2Vfb3V0cHV0LmdfZmluYWxDb2xvciA9IGdfZmluYWxDb2xvcjsKICAgIHJldHVybiBzdGFnZV9vdXRwdXQ7Cn0KUkVGTE8EAABtZXNoX1V2MVB1Y05vck5tcFRhblZjNEZvZ1NraV9oAAAAAAAFAAAAAwAAAA0AAAB1X2Jhc2VDb2xvclRleHR1cmUAAAAAAAAAAAAAAAAAAAIAAAAAAAAAMkQgIFRGTFR1X21ldGFsbGljUm91Z2huZXNzVGV4dHVyZQAAAAAAAAIAAAABAAAAMkQgIFRGTFR1X29jY2x1c2lvblRleHR1cmUAAAAAAAAAAAAAAAAAAAIAAAACAAAAMkQgIFRGTFR1X2VtaXNzaXZlVGV4dHVyZQAAAAAAAAAAAAAAAAAAAAIAAAADAAAAMkQgIFRGTFR1X25vcm1hbFRleHR1cmUAAAAAAAAAAAAAAAAAAAAAAAIAAAAEAAAAMkQgIFRGTFQGAAAAdV9mc19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFiYXNlQ29sb3JGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAG1ldGFsbGljRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAQAAAAcm91Z2huZXNzRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABQAAABlbWlzc2l2ZUZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAIAAAAGFtYmllbnRMaWdodAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAwAAAAYW1iaWVudEZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAADwAAAAFAAAAdV9mc19saWdodGluZwAAAAAAAAAAAAAAAAAAAAAAAABsaWdodGluZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAkAEAAAFkaXJlY3Rpb25fcmFuZ2UAAAAAAAAAAAAAAAAAAAAAAEZMVDQGAAAAAAAAAGNvbG9yX2ludGVuc2l0eQAAAAAAAAAAAAAAAAAAAAAARkxUNAYAAABgAAAAcG9zaXRpb25fdHlwZQAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0BgAAAMAAAABpbkNvbmVfb3VDb25lX3NoYWRvd3NfY2FzY2FkZXMAAEZMVDQGAAAAIAEAAGV5ZVBvcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAACAAQAAAgAAAHVfZnNfZm9nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZm9nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAACAAAAABY29sb3JfdHlwZQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABkZW5zaXR5X3N0YXJ0X2VuZAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAEAAAAA==";
static const std::string mesh_PucShwPcfNorTanMtaMnr_hlsl5 = "";
static const std::string mesh_UltUv1Vc4_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUf/CQAAVkVSVENPREUCCAAAY2J1ZmZlciB1X3ZzX3BiclBhcmFtcyA6IHJlZ2lzdGVyKGIwKQp7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcGJyUGFyYW1zX21vZGVsTWF0cml4IDogcGFja29mZnNldChjMCk7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcGJyUGFyYW1zX25vcm1hbE1hdHJpeCA6IHBhY2tvZmZzZXQoYzQpOwogICAgcm93X21ham9yIGZsb2F0NHg0IHBiclBhcmFtc19tdnBNYXRyaXggOiBwYWNrb2Zmc2V0KGM4KTsKfTsKCgpzdGF0aWMgZmxvYXQ0IGdsX1Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQzIGFfcG9zaXRpb247CnN0YXRpYyBmbG9hdDMgdl9wb3NpdGlvbjsKc3RhdGljIGZsb2F0MiB2X3V2MTsKc3RhdGljIGZsb2F0MiB2X3V2MjsKc3RhdGljIGZsb2F0MiBhX3RleGNvb3JkMTsKc3RhdGljIGZsb2F0NCB2X2NvbG9yOwpzdGF0aWMgZmxvYXQ0IGFfY29sb3I7CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfSW5wdXQKewogICAgZmxvYXQzIGFfcG9zaXRpb24gOiBQT1NJVElPTjsKICAgIGZsb2F0MiBhX3RleGNvb3JkMSA6IE5PUk1BTDsKICAgIGZsb2F0NCBhX2NvbG9yIDogVEVYQ09PUkQwOwp9OwoKc3RydWN0IFNQSVJWX0Nyb3NzX091dHB1dAp7CiAgICBmbG9hdDMgdl9wb3NpdGlvbiA6IFRFWENPT1JEMDsKICAgIGZsb2F0MiB2X3V2MSA6IFRFWENPT1JEMTsKICAgIGZsb2F0MiB2X3V2MiA6IFRFWENPT1JEMjsKICAgIGZsb2F0NCB2X2NvbG9yIDogVEVYQ09PUkQzOwogICAgZmxvYXQ0IGdsX1Bvc2l0aW9uIDogU1ZfUG9zaXRpb247Cn07CgpmbG9hdDR4NCBnZXRCb25lVHJhbnNmb3JtKCkKewogICAgcmV0dXJuIGZsb2F0NHg0KDAuMGYueHh4eCwgMC4wZi54eHh4LCAwLjBmLnh4eHgsIDAuMGYueHh4eCk7Cn0KCmZsb2F0MyBnZXRNb3JwaFBvc2l0aW9uKGZsb2F0MyBwb3MpCnsKICAgIHJldHVybiBwb3M7Cn0KCmZsb2F0MyBnZXRTa2luUG9zaXRpb24oZmxvYXQzIHBvcywgZmxvYXQ0eDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKZmxvYXQ0IGdldFBvc2l0aW9uKGZsb2F0NHg0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIGZsb2F0MyBwYXJhbSA9IGFfcG9zaXRpb247CiAgICBmbG9hdDMgcGFyYW1fMSA9IGdldE1vcnBoUG9zaXRpb24ocGFyYW0pOwogICAgZmxvYXQ0eDQgcGFyYW1fMiA9IGJvbmVUcmFuc2Zvcm07CiAgICByZXR1cm4gZmxvYXQ0KGdldFNraW5Qb3NpdGlvbihwYXJhbV8xLCBwYXJhbV8yKSwgMS4wZik7Cn0KCnZvaWQgdmVydF9tYWluKCkKewogICAgZmxvYXQ0eDQgcGFyYW0gPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICBmbG9hdDQgXzY3ID0gZ2V0UG9zaXRpb24ocGFyYW0pOwogICAgZmxvYXQ0IF83OCA9IG11bChfNjcsIHBiclBhcmFtc19tb2RlbE1hdHJpeCk7CiAgICB2X3Bvc2l0aW9uID0gZmxvYXQzKF83OC54eXopIC8gXzc4LncueHh4OwogICAgdl91djEgPSAwLjBmLnh4OwogICAgdl91djIgPSAwLjBmLnh4OwogICAgdl91djEgPSBhX3RleGNvb3JkMTsKICAgIHZfY29sb3IgPSBhX2NvbG9yOwogICAgZ2xfUG9zaXRpb24gPSBtdWwoXzY3LCBwYnJQYXJhbXNfbXZwTWF0cml4KTsKICAgIGdsX1Bvc2l0aW9uLnogPSAoZ2xfUG9zaXRpb24ueiArIGdsX1Bvc2l0aW9uLncpICogMC41Owp9CgpTUElSVl9Dcm9zc19PdXRwdXQgbWFpbihTUElSVl9Dcm9zc19JbnB1dCBzdGFnZV9pbnB1dCkKewogICAgYV9wb3NpdGlvbiA9IHN0YWdlX2lucHV0LmFfcG9zaXRpb247CiAgICBhX3RleGNvb3JkMSA9IHN0YWdlX2lucHV0LmFfdGV4Y29vcmQxOwogICAgYV9jb2xvciA9IHN0YWdlX2lucHV0LmFfY29sb3I7CiAgICB2ZXJ0X21haW4oKTsKICAgIFNQSVJWX0Nyb3NzX091dHB1dCBzdGFnZV9vdXRwdXQ7CiAgICBzdGFnZV9vdXRwdXQuZ2xfUG9zaXRpb24gPSBnbF9Qb3NpdGlvbjsKICAgIHN0YWdlX291dHB1dC52X3Bvc2l0aW9uID0gdl9wb3NpdGlvbjsKICAgIHN0YWdlX291dHB1dC52X3V2MSA9IHZfdXYxOwogICAgc3RhZ2Vfb3V0cHV0LnZfdXYyID0gdl91djI7CiAgICBzdGFnZV9vdXRwdXQudl9jb2xvciA9IHZfY29sb3I7CiAgICByZXR1cm4gc3RhZ2Vfb3V0cHV0Owp9ClJFRkzpAQAAbWVzaF9VbHRVdjFWYzRfaGxzbDUAAAAAAAAAAAAAAAADAAAAAAAAAAEAAAADAAAAYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfdGV4Y29vcmQxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDJhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AwAAAHVfdnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAABbW9kZWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABub3JtYWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAQAAAAG12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAACAAAAAU1RBR2QJAABGUkFHQ09ERZcHAABjYnVmZmVyIHVfZnNfcGJyUGFyYW1zIDogcmVnaXN0ZXIoYjApCnsKICAgIGZsb2F0NCBwYnJQYXJhbXNfYmFzZUNvbG9yRmFjdG9yIDogcGFja29mZnNldChjMCk7CiAgICBmbG9hdCBwYnJQYXJhbXNfbWV0YWxsaWNGYWN0b3IgOiBwYWNrb2Zmc2V0KGMxKTsKICAgIGZsb2F0IHBiclBhcmFtc19yb3VnaG5lc3NGYWN0b3IgOiBwYWNrb2Zmc2V0KGMxLnkpOwogICAgZmxvYXQzIHBiclBhcmFtc19lbWlzc2l2ZUZhY3RvciA6IHBhY2tvZmZzZXQoYzIpOwogICAgZmxvYXQzIHBiclBhcmFtc19hbWJpZW50TGlnaHQgOiBwYWNrb2Zmc2V0KGMzKTsKICAgIGZsb2F0IHBiclBhcmFtc19hbWJpZW50RmFjdG9yIDogcGFja29mZnNldChjMy53KTsKfTsKClRleHR1cmUyRDxmbG9hdDQ+IHVfYmFzZUNvbG9yVGV4dHVyZSA6IHJlZ2lzdGVyKHQwKTsKU2FtcGxlclN0YXRlIF91X2Jhc2VDb2xvclRleHR1cmVfc2FtcGxlciA6IHJlZ2lzdGVyKHMwKTsKCnN0YXRpYyBmbG9hdDQgdl9jb2xvcjsKc3RhdGljIGZsb2F0MiB2X3V2MTsKc3RhdGljIGZsb2F0MyB2X3Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQ0IGdfZmluYWxDb2xvcjsKc3RhdGljIGZsb2F0MiB2X3V2MjsKCnN0cnVjdCBTUElSVl9Dcm9zc19JbnB1dAp7CiAgICBmbG9hdDMgdl9wb3NpdGlvbiA6IFRFWENPT1JEMDsKICAgIGZsb2F0MiB2X3V2MSA6IFRFWENPT1JEMTsKICAgIGZsb2F0MiB2X3V2MiA6IFRFWENPT1JEMjsKICAgIGZsb2F0NCB2X2NvbG9yIDogVEVYQ09PUkQzOwp9OwoKc3RydWN0IFNQSVJWX0Nyb3NzX091dHB1dAp7CiAgICBmbG9hdDQgZ19maW5hbENvbG9yIDogU1ZfVGFyZ2V0MDsKfTsKCmZsb2F0MyBzUkdCVG9MaW5lYXIoZmxvYXQzIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNWYueHh4KTsKfQoKZmxvYXQ0IHNSR0JUb0xpbmVhcihmbG9hdDQgc3JnYkluKQp7CiAgICBmbG9hdDMgcGFyYW0gPSBzcmdiSW4ueHl6OwogICAgcmV0dXJuIGZsb2F0NChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCmZsb2F0NCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2X2NvbG9yOwp9CgpmbG9hdDQgZ2V0QmFzZUNvbG9yKCkKewogICAgZmxvYXQ0IGJhc2VDb2xvciA9IHBiclBhcmFtc19iYXNlQ29sb3JGYWN0b3I7CiAgICBmbG9hdDQgcGFyYW0gPSB1X2Jhc2VDb2xvclRleHR1cmUuU2FtcGxlKF91X2Jhc2VDb2xvclRleHR1cmVfc2FtcGxlciwgdl91djEpOwogICAgZmxvYXQ0IF8xMDMgPSBiYXNlQ29sb3I7CiAgICBmbG9hdDQgXzEwNCA9IF8xMDMgKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzEwNDsKICAgIHJldHVybiBfMTA0ICogZ2V0VmVydGV4Q29sb3IoKTsKfQoKZmxvYXQzIGxpbmVhclRvc1JHQihmbG9hdDMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NWYueHh4KTsKfQoKdm9pZCBmcmFnX21haW4oKQp7CiAgICBmbG9hdDQgXzI1OSA9IGdldEJhc2VDb2xvcigpOwogICAgZmxvYXQzIHBhcmFtID0gXzI1OS54eXo7CiAgICBnX2ZpbmFsQ29sb3IgPSBmbG9hdDQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzI1OS53KTsKfQoKU1BJUlZfQ3Jvc3NfT3V0cHV0IG1haW4oU1BJUlZfQ3Jvc3NfSW5wdXQgc3RhZ2VfaW5wdXQpCnsKICAgIHZfY29sb3IgPSBzdGFnZV9pbnB1dC52X2NvbG9yOwogICAgdl91djEgPSBzdGFnZV9pbnB1dC52X3V2MTsKICAgIHZfcG9zaXRpb24gPSBzdGFnZV9pbnB1dC52X3Bvc2l0aW9uOwogICAgdl91djIgPSBzdGFnZV9pbnB1dC52X3V2MjsKICAgIGZyYWdfbWFpbigpOwogICAgU1BJUlZfQ3Jvc3NfT3V0cHV0IHN0YWdlX291dHB1dDsKICAgIHN0YWdlX291dHB1dC5nX2ZpbmFsQ29sb3IgPSBnX2ZpbmFsQ29sb3I7CiAgICByZXR1cm4gc3RhZ2Vfb3V0cHV0Owp9ClJFRky5AQAAbWVzaF9VbHRVdjFWYzRfaGxzbDUAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAAGAAAAdV9iYXNlQ29sb3JUZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUBgAAAHVfZnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABYmFzZUNvbG9yRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABtZXRhbGxpY0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAEAAAAHJvdWdobmVzc0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAUAAAAZW1pc3NpdmVGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAACAAAABhbWJpZW50TGlnaHQAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAMAAAAGFtYmllbnRGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAA8AAAA";
static const std::string mesh_UltUv1Vc4Txr_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUc4CwAAVkVSVENPREW+CAAAY2J1ZmZlciB1X3ZzX3BiclBhcmFtcyA6IHJlZ2lzdGVyKGIwKQp7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcGJyUGFyYW1zX21vZGVsTWF0cml4IDogcGFja29mZnNldChjMCk7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcGJyUGFyYW1zX25vcm1hbE1hdHJpeCA6IHBhY2tvZmZzZXQoYzQpOwogICAgcm93X21ham9yIGZsb2F0NHg0IHBiclBhcmFtc19tdnBNYXRyaXggOiBwYWNrb2Zmc2V0KGM4KTsKfTsKCmNidWZmZXIgdV92c19zcHJpdGVQYXJhbXMgOiByZWdpc3RlcihiMSkKewogICAgZmxvYXQ0IHNwcml0ZVBhcmFtc190ZXh0dXJlUmVjdCA6IHBhY2tvZmZzZXQoYzApOwp9OwoKCnN0YXRpYyBmbG9hdDQgZ2xfUG9zaXRpb247CnN0YXRpYyBmbG9hdDMgYV9wb3NpdGlvbjsKc3RhdGljIGZsb2F0MyB2X3Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQyIHZfdXYxOwpzdGF0aWMgZmxvYXQyIHZfdXYyOwpzdGF0aWMgZmxvYXQyIGFfdGV4Y29vcmQxOwpzdGF0aWMgZmxvYXQ0IHZfY29sb3I7CnN0YXRpYyBmbG9hdDQgYV9jb2xvcjsKCnN0cnVjdCBTUElSVl9Dcm9zc19JbnB1dAp7CiAgICBmbG9hdDMgYV9wb3NpdGlvbiA6IFBPU0lUSU9OOwogICAgZmxvYXQyIGFfdGV4Y29vcmQxIDogTk9STUFMOwogICAgZmxvYXQ0IGFfY29sb3IgOiBURVhDT09SRDA7Cn07CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfT3V0cHV0CnsKICAgIGZsb2F0MyB2X3Bvc2l0aW9uIDogVEVYQ09PUkQwOwogICAgZmxvYXQyIHZfdXYxIDogVEVYQ09PUkQxOwogICAgZmxvYXQyIHZfdXYyIDogVEVYQ09PUkQyOwogICAgZmxvYXQ0IHZfY29sb3IgOiBURVhDT09SRDM7CiAgICBmbG9hdDQgZ2xfUG9zaXRpb24gOiBTVl9Qb3NpdGlvbjsKfTsKCmZsb2F0NHg0IGdldEJvbmVUcmFuc2Zvcm0oKQp7CiAgICByZXR1cm4gZmxvYXQ0eDQoMC4wZi54eHh4LCAwLjBmLnh4eHgsIDAuMGYueHh4eCwgMC4wZi54eHh4KTsKfQoKZmxvYXQzIGdldE1vcnBoUG9zaXRpb24oZmxvYXQzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKZmxvYXQzIGdldFNraW5Qb3NpdGlvbihmbG9hdDMgcG9zLCBmbG9hdDR4NCBib25lVHJhbnNmb3JtKQp7CiAgICByZXR1cm4gcG9zOwp9CgpmbG9hdDQgZ2V0UG9zaXRpb24oZmxvYXQ0eDQgYm9uZVRyYW5zZm9ybSkKewogICAgZmxvYXQzIHBhcmFtID0gYV9wb3NpdGlvbjsKICAgIGZsb2F0MyBwYXJhbV8xID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBmbG9hdDR4NCBwYXJhbV8yID0gYm9uZVRyYW5zZm9ybTsKICAgIHJldHVybiBmbG9hdDQoZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpLCAxLjBmKTsKfQoKdm9pZCB2ZXJ0X21haW4oKQp7CiAgICBmbG9hdDR4NCBwYXJhbSA9IGdldEJvbmVUcmFuc2Zvcm0oKTsKICAgIGZsb2F0NCBfNjcgPSBnZXRQb3NpdGlvbihwYXJhbSk7CiAgICBmbG9hdDQgXzc4ID0gbXVsKF82NywgcGJyUGFyYW1zX21vZGVsTWF0cml4KTsKICAgIHZfcG9zaXRpb24gPSBmbG9hdDMoXzc4Lnh5eikgLyBfNzgudy54eHg7CiAgICB2X3V2MSA9IDAuMGYueHg7CiAgICB2X3V2MiA9IDAuMGYueHg7CiAgICB2X3V2MSA9IGFfdGV4Y29vcmQxOwogICAgdl91djEgPSAoYV90ZXhjb29yZDEgKiBzcHJpdGVQYXJhbXNfdGV4dHVyZVJlY3QuencpICsgc3ByaXRlUGFyYW1zX3RleHR1cmVSZWN0Lnh5OwogICAgdl9jb2xvciA9IGFfY29sb3I7CiAgICBnbF9Qb3NpdGlvbiA9IG11bChfNjcsIHBiclBhcmFtc19tdnBNYXRyaXgpOwogICAgZ2xfUG9zaXRpb24ueiA9IChnbF9Qb3NpdGlvbi56ICsgZ2xfUG9zaXRpb24udykgKiAwLjU7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICBhX3Bvc2l0aW9uID0gc3RhZ2VfaW5wdXQuYV9wb3NpdGlvbjsKICAgIGFfdGV4Y29vcmQxID0gc3RhZ2VfaW5wdXQuYV90ZXhjb29yZDE7CiAgICBhX2NvbG9yID0gc3RhZ2VfaW5wdXQuYV9jb2xvcjsKICAgIHZlcnRfbWFpbigpOwogICAgU1BJUlZfQ3Jvc3NfT3V0cHV0IHN0YWdlX291dHB1dDsKICAgIHN0YWdlX291dHB1dC5nbF9Qb3NpdGlvbiA9IGdsX1Bvc2l0aW9uOwogICAgc3RhZ2Vfb3V0cHV0LnZfcG9zaXRpb24gPSB2X3Bvc2l0aW9uOwogICAgc3RhZ2Vfb3V0cHV0LnZfdXYxID0gdl91djE7CiAgICBzdGFnZV9vdXRwdXQudl91djIgPSB2X3V2MjsKICAgIHN0YWdlX291dHB1dC52X2NvbG9yID0gdl9jb2xvcjsKICAgIHJldHVybiBzdGFnZV9vdXRwdXQ7Cn0KUkVGTGYCAABtZXNoX1VsdFV2MVZjNFR4cl9obHNsNQAAAAAAAAAAAAMAAAAAAAAAAgAAAAQAAABhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV90ZXhjb29yZDEAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMmFfY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQDAAAAdV92c19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAFtb2RlbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAG5vcm1hbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAABAAAAAbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAIAAAAABAAAAdV92c19zcHJpdGVQYXJhbXMAAAAAAAAAAAAAAAAAAABzcHJpdGVQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAEAAAAAF0ZXh0dXJlUmVjdAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAFNUQUdkCQAARlJBR0NPREWXBwAAY2J1ZmZlciB1X2ZzX3BiclBhcmFtcyA6IHJlZ2lzdGVyKGIwKQp7CiAgICBmbG9hdDQgcGJyUGFyYW1zX2Jhc2VDb2xvckZhY3RvciA6IHBhY2tvZmZzZXQoYzApOwogICAgZmxvYXQgcGJyUGFyYW1zX21ldGFsbGljRmFjdG9yIDogcGFja29mZnNldChjMSk7CiAgICBmbG9hdCBwYnJQYXJhbXNfcm91Z2huZXNzRmFjdG9yIDogcGFja29mZnNldChjMS55KTsKICAgIGZsb2F0MyBwYnJQYXJhbXNfZW1pc3NpdmVGYWN0b3IgOiBwYWNrb2Zmc2V0KGMyKTsKICAgIGZsb2F0MyBwYnJQYXJhbXNfYW1iaWVudExpZ2h0IDogcGFja29mZnNldChjMyk7CiAgICBmbG9hdCBwYnJQYXJhbXNfYW1iaWVudEZhY3RvciA6IHBhY2tvZmZzZXQoYzMudyk7Cn07CgpUZXh0dXJlMkQ8ZmxvYXQ0PiB1X2Jhc2VDb2xvclRleHR1cmUgOiByZWdpc3Rlcih0MCk7ClNhbXBsZXJTdGF0ZSBfdV9iYXNlQ29sb3JUZXh0dXJlX3NhbXBsZXIgOiByZWdpc3RlcihzMCk7CgpzdGF0aWMgZmxvYXQ0IHZfY29sb3I7CnN0YXRpYyBmbG9hdDIgdl91djE7CnN0YXRpYyBmbG9hdDMgdl9wb3NpdGlvbjsKc3RhdGljIGZsb2F0NCBnX2ZpbmFsQ29sb3I7CnN0YXRpYyBmbG9hdDIgdl91djI7CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfSW5wdXQKewogICAgZmxvYXQzIHZfcG9zaXRpb24gOiBURVhDT09SRDA7CiAgICBmbG9hdDIgdl91djEgOiBURVhDT09SRDE7CiAgICBmbG9hdDIgdl91djIgOiBURVhDT09SRDI7CiAgICBmbG9hdDQgdl9jb2xvciA6IFRFWENPT1JEMzsKfTsKCnN0cnVjdCBTUElSVl9Dcm9zc19PdXRwdXQKewogICAgZmxvYXQ0IGdfZmluYWxDb2xvciA6IFNWX1RhcmdldDA7Cn07CgpmbG9hdDMgc1JHQlRvTGluZWFyKGZsb2F0MyBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCAyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjVmLnh4eCk7Cn0KCmZsb2F0NCBzUkdCVG9MaW5lYXIoZmxvYXQ0IHNyZ2JJbikKewogICAgZmxvYXQzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiBmbG9hdDQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9CgpmbG9hdDQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdl9jb2xvcjsKfQoKZmxvYXQ0IGdldEJhc2VDb2xvcigpCnsKICAgIGZsb2F0NCBiYXNlQ29sb3IgPSBwYnJQYXJhbXNfYmFzZUNvbG9yRmFjdG9yOwogICAgZmxvYXQ0IHBhcmFtID0gdV9iYXNlQ29sb3JUZXh0dXJlLlNhbXBsZShfdV9iYXNlQ29sb3JUZXh0dXJlX3NhbXBsZXIsIHZfdXYxKTsKICAgIGZsb2F0NCBfMTAzID0gYmFzZUNvbG9yOwogICAgZmxvYXQ0IF8xMDQgPSBfMTAzICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8xMDQ7CiAgICByZXR1cm4gXzEwNCAqIGdldFZlcnRleENvbG9yKCk7Cn0KCmZsb2F0MyBsaW5lYXJUb3NSR0IoZmxvYXQzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCAwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzVmLnh4eCk7Cn0KCnZvaWQgZnJhZ19tYWluKCkKewogICAgZmxvYXQ0IF8yNTkgPSBnZXRCYXNlQ29sb3IoKTsKICAgIGZsb2F0MyBwYXJhbSA9IF8yNTkueHl6OwogICAgZ19maW5hbENvbG9yID0gZmxvYXQ0KGxpbmVhclRvc1JHQihwYXJhbSksIF8yNTkudyk7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICB2X2NvbG9yID0gc3RhZ2VfaW5wdXQudl9jb2xvcjsKICAgIHZfdXYxID0gc3RhZ2VfaW5wdXQudl91djE7CiAgICB2X3Bvc2l0aW9uID0gc3RhZ2VfaW5wdXQudl9wb3NpdGlvbjsKICAgIHZfdXYyID0gc3RhZ2VfaW5wdXQudl91djI7CiAgICBmcmFnX21haW4oKTsKICAgIFNQSVJWX0Nyb3NzX091dHB1dCBzdGFnZV9vdXRwdXQ7CiAgICBzdGFnZV9vdXRwdXQuZ19maW5hbENvbG9yID0gZ19maW5hbENvbG9yOwogICAgcmV0dXJuIHN0YWdlX291dHB1dDsKfQpSRUZMuQEAAG1lc2hfVWx0VXYxVmM0VHhyX2hsc2w1AAAAAAAAAAAAAAAAAAEAAAABAAAABgAAAHVfYmFzZUNvbG9yVGV4dHVyZQAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVAYAAAB1X2ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAWJhc2VDb2xvckZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAAbWV0YWxsaWNGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABAAAAByb3VnaG5lc3NGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAFAAAAGVtaXNzaXZlRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAgAAAAYW1iaWVudExpZ2h0AAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAADAAAABhbWJpZW50RmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAPAAAAA==";
static const std::string points_TexVc4Txr_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUd/CAAAVkVSVENPREVCBgAAY2J1ZmZlciB1X3ZzX3BvaW50c1BhcmFtcyA6IHJlZ2lzdGVyKGIwKQp7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcG9pbnRzUGFyYW1zX212cE1hdHJpeCA6IHBhY2tvZmZzZXQoYzApOwp9OwoKCnN0YXRpYyBmbG9hdDQgZ2xfUG9zaXRpb247CnN0YXRpYyBmbG9hdCBnbF9Qb2ludFNpemU7CnN0YXRpYyBmbG9hdCB2X3BvaW50cm90YXRpb247CnN0YXRpYyBmbG9hdCBhX3BvaW50cm90YXRpb247CnN0YXRpYyBmbG9hdDQgdl9jb2xvcjsKc3RhdGljIGZsb2F0NCBhX2NvbG9yOwpzdGF0aWMgZmxvYXQ0IHZfdGV4dHVyZXJlY3Q7CnN0YXRpYyBmbG9hdDQgYV90ZXh0dXJlcmVjdDsKc3RhdGljIGZsb2F0MyBhX3Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQgYV9wb2ludHNpemU7CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfSW5wdXQKewogICAgZmxvYXQzIGFfcG9zaXRpb24gOiBQT1NJVElPTjsKICAgIGZsb2F0IGFfcG9pbnRzaXplIDogTk9STUFMOwogICAgZmxvYXQgYV9wb2ludHJvdGF0aW9uIDogVEVYQ09PUkQwOwogICAgZmxvYXQ0IGFfY29sb3IgOiBURVhDT09SRDE7CiAgICBmbG9hdDQgYV90ZXh0dXJlcmVjdCA6IFRFWENPT1JEMjsKfTsKCnN0cnVjdCBTUElSVl9Dcm9zc19PdXRwdXQKewogICAgZmxvYXQgdl9wb2ludHJvdGF0aW9uIDogVEVYQ09PUkQwOwogICAgZmxvYXQ0IHZfY29sb3IgOiBURVhDT09SRDE7CiAgICBmbG9hdDQgdl90ZXh0dXJlcmVjdCA6IFRFWENPT1JEMjsKICAgIGZsb2F0NCBnbF9Qb3NpdGlvbiA6IFNWX1Bvc2l0aW9uOwp9OwoKdm9pZCB2ZXJ0X21haW4oKQp7CiAgICB2X3BvaW50cm90YXRpb24gPSBhX3BvaW50cm90YXRpb247CiAgICB2X2NvbG9yID0gYV9jb2xvcjsKICAgIHZfdGV4dHVyZXJlY3QgPSBhX3RleHR1cmVyZWN0OwogICAgZ2xfUG9zaXRpb24gPSBtdWwoZmxvYXQ0KGFfcG9zaXRpb24sIDEuMGYpLCBwb2ludHNQYXJhbXNfbXZwTWF0cml4KTsKICAgIGdsX1BvaW50U2l6ZSA9IGFfcG9pbnRzaXplIC8gZ2xfUG9zaXRpb24udzsKICAgIGdsX1Bvc2l0aW9uLnogPSAoZ2xfUG9zaXRpb24ueiArIGdsX1Bvc2l0aW9uLncpICogMC41Owp9CgpTUElSVl9Dcm9zc19PdXRwdXQgbWFpbihTUElSVl9Dcm9zc19JbnB1dCBzdGFnZV9pbnB1dCkKewogICAgYV9wb2ludHJvdGF0aW9uID0gc3RhZ2VfaW5wdXQuYV9wb2ludHJvdGF0aW9uOwogICAgYV9jb2xvciA9IHN0YWdlX2lucHV0LmFfY29sb3I7CiAgICBhX3RleHR1cmVyZWN0ID0gc3RhZ2VfaW5wdXQuYV90ZXh0dXJlcmVjdDsKICAgIGFfcG9zaXRpb24gPSBzdGFnZV9pbnB1dC5hX3Bvc2l0aW9uOwogICAgYV9wb2ludHNpemUgPSBzdGFnZV9pbnB1dC5hX3BvaW50c2l6ZTsKICAgIHZlcnRfbWFpbigpOwogICAgU1BJUlZfQ3Jvc3NfT3V0cHV0IHN0YWdlX291dHB1dDsKICAgIHN0YWdlX291dHB1dC5nbF9Qb3NpdGlvbiA9IGdsX1Bvc2l0aW9uOwogICAgc3RhZ2Vfb3V0cHV0LnZfcG9pbnRyb3RhdGlvbiA9IHZfcG9pbnRyb3RhdGlvbjsKICAgIHN0YWdlX291dHB1dC52X2NvbG9yID0gdl9jb2xvcjsKICAgIHN0YWdlX291dHB1dC52X3RleHR1cmVyZWN0ID0gdl90ZXh0dXJlcmVjdDsKICAgIHJldHVybiBzdGFnZV9vdXRwdXQ7Cn0KUkVGTCkCAABwb2ludHNfVGV4VmM0VHhyX2hsc2w1AAAAAAAAAAAAAAUAAAAAAAAAAQAAAAEAAABhX3BvaW50cm90YXRpb24AAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQxYV9jb2xvcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAARkxUNGFfdGV4dHVyZXJlY3QAAAAAAAAAAAAAAAAAAAAAAAAABAAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAEZMVDRhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV9wb2ludHNpemUAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAB1X3ZzX3BvaW50c1BhcmFtcwAAAAAAAAAAAAAAAAAAAHBvaW50c1BhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAW12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAU1RBRz0IAABGUkFHQ09ERckHAABUZXh0dXJlMkQ8ZmxvYXQ0PiB1X3BvaW50c1RleHR1cmUgOiByZWdpc3Rlcih0MCk7ClNhbXBsZXJTdGF0ZSBfdV9wb2ludHNUZXh0dXJlX3NhbXBsZXIgOiByZWdpc3RlcihzMCk7CgpzdGF0aWMgZmxvYXQ0IHZfY29sb3I7CnN0YXRpYyBmbG9hdCB2X3BvaW50cm90YXRpb247CnN0YXRpYyBmbG9hdDQgdl90ZXh0dXJlcmVjdDsKc3RhdGljIGZsb2F0NCBnX2ZpbmFsQ29sb3I7CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfSW5wdXQKewogICAgZmxvYXQgdl9wb2ludHJvdGF0aW9uIDogVEVYQ09PUkQwOwogICAgZmxvYXQ0IHZfY29sb3IgOiBURVhDT09SRDE7CiAgICBmbG9hdDQgdl90ZXh0dXJlcmVjdCA6IFRFWENPT1JEMjsKfTsKCnN0cnVjdCBTUElSVl9Dcm9zc19PdXRwdXQKewogICAgZmxvYXQ0IGdfZmluYWxDb2xvciA6IFNWX1RhcmdldDA7Cn07CgpmbG9hdDMgc1JHQlRvTGluZWFyKGZsb2F0MyBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCAyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjVmLnh4eCk7Cn0KCmZsb2F0NCBzUkdCVG9MaW5lYXIoZmxvYXQ0IHNyZ2JJbikKewogICAgZmxvYXQzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiBmbG9hdDQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9CgpmbG9hdDQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdl9jb2xvcjsKfQoKZmxvYXQ0IGdldEJhc2VDb2xvcigpCnsKICAgIGZsb2F0NCBiYXNlQ29sb3IgPSAxLjBmLnh4eHg7CiAgICBmbG9hdDIgcmVzdWx0Q29vcmQgPSBmbG9hdDIoMC41ZiwgMC41Zik7CiAgICBpZiAodl9wb2ludHJvdGF0aW9uICE9IDAuMGYpCiAgICB7CiAgICAgICAgZmxvYXQgXzgzID0gY29zKHZfcG9pbnRyb3RhdGlvbik7CiAgICAgICAgZmxvYXQgXzg4ID0gcmVzdWx0Q29vcmQueCAtIDAuNWY7CiAgICAgICAgZmxvYXQgXzkxID0gc2luKHZfcG9pbnRyb3RhdGlvbik7CiAgICAgICAgZmxvYXQgXzk1ID0gcmVzdWx0Q29vcmQueSAtIDAuNWY7CiAgICAgICAgcmVzdWx0Q29vcmQgPSBmbG9hdDIoKChfODMgKiBfODgpICsgKF85MSAqIF85NSkpICsgMC41ZiwgKChfODMgKiBfOTUpIC0gKF85MSAqIF84OCkpICsgMC41Zik7CiAgICB9CiAgICBmbG9hdDIgXzExNCA9IHJlc3VsdENvb3JkOwogICAgZmxvYXQyIF8xMjEgPSAoXzExNCAqIHZfdGV4dHVyZXJlY3QuencpICsgdl90ZXh0dXJlcmVjdC54eTsKICAgIHJlc3VsdENvb3JkID0gXzEyMTsKICAgIGZsb2F0NCBwYXJhbSA9IHVfcG9pbnRzVGV4dHVyZS5TYW1wbGUoX3VfcG9pbnRzVGV4dHVyZV9zYW1wbGVyLCBfMTIxKTsKICAgIGZsb2F0NCBfMTMxID0gYmFzZUNvbG9yOwogICAgZmxvYXQ0IF8xMzIgPSBfMTMxICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8xMzI7CiAgICByZXR1cm4gXzEzMiAqIGdldFZlcnRleENvbG9yKCk7Cn0KCmZsb2F0MyBsaW5lYXJUb3NSR0IoZmxvYXQzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCAwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzVmLnh4eCk7Cn0KCnZvaWQgZnJhZ19tYWluKCkKewogICAgZmxvYXQ0IF8xMzkgPSBnZXRCYXNlQ29sb3IoKTsKICAgIGZsb2F0MyBwYXJhbSA9IF8xMzkueHl6OwogICAgZ19maW5hbENvbG9yID0gZmxvYXQ0KGxpbmVhclRvc1JHQihwYXJhbSksIF8xMzkudyk7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICB2X2NvbG9yID0gc3RhZ2VfaW5wdXQudl9jb2xvcjsKICAgIHZfcG9pbnRyb3RhdGlvbiA9IHN0YWdlX2lucHV0LnZfcG9pbnRyb3RhdGlvbjsKICAgIHZfdGV4dHVyZXJlY3QgPSBzdGFnZV9pbnB1dC52X3RleHR1cmVyZWN0OwogICAgZnJhZ19tYWluKCk7CiAgICBTUElSVl9Dcm9zc19PdXRwdXQgc3RhZ2Vfb3V0cHV0OwogICAgc3RhZ2Vfb3V0cHV0LmdfZmluYWxDb2xvciA9IGdfZmluYWxDb2xvcjsKICAgIHJldHVybiBzdGFnZV9vdXRwdXQ7Cn0KUkVGTGAAAABwb2ludHNfVGV4VmM0VHhyX2hsc2w1AAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAB1X3BvaW50c1RleHR1cmUAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAMkQgIFRGTFQ=";
static const std::string mesh_PucShwPcfNorTanFogMtaMnr_hlsl5 = "";
static const std::string points_Vc4_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUcrBwAAVkVSVENPREU6BQAAY2J1ZmZlciB1X3ZzX3BvaW50c1BhcmFtcyA6IHJlZ2lzdGVyKGIwKQp7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcG9pbnRzUGFyYW1zX212cE1hdHJpeCA6IHBhY2tvZmZzZXQoYzApOwp9OwoKCnN0YXRpYyBmbG9hdDQgZ2xfUG9zaXRpb247CnN0YXRpYyBmbG9hdCBnbF9Qb2ludFNpemU7CnN0YXRpYyBmbG9hdCB2X3BvaW50cm90YXRpb247CnN0YXRpYyBmbG9hdCBhX3BvaW50cm90YXRpb247CnN0YXRpYyBmbG9hdDQgdl9jb2xvcjsKc3RhdGljIGZsb2F0NCBhX2NvbG9yOwpzdGF0aWMgZmxvYXQzIGFfcG9zaXRpb247CnN0YXRpYyBmbG9hdCBhX3BvaW50c2l6ZTsKCnN0cnVjdCBTUElSVl9Dcm9zc19JbnB1dAp7CiAgICBmbG9hdDMgYV9wb3NpdGlvbiA6IFBPU0lUSU9OOwogICAgZmxvYXQgYV9wb2ludHNpemUgOiBOT1JNQUw7CiAgICBmbG9hdCBhX3BvaW50cm90YXRpb24gOiBURVhDT09SRDA7CiAgICBmbG9hdDQgYV9jb2xvciA6IFRFWENPT1JEMTsKfTsKCnN0cnVjdCBTUElSVl9Dcm9zc19PdXRwdXQKewogICAgZmxvYXQgdl9wb2ludHJvdGF0aW9uIDogVEVYQ09PUkQwOwogICAgZmxvYXQ0IHZfY29sb3IgOiBURVhDT09SRDE7CiAgICBmbG9hdDQgZ2xfUG9zaXRpb24gOiBTVl9Qb3NpdGlvbjsKfTsKCnZvaWQgdmVydF9tYWluKCkKewogICAgdl9wb2ludHJvdGF0aW9uID0gYV9wb2ludHJvdGF0aW9uOwogICAgdl9jb2xvciA9IGFfY29sb3I7CiAgICBnbF9Qb3NpdGlvbiA9IG11bChmbG9hdDQoYV9wb3NpdGlvbiwgMS4wZiksIHBvaW50c1BhcmFtc19tdnBNYXRyaXgpOwogICAgZ2xfUG9pbnRTaXplID0gYV9wb2ludHNpemUgLyBnbF9Qb3NpdGlvbi53OwogICAgZ2xfUG9zaXRpb24ueiA9IChnbF9Qb3NpdGlvbi56ICsgZ2xfUG9zaXRpb24udykgKiAwLjU7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICBhX3BvaW50cm90YXRpb24gPSBzdGFnZV9pbnB1dC5hX3BvaW50cm90YXRpb247CiAgICBhX2NvbG9yID0gc3RhZ2VfaW5wdXQuYV9jb2xvcjsKICAgIGFfcG9zaXRpb24gPSBzdGFnZV9pbnB1dC5hX3Bvc2l0aW9uOwogICAgYV9wb2ludHNpemUgPSBzdGFnZV9pbnB1dC5hX3BvaW50c2l6ZTsKICAgIHZlcnRfbWFpbigpOwogICAgU1BJUlZfQ3Jvc3NfT3V0cHV0IHN0YWdlX291dHB1dDsKICAgIHN0YWdlX291dHB1dC5nbF9Qb3NpdGlvbiA9IGdsX1Bvc2l0aW9uOwogICAgc3RhZ2Vfb3V0cHV0LnZfcG9pbnRyb3RhdGlvbiA9IHZfcG9pbnRyb3RhdGlvbjsKICAgIHN0YWdlX291dHB1dC52X2NvbG9yID0gdl9jb2xvcjsKICAgIHJldHVybiBzdGFnZV9vdXRwdXQ7Cn0KUkVGTN0BAABwb2ludHNfVmM0X2hsc2w1AAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAQAAAAEAAABhX3BvaW50cm90YXRpb24AAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQxYV9jb2xvcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAARkxUNGFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDNhX3BvaW50c2l6ZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABOT1JNQUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAAHVfdnNfcG9pbnRzUGFyYW1zAAAAAAAAAAAAAAAAAAAAcG9pbnRzUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABTVEFHowMAAEZSQUdDT0RFXwMAAHN0YXRpYyBmbG9hdDQgdl9jb2xvcjsKc3RhdGljIGZsb2F0NCBnX2ZpbmFsQ29sb3I7CnN0YXRpYyBmbG9hdCB2X3BvaW50cm90YXRpb247CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfSW5wdXQKewogICAgZmxvYXQgdl9wb2ludHJvdGF0aW9uIDogVEVYQ09PUkQwOwogICAgZmxvYXQ0IHZfY29sb3IgOiBURVhDT09SRDE7Cn07CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfT3V0cHV0CnsKICAgIGZsb2F0NCBnX2ZpbmFsQ29sb3IgOiBTVl9UYXJnZXQwOwp9OwoKZmxvYXQ0IGdldFZlcnRleENvbG9yKCkKewogICAgcmV0dXJuIHZfY29sb3I7Cn0KCmZsb2F0NCBnZXRCYXNlQ29sb3IoKQp7CiAgICByZXR1cm4gZ2V0VmVydGV4Q29sb3IoKTsKfQoKZmxvYXQzIGxpbmVhclRvc1JHQihmbG9hdDMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NWYueHh4KTsKfQoKdm9pZCBmcmFnX21haW4oKQp7CiAgICBmbG9hdDQgXzQyID0gZ2V0QmFzZUNvbG9yKCk7CiAgICBmbG9hdDMgcGFyYW0gPSBfNDIueHl6OwogICAgZ19maW5hbENvbG9yID0gZmxvYXQ0KGxpbmVhclRvc1JHQihwYXJhbSksIF80Mi53KTsKfQoKU1BJUlZfQ3Jvc3NfT3V0cHV0IG1haW4oU1BJUlZfQ3Jvc3NfSW5wdXQgc3RhZ2VfaW5wdXQpCnsKICAgIHZfY29sb3IgPSBzdGFnZV9pbnB1dC52X2NvbG9yOwogICAgdl9wb2ludHJvdGF0aW9uID0gc3RhZ2VfaW5wdXQudl9wb2ludHJvdGF0aW9uOwogICAgZnJhZ19tYWluKCk7CiAgICBTUElSVl9Dcm9zc19PdXRwdXQgc3RhZ2Vfb3V0cHV0OwogICAgc3RhZ2Vfb3V0cHV0LmdfZmluYWxDb2xvciA9IGdfZmluYWxDb2xvcjsKICAgIHJldHVybiBzdGFnZV9vdXRwdXQ7Cn0KUkVGTDAAAABwb2ludHNfVmM0X2hsc2w1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=";
static const std::string mesh_PucShwPcfNorTanMtaMnrMtg_hlsl5 = "";
static const std::string mesh_Uv1PucNorFog_hlsl5 = "";
static const std::string mesh_Uv1PucShwPcfNorNmpTanVc4_hlsl5 = "";
static const std::string ui_Ftx_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUfGBAAAVkVSVENPREVtAwAAY2J1ZmZlciB1X3ZzX3VpUGFyYW1zIDogcmVnaXN0ZXIoYjApCnsKICAgIHJvd19tYWpvciBmbG9hdDR4NCB1aVBhcmFtc19tdnBNYXRyaXggOiBwYWNrb2Zmc2V0KGMwKTsKfTsKCgpzdGF0aWMgZmxvYXQ0IGdsX1Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQyIHZfdXYxOwpzdGF0aWMgZmxvYXQyIGFfdGV4Y29vcmQxOwpzdGF0aWMgZmxvYXQzIGFfcG9zaXRpb247CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfSW5wdXQKewogICAgZmxvYXQzIGFfcG9zaXRpb24gOiBQT1NJVElPTjsKICAgIGZsb2F0MiBhX3RleGNvb3JkMSA6IE5PUk1BTDsKfTsKCnN0cnVjdCBTUElSVl9Dcm9zc19PdXRwdXQKewogICAgZmxvYXQyIHZfdXYxIDogVEVYQ09PUkQwOwogICAgZmxvYXQ0IGdsX1Bvc2l0aW9uIDogU1ZfUG9zaXRpb247Cn07Cgp2b2lkIHZlcnRfbWFpbigpCnsKICAgIHZfdXYxID0gYV90ZXhjb29yZDE7CiAgICBnbF9Qb3NpdGlvbiA9IG11bChmbG9hdDQoYV9wb3NpdGlvbiwgMS4wZiksIHVpUGFyYW1zX212cE1hdHJpeCk7CiAgICBnbF9Qb3NpdGlvbi56ID0gKGdsX1Bvc2l0aW9uLnogKyBnbF9Qb3NpdGlvbi53KSAqIDAuNTsKfQoKU1BJUlZfQ3Jvc3NfT3V0cHV0IG1haW4oU1BJUlZfQ3Jvc3NfSW5wdXQgc3RhZ2VfaW5wdXQpCnsKICAgIGFfdGV4Y29vcmQxID0gc3RhZ2VfaW5wdXQuYV90ZXhjb29yZDE7CiAgICBhX3Bvc2l0aW9uID0gc3RhZ2VfaW5wdXQuYV9wb3NpdGlvbjsKICAgIHZlcnRfbWFpbigpOwogICAgU1BJUlZfQ3Jvc3NfT3V0cHV0IHN0YWdlX291dHB1dDsKICAgIHN0YWdlX291dHB1dC5nbF9Qb3NpdGlvbiA9IGdsX1Bvc2l0aW9uOwogICAgc3RhZ2Vfb3V0cHV0LnZfdXYxID0gdl91djE7CiAgICByZXR1cm4gc3RhZ2Vfb3V0cHV0Owp9ClJFRkxFAQAAdWlfRnR4X2hsc2w1AAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAEAAAABAAAAYV90ZXhjb29yZDEAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMmFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAdV92c191aVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAB1aVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUfrBAAARlJBR0NPREX6AwAAY2J1ZmZlciB1X2ZzX3VpUGFyYW1zIDogcmVnaXN0ZXIoYjApCnsKICAgIGZsb2F0NCB1aVBhcmFtc19jb2xvciA6IHBhY2tvZmZzZXQoYzApOwp9OwoKVGV4dHVyZTJEPGZsb2F0ND4gdV91aVRleHR1cmUgOiByZWdpc3Rlcih0MCk7ClNhbXBsZXJTdGF0ZSBfdV91aVRleHR1cmVfc2FtcGxlciA6IHJlZ2lzdGVyKHMwKTsKCnN0YXRpYyBmbG9hdDIgdl91djE7CnN0YXRpYyBmbG9hdDQgZ19maW5hbENvbG9yOwoKc3RydWN0IFNQSVJWX0Nyb3NzX0lucHV0CnsKICAgIGZsb2F0MiB2X3V2MSA6IFRFWENPT1JEMDsKfTsKCnN0cnVjdCBTUElSVl9Dcm9zc19PdXRwdXQKewogICAgZmxvYXQ0IGdfZmluYWxDb2xvciA6IFNWX1RhcmdldDA7Cn07CgpmbG9hdDQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gMS4wZi54eHh4Owp9CgpmbG9hdDQgZ2V0QmFzZUNvbG9yKCkKewogICAgcmV0dXJuICh1aVBhcmFtc19jb2xvciAqIGZsb2F0NCgxLjBmLCAxLjBmLCAxLjBmLCB1X3VpVGV4dHVyZS5TYW1wbGUoX3VfdWlUZXh0dXJlX3NhbXBsZXIsIHZfdXYxKS54KSkgKiBnZXRWZXJ0ZXhDb2xvcigpOwp9CgpmbG9hdDMgbGluZWFyVG9zUkdCKGZsb2F0MyBjb2xvcikKewogICAgcmV0dXJuIHBvdyhjb2xvciwgMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1Zi54eHgpOwp9Cgp2b2lkIGZyYWdfbWFpbigpCnsKICAgIGZsb2F0NCBfNjMgPSBnZXRCYXNlQ29sb3IoKTsKICAgIGZsb2F0MyBwYXJhbSA9IF82My54eXo7CiAgICBnX2ZpbmFsQ29sb3IgPSBmbG9hdDQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzYzLncpOwp9CgpTUElSVl9Dcm9zc19PdXRwdXQgbWFpbihTUElSVl9Dcm9zc19JbnB1dCBzdGFnZV9pbnB1dCkKewogICAgdl91djEgPSBzdGFnZV9pbnB1dC52X3V2MTsKICAgIGZyYWdfbWFpbigpOwogICAgU1BJUlZfQ3Jvc3NfT3V0cHV0IHN0YWdlX291dHB1dDsKICAgIHN0YWdlX291dHB1dC5nX2ZpbmFsQ29sb3IgPSBnX2ZpbmFsQ29sb3I7CiAgICByZXR1cm4gc3RhZ2Vfb3V0cHV0Owp9ClJFRkzdAAAAdWlfRnR4X2hsc2w1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAdV91aVRleHR1cmUAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUAQAAAHVfZnNfdWlQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAdWlQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAABY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAAA=";
static const std::string mesh_PucShwPcfNor_hlsl5 = "";
static const std::string mesh_Uv1PucShwPcfNorNmpTanFog_hlsl5 = "";
static const std::string mesh_Uv1PucNorNmpTanVc4_hlsl5 = "";
static const std::string ui_Vc4_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUe8BAAAVkVSVENPREVjAwAAY2J1ZmZlciB1X3ZzX3VpUGFyYW1zIDogcmVnaXN0ZXIoYjApCnsKICAgIHJvd19tYWpvciBmbG9hdDR4NCB1aVBhcmFtc19tdnBNYXRyaXggOiBwYWNrb2Zmc2V0KGMwKTsKfTsKCgpzdGF0aWMgZmxvYXQ0IGdsX1Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQ0IHZfY29sb3I7CnN0YXRpYyBmbG9hdDQgYV9jb2xvcjsKc3RhdGljIGZsb2F0MyBhX3Bvc2l0aW9uOwoKc3RydWN0IFNQSVJWX0Nyb3NzX0lucHV0CnsKICAgIGZsb2F0MyBhX3Bvc2l0aW9uIDogUE9TSVRJT047CiAgICBmbG9hdDQgYV9jb2xvciA6IE5PUk1BTDsKfTsKCnN0cnVjdCBTUElSVl9Dcm9zc19PdXRwdXQKewogICAgZmxvYXQ0IHZfY29sb3IgOiBURVhDT09SRDA7CiAgICBmbG9hdDQgZ2xfUG9zaXRpb24gOiBTVl9Qb3NpdGlvbjsKfTsKCnZvaWQgdmVydF9tYWluKCkKewogICAgdl9jb2xvciA9IGFfY29sb3I7CiAgICBnbF9Qb3NpdGlvbiA9IG11bChmbG9hdDQoYV9wb3NpdGlvbiwgMS4wZiksIHVpUGFyYW1zX212cE1hdHJpeCk7CiAgICBnbF9Qb3NpdGlvbi56ID0gKGdsX1Bvc2l0aW9uLnogKyBnbF9Qb3NpdGlvbi53KSAqIDAuNTsKfQoKU1BJUlZfQ3Jvc3NfT3V0cHV0IG1haW4oU1BJUlZfQ3Jvc3NfSW5wdXQgc3RhZ2VfaW5wdXQpCnsKICAgIGFfY29sb3IgPSBzdGFnZV9pbnB1dC5hX2NvbG9yOwogICAgYV9wb3NpdGlvbiA9IHN0YWdlX2lucHV0LmFfcG9zaXRpb247CiAgICB2ZXJ0X21haW4oKTsKICAgIFNQSVJWX0Nyb3NzX091dHB1dCBzdGFnZV9vdXRwdXQ7CiAgICBzdGFnZV9vdXRwdXQuZ2xfUG9zaXRpb24gPSBnbF9Qb3NpdGlvbjsKICAgIHN0YWdlX291dHB1dC52X2NvbG9yID0gdl9jb2xvcjsKICAgIHJldHVybiBzdGFnZV9vdXRwdXQ7Cn0KUkVGTEUBAAB1aV9WYzRfaGxzbDUAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAQAAAAEAAABhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABOT1JNQUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0YV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAB1X3ZzX3VpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAHVpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAW12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAU1RBRxEEAABGUkFHQ09ERVADAABjYnVmZmVyIHVfZnNfdWlQYXJhbXMgOiByZWdpc3RlcihiMCkKewogICAgZmxvYXQ0IHVpUGFyYW1zX2NvbG9yIDogcGFja29mZnNldChjMCk7Cn07CgoKc3RhdGljIGZsb2F0NCB2X2NvbG9yOwpzdGF0aWMgZmxvYXQ0IGdfZmluYWxDb2xvcjsKCnN0cnVjdCBTUElSVl9Dcm9zc19JbnB1dAp7CiAgICBmbG9hdDQgdl9jb2xvciA6IFRFWENPT1JEMDsKfTsKCnN0cnVjdCBTUElSVl9Dcm9zc19PdXRwdXQKewogICAgZmxvYXQ0IGdfZmluYWxDb2xvciA6IFNWX1RhcmdldDA7Cn07CgpmbG9hdDQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdl9jb2xvcjsKfQoKZmxvYXQ0IGdldEJhc2VDb2xvcigpCnsKICAgIHJldHVybiB1aVBhcmFtc19jb2xvciAqIGdldFZlcnRleENvbG9yKCk7Cn0KCmZsb2F0MyBsaW5lYXJUb3NSR0IoZmxvYXQzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCAwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzVmLnh4eCk7Cn0KCnZvaWQgZnJhZ19tYWluKCkKewogICAgZmxvYXQ0IF81MCA9IGdldEJhc2VDb2xvcigpOwogICAgZmxvYXQzIHBhcmFtID0gXzUwLnh5ejsKICAgIGdfZmluYWxDb2xvciA9IGZsb2F0NChsaW5lYXJUb3NSR0IocGFyYW0pLCBfNTAudyk7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICB2X2NvbG9yID0gc3RhZ2VfaW5wdXQudl9jb2xvcjsKICAgIGZyYWdfbWFpbigpOwogICAgU1BJUlZfQ3Jvc3NfT3V0cHV0IHN0YWdlX291dHB1dDsKICAgIHN0YWdlX291dHB1dC5nX2ZpbmFsQ29sb3IgPSBnX2ZpbmFsQ29sb3I7CiAgICByZXR1cm4gc3RhZ2Vfb3V0cHV0Owp9ClJFRkytAAAAdWlfVmM0X2hsc2w1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAQAAAHVfZnNfdWlQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAdWlQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAABY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAAA=";
static const std::string mesh_Uv1PucNorNmpTan_hlsl5 = "";
static const std::string mesh_PucShwPcfNorSki_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUexEgAAVkVSVENPREVuDwAAY2J1ZmZlciB1X3ZzX3NraW5uaW5nIDogcmVnaXN0ZXIoYjApCnsKICAgIHJvd19tYWpvciBmbG9hdDR4NCBfNDhfYm9uZXNNYXRyaXhbNzBdIDogcGFja29mZnNldChjMCk7Cn07CgpjYnVmZmVyIHVfdnNfcGJyUGFyYW1zIDogcmVnaXN0ZXIoYjEpCnsKICAgIHJvd19tYWpvciBmbG9hdDR4NCBwYnJQYXJhbXNfbW9kZWxNYXRyaXggOiBwYWNrb2Zmc2V0KGMwKTsKICAgIHJvd19tYWpvciBmbG9hdDR4NCBwYnJQYXJhbXNfbm9ybWFsTWF0cml4IDogcGFja29mZnNldChjNCk7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcGJyUGFyYW1zX212cE1hdHJpeCA6IHBhY2tvZmZzZXQoYzgpOwp9OwoKY2J1ZmZlciB1X3ZzX3NoYWRvd3MgOiByZWdpc3RlcihiMikKewogICAgcm93X21ham9yIGZsb2F0NHg0IF8zMDhfbGlnaHRWUE1hdHJpeFs2XSA6IHBhY2tvZmZzZXQoYzApOwp9OwoKCnN0YXRpYyBmbG9hdDQgZ2xfUG9zaXRpb247CnN0YXRpYyBmbG9hdDQgYV9ib25lSWRzOwpzdGF0aWMgZmxvYXQ0IGFfYm9uZVdlaWdodHM7CnN0YXRpYyBmbG9hdDMgYV9wb3NpdGlvbjsKc3RhdGljIGZsb2F0MyBhX25vcm1hbDsKc3RhdGljIGZsb2F0MyB2X3Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQzIHZfbm9ybWFsOwpzdGF0aWMgZmxvYXQyIHZfdXYxOwpzdGF0aWMgZmxvYXQyIHZfdXYyOwpzdGF0aWMgZmxvYXQ0IHZfbGlnaHRQcm9qUG9zWzZdOwpzdGF0aWMgZmxvYXQgdl9jbGlwU3BhY2VQb3NaOwoKc3RydWN0IFNQSVJWX0Nyb3NzX0lucHV0CnsKICAgIGZsb2F0MyBhX3Bvc2l0aW9uIDogUE9TSVRJT047CiAgICBmbG9hdDMgYV9ub3JtYWwgOiBOT1JNQUw7CiAgICBmbG9hdDQgYV9ib25lV2VpZ2h0cyA6IFRFWENPT1JEMDsKICAgIGZsb2F0NCBhX2JvbmVJZHMgOiBURVhDT09SRDE7Cn07CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfT3V0cHV0CnsKICAgIGZsb2F0MyB2X3Bvc2l0aW9uIDogVEVYQ09PUkQwOwogICAgZmxvYXQzIHZfbm9ybWFsIDogVEVYQ09PUkQxOwogICAgZmxvYXQyIHZfdXYxIDogVEVYQ09PUkQyOwogICAgZmxvYXQyIHZfdXYyIDogVEVYQ09PUkQzOwogICAgZmxvYXQ0IHZfbGlnaHRQcm9qUG9zWzZdIDogVEVYQ09PUkQ0OwogICAgZmxvYXQgdl9jbGlwU3BhY2VQb3NaIDogVEVYQ09PUkQxMDsKICAgIGZsb2F0NCBnbF9Qb3NpdGlvbiA6IFNWX1Bvc2l0aW9uOwp9OwoKZmxvYXQ0eDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIGZsb2F0NHg0IF82NiA9IF80OF9ib25lc01hdHJpeFtpbnQoYV9ib25lSWRzLnggKiA2NTUzNS4wZildICogYV9ib25lV2VpZ2h0cy54OwogICAgZmxvYXQ0eDQgXzkwID0gXzQ4X2JvbmVzTWF0cml4W2ludChhX2JvbmVJZHMueSAqIDY1NTM1LjBmKV0gKiBhX2JvbmVXZWlnaHRzLnk7CiAgICBmbG9hdDR4NCBfMTE0ID0gXzQ4X2JvbmVzTWF0cml4W2ludChhX2JvbmVJZHMueiAqIDY1NTM1LjBmKV0gKiBhX2JvbmVXZWlnaHRzLno7CiAgICBmbG9hdDR4NCBfMTM4ID0gXzQ4X2JvbmVzTWF0cml4W2ludChhX2JvbmVJZHMudyAqIDY1NTM1LjBmKV0gKiBhX2JvbmVXZWlnaHRzLnc7CiAgICByZXR1cm4gZmxvYXQ0eDQoKChfNjZbMF0gKyBfOTBbMF0pICsgXzExNFswXSkgKyBfMTM4WzBdLCAoKF82NlsxXSArIF85MFsxXSkgKyBfMTE0WzFdKSArIF8xMzhbMV0sICgoXzY2WzJdICsgXzkwWzJdKSArIF8xMTRbMl0pICsgXzEzOFsyXSwgKChfNjZbM10gKyBfOTBbM10pICsgXzExNFszXSkgKyBfMTM4WzNdKTsKfQoKZmxvYXQzIGdldE1vcnBoUG9zaXRpb24oZmxvYXQzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKZmxvYXQzIGdldFNraW5Qb3NpdGlvbihpbm91dCBmbG9hdDMgcG9zLCBmbG9hdDR4NCBib25lVHJhbnNmb3JtKQp7CiAgICBmbG9hdDQgXzE2NiA9IG11bChmbG9hdDQocG9zLCAxLjBmKSwgYm9uZVRyYW5zZm9ybSk7CiAgICBwb3MgPSBmbG9hdDMoXzE2Ni54eXopIC8gXzE2Ni53Lnh4eDsKICAgIHJldHVybiBwb3M7Cn0KCmZsb2F0NCBnZXRQb3NpdGlvbihmbG9hdDR4NCBib25lVHJhbnNmb3JtKQp7CiAgICBmbG9hdDMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgZmxvYXQzIHBhcmFtXzEgPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIGZsb2F0NHg0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgZmxvYXQzIF8yMTggPSBnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMik7CiAgICByZXR1cm4gZmxvYXQ0KF8yMTgsIDEuMGYpOwp9CgpmbG9hdDMgZ2V0TW9ycGhOb3JtYWwoZmxvYXQzIG5vcm1hbCkKewogICAgcmV0dXJuIG5vcm1hbDsKfQoKZmxvYXQzIGdldFNraW5Ob3JtYWwoaW5vdXQgZmxvYXQzIG5vcm1hbCwgZmxvYXQ0eDQgYm9uZVRyYW5zZm9ybSkKewogICAgZmxvYXQ0IF8xODggPSBtdWwoZmxvYXQ0KG5vcm1hbCwgMS4wZiksIGJvbmVUcmFuc2Zvcm0pOwogICAgbm9ybWFsID0gZmxvYXQzKF8xODgueHl6KSAvIF8xODgudy54eHg7CiAgICByZXR1cm4gbm9ybWFsOwp9CgpmbG9hdDMgZ2V0Tm9ybWFsKGZsb2F0NHg0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIGZsb2F0MyBwYXJhbSA9IGFfbm9ybWFsOwogICAgZmxvYXQzIHBhcmFtXzEgPSBnZXRNb3JwaE5vcm1hbChwYXJhbSk7CiAgICBmbG9hdDR4NCBwYXJhbV8yID0gYm9uZVRyYW5zZm9ybTsKICAgIGZsb2F0MyBfMjM2ID0gZ2V0U2tpbk5vcm1hbChwYXJhbV8xLCBwYXJhbV8yKTsKICAgIHJldHVybiBub3JtYWxpemUoXzIzNik7Cn0KCnZvaWQgdmVydF9tYWluKCkKewogICAgZmxvYXQ0eDQgXzI0MiA9IGdldEJvbmVUcmFuc2Zvcm0oKTsKICAgIGZsb2F0NHg0IHBhcmFtID0gXzI0MjsKICAgIGZsb2F0NCBfMjQ2ID0gZ2V0UG9zaXRpb24ocGFyYW0pOwogICAgZmxvYXQ0IF8yNTQgPSBtdWwoXzI0NiwgcGJyUGFyYW1zX21vZGVsTWF0cml4KTsKICAgIHZfcG9zaXRpb24gPSBmbG9hdDMoXzI1NC54eXopIC8gXzI1NC53Lnh4eDsKICAgIGZsb2F0NHg0IHBhcmFtXzEgPSBfMjQyOwogICAgdl9ub3JtYWwgPSBub3JtYWxpemUoZmxvYXQzKG11bChmbG9hdDQoZ2V0Tm9ybWFsKHBhcmFtXzEpLCAwLjBmKSwgcGJyUGFyYW1zX25vcm1hbE1hdHJpeCkueHl6KSk7CiAgICB2X3V2MSA9IDAuMGYueHg7CiAgICB2X3V2MiA9IDAuMGYueHg7CiAgICBmb3IgKGludCBpID0gMDsgaSA8IDY7IGkrKykKICAgIHsKICAgICAgICB2X2xpZ2h0UHJvalBvc1tpXSA9IG11bChfMjU0LCBfMzA4X2xpZ2h0VlBNYXRyaXhbaV0pOwogICAgfQogICAgZ2xfUG9zaXRpb24gPSBtdWwoXzI0NiwgcGJyUGFyYW1zX212cE1hdHJpeCk7CiAgICB2X2NsaXBTcGFjZVBvc1ogPSBnbF9Qb3NpdGlvbi56OwogICAgZ2xfUG9zaXRpb24ueiA9IChnbF9Qb3NpdGlvbi56ICsgZ2xfUG9zaXRpb24udykgKiAwLjU7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICBhX2JvbmVJZHMgPSBzdGFnZV9pbnB1dC5hX2JvbmVJZHM7CiAgICBhX2JvbmVXZWlnaHRzID0gc3RhZ2VfaW5wdXQuYV9ib25lV2VpZ2h0czsKICAgIGFfcG9zaXRpb24gPSBzdGFnZV9pbnB1dC5hX3Bvc2l0aW9uOwogICAgYV9ub3JtYWwgPSBzdGFnZV9pbnB1dC5hX25vcm1hbDsKICAgIHZlcnRfbWFpbigpOwogICAgU1BJUlZfQ3Jvc3NfT3V0cHV0IHN0YWdlX291dHB1dDsKICAgIHN0YWdlX291dHB1dC5nbF9Qb3NpdGlvbiA9IGdsX1Bvc2l0aW9uOwogICAgc3RhZ2Vfb3V0cHV0LnZfcG9zaXRpb24gPSB2X3Bvc2l0aW9uOwogICAgc3RhZ2Vfb3V0cHV0LnZfbm9ybWFsID0gdl9ub3JtYWw7CiAgICBzdGFnZV9vdXRwdXQudl91djEgPSB2X3V2MTsKICAgIHN0YWdlX291dHB1dC52X3V2MiA9IHZfdXYyOwogICAgc3RhZ2Vfb3V0cHV0LnZfbGlnaHRQcm9qUG9zID0gdl9saWdodFByb2pQb3M7CiAgICBzdGFnZV9vdXRwdXQudl9jbGlwU3BhY2VQb3NaID0gdl9jbGlwU3BhY2VQb3NaOwogICAgcmV0dXJuIHN0YWdlX291dHB1dDsKfQpSRUZMLwMAAG1lc2hfUHVjU2h3UGNmTm9yU2tpX2hsc2w1AAAAAAAABAAAAAAAAAADAAAABQAAAGFfYm9uZUlkcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAEZMVDRhX2JvbmVXZWlnaHRzAAAAAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0YV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2Ffbm9ybWFsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAdV92c19za2lubmluZwAAAAAAAAAAAAAAAAAAAAAAAABfNDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgBEAAAFib25lc01hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDRGAAAAAAAAAAMAAAB1X3ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAADAAAAAAW1vZGVsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAbm9ybWFsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAEAAAABtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAgAAAAAEAAAB1X3ZzX3NoYWRvd3MAAAAAAAAAAAAAAAAAAAAAAAAAAF8zMDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAQAAAWxpZ2h0VlBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAYAAAAAAAAAU1RBRzRYAABGUkFHQ09ERd1SAABzdHJ1Y3QgTWF0ZXJpYWxJbmZvCnsKICAgIGZsb2F0IHBlcmNlcHR1YWxSb3VnaG5lc3M7CiAgICBmbG9hdDMgZjA7CiAgICBmbG9hdCBhbHBoYVJvdWdobmVzczsKICAgIGZsb2F0MyBhbGJlZG9Db2xvcjsKICAgIGZsb2F0MyBmOTA7CiAgICBmbG9hdCBtZXRhbGxpYzsKICAgIGZsb2F0MyBuOwogICAgZmxvYXQzIGJhc2VDb2xvcjsKfTsKCnN0cnVjdCBOb3JtYWxJbmZvCnsKICAgIGZsb2F0MyBuZzsKICAgIGZsb2F0MyBuOwogICAgZmxvYXQzIHQ7CiAgICBmbG9hdDMgYjsKfTsKCnN0cnVjdCBMaWdodAp7CiAgICBpbnQgdHlwZTsKICAgIGZsb2F0MyBkaXJlY3Rpb247CiAgICBmbG9hdDMgY29sb3I7CiAgICBmbG9hdDMgcG9zaXRpb247CiAgICBmbG9hdCByYW5nZTsKICAgIGZsb2F0IGludGVuc2l0eTsKICAgIGZsb2F0IGlubmVyQ29uZUNvczsKICAgIGZsb2F0IG91dGVyQ29uZUNvczsKICAgIGJvb2wgc2hhZG93czsKICAgIGludCBzaGFkb3dNYXBJbmRleDsKICAgIGludCBudW1TaGFkb3dDYXNjYWRlczsKfTsKCnN0cnVjdCBTaGFkb3cKewogICAgZmxvYXQgbWF4QmlhczsKICAgIGZsb2F0IG1pbkJpYXM7CiAgICBmbG9hdDIgbWFwU2l6ZTsKICAgIGZsb2F0MiBuZWFyRmFyOwogICAgZmxvYXQ0IGxpZ2h0UHJvalBvczsKfTsKCnN0YXRpYyBjb25zdCBTaGFkb3cgXzY0OSA9IHsgMC4wZiwgMC4wZiwgMC4wZi54eCwgMC4wZi54eCwgMC4wZi54eHh4IH07CgpjYnVmZmVyIHVfZnNfcGJyUGFyYW1zIDogcmVnaXN0ZXIoYjApCnsKICAgIGZsb2F0NCBwYnJQYXJhbXNfYmFzZUNvbG9yRmFjdG9yIDogcGFja29mZnNldChjMCk7CiAgICBmbG9hdCBwYnJQYXJhbXNfbWV0YWxsaWNGYWN0b3IgOiBwYWNrb2Zmc2V0KGMxKTsKICAgIGZsb2F0IHBiclBhcmFtc19yb3VnaG5lc3NGYWN0b3IgOiBwYWNrb2Zmc2V0KGMxLnkpOwogICAgZmxvYXQzIHBiclBhcmFtc19lbWlzc2l2ZUZhY3RvciA6IHBhY2tvZmZzZXQoYzIpOwogICAgZmxvYXQzIHBiclBhcmFtc19hbWJpZW50TGlnaHQgOiBwYWNrb2Zmc2V0KGMzKTsKICAgIGZsb2F0IHBiclBhcmFtc19hbWJpZW50RmFjdG9yIDogcGFja29mZnNldChjMy53KTsKfTsKCmNidWZmZXIgdV9mc19zaGFkb3dzIDogcmVnaXN0ZXIoYjEpCnsKICAgIGZsb2F0NCB1U2hhZG93c19iaWFzX3RleFNpemVfbmVhckZhcls3XSA6IHBhY2tvZmZzZXQoYzApOwp9OwoKY2J1ZmZlciB1X2ZzX2xpZ2h0aW5nIDogcmVnaXN0ZXIoYjIpCnsKICAgIGZsb2F0NCBsaWdodGluZ19kaXJlY3Rpb25fcmFuZ2VbNl0gOiBwYWNrb2Zmc2V0KGMwKTsKICAgIGZsb2F0NCBsaWdodGluZ19jb2xvcl9pbnRlbnNpdHlbNl0gOiBwYWNrb2Zmc2V0KGM2KTsKICAgIGZsb2F0NCBsaWdodGluZ19wb3NpdGlvbl90eXBlWzZdIDogcGFja29mZnNldChjMTIpOwogICAgZmxvYXQ0IGxpZ2h0aW5nX2luQ29uZV9vdUNvbmVfc2hhZG93c19jYXNjYWRlc1s2XSA6IHBhY2tvZmZzZXQoYzE4KTsKICAgIGZsb2F0NCBsaWdodGluZ19leWVQb3MgOiBwYWNrb2Zmc2V0KGMyNCk7Cn07CgpUZXh0dXJlMkQ8ZmxvYXQ0PiB1X2Jhc2VDb2xvclRleHR1cmUgOiByZWdpc3Rlcih0MCk7ClNhbXBsZXJTdGF0ZSBfdV9iYXNlQ29sb3JUZXh0dXJlX3NhbXBsZXIgOiByZWdpc3RlcihzMCk7ClRleHR1cmUyRDxmbG9hdDQ+IHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlIDogcmVnaXN0ZXIodDEpOwpTYW1wbGVyU3RhdGUgX3VfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlX3NhbXBsZXIgOiByZWdpc3RlcihzMSk7ClRleHR1cmUyRDxmbG9hdDQ+IHVfb2NjbHVzaW9uVGV4dHVyZSA6IHJlZ2lzdGVyKHQyKTsKU2FtcGxlclN0YXRlIF91X29jY2x1c2lvblRleHR1cmVfc2FtcGxlciA6IHJlZ2lzdGVyKHMyKTsKVGV4dHVyZTJEPGZsb2F0ND4gdV9lbWlzc2l2ZVRleHR1cmUgOiByZWdpc3Rlcih0Myk7ClNhbXBsZXJTdGF0ZSBfdV9lbWlzc2l2ZVRleHR1cmVfc2FtcGxlciA6IHJlZ2lzdGVyKHMzKTsKVGV4dHVyZTJEPGZsb2F0ND4gdV9zaGFkb3dNYXAxIDogcmVnaXN0ZXIodDQpOwpTYW1wbGVyU3RhdGUgX3Vfc2hhZG93TWFwMV9zYW1wbGVyIDogcmVnaXN0ZXIoczQpOwpUZXh0dXJlMkQ8ZmxvYXQ0PiB1X3NoYWRvd01hcDIgOiByZWdpc3Rlcih0NSk7ClNhbXBsZXJTdGF0ZSBfdV9zaGFkb3dNYXAyX3NhbXBsZXIgOiByZWdpc3RlcihzNSk7ClRleHR1cmUyRDxmbG9hdDQ+IHVfc2hhZG93TWFwMyA6IHJlZ2lzdGVyKHQ2KTsKU2FtcGxlclN0YXRlIF91X3NoYWRvd01hcDNfc2FtcGxlciA6IHJlZ2lzdGVyKHM2KTsKVGV4dHVyZTJEPGZsb2F0ND4gdV9zaGFkb3dNYXA0IDogcmVnaXN0ZXIodDcpOwpTYW1wbGVyU3RhdGUgX3Vfc2hhZG93TWFwNF9zYW1wbGVyIDogcmVnaXN0ZXIoczcpOwpUZXh0dXJlMkQ8ZmxvYXQ0PiB1X3NoYWRvd01hcDUgOiByZWdpc3Rlcih0OCk7ClNhbXBsZXJTdGF0ZSBfdV9zaGFkb3dNYXA1X3NhbXBsZXIgOiByZWdpc3RlcihzOCk7ClRleHR1cmUyRDxmbG9hdDQ+IHVfc2hhZG93TWFwNiA6IHJlZ2lzdGVyKHQ5KTsKU2FtcGxlclN0YXRlIF91X3NoYWRvd01hcDZfc2FtcGxlciA6IHJlZ2lzdGVyKHM5KTsKVGV4dHVyZUN1YmU8ZmxvYXQ0PiB1X3NoYWRvd0N1YmVNYXAxIDogcmVnaXN0ZXIodDEwKTsKU2FtcGxlclN0YXRlIF91X3NoYWRvd0N1YmVNYXAxX3NhbXBsZXIgOiByZWdpc3RlcihzMTApOwoKc3RhdGljIGZsb2F0MiB2X3V2MTsKc3RhdGljIGZsb2F0MyB2X3Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQzIHZfbm9ybWFsOwpzdGF0aWMgZmxvYXQ0IHZfbGlnaHRQcm9qUG9zWzZdOwpzdGF0aWMgZmxvYXQgdl9jbGlwU3BhY2VQb3NaOwpzdGF0aWMgZmxvYXQ0IGdfZmluYWxDb2xvcjsKc3RhdGljIGZsb2F0MiB2X3V2MjsKCnN0cnVjdCBTUElSVl9Dcm9zc19JbnB1dAp7CiAgICBmbG9hdDMgdl9wb3NpdGlvbiA6IFRFWENPT1JEMDsKICAgIGZsb2F0MyB2X25vcm1hbCA6IFRFWENPT1JEMTsKICAgIGZsb2F0MiB2X3V2MSA6IFRFWENPT1JEMjsKICAgIGZsb2F0MiB2X3V2MiA6IFRFWENPT1JEMzsKICAgIGZsb2F0NCB2X2xpZ2h0UHJvalBvc1s2XSA6IFRFWENPT1JENDsKICAgIGZsb2F0IHZfY2xpcFNwYWNlUG9zWiA6IFRFWENPT1JEMTA7Cn07CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfT3V0cHV0CnsKICAgIGZsb2F0NCBnX2ZpbmFsQ29sb3IgOiBTVl9UYXJnZXQwOwp9OwoKZmxvYXQzIHNSR0JUb0xpbmVhcihmbG9hdDMgc3JnYkluKQp7CiAgICByZXR1cm4gcG93KHNyZ2JJbiwgMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1Zi54eHgpOwp9CgpmbG9hdDQgc1JHQlRvTGluZWFyKGZsb2F0NCBzcmdiSW4pCnsKICAgIGZsb2F0MyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gZmxvYXQ0KHNSR0JUb0xpbmVhcihwYXJhbSksIHNyZ2JJbi53KTsKfQoKZmxvYXQ0IGdldFZlcnRleENvbG9yKCkKewogICAgcmV0dXJuIDEuMGYueHh4eDsKfQoKZmxvYXQ0IGdldEJhc2VDb2xvcigpCnsKICAgIGZsb2F0NCBiYXNlQ29sb3IgPSBwYnJQYXJhbXNfYmFzZUNvbG9yRmFjdG9yOwogICAgZmxvYXQ0IHBhcmFtID0gdV9iYXNlQ29sb3JUZXh0dXJlLlNhbXBsZShfdV9iYXNlQ29sb3JUZXh0dXJlX3NhbXBsZXIsIHZfdXYxKTsKICAgIGZsb2F0NCBfMjMyID0gYmFzZUNvbG9yOwogICAgZmxvYXQ0IF8yMzMgPSBfMjMyICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8yMzM7CiAgICByZXR1cm4gXzIzMyAqIGdldFZlcnRleENvbG9yKCk7Cn0KCk5vcm1hbEluZm8gZ2V0Tm9ybWFsSW5mbygpCnsKICAgIGZsb2F0MyBfMzE0ID0gZmxvYXQzKHZfdXYxLCAwLjBmKTsKICAgIGZsb2F0MyBfMzE1ID0gZGR4KF8zMTQpOwogICAgZmxvYXQzIF8zMjEgPSBkZHkoXzMxNCk7CiAgICBmbG9hdCBfMzI0ID0gXzMyMS55OwogICAgZmxvYXQgXzMzMSA9IF8zMTUueTsKICAgIGZsb2F0MyBfMzQ5ID0gKChkZHgodl9wb3NpdGlvbikgKiBfMzI0KSAtIChkZHkodl9wb3NpdGlvbikgKiBfMzMxKSkgLyAoKF8zMTUueCAqIF8zMjQpIC0gKF8zMjEueCAqIF8zMzEpKS54eHg7CiAgICBmbG9hdDMgXzM1MyA9IG5vcm1hbGl6ZSh2X25vcm1hbCk7CiAgICBmbG9hdDMgXzM2MiA9IG5vcm1hbGl6ZShfMzQ5IC0gKF8zNTMgKiBkb3QoXzM1MywgXzM0OSkpKTsKICAgIE5vcm1hbEluZm8gXzE1ODkgPSB7IF8zNTMsIF8zNTMsIF8zNjIsIGNyb3NzKF8zNTMsIF8zNjIpIH07CiAgICByZXR1cm4gXzE1ODk7Cn0KCk1hdGVyaWFsSW5mbyBnZXRNZXRhbGxpY1JvdWdobmVzc0luZm8oaW5vdXQgTWF0ZXJpYWxJbmZvIGluZm8sIGZsb2F0IGYwX2lvcikKewogICAgaW5mby5tZXRhbGxpYyA9IHBiclBhcmFtc19tZXRhbGxpY0ZhY3RvcjsKICAgIGluZm8ucGVyY2VwdHVhbFJvdWdobmVzcyA9IHBiclBhcmFtc19yb3VnaG5lc3NGYWN0b3I7CiAgICBmbG9hdDQgXzI1MyA9IHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlLlNhbXBsZShfdV9tZXRhbGxpY1JvdWdobmVzc1RleHR1cmVfc2FtcGxlciwgdl91djEpOwogICAgaW5mby5wZXJjZXB0dWFsUm91Z2huZXNzICo9IF8yNTMueTsKICAgIGluZm8ubWV0YWxsaWMgKj0gXzI1My56OwogICAgZmxvYXQzIF8yNzAgPSBmMF9pb3IueHh4OwogICAgaW5mby5hbGJlZG9Db2xvciA9IGxlcnAoaW5mby5iYXNlQ29sb3IgKiAoMS4wZi54eHggLSBfMjcwKSwgMC4wZi54eHgsIGluZm8ubWV0YWxsaWMueHh4KTsKICAgIGluZm8uZjAgPSBsZXJwKF8yNzAsIGluZm8uYmFzZUNvbG9yLCBpbmZvLm1ldGFsbGljLnh4eCk7CiAgICByZXR1cm4gaW5mbzsKfQoKZmxvYXQ0IGdldE9jY2x1c2lvblRleHR1cmUoKQp7CiAgICByZXR1cm4gdV9vY2NsdXNpb25UZXh0dXJlLlNhbXBsZShfdV9vY2NsdXNpb25UZXh0dXJlX3NhbXBsZXIsIHZfdXYxKTsKfQoKZmxvYXQgY2xhbXBlZERvdChmbG9hdDMgeCwgZmxvYXQzIHkpCnsKICAgIHJldHVybiBjbGFtcChkb3QoeCwgeSksIDAuMGYsIDEuMGYpOwp9CgpTaGFkb3cgZ2V0U2hhZG93MkRDb25mKGludCBpbmRleCkKewogICAgZm9yIChpbnQgaSA9IDA7IGkgPCA2OyBpKyspCiAgICB7CiAgICAgICAgaWYgKGkgPT0gaW5kZXgpCiAgICAgICAgewogICAgICAgICAgICBTaGFkb3cgXzY0MyA9IHsgdVNoYWRvd3NfYmlhc190ZXhTaXplX25lYXJGYXJbaV0ueCwgdVNoYWRvd3NfYmlhc190ZXhTaXplX25lYXJGYXJbaV0ueCAqIDAuMTAwMDAwMDAxNDkwMTE2MTE5Mzg0NzY1NjI1ZiwgdVNoYWRvd3NfYmlhc190ZXhTaXplX25lYXJGYXJbaV0ueXksIHVTaGFkb3dzX2JpYXNfdGV4U2l6ZV9uZWFyRmFyW2ldLnp3LCB2X2xpZ2h0UHJvalBvc1tpXSB9OwogICAgICAgICAgICByZXR1cm4gXzY0MzsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gXzY0OTsKfQoKZmxvYXQ0IGdldFNoYWRvd01hcChpbnQgaW5kZXgsIGZsb2F0MiBjb29yZHMpCnsKICAgIGlmIChpbmRleCA9PSAwKQogICAgewogICAgICAgIHJldHVybiB1X3NoYWRvd01hcDEuU2FtcGxlKF91X3NoYWRvd01hcDFfc2FtcGxlciwgY29vcmRzKTsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBpZiAoaW5kZXggPT0gMSkKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiB1X3NoYWRvd01hcDIuU2FtcGxlKF91X3NoYWRvd01hcDJfc2FtcGxlciwgY29vcmRzKTsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgaWYgKGluZGV4ID09IDIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHJldHVybiB1X3NoYWRvd01hcDMuU2FtcGxlKF91X3NoYWRvd01hcDNfc2FtcGxlciwgY29vcmRzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSAzKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB1X3NoYWRvd01hcDQuU2FtcGxlKF91X3NoYWRvd01hcDRfc2FtcGxlciwgY29vcmRzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT0gNCkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1X3NoYWRvd01hcDUuU2FtcGxlKF91X3NoYWRvd01hcDVfc2FtcGxlciwgY29vcmRzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IDUpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1X3NoYWRvd01hcDYuU2FtcGxlKF91X3NoYWRvd01hcDZfc2FtcGxlciwgY29vcmRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiAwLjBmLnh4eHg7Cn0KCmZsb2F0IGRlY29kZURlcHRoKGZsb2F0NCByZ2JhKQp7CiAgICByZXR1cm4gZG90KHJnYmEsIGZsb2F0NCgxLjBmLCAwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjVmLCAxLjUzNzg3MDA0ODE5NjA1NDk5NTA1OTk2NzA0MTAxNTZlLTA1ZiwgNi4wMzA4NjI5MjAxNjk5NjU5NDYxMTU1NTMzNzkwNTg4ZS0wOGYpKTsKfQoKZmxvYXQgc2hhZG93Q29tcGFyZShpbnQgc2hhZG93TWFwSW5kZXgsIGZsb2F0IGN1cnJlbnREZXB0aCwgZmxvYXQgYmlhcywgZmxvYXQyIHRleENvb3JkcykKewogICAgaW50IHBhcmFtID0gc2hhZG93TWFwSW5kZXg7CiAgICBmbG9hdDIgcGFyYW1fMSA9IHRleENvb3JkczsKICAgIGZsb2F0NCBwYXJhbV8yID0gZ2V0U2hhZG93TWFwKHBhcmFtLCBwYXJhbV8xKTsKICAgIHJldHVybiBmbG9hdCgoY3VycmVudERlcHRoIC0gYmlhcykgPiBkZWNvZGVEZXB0aChwYXJhbV8yKSk7Cn0KCmZsb2F0IHNoYWRvd0NhbGN1bGF0aW9uQXV4KGludCBzaGFkb3dNYXBJbmRleCwgU2hhZG93IHNoYWRvd0NvbmYsIGZsb2F0IE5kb3RMKQp7CiAgICBmbG9hdCBzaGFkb3cgPSAwLjBmOwogICAgZmxvYXQzIF84MTYgPSAoKHNoYWRvd0NvbmYubGlnaHRQcm9qUG9zLnh5eiAvIHNoYWRvd0NvbmYubGlnaHRQcm9qUG9zLncueHh4KSAqIDAuNWYpICsgMC41Zi54eHg7CiAgICBmbG9hdCBfODE5ID0gXzgxNi56OwogICAgZmxvYXQgXzgyOCA9IG1heChzaGFkb3dDb25mLm1heEJpYXMgKiAoMS4wZiAtIE5kb3RMKSwgc2hhZG93Q29uZi5taW5CaWFzKTsKICAgIGZsb2F0MiBfODMzID0gMS4wZi54eCAvIHNoYWRvd0NvbmYubWFwU2l6ZTsKICAgIGZvciAoaW50IHggPSAtMTsgeCA8PSAxOyB4KyspCiAgICB7CiAgICAgICAgZm9yIChpbnQgeSA9IC0xOyB5IDw9IDE7IHkrKykKICAgICAgICB7CiAgICAgICAgICAgIGludCBwYXJhbSA9IHNoYWRvd01hcEluZGV4OwogICAgICAgICAgICBmbG9hdCBwYXJhbV8xID0gXzgxOTsKICAgICAgICAgICAgZmxvYXQgcGFyYW1fMiA9IF84Mjg7CiAgICAgICAgICAgIGZsb2F0MiBwYXJhbV8zID0gXzgxNi54eSArIChmbG9hdDIoZmxvYXQoeCksIGZsb2F0KHkpKSAqIF84MzMpOwogICAgICAgICAgICBzaGFkb3cgKz0gc2hhZG93Q29tcGFyZShwYXJhbSwgcGFyYW1fMSwgcGFyYW1fMiwgcGFyYW1fMyk7CiAgICAgICAgfQogICAgfQogICAgc2hhZG93ICo9IDAuMTExMTExMTExOTM4OTUzMzk5NjU4MjAzMTI1ZjsKICAgIGlmIChfODE5ID4gMS4wZikKICAgIHsKICAgICAgICBzaGFkb3cgPSAwLjBmOwogICAgfQogICAgcmV0dXJuIHNoYWRvdzsKfQoKZmxvYXQgc2hhZG93Q2FsY3VsYXRpb25QQ0YoaW50IHNoYWRvd01hcEluZGV4LCBmbG9hdCBOZG90TCkKewogICAgaW50IHBhcmFtID0gc2hhZG93TWFwSW5kZXg7CiAgICBpbnQgcGFyYW1fMSA9IHNoYWRvd01hcEluZGV4OwogICAgU2hhZG93IHBhcmFtXzIgPSBnZXRTaGFkb3cyRENvbmYocGFyYW0pOwogICAgZmxvYXQgcGFyYW1fMyA9IE5kb3RMOwogICAgcmV0dXJuIHNoYWRvd0NhbGN1bGF0aW9uQXV4KHBhcmFtXzEsIHBhcmFtXzIsIHBhcmFtXzMpOwp9CgpmbG9hdCBzaGFkb3dDYXNjYWRlZENhbGN1bGF0aW9uUENGKGludCBzaGFkb3dNYXBJbmRleCwgaW50IG51bVNoYWRvd0Nhc2NhZGVzLCBmbG9hdCBOZG90TCkKewogICAgZm9yIChpbnQgYyA9IDA7IGMgPCA0OyBjKyspCiAgICB7CiAgICAgICAgaWYgKGMgPCBudW1TaGFkb3dDYXNjYWRlcykKICAgICAgICB7CiAgICAgICAgICAgIGludCBfOTE1ID0gc2hhZG93TWFwSW5kZXggKyBjOwogICAgICAgICAgICBpbnQgcGFyYW0gPSBfOTE1OwogICAgICAgICAgICBTaGFkb3cgXzkxOSA9IGdldFNoYWRvdzJEQ29uZihwYXJhbSk7CiAgICAgICAgICAgIGZsb2F0MiBfMTYxNCA9IF85MTkubmVhckZhcjsKICAgICAgICAgICAgYm9vbCBfOTI1ID0gdl9jbGlwU3BhY2VQb3NaID49IF8xNjE0Lng7CiAgICAgICAgICAgIGJvb2wgXzkzMjsKICAgICAgICAgICAgaWYgKF85MjUpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIF85MzIgPSB2X2NsaXBTcGFjZVBvc1ogPD0gXzE2MTQueTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIF85MzIgPSBfOTI1OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChfOTMyKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpbnQgcGFyYW1fMSA9IF85MTU7CiAgICAgICAgICAgICAgICBTaGFkb3cgcGFyYW1fMiA9IF85MTk7CiAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8zID0gTmRvdEw7CiAgICAgICAgICAgICAgICByZXR1cm4gc2hhZG93Q2FsY3VsYXRpb25BdXgocGFyYW1fMSwgcGFyYW1fMiwgcGFyYW1fMyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gMC4wZjsKfQoKU2hhZG93IGdldFNoYWRvd0N1YmVDb25mKGludCBpbmRleCkKewogICAgZm9yIChpbnQgaSA9IDY7IGkgPCA3OyBpKyspCiAgICB7CiAgICAgICAgaWYgKGkgPT0gaW5kZXgpCiAgICAgICAgewogICAgICAgICAgICBTaGFkb3cgXzY4MCA9IHsgdVNoYWRvd3NfYmlhc190ZXhTaXplX25lYXJGYXJbaV0ueCwgdVNoYWRvd3NfYmlhc190ZXhTaXplX25lYXJGYXJbaV0ueCAqIDAuMTAwMDAwMDAxNDkwMTE2MTE5Mzg0NzY1NjI1ZiwgdVNoYWRvd3NfYmlhc190ZXhTaXplX25lYXJGYXJbaV0ueXksIHVTaGFkb3dzX2JpYXNfdGV4U2l6ZV9uZWFyRmFyW2ldLnp3LCAwLjBmLnh4eHggfTsKICAgICAgICAgICAgcmV0dXJuIF82ODA7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIF82NDk7Cn0KCmZsb2F0IGRpc3RhbmNlVG9EZXB0aFZhbHVlKGZsb2F0MyBfZGlzdGFuY2UsIGZsb2F0MiBjYWxjTmVhckZhcikKewogICAgZmxvYXQzIF85NDkgPSBhYnMoX2Rpc3RhbmNlKTsKICAgIHJldHVybiBjYWxjTmVhckZhci54ICsgKGNhbGNOZWFyRmFyLnkgLyBtYXgoXzk0OS54LCBtYXgoXzk0OS55LCBfOTQ5LnopKSk7Cn0KCmZsb2F0NCBnZXRTaGFkb3dDdWJlTWFwKGlub3V0IGludCBpbmRleCwgZmxvYXQzIGNvb3JkcykKewogICAgaW5kZXggLT0gNjsKICAgIGlmIChpbmRleCA9PSAwKQogICAgewogICAgICAgIHJldHVybiB1X3NoYWRvd0N1YmVNYXAxLlNhbXBsZShfdV9zaGFkb3dDdWJlTWFwMV9zYW1wbGVyLCBjb29yZHMpOwogICAgfQogICAgZWxzZQogICAgewogICAgfQogICAgcmV0dXJuIDAuMGYueHh4eDsKfQoKZmxvYXQgc2hhZG93Q3ViZUNvbXBhcmUoaW50IHNoYWRvd01hcEluZGV4LCBmbG9hdCBjdXJyZW50RGVwdGgsIGZsb2F0IGJpYXMsIGZsb2F0MyB0ZXhDb29yZHMpCnsKICAgIGludCBwYXJhbSA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQzIHBhcmFtXzEgPSB0ZXhDb29yZHM7CiAgICBmbG9hdDQgXzk3MyA9IGdldFNoYWRvd0N1YmVNYXAocGFyYW0sIHBhcmFtXzEpOwogICAgZmxvYXQ0IHBhcmFtXzIgPSBfOTczOwogICAgaWYgKChjdXJyZW50RGVwdGggLSBiaWFzKSA+IGRlY29kZURlcHRoKHBhcmFtXzIpKQogICAgewogICAgICAgIHJldHVybiAxLjBmOwogICAgfQogICAgcmV0dXJuIDAuMGY7Cn0KCmZsb2F0IHNoYWRvd0N1YmVDYWxjdWxhdGlvblBDRihpbnQgc2hhZG93TWFwSW5kZXgsIGZsb2F0MyBmcmFnVG9MaWdodCwgZmxvYXQgTmRvdEwpCnsKICAgIGludCBwYXJhbSA9IHNoYWRvd01hcEluZGV4OwogICAgU2hhZG93IF85ODkgPSBnZXRTaGFkb3dDdWJlQ29uZihwYXJhbSk7CiAgICBmbG9hdDMgcGFyYW1fMSA9IGZyYWdUb0xpZ2h0OwogICAgZmxvYXQyIHBhcmFtXzIgPSBfOTg5Lm5lYXJGYXI7CiAgICBmbG9hdCBfOTk2ID0gZGlzdGFuY2VUb0RlcHRoVmFsdWUocGFyYW1fMSwgcGFyYW1fMik7CiAgICBmbG9hdCBzaGFkb3cgPSAwLjBmOwogICAgZmxvYXQgXzEwMDYgPSBtYXgoXzk4OS5tYXhCaWFzICogKDEuMGYgLSBOZG90TCksIF85ODkubWluQmlhcyk7CiAgICBmbG9hdCBfMTAxMSA9IGxlbmd0aChmcmFnVG9MaWdodCkgKiAwLjAwMDUwMDAwMDAyMzc0ODcyNTY1MjY5NDcwMjE0ODQzNzVmOwogICAgaW50IHBhcmFtXzMgPSBzaGFkb3dNYXBJbmRleDsKICAgIGZsb2F0IHBhcmFtXzQgPSBfOTk2OwogICAgZmxvYXQgcGFyYW1fNSA9IF8xMDA2OwogICAgZmxvYXQzIHBhcmFtXzYgPSBmcmFnVG9MaWdodDsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8zLCBwYXJhbV80LCBwYXJhbV81LCBwYXJhbV82KTsKICAgIGludCBwYXJhbV83ID0gc2hhZG93TWFwSW5kZXg7CiAgICBmbG9hdCBwYXJhbV84ID0gXzk5NjsKICAgIGZsb2F0IHBhcmFtXzkgPSBfMTAwNjsKICAgIGZsb2F0MyBwYXJhbV8xMCA9IGZyYWdUb0xpZ2h0ICsgKDEuMGYueHh4ICogXzEwMTEpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzcsIHBhcmFtXzgsIHBhcmFtXzksIHBhcmFtXzEwKTsKICAgIGludCBwYXJhbV8xMSA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fMTIgPSBfOTk2OwogICAgZmxvYXQgcGFyYW1fMTMgPSBfMTAwNjsKICAgIGZsb2F0MyBwYXJhbV8xNCA9IGZyYWdUb0xpZ2h0ICsgKGZsb2F0MygxLjBmLCAtMS4wZiwgMS4wZikgKiBfMTAxMSk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMTEsIHBhcmFtXzEyLCBwYXJhbV8xMywgcGFyYW1fMTQpOwogICAgaW50IHBhcmFtXzE1ID0gc2hhZG93TWFwSW5kZXg7CiAgICBmbG9hdCBwYXJhbV8xNiA9IF85OTY7CiAgICBmbG9hdCBwYXJhbV8xNyA9IF8xMDA2OwogICAgZmxvYXQzIHBhcmFtXzE4ID0gZnJhZ1RvTGlnaHQgKyAoZmxvYXQzKC0xLjBmLCAtMS4wZiwgMS4wZikgKiBfMTAxMSk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMTUsIHBhcmFtXzE2LCBwYXJhbV8xNywgcGFyYW1fMTgpOwogICAgaW50IHBhcmFtXzE5ID0gc2hhZG93TWFwSW5kZXg7CiAgICBmbG9hdCBwYXJhbV8yMCA9IF85OTY7CiAgICBmbG9hdCBwYXJhbV8yMSA9IF8xMDA2OwogICAgZmxvYXQzIHBhcmFtXzIyID0gZnJhZ1RvTGlnaHQgKyAoZmxvYXQzKC0xLjBmLCAxLjBmLCAxLjBmKSAqIF8xMDExKTsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8xOSwgcGFyYW1fMjAsIHBhcmFtXzIxLCBwYXJhbV8yMik7CiAgICBpbnQgcGFyYW1fMjMgPSBzaGFkb3dNYXBJbmRleDsKICAgIGZsb2F0IHBhcmFtXzI0ID0gXzk5NjsKICAgIGZsb2F0IHBhcmFtXzI1ID0gXzEwMDY7CiAgICBmbG9hdDMgcGFyYW1fMjYgPSBmcmFnVG9MaWdodCArIChmbG9hdDMoMS4wZiwgMS4wZiwgLTEuMGYpICogXzEwMTEpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzIzLCBwYXJhbV8yNCwgcGFyYW1fMjUsIHBhcmFtXzI2KTsKICAgIGludCBwYXJhbV8yNyA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fMjggPSBfOTk2OwogICAgZmxvYXQgcGFyYW1fMjkgPSBfMTAwNjsKICAgIGZsb2F0MyBwYXJhbV8zMCA9IGZyYWdUb0xpZ2h0ICsgKGZsb2F0MygxLjBmLCAtMS4wZiwgLTEuMGYpICogXzEwMTEpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzI3LCBwYXJhbV8yOCwgcGFyYW1fMjksIHBhcmFtXzMwKTsKICAgIGludCBwYXJhbV8zMSA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fMzIgPSBfOTk2OwogICAgZmxvYXQgcGFyYW1fMzMgPSBfMTAwNjsKICAgIGZsb2F0MyBwYXJhbV8zNCA9IGZyYWdUb0xpZ2h0ICsgKCgtMS4wZikueHh4ICogXzEwMTEpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzMxLCBwYXJhbV8zMiwgcGFyYW1fMzMsIHBhcmFtXzM0KTsKICAgIGludCBwYXJhbV8zNSA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fMzYgPSBfOTk2OwogICAgZmxvYXQgcGFyYW1fMzcgPSBfMTAwNjsKICAgIGZsb2F0MyBwYXJhbV8zOCA9IGZyYWdUb0xpZ2h0ICsgKGZsb2F0MygtMS4wZiwgMS4wZiwgLTEuMGYpICogXzEwMTEpOwogICAgZmxvYXQgXzExNDQgPSBzaGFkb3c7CiAgICBmbG9hdCBfMTE0NyA9IChfMTE0NCArIHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzM1LCBwYXJhbV8zNiwgcGFyYW1fMzcsIHBhcmFtXzM4KSkgKiAwLjExMTExMTExMTkzODk1MzM5OTY1ODIwMzEyNWY7CiAgICBzaGFkb3cgPSBfMTE0NzsKICAgIHJldHVybiBfMTE0NzsKfQoKZmxvYXQgZ2V0UmFuZ2VBdHRlbnVhdGlvbihmbG9hdCByYW5nZSwgZmxvYXQgX2Rpc3RhbmNlKQp7CiAgICBpZiAocmFuZ2UgPD0gMC4wZikKICAgIHsKICAgICAgICByZXR1cm4gMS4wZiAvIHBvdyhfZGlzdGFuY2UsIDIuMGYpOwogICAgfQogICAgcmV0dXJuIG1heChtaW4oMS4wZiAtIHBvdyhfZGlzdGFuY2UgLyByYW5nZSwgNC4wZiksIDEuMGYpLCAwLjBmKSAvIHBvdyhfZGlzdGFuY2UsIDIuMGYpOwp9CgpmbG9hdCBnZXRTcG90QXR0ZW51YXRpb24oZmxvYXQzIHBvaW50VG9MaWdodCwgZmxvYXQzIHNwb3REaXJlY3Rpb24sIGZsb2F0IG91dGVyQ29uZUNvcywgZmxvYXQgaW5uZXJDb25lQ29zKQp7CiAgICBmbG9hdCBfNTMwID0gZG90KG5vcm1hbGl6ZShzcG90RGlyZWN0aW9uKSwgbm9ybWFsaXplKC1wb2ludFRvTGlnaHQpKTsKICAgIGlmIChfNTMwID4gb3V0ZXJDb25lQ29zKQogICAgewogICAgICAgIGlmIChfNTMwIDwgaW5uZXJDb25lQ29zKQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIHNtb290aHN0ZXAob3V0ZXJDb25lQ29zLCBpbm5lckNvbmVDb3MsIF81MzApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gMS4wZjsKICAgIH0KICAgIHJldHVybiAwLjBmOwp9CgpmbG9hdDMgZ2V0TGlnaEludGVuc2l0eShMaWdodCBsaWdodCwgZmxvYXQzIHBvaW50VG9MaWdodCkKewogICAgZmxvYXQgcmFuZ2VBdHRlbnVhdGlvbiA9IDEuMGY7CiAgICBmbG9hdCBzcG90QXR0ZW51YXRpb24gPSAxLjBmOwogICAgaWYgKGxpZ2h0LnR5cGUgIT0gMCkKICAgIHsKICAgICAgICBmbG9hdCBwYXJhbSA9IGxpZ2h0LnJhbmdlOwogICAgICAgIGZsb2F0IHBhcmFtXzEgPSBsZW5ndGgocG9pbnRUb0xpZ2h0KTsKICAgICAgICByYW5nZUF0dGVudWF0aW9uID0gZ2V0UmFuZ2VBdHRlbnVhdGlvbihwYXJhbSwgcGFyYW1fMSk7CiAgICB9CiAgICBpZiAobGlnaHQudHlwZSA9PSAyKQogICAgewogICAgICAgIGZsb2F0MyBwYXJhbV8yID0gcG9pbnRUb0xpZ2h0OwogICAgICAgIGZsb2F0MyBwYXJhbV8zID0gbGlnaHQuZGlyZWN0aW9uOwogICAgICAgIGZsb2F0IHBhcmFtXzQgPSBsaWdodC5vdXRlckNvbmVDb3M7CiAgICAgICAgZmxvYXQgcGFyYW1fNSA9IGxpZ2h0LmlubmVyQ29uZUNvczsKICAgICAgICBzcG90QXR0ZW51YXRpb24gPSBnZXRTcG90QXR0ZW51YXRpb24ocGFyYW1fMiwgcGFyYW1fMywgcGFyYW1fNCwgcGFyYW1fNSk7CiAgICB9CiAgICByZXR1cm4gbGlnaHQuY29sb3IgKiAoKHJhbmdlQXR0ZW51YXRpb24gKiBzcG90QXR0ZW51YXRpb24pICogbGlnaHQuaW50ZW5zaXR5KTsKfQoKZmxvYXQzIEZfU2NobGljayhmbG9hdDMgZjAsIGZsb2F0MyBmOTAsIGZsb2F0IFZkb3RIKQp7CiAgICByZXR1cm4gZjAgKyAoKGY5MCAtIGYwKSAqIHBvdyhjbGFtcCgxLjBmIC0gVmRvdEgsIDAuMGYsIDEuMGYpLCA1LjBmKSk7Cn0KCmZsb2F0MyBCUkRGX2xhbWJlcnRpYW4oZmxvYXQzIGYwLCBmbG9hdDMgZjkwLCBmbG9hdDMgZGlmZnVzZUNvbG9yLCBmbG9hdCBWZG90SCkKewogICAgZmxvYXQzIHBhcmFtID0gZjA7CiAgICBmbG9hdDMgcGFyYW1fMSA9IGY5MDsKICAgIGZsb2F0IHBhcmFtXzIgPSBWZG90SDsKICAgIHJldHVybiAoMS4wZi54eHggLSBGX1NjaGxpY2socGFyYW0sIHBhcmFtXzEsIHBhcmFtXzIpKSAqIChkaWZmdXNlQ29sb3IgKiAwLjMxODMwOTg3MzM0MjUxNDAzODA4NTkzNzVmLnh4eCk7Cn0KCmZsb2F0IFZfR0dYKGZsb2F0IE5kb3RMLCBmbG9hdCBOZG90ViwgZmxvYXQgYWxwaGFSb3VnaG5lc3MpCnsKICAgIGZsb2F0IF8zOTggPSBhbHBoYVJvdWdobmVzcyAqIGFscGhhUm91Z2huZXNzOwogICAgZmxvYXQgXzQwNSA9IDEuMGYgLSBfMzk4OwogICAgZmxvYXQgXzQyNiA9IChOZG90TCAqIHNxcnQoKChOZG90ViAqIE5kb3RWKSAqIF80MDUpICsgXzM5OCkpICsgKE5kb3RWICogc3FydCgoKE5kb3RMICogTmRvdEwpICogXzQwNSkgKyBfMzk4KSk7CiAgICBpZiAoXzQyNiA+IDAuMGYpCiAgICB7CiAgICAgICAgcmV0dXJuIDAuNWYgLyBfNDI2OwogICAgfQogICAgcmV0dXJuIDAuMGY7Cn0KCmZsb2F0IERfR0dYKGZsb2F0IE5kb3RILCBmbG9hdCBhbHBoYVJvdWdobmVzcykKewogICAgZmxvYXQgXzQ0MCA9IGFscGhhUm91Z2huZXNzICogYWxwaGFSb3VnaG5lc3M7CiAgICBmbG9hdCBfNDQ4ID0gKChOZG90SCAqIE5kb3RIKSAqIChfNDQwIC0gMS4wZikpICsgMS4wZjsKICAgIHJldHVybiBfNDQwIC8gKCgzLjE0MTU5Mjc0MTAxMjU3MzI0MjE4NzVmICogXzQ0OCkgKiBfNDQ4KTsKfQoKZmxvYXQzIEJSREZfc3BlY3VsYXJHR1goZmxvYXQzIGYwLCBmbG9hdDMgZjkwLCBmbG9hdCBhbHBoYVJvdWdobmVzcywgZmxvYXQgVmRvdEgsIGZsb2F0IE5kb3RMLCBmbG9hdCBOZG90ViwgZmxvYXQgTmRvdEgpCnsKICAgIGZsb2F0MyBwYXJhbSA9IGYwOwogICAgZmxvYXQzIHBhcmFtXzEgPSBmOTA7CiAgICBmbG9hdCBwYXJhbV8yID0gVmRvdEg7CiAgICBmbG9hdCBwYXJhbV8zID0gTmRvdEw7CiAgICBmbG9hdCBwYXJhbV80ID0gTmRvdFY7CiAgICBmbG9hdCBwYXJhbV81ID0gYWxwaGFSb3VnaG5lc3M7CiAgICBmbG9hdCBwYXJhbV82ID0gTmRvdEg7CiAgICBmbG9hdCBwYXJhbV83ID0gYWxwaGFSb3VnaG5lc3M7CiAgICByZXR1cm4gKEZfU2NobGljayhwYXJhbSwgcGFyYW1fMSwgcGFyYW1fMikgKiBWX0dHWChwYXJhbV8zLCBwYXJhbV80LCBwYXJhbV81KSkgKiBEX0dHWChwYXJhbV82LCBwYXJhbV83KTsKfQoKZmxvYXQ0IGdldEVtaXNzaXZlVGV4dHVyZSgpCnsKICAgIHJldHVybiB1X2VtaXNzaXZlVGV4dHVyZS5TYW1wbGUoX3VfZW1pc3NpdmVUZXh0dXJlX3NhbXBsZXIsIHZfdXYxKTsKfQoKZmxvYXQzIGxpbmVhclRvc1JHQihmbG9hdDMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NWYueHh4KTsKfQoKdm9pZCBmcmFnX21haW4oKQp7CiAgICBmbG9hdDQgXzExNTIgPSBnZXRCYXNlQ29sb3IoKTsKICAgIGZsb2F0MyBfMTUwOCA9IGdldE5vcm1hbEluZm8oKS5uOwogICAgZmxvYXQzIF8xNTEyID0gMC4wZi54eHg7CiAgICBmbG9hdCBfMTUxMyA9IDAuMGY7CiAgICBmbG9hdDMgXzE1MTQgPSAwLjBmLnh4eDsKICAgIGZsb2F0MyBfMTUxNSA9IDAuMGYueHh4OwogICAgZmxvYXQzIF8xMTY3ID0gXzExNTIueHl6OwogICAgTWF0ZXJpYWxJbmZvIF8xNTM1ID0geyAwLjBmLCAwLjBmLnh4eCwgMC4wZiwgMC4wZi54eHgsIDAuMGYueHh4LCAwLjBmLCAwLjBmLnh4eCwgXzExNjcgfTsKICAgIE1hdGVyaWFsSW5mbyBwYXJhbSA9IF8xNTM1OwogICAgZmxvYXQgcGFyYW1fMSA9IDAuMDM5OTk5OTk5MTA1OTMwMzI4MzY5MTQwNjI1ZjsKICAgIE1hdGVyaWFsSW5mbyBfMTE3NyA9IGdldE1ldGFsbGljUm91Z2huZXNzSW5mbyhwYXJhbSwgcGFyYW1fMSk7CiAgICBfMTUxMiA9IF8xMTc3LmYwOwogICAgXzE1MTQgPSBfMTE3Ny5hbGJlZG9Db2xvcjsKICAgIGZsb2F0IF8xMTgwID0gY2xhbXAoXzExNzcucGVyY2VwdHVhbFJvdWdobmVzcywgMC4wZiwgMS4wZik7CiAgICBfMTUxMyA9IF8xMTgwICogXzExODA7CiAgICBfMTUxNSA9IGNsYW1wKG1heChtYXgoXzExNzcuZjAueCwgXzExNzcuZjAueSksIF8xMTc3LmYwLnopICogNTAuMGYsIDAuMGYsIDEuMGYpLnh4eDsKICAgIGZsb2F0MyBmX3NwZWN1bGFyID0gMC4wZi54eHg7CiAgICBmbG9hdDMgZl9lbWlzc2l2ZSA9IDAuMGYueHh4OwogICAgZmxvYXQzIGZfZGlmZnVzZSA9IChwYnJQYXJhbXNfYW1iaWVudExpZ2h0ICogcG93KHBiclBhcmFtc19hbWJpZW50RmFjdG9yLCAyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjVmKSkgKiBfMTE2NzsKICAgIGZsb2F0NCBfMTIyNSA9IGdldE9jY2x1c2lvblRleHR1cmUoKTsKICAgIGZsb2F0IF8xMjI2ID0gXzEyMjUueDsKICAgIGZfZGlmZnVzZSAqPSBfMTIyNjsKICAgIGZfc3BlY3VsYXIgKj0gXzEyMjY7CiAgICBmbG9hdDMgXzEyNTIgPSBub3JtYWxpemUobGlnaHRpbmdfZXllUG9zLnh5eiAtIHZfcG9zaXRpb24pOwogICAgZmxvYXQzIHBvaW50VG9MaWdodDsKICAgIGZvciAoaW50IGkgPSAwOyBpIDwgNjsgaSsrKQogICAgewogICAgICAgIGludCBfMTI2NSA9IGludChsaWdodGluZ19wb3NpdGlvbl90eXBlW2ldLncpOwogICAgICAgIGJvb2wgXzEyOTYgPSAobGlnaHRpbmdfaW5Db25lX291Q29uZV9zaGFkb3dzX2Nhc2NhZGVzW2ldLnogPCAwLjBmKSA/IGZhbHNlIDogdHJ1ZTsKICAgICAgICBpbnQgXzEzMDAgPSBpbnQobGlnaHRpbmdfaW5Db25lX291Q29uZV9zaGFkb3dzX2Nhc2NhZGVzW2ldLnopOwogICAgICAgIGludCBfMTMwNCA9IGludChsaWdodGluZ19pbkNvbmVfb3VDb25lX3NoYWRvd3NfY2FzY2FkZXNbaV0udyk7CiAgICAgICAgaWYgKGxpZ2h0aW5nX2NvbG9yX2ludGVuc2l0eVtpXS53ID4gMC4wZikKICAgICAgICB7CiAgICAgICAgICAgIGlmIChfMTI2NSAhPSAwKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBwb2ludFRvTGlnaHQgPSBsaWdodGluZ19wb3NpdGlvbl90eXBlW2ldLnh5eiAtIHZfcG9zaXRpb247CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBwb2ludFRvTGlnaHQgPSAtbGlnaHRpbmdfZGlyZWN0aW9uX3JhbmdlW2ldLnh5ejsKICAgICAgICAgICAgfQogICAgICAgICAgICBmbG9hdDMgXzEzMjcgPSBub3JtYWxpemUocG9pbnRUb0xpZ2h0KTsKICAgICAgICAgICAgZmxvYXQzIF8xMzMyID0gbm9ybWFsaXplKF8xMzI3ICsgXzEyNTIpOwogICAgICAgICAgICBmbG9hdDMgcGFyYW1fMiA9IF8xNTA4OwogICAgICAgICAgICBmbG9hdDMgcGFyYW1fMyA9IF8xMzI3OwogICAgICAgICAgICBmbG9hdCBfMTMzOCA9IGNsYW1wZWREb3QocGFyYW1fMiwgcGFyYW1fMyk7CiAgICAgICAgICAgIGZsb2F0MyBwYXJhbV80ID0gXzE1MDg7CiAgICAgICAgICAgIGZsb2F0MyBwYXJhbV81ID0gXzEyNTI7CiAgICAgICAgICAgIGZsb2F0IF8xMzQ0ID0gY2xhbXBlZERvdChwYXJhbV80LCBwYXJhbV81KTsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzYgPSBfMTUwODsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzcgPSBfMTMzMjsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzggPSBfMTMyNzsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzkgPSBfMTMzMjsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzEwID0gXzEyNTI7CiAgICAgICAgICAgIGZsb2F0MyBwYXJhbV8xMSA9IF8xMzMyOwogICAgICAgICAgICBmbG9hdCBfMTM2MiA9IGNsYW1wZWREb3QocGFyYW1fMTAsIHBhcmFtXzExKTsKICAgICAgICAgICAgZmxvYXQgc2hhZG93ID0gMS4wZjsKICAgICAgICAgICAgaWYgKF8xMjk2KQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoXzEyNjUgPT0gMikKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpbnQgcGFyYW1fMTIgPSBfMTMwMDsKICAgICAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8xMyA9IF8xMzM4OwogICAgICAgICAgICAgICAgICAgIHNoYWRvdyA9IDEuMGYgLSBzaGFkb3dDYWxjdWxhdGlvblBDRihwYXJhbV8xMiwgcGFyYW1fMTMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGlmIChfMTI2NSA9PSAwKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaW50IHBhcmFtXzE0ID0gXzEzMDA7CiAgICAgICAgICAgICAgICAgICAgICAgIGludCBwYXJhbV8xNSA9IF8xMzA0OwogICAgICAgICAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8xNiA9IF8xMzM4OwogICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3cgPSAxLjBmIC0gc2hhZG93Q2FzY2FkZWRDYWxjdWxhdGlvblBDRihwYXJhbV8xNCwgcGFyYW1fMTUsIHBhcmFtXzE2KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8xMjY1ID09IDEpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludCBwYXJhbV8xNyA9IF8xMzAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzE4ID0gLXBvaW50VG9MaWdodDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzE5ID0gXzEzMzg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3cgPSAxLjBmIC0gc2hhZG93Q3ViZUNhbGN1bGF0aW9uUENGKHBhcmFtXzE3LCBwYXJhbV8xOCwgcGFyYW1fMTkpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgoXzEzMzggPiAwLjBmKSB8fCAoXzEzNDQgPiAwLjBmKSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgTGlnaHQgXzE1ODAgPSB7IF8xMjY1LCBsaWdodGluZ19kaXJlY3Rpb25fcmFuZ2VbaV0ueHl6LCBsaWdodGluZ19jb2xvcl9pbnRlbnNpdHlbaV0ueHl6LCBsaWdodGluZ19wb3NpdGlvbl90eXBlW2ldLnh5eiwgbGlnaHRpbmdfZGlyZWN0aW9uX3JhbmdlW2ldLncsIGxpZ2h0aW5nX2NvbG9yX2ludGVuc2l0eVtpXS53LCBsaWdodGluZ19pbkNvbmVfb3VDb25lX3NoYWRvd3NfY2FzY2FkZXNbaV0ueCwgbGlnaHRpbmdfaW5Db25lX291Q29uZV9zaGFkb3dzX2Nhc2NhZGVzW2ldLnksIF8xMjk2LCBfMTMwMCwgXzEzMDQgfTsKICAgICAgICAgICAgICAgIExpZ2h0IHBhcmFtXzIwID0gXzE1ODA7CiAgICAgICAgICAgICAgICBmbG9hdDMgcGFyYW1fMjEgPSBwb2ludFRvTGlnaHQ7CiAgICAgICAgICAgICAgICBmbG9hdDMgXzE0MjggPSBnZXRMaWdoSW50ZW5zaXR5KHBhcmFtXzIwLCBwYXJhbV8yMSk7CiAgICAgICAgICAgICAgICBmbG9hdDMgcGFyYW1fMjIgPSBfMTUxMjsKICAgICAgICAgICAgICAgIGZsb2F0MyBwYXJhbV8yMyA9IF8xNTE1OwogICAgICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzI0ID0gXzE1MTQ7CiAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8yNSA9IF8xMzYyOwogICAgICAgICAgICAgICAgZl9kaWZmdXNlICs9ICgoKF8xNDI4ICogc2hhZG93KSAqIF8xMzM4KSAqIEJSREZfbGFtYmVydGlhbihwYXJhbV8yMiwgcGFyYW1fMjMsIHBhcmFtXzI0LCBwYXJhbV8yNSkpOwogICAgICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzI2ID0gXzE1MTI7CiAgICAgICAgICAgICAgICBmbG9hdDMgcGFyYW1fMjcgPSBfMTUxNTsKICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzI4ID0gXzE1MTM7CiAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8yOSA9IF8xMzYyOwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMzAgPSBfMTMzODsKICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzMxID0gXzEzNDQ7CiAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8zMiA9IGNsYW1wZWREb3QocGFyYW1fNiwgcGFyYW1fNyk7CiAgICAgICAgICAgICAgICBmX3NwZWN1bGFyICs9ICgoKF8xNDI4ICogc2hhZG93KSAqIF8xMzM4KSAqIEJSREZfc3BlY3VsYXJHR1gocGFyYW1fMjYsIHBhcmFtXzI3LCBwYXJhbV8yOCwgcGFyYW1fMjksIHBhcmFtXzMwLCBwYXJhbV8zMSwgcGFyYW1fMzIpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGZfZW1pc3NpdmUgPSBwYnJQYXJhbXNfZW1pc3NpdmVGYWN0b3I7CiAgICBmbG9hdDMgcGFyYW1fMzMgPSBnZXRFbWlzc2l2ZVRleHR1cmUoKS54eXo7CiAgICBmbG9hdDMgXzE0ODMgPSBmX2VtaXNzaXZlOwogICAgZmxvYXQzIF8xNDg0ID0gXzE0ODMgKiBzUkdCVG9MaW5lYXIocGFyYW1fMzMpOwogICAgZl9lbWlzc2l2ZSA9IF8xNDg0OwogICAgZmxvYXQzIHBhcmFtXzM0ID0gKF8xNDg0ICsgZl9kaWZmdXNlKSArIGZfc3BlY3VsYXI7CiAgICBnX2ZpbmFsQ29sb3IgPSBmbG9hdDQobGluZWFyVG9zUkdCKHBhcmFtXzM0KSwgXzExNTIudyk7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICB2X3V2MSA9IHN0YWdlX2lucHV0LnZfdXYxOwogICAgdl9wb3NpdGlvbiA9IHN0YWdlX2lucHV0LnZfcG9zaXRpb247CiAgICB2X25vcm1hbCA9IHN0YWdlX2lucHV0LnZfbm9ybWFsOwogICAgdl9saWdodFByb2pQb3MgPSBzdGFnZV9pbnB1dC52X2xpZ2h0UHJvalBvczsKICAgIHZfY2xpcFNwYWNlUG9zWiA9IHN0YWdlX2lucHV0LnZfY2xpcFNwYWNlUG9zWjsKICAgIHZfdXYyID0gc3RhZ2VfaW5wdXQudl91djI7CiAgICBmcmFnX21haW4oKTsKICAgIFNQSVJWX0Nyb3NzX091dHB1dCBzdGFnZV9vdXRwdXQ7CiAgICBzdGFnZV9vdXRwdXQuZ19maW5hbENvbG9yID0gZ19maW5hbENvbG9yOwogICAgcmV0dXJuIHN0YWdlX291dHB1dDsKfQpSRUZMQwUAAG1lc2hfUHVjU2h3UGNmTm9yU2tpX2hsc2w1AAAAAAAAAAAAAAsAAAADAAAADAAAAHVfYmFzZUNvbG9yVGV4dHVyZQAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlAAAAAAAAAgAAAAEAAAAyRCAgVEZMVHVfb2NjbHVzaW9uVGV4dHVyZQAAAAAAAAAAAAAAAAAAAgAAAAIAAAAyRCAgVEZMVHVfZW1pc3NpdmVUZXh0dXJlAAAAAAAAAAAAAAAAAAAAAgAAAAMAAAAyRCAgVEZMVHVfc2hhZG93TWFwMQAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAQAAAAyRCAgVEZMVHVfc2hhZG93TWFwMgAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAUAAAAyRCAgVEZMVHVfc2hhZG93TWFwMwAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAyRCAgVEZMVHVfc2hhZG93TWFwNAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAcAAAAyRCAgVEZMVHVfc2hhZG93TWFwNQAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAgAAAAyRCAgVEZMVHVfc2hhZG93TWFwNgAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAkAAAAyRCAgVEZMVHVfc2hhZG93Q3ViZU1hcDEAAAAAAAAAAAAAAAAAAAAAAgAAAAoAAABDVUJFVEZMVAYAAAB1X2ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAWJhc2VDb2xvckZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAAbWV0YWxsaWNGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABAAAAByb3VnaG5lc3NGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAFAAAAGVtaXNzaXZlRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAgAAAAYW1iaWVudExpZ2h0AAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAADAAAABhbWJpZW50RmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAPAAAAAEAAAB1X2ZzX3NoYWRvd3MAAAAAAAAAAAAAAAAAAAAAAAAAAHVTaGFkb3dzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABwAAAAAWJpYXNfdGV4U2l6ZV9uZWFyRmFyAAAAAAAAAAAAAAAARkxUNAcAAAAAAAAABQAAAHVfZnNfbGlnaHRpbmcAAAAAAAAAAAAAAAAAAAAAAAAAbGlnaHRpbmcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAJABAAABZGlyZWN0aW9uX3JhbmdlAAAAAAAAAAAAAAAAAAAAAABGTFQ0BgAAAAAAAABjb2xvcl9pbnRlbnNpdHkAAAAAAAAAAAAAAAAAAAAAAEZMVDQGAAAAYAAAAHBvc2l0aW9uX3R5cGUAAAAAAAAAAAAAAAAAAAAAAAAARkxUNAYAAADAAAAAaW5Db25lX291Q29uZV9zaGFkb3dzX2Nhc2NhZGVzAABGTFQ0BgAAACABAABleWVQb3MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAgAEAAA==";
static const std::string mesh_UltUv1Fog_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUfnCAAAVkVSVENPREU2BwAAY2J1ZmZlciB1X3ZzX3BiclBhcmFtcyA6IHJlZ2lzdGVyKGIwKQp7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcGJyUGFyYW1zX21vZGVsTWF0cml4IDogcGFja29mZnNldChjMCk7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcGJyUGFyYW1zX25vcm1hbE1hdHJpeCA6IHBhY2tvZmZzZXQoYzQpOwogICAgcm93X21ham9yIGZsb2F0NHg0IHBiclBhcmFtc19tdnBNYXRyaXggOiBwYWNrb2Zmc2V0KGM4KTsKfTsKCgpzdGF0aWMgZmxvYXQ0IGdsX1Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQzIGFfcG9zaXRpb247CnN0YXRpYyBmbG9hdDMgdl9wb3NpdGlvbjsKc3RhdGljIGZsb2F0MiB2X3V2MTsKc3RhdGljIGZsb2F0MiB2X3V2MjsKc3RhdGljIGZsb2F0MiBhX3RleGNvb3JkMTsKCnN0cnVjdCBTUElSVl9Dcm9zc19JbnB1dAp7CiAgICBmbG9hdDMgYV9wb3NpdGlvbiA6IFBPU0lUSU9OOwogICAgZmxvYXQyIGFfdGV4Y29vcmQxIDogTk9STUFMOwp9OwoKc3RydWN0IFNQSVJWX0Nyb3NzX091dHB1dAp7CiAgICBmbG9hdDMgdl9wb3NpdGlvbiA6IFRFWENPT1JEMDsKICAgIGZsb2F0MiB2X3V2MSA6IFRFWENPT1JEMTsKICAgIGZsb2F0MiB2X3V2MiA6IFRFWENPT1JEMjsKICAgIGZsb2F0NCBnbF9Qb3NpdGlvbiA6IFNWX1Bvc2l0aW9uOwp9OwoKZmxvYXQ0eDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIHJldHVybiBmbG9hdDR4NCgwLjBmLnh4eHgsIDAuMGYueHh4eCwgMC4wZi54eHh4LCAwLjBmLnh4eHgpOwp9CgpmbG9hdDMgZ2V0TW9ycGhQb3NpdGlvbihmbG9hdDMgcG9zKQp7CiAgICByZXR1cm4gcG9zOwp9CgpmbG9hdDMgZ2V0U2tpblBvc2l0aW9uKGZsb2F0MyBwb3MsIGZsb2F0NHg0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHJldHVybiBwb3M7Cn0KCmZsb2F0NCBnZXRQb3NpdGlvbihmbG9hdDR4NCBib25lVHJhbnNmb3JtKQp7CiAgICBmbG9hdDMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgZmxvYXQzIHBhcmFtXzEgPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIGZsb2F0NHg0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIGZsb2F0NChnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMiksIDEuMGYpOwp9Cgp2b2lkIHZlcnRfbWFpbigpCnsKICAgIGZsb2F0NHg0IHBhcmFtID0gZ2V0Qm9uZVRyYW5zZm9ybSgpOwogICAgZmxvYXQ0IF82NyA9IGdldFBvc2l0aW9uKHBhcmFtKTsKICAgIGZsb2F0NCBfNzggPSBtdWwoXzY3LCBwYnJQYXJhbXNfbW9kZWxNYXRyaXgpOwogICAgdl9wb3NpdGlvbiA9IGZsb2F0MyhfNzgueHl6KSAvIF83OC53Lnh4eDsKICAgIHZfdXYxID0gMC4wZi54eDsKICAgIHZfdXYyID0gMC4wZi54eDsKICAgIHZfdXYxID0gYV90ZXhjb29yZDE7CiAgICBnbF9Qb3NpdGlvbiA9IG11bChfNjcsIHBiclBhcmFtc19tdnBNYXRyaXgpOwogICAgZ2xfUG9zaXRpb24ueiA9IChnbF9Qb3NpdGlvbi56ICsgZ2xfUG9zaXRpb24udykgKiAwLjU7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICBhX3Bvc2l0aW9uID0gc3RhZ2VfaW5wdXQuYV9wb3NpdGlvbjsKICAgIGFfdGV4Y29vcmQxID0gc3RhZ2VfaW5wdXQuYV90ZXhjb29yZDE7CiAgICB2ZXJ0X21haW4oKTsKICAgIFNQSVJWX0Nyb3NzX091dHB1dCBzdGFnZV9vdXRwdXQ7CiAgICBzdGFnZV9vdXRwdXQuZ2xfUG9zaXRpb24gPSBnbF9Qb3NpdGlvbjsKICAgIHN0YWdlX291dHB1dC52X3Bvc2l0aW9uID0gdl9wb3NpdGlvbjsKICAgIHN0YWdlX291dHB1dC52X3V2MSA9IHZfdXYxOwogICAgc3RhZ2Vfb3V0cHV0LnZfdXYyID0gdl91djI7CiAgICByZXR1cm4gc3RhZ2Vfb3V0cHV0Owp9ClJFRkydAQAAbWVzaF9VbHRVdjFGb2dfaGxzbDUAAAAAAAAAAAAAAAACAAAAAAAAAAEAAAADAAAAYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfdGV4Y29vcmQxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDIDAAAAdV92c19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAFtb2RlbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAG5vcm1hbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAABAAAAAbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAIAAAABTVEFHDAkAAEZSQUdDT0RFPwcAAGNidWZmZXIgdV9mc19wYnJQYXJhbXMgOiByZWdpc3RlcihiMCkKewogICAgZmxvYXQ0IHBiclBhcmFtc19iYXNlQ29sb3JGYWN0b3IgOiBwYWNrb2Zmc2V0KGMwKTsKICAgIGZsb2F0IHBiclBhcmFtc19tZXRhbGxpY0ZhY3RvciA6IHBhY2tvZmZzZXQoYzEpOwogICAgZmxvYXQgcGJyUGFyYW1zX3JvdWdobmVzc0ZhY3RvciA6IHBhY2tvZmZzZXQoYzEueSk7CiAgICBmbG9hdDMgcGJyUGFyYW1zX2VtaXNzaXZlRmFjdG9yIDogcGFja29mZnNldChjMik7CiAgICBmbG9hdDMgcGJyUGFyYW1zX2FtYmllbnRMaWdodCA6IHBhY2tvZmZzZXQoYzMpOwogICAgZmxvYXQgcGJyUGFyYW1zX2FtYmllbnRGYWN0b3IgOiBwYWNrb2Zmc2V0KGMzLncpOwp9OwoKVGV4dHVyZTJEPGZsb2F0ND4gdV9iYXNlQ29sb3JUZXh0dXJlIDogcmVnaXN0ZXIodDApOwpTYW1wbGVyU3RhdGUgX3VfYmFzZUNvbG9yVGV4dHVyZV9zYW1wbGVyIDogcmVnaXN0ZXIoczApOwoKc3RhdGljIGZsb2F0MiB2X3V2MTsKc3RhdGljIGZsb2F0MyB2X3Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQ0IGdfZmluYWxDb2xvcjsKc3RhdGljIGZsb2F0MiB2X3V2MjsKCnN0cnVjdCBTUElSVl9Dcm9zc19JbnB1dAp7CiAgICBmbG9hdDMgdl9wb3NpdGlvbiA6IFRFWENPT1JEMDsKICAgIGZsb2F0MiB2X3V2MSA6IFRFWENPT1JEMTsKICAgIGZsb2F0MiB2X3V2MiA6IFRFWENPT1JEMjsKfTsKCnN0cnVjdCBTUElSVl9Dcm9zc19PdXRwdXQKewogICAgZmxvYXQ0IGdfZmluYWxDb2xvciA6IFNWX1RhcmdldDA7Cn07CgpmbG9hdDMgc1JHQlRvTGluZWFyKGZsb2F0MyBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCAyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjVmLnh4eCk7Cn0KCmZsb2F0NCBzUkdCVG9MaW5lYXIoZmxvYXQ0IHNyZ2JJbikKewogICAgZmxvYXQzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiBmbG9hdDQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9CgpmbG9hdDQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gMS4wZi54eHh4Owp9CgpmbG9hdDQgZ2V0QmFzZUNvbG9yKCkKewogICAgZmxvYXQ0IGJhc2VDb2xvciA9IHBiclBhcmFtc19iYXNlQ29sb3JGYWN0b3I7CiAgICBmbG9hdDQgcGFyYW0gPSB1X2Jhc2VDb2xvclRleHR1cmUuU2FtcGxlKF91X2Jhc2VDb2xvclRleHR1cmVfc2FtcGxlciwgdl91djEpOwogICAgZmxvYXQ0IF8xMDAgPSBiYXNlQ29sb3I7CiAgICBmbG9hdDQgXzEwMSA9IF8xMDAgKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzEwMTsKICAgIHJldHVybiBfMTAxICogZ2V0VmVydGV4Q29sb3IoKTsKfQoKZmxvYXQzIGxpbmVhclRvc1JHQihmbG9hdDMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NWYueHh4KTsKfQoKdm9pZCBmcmFnX21haW4oKQp7CiAgICBmbG9hdDQgXzI1NiA9IGdldEJhc2VDb2xvcigpOwogICAgZmxvYXQzIHBhcmFtID0gXzI1Ni54eXo7CiAgICBnX2ZpbmFsQ29sb3IgPSBmbG9hdDQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzI1Ni53KTsKfQoKU1BJUlZfQ3Jvc3NfT3V0cHV0IG1haW4oU1BJUlZfQ3Jvc3NfSW5wdXQgc3RhZ2VfaW5wdXQpCnsKICAgIHZfdXYxID0gc3RhZ2VfaW5wdXQudl91djE7CiAgICB2X3Bvc2l0aW9uID0gc3RhZ2VfaW5wdXQudl9wb3NpdGlvbjsKICAgIHZfdXYyID0gc3RhZ2VfaW5wdXQudl91djI7CiAgICBmcmFnX21haW4oKTsKICAgIFNQSVJWX0Nyb3NzX091dHB1dCBzdGFnZV9vdXRwdXQ7CiAgICBzdGFnZV9vdXRwdXQuZ19maW5hbENvbG9yID0gZ19maW5hbENvbG9yOwogICAgcmV0dXJuIHN0YWdlX291dHB1dDsKfQpSRUZMuQEAAG1lc2hfVWx0VXYxRm9nX2hsc2w1AAAAAAAAAAAAAAAAAAAAAAEAAAABAAAABgAAAHVfYmFzZUNvbG9yVGV4dHVyZQAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVAYAAAB1X2ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAWJhc2VDb2xvckZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAAbWV0YWxsaWNGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABAAAAByb3VnaG5lc3NGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAFAAAAGVtaXNzaXZlRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAgAAAAYW1iaWVudExpZ2h0AAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAADAAAABhbWJpZW50RmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAPAAAAA==";
static const std::string points_TexVc4_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUcrBwAAVkVSVENPREU6BQAAY2J1ZmZlciB1X3ZzX3BvaW50c1BhcmFtcyA6IHJlZ2lzdGVyKGIwKQp7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcG9pbnRzUGFyYW1zX212cE1hdHJpeCA6IHBhY2tvZmZzZXQoYzApOwp9OwoKCnN0YXRpYyBmbG9hdDQgZ2xfUG9zaXRpb247CnN0YXRpYyBmbG9hdCBnbF9Qb2ludFNpemU7CnN0YXRpYyBmbG9hdCB2X3BvaW50cm90YXRpb247CnN0YXRpYyBmbG9hdCBhX3BvaW50cm90YXRpb247CnN0YXRpYyBmbG9hdDQgdl9jb2xvcjsKc3RhdGljIGZsb2F0NCBhX2NvbG9yOwpzdGF0aWMgZmxvYXQzIGFfcG9zaXRpb247CnN0YXRpYyBmbG9hdCBhX3BvaW50c2l6ZTsKCnN0cnVjdCBTUElSVl9Dcm9zc19JbnB1dAp7CiAgICBmbG9hdDMgYV9wb3NpdGlvbiA6IFBPU0lUSU9OOwogICAgZmxvYXQgYV9wb2ludHNpemUgOiBOT1JNQUw7CiAgICBmbG9hdCBhX3BvaW50cm90YXRpb24gOiBURVhDT09SRDA7CiAgICBmbG9hdDQgYV9jb2xvciA6IFRFWENPT1JEMTsKfTsKCnN0cnVjdCBTUElSVl9Dcm9zc19PdXRwdXQKewogICAgZmxvYXQgdl9wb2ludHJvdGF0aW9uIDogVEVYQ09PUkQwOwogICAgZmxvYXQ0IHZfY29sb3IgOiBURVhDT09SRDE7CiAgICBmbG9hdDQgZ2xfUG9zaXRpb24gOiBTVl9Qb3NpdGlvbjsKfTsKCnZvaWQgdmVydF9tYWluKCkKewogICAgdl9wb2ludHJvdGF0aW9uID0gYV9wb2ludHJvdGF0aW9uOwogICAgdl9jb2xvciA9IGFfY29sb3I7CiAgICBnbF9Qb3NpdGlvbiA9IG11bChmbG9hdDQoYV9wb3NpdGlvbiwgMS4wZiksIHBvaW50c1BhcmFtc19tdnBNYXRyaXgpOwogICAgZ2xfUG9pbnRTaXplID0gYV9wb2ludHNpemUgLyBnbF9Qb3NpdGlvbi53OwogICAgZ2xfUG9zaXRpb24ueiA9IChnbF9Qb3NpdGlvbi56ICsgZ2xfUG9zaXRpb24udykgKiAwLjU7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICBhX3BvaW50cm90YXRpb24gPSBzdGFnZV9pbnB1dC5hX3BvaW50cm90YXRpb247CiAgICBhX2NvbG9yID0gc3RhZ2VfaW5wdXQuYV9jb2xvcjsKICAgIGFfcG9zaXRpb24gPSBzdGFnZV9pbnB1dC5hX3Bvc2l0aW9uOwogICAgYV9wb2ludHNpemUgPSBzdGFnZV9pbnB1dC5hX3BvaW50c2l6ZTsKICAgIHZlcnRfbWFpbigpOwogICAgU1BJUlZfQ3Jvc3NfT3V0cHV0IHN0YWdlX291dHB1dDsKICAgIHN0YWdlX291dHB1dC5nbF9Qb3NpdGlvbiA9IGdsX1Bvc2l0aW9uOwogICAgc3RhZ2Vfb3V0cHV0LnZfcG9pbnRyb3RhdGlvbiA9IHZfcG9pbnRyb3RhdGlvbjsKICAgIHN0YWdlX291dHB1dC52X2NvbG9yID0gdl9jb2xvcjsKICAgIHJldHVybiBzdGFnZV9vdXRwdXQ7Cn0KUkVGTN0BAABwb2ludHNfVGV4VmM0X2hsc2w1AAAAAAAAAAAAAAAAAAQAAAAAAAAAAQAAAAEAAABhX3BvaW50cm90YXRpb24AAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQxYV9jb2xvcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAARkxUNGFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDNhX3BvaW50c2l6ZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABOT1JNQUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAAHVfdnNfcG9pbnRzUGFyYW1zAAAAAAAAAAAAAAAAAAAAcG9pbnRzUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABTVEFHWwcAAEZSQUdDT0RF5wYAAFRleHR1cmUyRDxmbG9hdDQ+IHVfcG9pbnRzVGV4dHVyZSA6IHJlZ2lzdGVyKHQwKTsKU2FtcGxlclN0YXRlIF91X3BvaW50c1RleHR1cmVfc2FtcGxlciA6IHJlZ2lzdGVyKHMwKTsKCnN0YXRpYyBmbG9hdDQgdl9jb2xvcjsKc3RhdGljIGZsb2F0IHZfcG9pbnRyb3RhdGlvbjsKc3RhdGljIGZsb2F0NCBnX2ZpbmFsQ29sb3I7CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfSW5wdXQKewogICAgZmxvYXQgdl9wb2ludHJvdGF0aW9uIDogVEVYQ09PUkQwOwogICAgZmxvYXQ0IHZfY29sb3IgOiBURVhDT09SRDE7Cn07CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfT3V0cHV0CnsKICAgIGZsb2F0NCBnX2ZpbmFsQ29sb3IgOiBTVl9UYXJnZXQwOwp9OwoKZmxvYXQzIHNSR0JUb0xpbmVhcihmbG9hdDMgc3JnYkluKQp7CiAgICByZXR1cm4gcG93KHNyZ2JJbiwgMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1Zi54eHgpOwp9CgpmbG9hdDQgc1JHQlRvTGluZWFyKGZsb2F0NCBzcmdiSW4pCnsKICAgIGZsb2F0MyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gZmxvYXQ0KHNSR0JUb0xpbmVhcihwYXJhbSksIHNyZ2JJbi53KTsKfQoKZmxvYXQ0IGdldFZlcnRleENvbG9yKCkKewogICAgcmV0dXJuIHZfY29sb3I7Cn0KCmZsb2F0NCBnZXRCYXNlQ29sb3IoKQp7CiAgICBmbG9hdDQgYmFzZUNvbG9yID0gMS4wZi54eHh4OwogICAgZmxvYXQyIHJlc3VsdENvb3JkID0gZmxvYXQyKDAuNWYsIDAuNWYpOwogICAgaWYgKHZfcG9pbnRyb3RhdGlvbiAhPSAwLjBmKQogICAgewogICAgICAgIGZsb2F0IF84MyA9IGNvcyh2X3BvaW50cm90YXRpb24pOwogICAgICAgIGZsb2F0IF84OCA9IHJlc3VsdENvb3JkLnggLSAwLjVmOwogICAgICAgIGZsb2F0IF85MSA9IHNpbih2X3BvaW50cm90YXRpb24pOwogICAgICAgIGZsb2F0IF85NSA9IHJlc3VsdENvb3JkLnkgLSAwLjVmOwogICAgICAgIHJlc3VsdENvb3JkID0gZmxvYXQyKCgoXzgzICogXzg4KSArIChfOTEgKiBfOTUpKSArIDAuNWYsICgoXzgzICogXzk1KSAtIChfOTEgKiBfODgpKSArIDAuNWYpOwogICAgfQogICAgZmxvYXQ0IHBhcmFtID0gdV9wb2ludHNUZXh0dXJlLlNhbXBsZShfdV9wb2ludHNUZXh0dXJlX3NhbXBsZXIsIHJlc3VsdENvb3JkKTsKICAgIGZsb2F0NCBfMTIzID0gYmFzZUNvbG9yOwogICAgZmxvYXQ0IF8xMjQgPSBfMTIzICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8xMjQ7CiAgICByZXR1cm4gXzEyNCAqIGdldFZlcnRleENvbG9yKCk7Cn0KCmZsb2F0MyBsaW5lYXJUb3NSR0IoZmxvYXQzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCAwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzVmLnh4eCk7Cn0KCnZvaWQgZnJhZ19tYWluKCkKewogICAgZmxvYXQ0IF8xMzEgPSBnZXRCYXNlQ29sb3IoKTsKICAgIGZsb2F0MyBwYXJhbSA9IF8xMzEueHl6OwogICAgZ19maW5hbENvbG9yID0gZmxvYXQ0KGxpbmVhclRvc1JHQihwYXJhbSksIF8xMzEudyk7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICB2X2NvbG9yID0gc3RhZ2VfaW5wdXQudl9jb2xvcjsKICAgIHZfcG9pbnRyb3RhdGlvbiA9IHN0YWdlX2lucHV0LnZfcG9pbnRyb3RhdGlvbjsKICAgIGZyYWdfbWFpbigpOwogICAgU1BJUlZfQ3Jvc3NfT3V0cHV0IHN0YWdlX291dHB1dDsKICAgIHN0YWdlX291dHB1dC5nX2ZpbmFsQ29sb3IgPSBnX2ZpbmFsQ29sb3I7CiAgICByZXR1cm4gc3RhZ2Vfb3V0cHV0Owp9ClJFRkxgAAAAcG9pbnRzX1RleFZjNF9obHNsNQAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAdV9wb2ludHNUZXh0dXJlAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxU";
static const std::string mesh_Uv1PucShwPcfNorFogSki_hlsl5 = "";
static const std::string mesh_Uv1PucShwPcfNorVc4_hlsl5 = "";
static const std::string depth_Mta_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUfZDgAAVkVSVENPREXvCgAAY2J1ZmZlciB1X3ZzX21vcnBodGFyZ2V0IDogcmVnaXN0ZXIoYjApCnsKICAgIGZsb2F0NCBfMzlfbW9ycGhXZWlnaHRzWzJdIDogcGFja29mZnNldChjMCk7Cn07CgpjYnVmZmVyIHVfdnNfZGVwdGhQYXJhbXMgOiByZWdpc3RlcihiMSkKewogICAgcm93X21ham9yIGZsb2F0NHg0IGRlcHRoUGFyYW1zX2xpZ2h0TVZQTWF0cml4IDogcGFja29mZnNldChjMCk7Cn07CgoKc3RhdGljIGZsb2F0NCBnbF9Qb3NpdGlvbjsKc3RhdGljIGZsb2F0MyBhX21vcnBoVGFyZ2V0MDsKc3RhdGljIGZsb2F0MyBhX21vcnBoVGFyZ2V0MTsKc3RhdGljIGZsb2F0MyBhX21vcnBoVGFyZ2V0MjsKc3RhdGljIGZsb2F0MyBhX21vcnBoVGFyZ2V0MzsKc3RhdGljIGZsb2F0MyBhX21vcnBoVGFyZ2V0NDsKc3RhdGljIGZsb2F0MyBhX21vcnBoVGFyZ2V0NTsKc3RhdGljIGZsb2F0MyBhX21vcnBoVGFyZ2V0NjsKc3RhdGljIGZsb2F0MyBhX21vcnBoVGFyZ2V0NzsKc3RhdGljIGZsb2F0MyBhX3Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQyIHZfcHJvalpXOwoKc3RydWN0IFNQSVJWX0Nyb3NzX0lucHV0CnsKICAgIGZsb2F0MyBhX3Bvc2l0aW9uIDogUE9TSVRJT047CiAgICBmbG9hdDMgYV9tb3JwaFRhcmdldDAgOiBOT1JNQUw7CiAgICBmbG9hdDMgYV9tb3JwaFRhcmdldDEgOiBURVhDT09SRDA7CiAgICBmbG9hdDMgYV9tb3JwaFRhcmdldDIgOiBURVhDT09SRDE7CiAgICBmbG9hdDMgYV9tb3JwaFRhcmdldDMgOiBURVhDT09SRDI7CiAgICBmbG9hdDMgYV9tb3JwaFRhcmdldDQgOiBURVhDT09SRDM7CiAgICBmbG9hdDMgYV9tb3JwaFRhcmdldDUgOiBURVhDT09SRDQ7CiAgICBmbG9hdDMgYV9tb3JwaFRhcmdldDYgOiBURVhDT09SRDU7CiAgICBmbG9hdDMgYV9tb3JwaFRhcmdldDcgOiBURVhDT09SRDY7Cn07CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfT3V0cHV0CnsKICAgIGZsb2F0MiB2X3Byb2paVyA6IFRFWENPT1JEMDsKICAgIGZsb2F0NCBnbF9Qb3NpdGlvbiA6IFNWX1Bvc2l0aW9uOwp9OwoKZmxvYXQzIGdldE1vcnBoUG9zaXRpb24oaW5vdXQgZmxvYXQzIHBvcykKewogICAgcG9zICs9IChhX21vcnBoVGFyZ2V0MCAqIF8zOV9tb3JwaFdlaWdodHNbMF0ueCk7CiAgICBwb3MgKz0gKGFfbW9ycGhUYXJnZXQxICogXzM5X21vcnBoV2VpZ2h0c1swXS55KTsKICAgIHBvcyArPSAoYV9tb3JwaFRhcmdldDIgKiBfMzlfbW9ycGhXZWlnaHRzWzBdLnopOwogICAgcG9zICs9IChhX21vcnBoVGFyZ2V0MyAqIF8zOV9tb3JwaFdlaWdodHNbMF0udyk7CiAgICBwb3MgKz0gKGFfbW9ycGhUYXJnZXQ0ICogXzM5X21vcnBoV2VpZ2h0c1sxXS54KTsKICAgIHBvcyArPSAoYV9tb3JwaFRhcmdldDUgKiBfMzlfbW9ycGhXZWlnaHRzWzFdLnkpOwogICAgcG9zICs9IChhX21vcnBoVGFyZ2V0NiAqIF8zOV9tb3JwaFdlaWdodHNbMV0ueik7CiAgICBwb3MgKz0gKGFfbW9ycGhUYXJnZXQ3ICogXzM5X21vcnBoV2VpZ2h0c1sxXS53KTsKICAgIHJldHVybiBwb3M7Cn0KCmZsb2F0NHg0IGdldEJvbmVUcmFuc2Zvcm0oKQp7CiAgICByZXR1cm4gZmxvYXQ0eDQoMC4wZi54eHh4LCAwLjBmLnh4eHgsIDAuMGYueHh4eCwgMC4wZi54eHh4KTsKfQoKZmxvYXQzIGdldFNraW5Qb3NpdGlvbihmbG9hdDMgcG9zLCBmbG9hdDR4NCBib25lVHJhbnNmb3JtKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2b2lkIHZlcnRfbWFpbigpCnsKICAgIGZsb2F0MyBwb3MgPSBhX3Bvc2l0aW9uOwogICAgZmxvYXQzIHBhcmFtID0gYV9wb3NpdGlvbjsKICAgIGZsb2F0MyBfMTEyID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBwb3MgPSBfMTEyOwogICAgZmxvYXQzIHBhcmFtXzEgPSBwb3M7CiAgICBmbG9hdDR4NCBwYXJhbV8yID0gZ2V0Qm9uZVRyYW5zZm9ybSgpOwogICAgZmxvYXQzIF8xMTcgPSBnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMik7CiAgICBwb3MgPSBfMTE3OwogICAgZ2xfUG9zaXRpb24gPSBtdWwoZmxvYXQ0KF8xMTcsIDEuMGYpLCBkZXB0aFBhcmFtc19saWdodE1WUE1hdHJpeCk7CiAgICB2X3Byb2paVyA9IGdsX1Bvc2l0aW9uLnp3OwogICAgZ2xfUG9zaXRpb24ueSA9IC1nbF9Qb3NpdGlvbi55OwogICAgZ2xfUG9zaXRpb24ueiA9IChnbF9Qb3NpdGlvbi56ICsgZ2xfUG9zaXRpb24udykgKiAwLjU7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICBhX21vcnBoVGFyZ2V0MCA9IHN0YWdlX2lucHV0LmFfbW9ycGhUYXJnZXQwOwogICAgYV9tb3JwaFRhcmdldDEgPSBzdGFnZV9pbnB1dC5hX21vcnBoVGFyZ2V0MTsKICAgIGFfbW9ycGhUYXJnZXQyID0gc3RhZ2VfaW5wdXQuYV9tb3JwaFRhcmdldDI7CiAgICBhX21vcnBoVGFyZ2V0MyA9IHN0YWdlX2lucHV0LmFfbW9ycGhUYXJnZXQzOwogICAgYV9tb3JwaFRhcmdldDQgPSBzdGFnZV9pbnB1dC5hX21vcnBoVGFyZ2V0NDsKICAgIGFfbW9ycGhUYXJnZXQ1ID0gc3RhZ2VfaW5wdXQuYV9tb3JwaFRhcmdldDU7CiAgICBhX21vcnBoVGFyZ2V0NiA9IHN0YWdlX2lucHV0LmFfbW9ycGhUYXJnZXQ2OwogICAgYV9tb3JwaFRhcmdldDcgPSBzdGFnZV9pbnB1dC5hX21vcnBoVGFyZ2V0NzsKICAgIGFfcG9zaXRpb24gPSBzdGFnZV9pbnB1dC5hX3Bvc2l0aW9uOwogICAgdmVydF9tYWluKCk7CiAgICBTUElSVl9Dcm9zc19PdXRwdXQgc3RhZ2Vfb3V0cHV0OwogICAgc3RhZ2Vfb3V0cHV0LmdsX1Bvc2l0aW9uID0gZ2xfUG9zaXRpb247CiAgICBzdGFnZV9vdXRwdXQudl9wcm9qWlcgPSB2X3Byb2paVzsKICAgIHJldHVybiBzdGFnZV9vdXRwdXQ7Cn0KUkVGTNYDAABkZXB0aF9NdGFfaGxzbDUAAAAAAAAAAAAAAAAAAAAAAAkAAAAAAAAAAgAAAAIAAABhX21vcnBoVGFyZ2V0MAAAAAAAAAAAAAAAAAAAAAAAAAEAAABOT1JNQUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV9tb3JwaFRhcmdldDEAAAAAAAAAAAAAAAAAAAAAAAACAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfbW9ycGhUYXJnZXQyAAAAAAAAAAAAAAAAAAAAAAAAAwAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAEZMVDNhX21vcnBoVGFyZ2V0MwAAAAAAAAAAAAAAAAAAAAAAAAQAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAABGTFQzYV9tb3JwaFRhcmdldDQAAAAAAAAAAAAAAAAAAAAAAAAFAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAARkxUM2FfbW9ycGhUYXJnZXQ1AAAAAAAAAAAAAAAAAAAAAAAABgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAEZMVDNhX21vcnBoVGFyZ2V0NgAAAAAAAAAAAAAAAAAAAAAAAAcAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAABGTFQzYV9tb3JwaFRhcmdldDcAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAARkxUM2FfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAdV92c19tb3JwaHRhcmdldAAAAAAAAAAAAAAAAAAAAABfMzkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAFtb3JwaFdlaWdodHMAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQCAAAAAAAAAAEAAAB1X3ZzX2RlcHRoUGFyYW1zAAAAAAAAAAAAAAAAAAAAAGRlcHRoUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABAAAAAAWxpZ2h0TVZQTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAU1RBR00DAABGUkFHQ09ERQkDAABzdGF0aWMgZmxvYXQ0IGZyYWdfY29sb3I7CnN0YXRpYyBmbG9hdDIgdl9wcm9qWlc7CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfSW5wdXQKewogICAgZmxvYXQyIHZfcHJvalpXIDogVEVYQ09PUkQwOwp9OwoKc3RydWN0IFNQSVJWX0Nyb3NzX091dHB1dAp7CiAgICBmbG9hdDQgZnJhZ19jb2xvciA6IFNWX1RhcmdldDA7Cn07CgpmbG9hdDQgZW5jb2RlRGVwdGgoZmxvYXQgdikKewogICAgZmxvYXQ0IF8yMyA9IGZyYWMoZmxvYXQ0KDEuMGYsIDI1NS4wZiwgNjUwMjUuMGYsIDE2NTgxMzc1LjBmKSAqIHYpOwogICAgcmV0dXJuIF8yMyAtIChfMjMueXp3dyAqIGZsb2F0NCgwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjVmLCAwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjVmLCAwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjVmLCAwLjBmKSk7Cn0KCnZvaWQgZnJhZ19tYWluKCkKewogICAgZmxvYXQgcGFyYW0gPSAoKDAuNWYgKiB2X3Byb2paVy54KSAvIHZfcHJvalpXLnkpICsgMC41ZjsKICAgIGZyYWdfY29sb3IgPSBlbmNvZGVEZXB0aChwYXJhbSk7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICB2X3Byb2paVyA9IHN0YWdlX2lucHV0LnZfcHJvalpXOwogICAgZnJhZ19tYWluKCk7CiAgICBTUElSVl9Dcm9zc19PdXRwdXQgc3RhZ2Vfb3V0cHV0OwogICAgc3RhZ2Vfb3V0cHV0LmZyYWdfY29sb3IgPSBmcmFnX2NvbG9yOwogICAgcmV0dXJuIHN0YWdlX291dHB1dDsKfQpSRUZMMAAAAGRlcHRoX010YV9obHNsNQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==";
static const std::string mesh_Uv1PucNorVc4Fog_hlsl5 = "";
static const std::string mesh_UltUv1Vc4Fog_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUf/CQAAVkVSVENPREUCCAAAY2J1ZmZlciB1X3ZzX3BiclBhcmFtcyA6IHJlZ2lzdGVyKGIwKQp7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcGJyUGFyYW1zX21vZGVsTWF0cml4IDogcGFja29mZnNldChjMCk7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcGJyUGFyYW1zX25vcm1hbE1hdHJpeCA6IHBhY2tvZmZzZXQoYzQpOwogICAgcm93X21ham9yIGZsb2F0NHg0IHBiclBhcmFtc19tdnBNYXRyaXggOiBwYWNrb2Zmc2V0KGM4KTsKfTsKCgpzdGF0aWMgZmxvYXQ0IGdsX1Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQzIGFfcG9zaXRpb247CnN0YXRpYyBmbG9hdDMgdl9wb3NpdGlvbjsKc3RhdGljIGZsb2F0MiB2X3V2MTsKc3RhdGljIGZsb2F0MiB2X3V2MjsKc3RhdGljIGZsb2F0MiBhX3RleGNvb3JkMTsKc3RhdGljIGZsb2F0NCB2X2NvbG9yOwpzdGF0aWMgZmxvYXQ0IGFfY29sb3I7CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfSW5wdXQKewogICAgZmxvYXQzIGFfcG9zaXRpb24gOiBQT1NJVElPTjsKICAgIGZsb2F0MiBhX3RleGNvb3JkMSA6IE5PUk1BTDsKICAgIGZsb2F0NCBhX2NvbG9yIDogVEVYQ09PUkQwOwp9OwoKc3RydWN0IFNQSVJWX0Nyb3NzX091dHB1dAp7CiAgICBmbG9hdDMgdl9wb3NpdGlvbiA6IFRFWENPT1JEMDsKICAgIGZsb2F0MiB2X3V2MSA6IFRFWENPT1JEMTsKICAgIGZsb2F0MiB2X3V2MiA6IFRFWENPT1JEMjsKICAgIGZsb2F0NCB2X2NvbG9yIDogVEVYQ09PUkQzOwogICAgZmxvYXQ0IGdsX1Bvc2l0aW9uIDogU1ZfUG9zaXRpb247Cn07CgpmbG9hdDR4NCBnZXRCb25lVHJhbnNmb3JtKCkKewogICAgcmV0dXJuIGZsb2F0NHg0KDAuMGYueHh4eCwgMC4wZi54eHh4LCAwLjBmLnh4eHgsIDAuMGYueHh4eCk7Cn0KCmZsb2F0MyBnZXRNb3JwaFBvc2l0aW9uKGZsb2F0MyBwb3MpCnsKICAgIHJldHVybiBwb3M7Cn0KCmZsb2F0MyBnZXRTa2luUG9zaXRpb24oZmxvYXQzIHBvcywgZmxvYXQ0eDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKZmxvYXQ0IGdldFBvc2l0aW9uKGZsb2F0NHg0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIGZsb2F0MyBwYXJhbSA9IGFfcG9zaXRpb247CiAgICBmbG9hdDMgcGFyYW1fMSA9IGdldE1vcnBoUG9zaXRpb24ocGFyYW0pOwogICAgZmxvYXQ0eDQgcGFyYW1fMiA9IGJvbmVUcmFuc2Zvcm07CiAgICByZXR1cm4gZmxvYXQ0KGdldFNraW5Qb3NpdGlvbihwYXJhbV8xLCBwYXJhbV8yKSwgMS4wZik7Cn0KCnZvaWQgdmVydF9tYWluKCkKewogICAgZmxvYXQ0eDQgcGFyYW0gPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICBmbG9hdDQgXzY3ID0gZ2V0UG9zaXRpb24ocGFyYW0pOwogICAgZmxvYXQ0IF83OCA9IG11bChfNjcsIHBiclBhcmFtc19tb2RlbE1hdHJpeCk7CiAgICB2X3Bvc2l0aW9uID0gZmxvYXQzKF83OC54eXopIC8gXzc4LncueHh4OwogICAgdl91djEgPSAwLjBmLnh4OwogICAgdl91djIgPSAwLjBmLnh4OwogICAgdl91djEgPSBhX3RleGNvb3JkMTsKICAgIHZfY29sb3IgPSBhX2NvbG9yOwogICAgZ2xfUG9zaXRpb24gPSBtdWwoXzY3LCBwYnJQYXJhbXNfbXZwTWF0cml4KTsKICAgIGdsX1Bvc2l0aW9uLnogPSAoZ2xfUG9zaXRpb24ueiArIGdsX1Bvc2l0aW9uLncpICogMC41Owp9CgpTUElSVl9Dcm9zc19PdXRwdXQgbWFpbihTUElSVl9Dcm9zc19JbnB1dCBzdGFnZV9pbnB1dCkKewogICAgYV9wb3NpdGlvbiA9IHN0YWdlX2lucHV0LmFfcG9zaXRpb247CiAgICBhX3RleGNvb3JkMSA9IHN0YWdlX2lucHV0LmFfdGV4Y29vcmQxOwogICAgYV9jb2xvciA9IHN0YWdlX2lucHV0LmFfY29sb3I7CiAgICB2ZXJ0X21haW4oKTsKICAgIFNQSVJWX0Nyb3NzX091dHB1dCBzdGFnZV9vdXRwdXQ7CiAgICBzdGFnZV9vdXRwdXQuZ2xfUG9zaXRpb24gPSBnbF9Qb3NpdGlvbjsKICAgIHN0YWdlX291dHB1dC52X3Bvc2l0aW9uID0gdl9wb3NpdGlvbjsKICAgIHN0YWdlX291dHB1dC52X3V2MSA9IHZfdXYxOwogICAgc3RhZ2Vfb3V0cHV0LnZfdXYyID0gdl91djI7CiAgICBzdGFnZV9vdXRwdXQudl9jb2xvciA9IHZfY29sb3I7CiAgICByZXR1cm4gc3RhZ2Vfb3V0cHV0Owp9ClJFRkzpAQAAbWVzaF9VbHRVdjFWYzRGb2dfaGxzbDUAAAAAAAAAAAADAAAAAAAAAAEAAAADAAAAYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfdGV4Y29vcmQxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDJhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AwAAAHVfdnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAABbW9kZWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABub3JtYWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAQAAAAG12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAACAAAAAU1RBR2QJAABGUkFHQ09ERZcHAABjYnVmZmVyIHVfZnNfcGJyUGFyYW1zIDogcmVnaXN0ZXIoYjApCnsKICAgIGZsb2F0NCBwYnJQYXJhbXNfYmFzZUNvbG9yRmFjdG9yIDogcGFja29mZnNldChjMCk7CiAgICBmbG9hdCBwYnJQYXJhbXNfbWV0YWxsaWNGYWN0b3IgOiBwYWNrb2Zmc2V0KGMxKTsKICAgIGZsb2F0IHBiclBhcmFtc19yb3VnaG5lc3NGYWN0b3IgOiBwYWNrb2Zmc2V0KGMxLnkpOwogICAgZmxvYXQzIHBiclBhcmFtc19lbWlzc2l2ZUZhY3RvciA6IHBhY2tvZmZzZXQoYzIpOwogICAgZmxvYXQzIHBiclBhcmFtc19hbWJpZW50TGlnaHQgOiBwYWNrb2Zmc2V0KGMzKTsKICAgIGZsb2F0IHBiclBhcmFtc19hbWJpZW50RmFjdG9yIDogcGFja29mZnNldChjMy53KTsKfTsKClRleHR1cmUyRDxmbG9hdDQ+IHVfYmFzZUNvbG9yVGV4dHVyZSA6IHJlZ2lzdGVyKHQwKTsKU2FtcGxlclN0YXRlIF91X2Jhc2VDb2xvclRleHR1cmVfc2FtcGxlciA6IHJlZ2lzdGVyKHMwKTsKCnN0YXRpYyBmbG9hdDQgdl9jb2xvcjsKc3RhdGljIGZsb2F0MiB2X3V2MTsKc3RhdGljIGZsb2F0MyB2X3Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQ0IGdfZmluYWxDb2xvcjsKc3RhdGljIGZsb2F0MiB2X3V2MjsKCnN0cnVjdCBTUElSVl9Dcm9zc19JbnB1dAp7CiAgICBmbG9hdDMgdl9wb3NpdGlvbiA6IFRFWENPT1JEMDsKICAgIGZsb2F0MiB2X3V2MSA6IFRFWENPT1JEMTsKICAgIGZsb2F0MiB2X3V2MiA6IFRFWENPT1JEMjsKICAgIGZsb2F0NCB2X2NvbG9yIDogVEVYQ09PUkQzOwp9OwoKc3RydWN0IFNQSVJWX0Nyb3NzX091dHB1dAp7CiAgICBmbG9hdDQgZ19maW5hbENvbG9yIDogU1ZfVGFyZ2V0MDsKfTsKCmZsb2F0MyBzUkdCVG9MaW5lYXIoZmxvYXQzIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNWYueHh4KTsKfQoKZmxvYXQ0IHNSR0JUb0xpbmVhcihmbG9hdDQgc3JnYkluKQp7CiAgICBmbG9hdDMgcGFyYW0gPSBzcmdiSW4ueHl6OwogICAgcmV0dXJuIGZsb2F0NChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCmZsb2F0NCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2X2NvbG9yOwp9CgpmbG9hdDQgZ2V0QmFzZUNvbG9yKCkKewogICAgZmxvYXQ0IGJhc2VDb2xvciA9IHBiclBhcmFtc19iYXNlQ29sb3JGYWN0b3I7CiAgICBmbG9hdDQgcGFyYW0gPSB1X2Jhc2VDb2xvclRleHR1cmUuU2FtcGxlKF91X2Jhc2VDb2xvclRleHR1cmVfc2FtcGxlciwgdl91djEpOwogICAgZmxvYXQ0IF8xMDMgPSBiYXNlQ29sb3I7CiAgICBmbG9hdDQgXzEwNCA9IF8xMDMgKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzEwNDsKICAgIHJldHVybiBfMTA0ICogZ2V0VmVydGV4Q29sb3IoKTsKfQoKZmxvYXQzIGxpbmVhclRvc1JHQihmbG9hdDMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NWYueHh4KTsKfQoKdm9pZCBmcmFnX21haW4oKQp7CiAgICBmbG9hdDQgXzI1OSA9IGdldEJhc2VDb2xvcigpOwogICAgZmxvYXQzIHBhcmFtID0gXzI1OS54eXo7CiAgICBnX2ZpbmFsQ29sb3IgPSBmbG9hdDQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzI1OS53KTsKfQoKU1BJUlZfQ3Jvc3NfT3V0cHV0IG1haW4oU1BJUlZfQ3Jvc3NfSW5wdXQgc3RhZ2VfaW5wdXQpCnsKICAgIHZfY29sb3IgPSBzdGFnZV9pbnB1dC52X2NvbG9yOwogICAgdl91djEgPSBzdGFnZV9pbnB1dC52X3V2MTsKICAgIHZfcG9zaXRpb24gPSBzdGFnZV9pbnB1dC52X3Bvc2l0aW9uOwogICAgdl91djIgPSBzdGFnZV9pbnB1dC52X3V2MjsKICAgIGZyYWdfbWFpbigpOwogICAgU1BJUlZfQ3Jvc3NfT3V0cHV0IHN0YWdlX291dHB1dDsKICAgIHN0YWdlX291dHB1dC5nX2ZpbmFsQ29sb3IgPSBnX2ZpbmFsQ29sb3I7CiAgICByZXR1cm4gc3RhZ2Vfb3V0cHV0Owp9ClJFRky5AQAAbWVzaF9VbHRVdjFWYzRGb2dfaGxzbDUAAAAAAAAAAAAAAAAAAQAAAAEAAAAGAAAAdV9iYXNlQ29sb3JUZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUBgAAAHVfZnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABYmFzZUNvbG9yRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABtZXRhbGxpY0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAEAAAAHJvdWdobmVzc0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAUAAAAZW1pc3NpdmVGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAACAAAABhbWJpZW50TGlnaHQAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAMAAAAGFtYmllbnRGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAA8AAAA";
static const std::string mesh_Uv1PucShwPcfNor_hlsl5 = "";
static const std::string mesh_Uv1PucShwPcfNorSki_hlsl5 = "U0JTIAAAAABkAAAASExTTDIAAAAAAFNUQUeAEwAAVkVSVENPREXxDwAAY2J1ZmZlciB1X3ZzX3NraW5uaW5nIDogcmVnaXN0ZXIoYjApCnsKICAgIHJvd19tYWpvciBmbG9hdDR4NCBfNDhfYm9uZXNNYXRyaXhbNzBdIDogcGFja29mZnNldChjMCk7Cn07CgpjYnVmZmVyIHVfdnNfcGJyUGFyYW1zIDogcmVnaXN0ZXIoYjEpCnsKICAgIHJvd19tYWpvciBmbG9hdDR4NCBwYnJQYXJhbXNfbW9kZWxNYXRyaXggOiBwYWNrb2Zmc2V0KGMwKTsKICAgIHJvd19tYWpvciBmbG9hdDR4NCBwYnJQYXJhbXNfbm9ybWFsTWF0cml4IDogcGFja29mZnNldChjNCk7CiAgICByb3dfbWFqb3IgZmxvYXQ0eDQgcGJyUGFyYW1zX212cE1hdHJpeCA6IHBhY2tvZmZzZXQoYzgpOwp9OwoKY2J1ZmZlciB1X3ZzX3NoYWRvd3MgOiByZWdpc3RlcihiMikKewogICAgcm93X21ham9yIGZsb2F0NHg0IF8zMTFfbGlnaHRWUE1hdHJpeFs2XSA6IHBhY2tvZmZzZXQoYzApOwp9OwoKCnN0YXRpYyBmbG9hdDQgZ2xfUG9zaXRpb247CnN0YXRpYyBmbG9hdDQgYV9ib25lSWRzOwpzdGF0aWMgZmxvYXQ0IGFfYm9uZVdlaWdodHM7CnN0YXRpYyBmbG9hdDMgYV9wb3NpdGlvbjsKc3RhdGljIGZsb2F0MyBhX25vcm1hbDsKc3RhdGljIGZsb2F0MyB2X3Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQzIHZfbm9ybWFsOwpzdGF0aWMgZmxvYXQyIHZfdXYxOwpzdGF0aWMgZmxvYXQyIHZfdXYyOwpzdGF0aWMgZmxvYXQyIGFfdGV4Y29vcmQxOwpzdGF0aWMgZmxvYXQ0IHZfbGlnaHRQcm9qUG9zWzZdOwpzdGF0aWMgZmxvYXQgdl9jbGlwU3BhY2VQb3NaOwoKc3RydWN0IFNQSVJWX0Nyb3NzX0lucHV0CnsKICAgIGZsb2F0MyBhX3Bvc2l0aW9uIDogUE9TSVRJT047CiAgICBmbG9hdDMgYV9ub3JtYWwgOiBOT1JNQUw7CiAgICBmbG9hdDIgYV90ZXhjb29yZDEgOiBURVhDT09SRDA7CiAgICBmbG9hdDQgYV9ib25lV2VpZ2h0cyA6IFRFWENPT1JEMTsKICAgIGZsb2F0NCBhX2JvbmVJZHMgOiBURVhDT09SRDI7Cn07CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfT3V0cHV0CnsKICAgIGZsb2F0MyB2X3Bvc2l0aW9uIDogVEVYQ09PUkQwOwogICAgZmxvYXQzIHZfbm9ybWFsIDogVEVYQ09PUkQxOwogICAgZmxvYXQyIHZfdXYxIDogVEVYQ09PUkQyOwogICAgZmxvYXQyIHZfdXYyIDogVEVYQ09PUkQzOwogICAgZmxvYXQ0IHZfbGlnaHRQcm9qUG9zWzZdIDogVEVYQ09PUkQ0OwogICAgZmxvYXQgdl9jbGlwU3BhY2VQb3NaIDogVEVYQ09PUkQxMDsKICAgIGZsb2F0NCBnbF9Qb3NpdGlvbiA6IFNWX1Bvc2l0aW9uOwp9OwoKZmxvYXQ0eDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIGZsb2F0NHg0IF82NiA9IF80OF9ib25lc01hdHJpeFtpbnQoYV9ib25lSWRzLnggKiA2NTUzNS4wZildICogYV9ib25lV2VpZ2h0cy54OwogICAgZmxvYXQ0eDQgXzkwID0gXzQ4X2JvbmVzTWF0cml4W2ludChhX2JvbmVJZHMueSAqIDY1NTM1LjBmKV0gKiBhX2JvbmVXZWlnaHRzLnk7CiAgICBmbG9hdDR4NCBfMTE0ID0gXzQ4X2JvbmVzTWF0cml4W2ludChhX2JvbmVJZHMueiAqIDY1NTM1LjBmKV0gKiBhX2JvbmVXZWlnaHRzLno7CiAgICBmbG9hdDR4NCBfMTM4ID0gXzQ4X2JvbmVzTWF0cml4W2ludChhX2JvbmVJZHMudyAqIDY1NTM1LjBmKV0gKiBhX2JvbmVXZWlnaHRzLnc7CiAgICByZXR1cm4gZmxvYXQ0eDQoKChfNjZbMF0gKyBfOTBbMF0pICsgXzExNFswXSkgKyBfMTM4WzBdLCAoKF82NlsxXSArIF85MFsxXSkgKyBfMTE0WzFdKSArIF8xMzhbMV0sICgoXzY2WzJdICsgXzkwWzJdKSArIF8xMTRbMl0pICsgXzEzOFsyXSwgKChfNjZbM10gKyBfOTBbM10pICsgXzExNFszXSkgKyBfMTM4WzNdKTsKfQoKZmxvYXQzIGdldE1vcnBoUG9zaXRpb24oZmxvYXQzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKZmxvYXQzIGdldFNraW5Qb3NpdGlvbihpbm91dCBmbG9hdDMgcG9zLCBmbG9hdDR4NCBib25lVHJhbnNmb3JtKQp7CiAgICBmbG9hdDQgXzE2NiA9IG11bChmbG9hdDQocG9zLCAxLjBmKSwgYm9uZVRyYW5zZm9ybSk7CiAgICBwb3MgPSBmbG9hdDMoXzE2Ni54eXopIC8gXzE2Ni53Lnh4eDsKICAgIHJldHVybiBwb3M7Cn0KCmZsb2F0NCBnZXRQb3NpdGlvbihmbG9hdDR4NCBib25lVHJhbnNmb3JtKQp7CiAgICBmbG9hdDMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgZmxvYXQzIHBhcmFtXzEgPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIGZsb2F0NHg0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgZmxvYXQzIF8yMTggPSBnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMik7CiAgICByZXR1cm4gZmxvYXQ0KF8yMTgsIDEuMGYpOwp9CgpmbG9hdDMgZ2V0TW9ycGhOb3JtYWwoZmxvYXQzIG5vcm1hbCkKewogICAgcmV0dXJuIG5vcm1hbDsKfQoKZmxvYXQzIGdldFNraW5Ob3JtYWwoaW5vdXQgZmxvYXQzIG5vcm1hbCwgZmxvYXQ0eDQgYm9uZVRyYW5zZm9ybSkKewogICAgZmxvYXQ0IF8xODggPSBtdWwoZmxvYXQ0KG5vcm1hbCwgMS4wZiksIGJvbmVUcmFuc2Zvcm0pOwogICAgbm9ybWFsID0gZmxvYXQzKF8xODgueHl6KSAvIF8xODgudy54eHg7CiAgICByZXR1cm4gbm9ybWFsOwp9CgpmbG9hdDMgZ2V0Tm9ybWFsKGZsb2F0NHg0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIGZsb2F0MyBwYXJhbSA9IGFfbm9ybWFsOwogICAgZmxvYXQzIHBhcmFtXzEgPSBnZXRNb3JwaE5vcm1hbChwYXJhbSk7CiAgICBmbG9hdDR4NCBwYXJhbV8yID0gYm9uZVRyYW5zZm9ybTsKICAgIGZsb2F0MyBfMjM2ID0gZ2V0U2tpbk5vcm1hbChwYXJhbV8xLCBwYXJhbV8yKTsKICAgIHJldHVybiBub3JtYWxpemUoXzIzNik7Cn0KCnZvaWQgdmVydF9tYWluKCkKewogICAgZmxvYXQ0eDQgXzI0MiA9IGdldEJvbmVUcmFuc2Zvcm0oKTsKICAgIGZsb2F0NHg0IHBhcmFtID0gXzI0MjsKICAgIGZsb2F0NCBfMjQ2ID0gZ2V0UG9zaXRpb24ocGFyYW0pOwogICAgZmxvYXQ0IF8yNTQgPSBtdWwoXzI0NiwgcGJyUGFyYW1zX21vZGVsTWF0cml4KTsKICAgIHZfcG9zaXRpb24gPSBmbG9hdDMoXzI1NC54eXopIC8gXzI1NC53Lnh4eDsKICAgIGZsb2F0NHg0IHBhcmFtXzEgPSBfMjQyOwogICAgdl9ub3JtYWwgPSBub3JtYWxpemUoZmxvYXQzKG11bChmbG9hdDQoZ2V0Tm9ybWFsKHBhcmFtXzEpLCAwLjBmKSwgcGJyUGFyYW1zX25vcm1hbE1hdHJpeCkueHl6KSk7CiAgICB2X3V2MSA9IDAuMGYueHg7CiAgICB2X3V2MiA9IDAuMGYueHg7CiAgICB2X3V2MSA9IGFfdGV4Y29vcmQxOwogICAgZm9yIChpbnQgaSA9IDA7IGkgPCA2OyBpKyspCiAgICB7CiAgICAgICAgdl9saWdodFByb2pQb3NbaV0gPSBtdWwoXzI1NCwgXzMxMV9saWdodFZQTWF0cml4W2ldKTsKICAgIH0KICAgIGdsX1Bvc2l0aW9uID0gbXVsKF8yNDYsIHBiclBhcmFtc19tdnBNYXRyaXgpOwogICAgdl9jbGlwU3BhY2VQb3NaID0gZ2xfUG9zaXRpb24uejsKICAgIGdsX1Bvc2l0aW9uLnogPSAoZ2xfUG9zaXRpb24ueiArIGdsX1Bvc2l0aW9uLncpICogMC41Owp9CgpTUElSVl9Dcm9zc19PdXRwdXQgbWFpbihTUElSVl9Dcm9zc19JbnB1dCBzdGFnZV9pbnB1dCkKewogICAgYV9ib25lSWRzID0gc3RhZ2VfaW5wdXQuYV9ib25lSWRzOwogICAgYV9ib25lV2VpZ2h0cyA9IHN0YWdlX2lucHV0LmFfYm9uZVdlaWdodHM7CiAgICBhX3Bvc2l0aW9uID0gc3RhZ2VfaW5wdXQuYV9wb3NpdGlvbjsKICAgIGFfbm9ybWFsID0gc3RhZ2VfaW5wdXQuYV9ub3JtYWw7CiAgICBhX3RleGNvb3JkMSA9IHN0YWdlX2lucHV0LmFfdGV4Y29vcmQxOwogICAgdmVydF9tYWluKCk7CiAgICBTUElSVl9Dcm9zc19PdXRwdXQgc3RhZ2Vfb3V0cHV0OwogICAgc3RhZ2Vfb3V0cHV0LmdsX1Bvc2l0aW9uID0gZ2xfUG9zaXRpb247CiAgICBzdGFnZV9vdXRwdXQudl9wb3NpdGlvbiA9IHZfcG9zaXRpb247CiAgICBzdGFnZV9vdXRwdXQudl9ub3JtYWwgPSB2X25vcm1hbDsKICAgIHN0YWdlX291dHB1dC52X3V2MSA9IHZfdXYxOwogICAgc3RhZ2Vfb3V0cHV0LnZfdXYyID0gdl91djI7CiAgICBzdGFnZV9vdXRwdXQudl9saWdodFByb2pQb3MgPSB2X2xpZ2h0UHJvalBvczsKICAgIHN0YWdlX291dHB1dC52X2NsaXBTcGFjZVBvc1ogPSB2X2NsaXBTcGFjZVBvc1o7CiAgICByZXR1cm4gc3RhZ2Vfb3V0cHV0Owp9ClJFRkx7AwAAbWVzaF9VdjFQdWNTaHdQY2ZOb3JTa2lfaGxzbDUAAAAFAAAAAAAAAAMAAAAFAAAAYV9ib25lSWRzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAARkxUNGFfYm9uZVdlaWdodHMAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAEZMVDRhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV9ub3JtYWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfdGV4Y29vcmQxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDIBAAAAdV92c19za2lubmluZwAAAAAAAAAAAAAAAAAAAAAAAABfNDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgBEAAAFib25lc01hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDRGAAAAAAAAAAMAAAB1X3ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAADAAAAAAW1vZGVsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAbm9ybWFsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAEAAAABtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAgAAAAAEAAAB1X3ZzX3NoYWRvd3MAAAAAAAAAAAAAAAAAAAAAAAAAAF8zMTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAQAAAWxpZ2h0VlBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAYAAAAAAAAAU1RBRzRYAABGUkFHQ09ERd1SAABzdHJ1Y3QgTWF0ZXJpYWxJbmZvCnsKICAgIGZsb2F0IHBlcmNlcHR1YWxSb3VnaG5lc3M7CiAgICBmbG9hdDMgZjA7CiAgICBmbG9hdCBhbHBoYVJvdWdobmVzczsKICAgIGZsb2F0MyBhbGJlZG9Db2xvcjsKICAgIGZsb2F0MyBmOTA7CiAgICBmbG9hdCBtZXRhbGxpYzsKICAgIGZsb2F0MyBuOwogICAgZmxvYXQzIGJhc2VDb2xvcjsKfTsKCnN0cnVjdCBOb3JtYWxJbmZvCnsKICAgIGZsb2F0MyBuZzsKICAgIGZsb2F0MyBuOwogICAgZmxvYXQzIHQ7CiAgICBmbG9hdDMgYjsKfTsKCnN0cnVjdCBMaWdodAp7CiAgICBpbnQgdHlwZTsKICAgIGZsb2F0MyBkaXJlY3Rpb247CiAgICBmbG9hdDMgY29sb3I7CiAgICBmbG9hdDMgcG9zaXRpb247CiAgICBmbG9hdCByYW5nZTsKICAgIGZsb2F0IGludGVuc2l0eTsKICAgIGZsb2F0IGlubmVyQ29uZUNvczsKICAgIGZsb2F0IG91dGVyQ29uZUNvczsKICAgIGJvb2wgc2hhZG93czsKICAgIGludCBzaGFkb3dNYXBJbmRleDsKICAgIGludCBudW1TaGFkb3dDYXNjYWRlczsKfTsKCnN0cnVjdCBTaGFkb3cKewogICAgZmxvYXQgbWF4QmlhczsKICAgIGZsb2F0IG1pbkJpYXM7CiAgICBmbG9hdDIgbWFwU2l6ZTsKICAgIGZsb2F0MiBuZWFyRmFyOwogICAgZmxvYXQ0IGxpZ2h0UHJvalBvczsKfTsKCnN0YXRpYyBjb25zdCBTaGFkb3cgXzY0OSA9IHsgMC4wZiwgMC4wZiwgMC4wZi54eCwgMC4wZi54eCwgMC4wZi54eHh4IH07CgpjYnVmZmVyIHVfZnNfcGJyUGFyYW1zIDogcmVnaXN0ZXIoYjApCnsKICAgIGZsb2F0NCBwYnJQYXJhbXNfYmFzZUNvbG9yRmFjdG9yIDogcGFja29mZnNldChjMCk7CiAgICBmbG9hdCBwYnJQYXJhbXNfbWV0YWxsaWNGYWN0b3IgOiBwYWNrb2Zmc2V0KGMxKTsKICAgIGZsb2F0IHBiclBhcmFtc19yb3VnaG5lc3NGYWN0b3IgOiBwYWNrb2Zmc2V0KGMxLnkpOwogICAgZmxvYXQzIHBiclBhcmFtc19lbWlzc2l2ZUZhY3RvciA6IHBhY2tvZmZzZXQoYzIpOwogICAgZmxvYXQzIHBiclBhcmFtc19hbWJpZW50TGlnaHQgOiBwYWNrb2Zmc2V0KGMzKTsKICAgIGZsb2F0IHBiclBhcmFtc19hbWJpZW50RmFjdG9yIDogcGFja29mZnNldChjMy53KTsKfTsKCmNidWZmZXIgdV9mc19zaGFkb3dzIDogcmVnaXN0ZXIoYjEpCnsKICAgIGZsb2F0NCB1U2hhZG93c19iaWFzX3RleFNpemVfbmVhckZhcls3XSA6IHBhY2tvZmZzZXQoYzApOwp9OwoKY2J1ZmZlciB1X2ZzX2xpZ2h0aW5nIDogcmVnaXN0ZXIoYjIpCnsKICAgIGZsb2F0NCBsaWdodGluZ19kaXJlY3Rpb25fcmFuZ2VbNl0gOiBwYWNrb2Zmc2V0KGMwKTsKICAgIGZsb2F0NCBsaWdodGluZ19jb2xvcl9pbnRlbnNpdHlbNl0gOiBwYWNrb2Zmc2V0KGM2KTsKICAgIGZsb2F0NCBsaWdodGluZ19wb3NpdGlvbl90eXBlWzZdIDogcGFja29mZnNldChjMTIpOwogICAgZmxvYXQ0IGxpZ2h0aW5nX2luQ29uZV9vdUNvbmVfc2hhZG93c19jYXNjYWRlc1s2XSA6IHBhY2tvZmZzZXQoYzE4KTsKICAgIGZsb2F0NCBsaWdodGluZ19leWVQb3MgOiBwYWNrb2Zmc2V0KGMyNCk7Cn07CgpUZXh0dXJlMkQ8ZmxvYXQ0PiB1X2Jhc2VDb2xvclRleHR1cmUgOiByZWdpc3Rlcih0MCk7ClNhbXBsZXJTdGF0ZSBfdV9iYXNlQ29sb3JUZXh0dXJlX3NhbXBsZXIgOiByZWdpc3RlcihzMCk7ClRleHR1cmUyRDxmbG9hdDQ+IHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlIDogcmVnaXN0ZXIodDEpOwpTYW1wbGVyU3RhdGUgX3VfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlX3NhbXBsZXIgOiByZWdpc3RlcihzMSk7ClRleHR1cmUyRDxmbG9hdDQ+IHVfb2NjbHVzaW9uVGV4dHVyZSA6IHJlZ2lzdGVyKHQyKTsKU2FtcGxlclN0YXRlIF91X29jY2x1c2lvblRleHR1cmVfc2FtcGxlciA6IHJlZ2lzdGVyKHMyKTsKVGV4dHVyZTJEPGZsb2F0ND4gdV9lbWlzc2l2ZVRleHR1cmUgOiByZWdpc3Rlcih0Myk7ClNhbXBsZXJTdGF0ZSBfdV9lbWlzc2l2ZVRleHR1cmVfc2FtcGxlciA6IHJlZ2lzdGVyKHMzKTsKVGV4dHVyZTJEPGZsb2F0ND4gdV9zaGFkb3dNYXAxIDogcmVnaXN0ZXIodDQpOwpTYW1wbGVyU3RhdGUgX3Vfc2hhZG93TWFwMV9zYW1wbGVyIDogcmVnaXN0ZXIoczQpOwpUZXh0dXJlMkQ8ZmxvYXQ0PiB1X3NoYWRvd01hcDIgOiByZWdpc3Rlcih0NSk7ClNhbXBsZXJTdGF0ZSBfdV9zaGFkb3dNYXAyX3NhbXBsZXIgOiByZWdpc3RlcihzNSk7ClRleHR1cmUyRDxmbG9hdDQ+IHVfc2hhZG93TWFwMyA6IHJlZ2lzdGVyKHQ2KTsKU2FtcGxlclN0YXRlIF91X3NoYWRvd01hcDNfc2FtcGxlciA6IHJlZ2lzdGVyKHM2KTsKVGV4dHVyZTJEPGZsb2F0ND4gdV9zaGFkb3dNYXA0IDogcmVnaXN0ZXIodDcpOwpTYW1wbGVyU3RhdGUgX3Vfc2hhZG93TWFwNF9zYW1wbGVyIDogcmVnaXN0ZXIoczcpOwpUZXh0dXJlMkQ8ZmxvYXQ0PiB1X3NoYWRvd01hcDUgOiByZWdpc3Rlcih0OCk7ClNhbXBsZXJTdGF0ZSBfdV9zaGFkb3dNYXA1X3NhbXBsZXIgOiByZWdpc3RlcihzOCk7ClRleHR1cmUyRDxmbG9hdDQ+IHVfc2hhZG93TWFwNiA6IHJlZ2lzdGVyKHQ5KTsKU2FtcGxlclN0YXRlIF91X3NoYWRvd01hcDZfc2FtcGxlciA6IHJlZ2lzdGVyKHM5KTsKVGV4dHVyZUN1YmU8ZmxvYXQ0PiB1X3NoYWRvd0N1YmVNYXAxIDogcmVnaXN0ZXIodDEwKTsKU2FtcGxlclN0YXRlIF91X3NoYWRvd0N1YmVNYXAxX3NhbXBsZXIgOiByZWdpc3RlcihzMTApOwoKc3RhdGljIGZsb2F0MiB2X3V2MTsKc3RhdGljIGZsb2F0MyB2X3Bvc2l0aW9uOwpzdGF0aWMgZmxvYXQzIHZfbm9ybWFsOwpzdGF0aWMgZmxvYXQ0IHZfbGlnaHRQcm9qUG9zWzZdOwpzdGF0aWMgZmxvYXQgdl9jbGlwU3BhY2VQb3NaOwpzdGF0aWMgZmxvYXQ0IGdfZmluYWxDb2xvcjsKc3RhdGljIGZsb2F0MiB2X3V2MjsKCnN0cnVjdCBTUElSVl9Dcm9zc19JbnB1dAp7CiAgICBmbG9hdDMgdl9wb3NpdGlvbiA6IFRFWENPT1JEMDsKICAgIGZsb2F0MyB2X25vcm1hbCA6IFRFWENPT1JEMTsKICAgIGZsb2F0MiB2X3V2MSA6IFRFWENPT1JEMjsKICAgIGZsb2F0MiB2X3V2MiA6IFRFWENPT1JEMzsKICAgIGZsb2F0NCB2X2xpZ2h0UHJvalBvc1s2XSA6IFRFWENPT1JENDsKICAgIGZsb2F0IHZfY2xpcFNwYWNlUG9zWiA6IFRFWENPT1JEMTA7Cn07CgpzdHJ1Y3QgU1BJUlZfQ3Jvc3NfT3V0cHV0CnsKICAgIGZsb2F0NCBnX2ZpbmFsQ29sb3IgOiBTVl9UYXJnZXQwOwp9OwoKZmxvYXQzIHNSR0JUb0xpbmVhcihmbG9hdDMgc3JnYkluKQp7CiAgICByZXR1cm4gcG93KHNyZ2JJbiwgMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1Zi54eHgpOwp9CgpmbG9hdDQgc1JHQlRvTGluZWFyKGZsb2F0NCBzcmdiSW4pCnsKICAgIGZsb2F0MyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gZmxvYXQ0KHNSR0JUb0xpbmVhcihwYXJhbSksIHNyZ2JJbi53KTsKfQoKZmxvYXQ0IGdldFZlcnRleENvbG9yKCkKewogICAgcmV0dXJuIDEuMGYueHh4eDsKfQoKZmxvYXQ0IGdldEJhc2VDb2xvcigpCnsKICAgIGZsb2F0NCBiYXNlQ29sb3IgPSBwYnJQYXJhbXNfYmFzZUNvbG9yRmFjdG9yOwogICAgZmxvYXQ0IHBhcmFtID0gdV9iYXNlQ29sb3JUZXh0dXJlLlNhbXBsZShfdV9iYXNlQ29sb3JUZXh0dXJlX3NhbXBsZXIsIHZfdXYxKTsKICAgIGZsb2F0NCBfMjMyID0gYmFzZUNvbG9yOwogICAgZmxvYXQ0IF8yMzMgPSBfMjMyICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8yMzM7CiAgICByZXR1cm4gXzIzMyAqIGdldFZlcnRleENvbG9yKCk7Cn0KCk5vcm1hbEluZm8gZ2V0Tm9ybWFsSW5mbygpCnsKICAgIGZsb2F0MyBfMzE0ID0gZmxvYXQzKHZfdXYxLCAwLjBmKTsKICAgIGZsb2F0MyBfMzE1ID0gZGR4KF8zMTQpOwogICAgZmxvYXQzIF8zMjEgPSBkZHkoXzMxNCk7CiAgICBmbG9hdCBfMzI0ID0gXzMyMS55OwogICAgZmxvYXQgXzMzMSA9IF8zMTUueTsKICAgIGZsb2F0MyBfMzQ5ID0gKChkZHgodl9wb3NpdGlvbikgKiBfMzI0KSAtIChkZHkodl9wb3NpdGlvbikgKiBfMzMxKSkgLyAoKF8zMTUueCAqIF8zMjQpIC0gKF8zMjEueCAqIF8zMzEpKS54eHg7CiAgICBmbG9hdDMgXzM1MyA9IG5vcm1hbGl6ZSh2X25vcm1hbCk7CiAgICBmbG9hdDMgXzM2MiA9IG5vcm1hbGl6ZShfMzQ5IC0gKF8zNTMgKiBkb3QoXzM1MywgXzM0OSkpKTsKICAgIE5vcm1hbEluZm8gXzE1ODkgPSB7IF8zNTMsIF8zNTMsIF8zNjIsIGNyb3NzKF8zNTMsIF8zNjIpIH07CiAgICByZXR1cm4gXzE1ODk7Cn0KCk1hdGVyaWFsSW5mbyBnZXRNZXRhbGxpY1JvdWdobmVzc0luZm8oaW5vdXQgTWF0ZXJpYWxJbmZvIGluZm8sIGZsb2F0IGYwX2lvcikKewogICAgaW5mby5tZXRhbGxpYyA9IHBiclBhcmFtc19tZXRhbGxpY0ZhY3RvcjsKICAgIGluZm8ucGVyY2VwdHVhbFJvdWdobmVzcyA9IHBiclBhcmFtc19yb3VnaG5lc3NGYWN0b3I7CiAgICBmbG9hdDQgXzI1MyA9IHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlLlNhbXBsZShfdV9tZXRhbGxpY1JvdWdobmVzc1RleHR1cmVfc2FtcGxlciwgdl91djEpOwogICAgaW5mby5wZXJjZXB0dWFsUm91Z2huZXNzICo9IF8yNTMueTsKICAgIGluZm8ubWV0YWxsaWMgKj0gXzI1My56OwogICAgZmxvYXQzIF8yNzAgPSBmMF9pb3IueHh4OwogICAgaW5mby5hbGJlZG9Db2xvciA9IGxlcnAoaW5mby5iYXNlQ29sb3IgKiAoMS4wZi54eHggLSBfMjcwKSwgMC4wZi54eHgsIGluZm8ubWV0YWxsaWMueHh4KTsKICAgIGluZm8uZjAgPSBsZXJwKF8yNzAsIGluZm8uYmFzZUNvbG9yLCBpbmZvLm1ldGFsbGljLnh4eCk7CiAgICByZXR1cm4gaW5mbzsKfQoKZmxvYXQ0IGdldE9jY2x1c2lvblRleHR1cmUoKQp7CiAgICByZXR1cm4gdV9vY2NsdXNpb25UZXh0dXJlLlNhbXBsZShfdV9vY2NsdXNpb25UZXh0dXJlX3NhbXBsZXIsIHZfdXYxKTsKfQoKZmxvYXQgY2xhbXBlZERvdChmbG9hdDMgeCwgZmxvYXQzIHkpCnsKICAgIHJldHVybiBjbGFtcChkb3QoeCwgeSksIDAuMGYsIDEuMGYpOwp9CgpTaGFkb3cgZ2V0U2hhZG93MkRDb25mKGludCBpbmRleCkKewogICAgZm9yIChpbnQgaSA9IDA7IGkgPCA2OyBpKyspCiAgICB7CiAgICAgICAgaWYgKGkgPT0gaW5kZXgpCiAgICAgICAgewogICAgICAgICAgICBTaGFkb3cgXzY0MyA9IHsgdVNoYWRvd3NfYmlhc190ZXhTaXplX25lYXJGYXJbaV0ueCwgdVNoYWRvd3NfYmlhc190ZXhTaXplX25lYXJGYXJbaV0ueCAqIDAuMTAwMDAwMDAxNDkwMTE2MTE5Mzg0NzY1NjI1ZiwgdVNoYWRvd3NfYmlhc190ZXhTaXplX25lYXJGYXJbaV0ueXksIHVTaGFkb3dzX2JpYXNfdGV4U2l6ZV9uZWFyRmFyW2ldLnp3LCB2X2xpZ2h0UHJvalBvc1tpXSB9OwogICAgICAgICAgICByZXR1cm4gXzY0MzsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gXzY0OTsKfQoKZmxvYXQ0IGdldFNoYWRvd01hcChpbnQgaW5kZXgsIGZsb2F0MiBjb29yZHMpCnsKICAgIGlmIChpbmRleCA9PSAwKQogICAgewogICAgICAgIHJldHVybiB1X3NoYWRvd01hcDEuU2FtcGxlKF91X3NoYWRvd01hcDFfc2FtcGxlciwgY29vcmRzKTsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBpZiAoaW5kZXggPT0gMSkKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiB1X3NoYWRvd01hcDIuU2FtcGxlKF91X3NoYWRvd01hcDJfc2FtcGxlciwgY29vcmRzKTsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgaWYgKGluZGV4ID09IDIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHJldHVybiB1X3NoYWRvd01hcDMuU2FtcGxlKF91X3NoYWRvd01hcDNfc2FtcGxlciwgY29vcmRzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSAzKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB1X3NoYWRvd01hcDQuU2FtcGxlKF91X3NoYWRvd01hcDRfc2FtcGxlciwgY29vcmRzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT0gNCkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1X3NoYWRvd01hcDUuU2FtcGxlKF91X3NoYWRvd01hcDVfc2FtcGxlciwgY29vcmRzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IDUpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1X3NoYWRvd01hcDYuU2FtcGxlKF91X3NoYWRvd01hcDZfc2FtcGxlciwgY29vcmRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiAwLjBmLnh4eHg7Cn0KCmZsb2F0IGRlY29kZURlcHRoKGZsb2F0NCByZ2JhKQp7CiAgICByZXR1cm4gZG90KHJnYmEsIGZsb2F0NCgxLjBmLCAwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjVmLCAxLjUzNzg3MDA0ODE5NjA1NDk5NTA1OTk2NzA0MTAxNTZlLTA1ZiwgNi4wMzA4NjI5MjAxNjk5NjU5NDYxMTU1NTMzNzkwNTg4ZS0wOGYpKTsKfQoKZmxvYXQgc2hhZG93Q29tcGFyZShpbnQgc2hhZG93TWFwSW5kZXgsIGZsb2F0IGN1cnJlbnREZXB0aCwgZmxvYXQgYmlhcywgZmxvYXQyIHRleENvb3JkcykKewogICAgaW50IHBhcmFtID0gc2hhZG93TWFwSW5kZXg7CiAgICBmbG9hdDIgcGFyYW1fMSA9IHRleENvb3JkczsKICAgIGZsb2F0NCBwYXJhbV8yID0gZ2V0U2hhZG93TWFwKHBhcmFtLCBwYXJhbV8xKTsKICAgIHJldHVybiBmbG9hdCgoY3VycmVudERlcHRoIC0gYmlhcykgPiBkZWNvZGVEZXB0aChwYXJhbV8yKSk7Cn0KCmZsb2F0IHNoYWRvd0NhbGN1bGF0aW9uQXV4KGludCBzaGFkb3dNYXBJbmRleCwgU2hhZG93IHNoYWRvd0NvbmYsIGZsb2F0IE5kb3RMKQp7CiAgICBmbG9hdCBzaGFkb3cgPSAwLjBmOwogICAgZmxvYXQzIF84MTYgPSAoKHNoYWRvd0NvbmYubGlnaHRQcm9qUG9zLnh5eiAvIHNoYWRvd0NvbmYubGlnaHRQcm9qUG9zLncueHh4KSAqIDAuNWYpICsgMC41Zi54eHg7CiAgICBmbG9hdCBfODE5ID0gXzgxNi56OwogICAgZmxvYXQgXzgyOCA9IG1heChzaGFkb3dDb25mLm1heEJpYXMgKiAoMS4wZiAtIE5kb3RMKSwgc2hhZG93Q29uZi5taW5CaWFzKTsKICAgIGZsb2F0MiBfODMzID0gMS4wZi54eCAvIHNoYWRvd0NvbmYubWFwU2l6ZTsKICAgIGZvciAoaW50IHggPSAtMTsgeCA8PSAxOyB4KyspCiAgICB7CiAgICAgICAgZm9yIChpbnQgeSA9IC0xOyB5IDw9IDE7IHkrKykKICAgICAgICB7CiAgICAgICAgICAgIGludCBwYXJhbSA9IHNoYWRvd01hcEluZGV4OwogICAgICAgICAgICBmbG9hdCBwYXJhbV8xID0gXzgxOTsKICAgICAgICAgICAgZmxvYXQgcGFyYW1fMiA9IF84Mjg7CiAgICAgICAgICAgIGZsb2F0MiBwYXJhbV8zID0gXzgxNi54eSArIChmbG9hdDIoZmxvYXQoeCksIGZsb2F0KHkpKSAqIF84MzMpOwogICAgICAgICAgICBzaGFkb3cgKz0gc2hhZG93Q29tcGFyZShwYXJhbSwgcGFyYW1fMSwgcGFyYW1fMiwgcGFyYW1fMyk7CiAgICAgICAgfQogICAgfQogICAgc2hhZG93ICo9IDAuMTExMTExMTExOTM4OTUzMzk5NjU4MjAzMTI1ZjsKICAgIGlmIChfODE5ID4gMS4wZikKICAgIHsKICAgICAgICBzaGFkb3cgPSAwLjBmOwogICAgfQogICAgcmV0dXJuIHNoYWRvdzsKfQoKZmxvYXQgc2hhZG93Q2FsY3VsYXRpb25QQ0YoaW50IHNoYWRvd01hcEluZGV4LCBmbG9hdCBOZG90TCkKewogICAgaW50IHBhcmFtID0gc2hhZG93TWFwSW5kZXg7CiAgICBpbnQgcGFyYW1fMSA9IHNoYWRvd01hcEluZGV4OwogICAgU2hhZG93IHBhcmFtXzIgPSBnZXRTaGFkb3cyRENvbmYocGFyYW0pOwogICAgZmxvYXQgcGFyYW1fMyA9IE5kb3RMOwogICAgcmV0dXJuIHNoYWRvd0NhbGN1bGF0aW9uQXV4KHBhcmFtXzEsIHBhcmFtXzIsIHBhcmFtXzMpOwp9CgpmbG9hdCBzaGFkb3dDYXNjYWRlZENhbGN1bGF0aW9uUENGKGludCBzaGFkb3dNYXBJbmRleCwgaW50IG51bVNoYWRvd0Nhc2NhZGVzLCBmbG9hdCBOZG90TCkKewogICAgZm9yIChpbnQgYyA9IDA7IGMgPCA0OyBjKyspCiAgICB7CiAgICAgICAgaWYgKGMgPCBudW1TaGFkb3dDYXNjYWRlcykKICAgICAgICB7CiAgICAgICAgICAgIGludCBfOTE1ID0gc2hhZG93TWFwSW5kZXggKyBjOwogICAgICAgICAgICBpbnQgcGFyYW0gPSBfOTE1OwogICAgICAgICAgICBTaGFkb3cgXzkxOSA9IGdldFNoYWRvdzJEQ29uZihwYXJhbSk7CiAgICAgICAgICAgIGZsb2F0MiBfMTYxNCA9IF85MTkubmVhckZhcjsKICAgICAgICAgICAgYm9vbCBfOTI1ID0gdl9jbGlwU3BhY2VQb3NaID49IF8xNjE0Lng7CiAgICAgICAgICAgIGJvb2wgXzkzMjsKICAgICAgICAgICAgaWYgKF85MjUpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIF85MzIgPSB2X2NsaXBTcGFjZVBvc1ogPD0gXzE2MTQueTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIF85MzIgPSBfOTI1OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChfOTMyKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpbnQgcGFyYW1fMSA9IF85MTU7CiAgICAgICAgICAgICAgICBTaGFkb3cgcGFyYW1fMiA9IF85MTk7CiAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8zID0gTmRvdEw7CiAgICAgICAgICAgICAgICByZXR1cm4gc2hhZG93Q2FsY3VsYXRpb25BdXgocGFyYW1fMSwgcGFyYW1fMiwgcGFyYW1fMyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gMC4wZjsKfQoKU2hhZG93IGdldFNoYWRvd0N1YmVDb25mKGludCBpbmRleCkKewogICAgZm9yIChpbnQgaSA9IDY7IGkgPCA3OyBpKyspCiAgICB7CiAgICAgICAgaWYgKGkgPT0gaW5kZXgpCiAgICAgICAgewogICAgICAgICAgICBTaGFkb3cgXzY4MCA9IHsgdVNoYWRvd3NfYmlhc190ZXhTaXplX25lYXJGYXJbaV0ueCwgdVNoYWRvd3NfYmlhc190ZXhTaXplX25lYXJGYXJbaV0ueCAqIDAuMTAwMDAwMDAxNDkwMTE2MTE5Mzg0NzY1NjI1ZiwgdVNoYWRvd3NfYmlhc190ZXhTaXplX25lYXJGYXJbaV0ueXksIHVTaGFkb3dzX2JpYXNfdGV4U2l6ZV9uZWFyRmFyW2ldLnp3LCAwLjBmLnh4eHggfTsKICAgICAgICAgICAgcmV0dXJuIF82ODA7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIF82NDk7Cn0KCmZsb2F0IGRpc3RhbmNlVG9EZXB0aFZhbHVlKGZsb2F0MyBfZGlzdGFuY2UsIGZsb2F0MiBjYWxjTmVhckZhcikKewogICAgZmxvYXQzIF85NDkgPSBhYnMoX2Rpc3RhbmNlKTsKICAgIHJldHVybiBjYWxjTmVhckZhci54ICsgKGNhbGNOZWFyRmFyLnkgLyBtYXgoXzk0OS54LCBtYXgoXzk0OS55LCBfOTQ5LnopKSk7Cn0KCmZsb2F0NCBnZXRTaGFkb3dDdWJlTWFwKGlub3V0IGludCBpbmRleCwgZmxvYXQzIGNvb3JkcykKewogICAgaW5kZXggLT0gNjsKICAgIGlmIChpbmRleCA9PSAwKQogICAgewogICAgICAgIHJldHVybiB1X3NoYWRvd0N1YmVNYXAxLlNhbXBsZShfdV9zaGFkb3dDdWJlTWFwMV9zYW1wbGVyLCBjb29yZHMpOwogICAgfQogICAgZWxzZQogICAgewogICAgfQogICAgcmV0dXJuIDAuMGYueHh4eDsKfQoKZmxvYXQgc2hhZG93Q3ViZUNvbXBhcmUoaW50IHNoYWRvd01hcEluZGV4LCBmbG9hdCBjdXJyZW50RGVwdGgsIGZsb2F0IGJpYXMsIGZsb2F0MyB0ZXhDb29yZHMpCnsKICAgIGludCBwYXJhbSA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQzIHBhcmFtXzEgPSB0ZXhDb29yZHM7CiAgICBmbG9hdDQgXzk3MyA9IGdldFNoYWRvd0N1YmVNYXAocGFyYW0sIHBhcmFtXzEpOwogICAgZmxvYXQ0IHBhcmFtXzIgPSBfOTczOwogICAgaWYgKChjdXJyZW50RGVwdGggLSBiaWFzKSA+IGRlY29kZURlcHRoKHBhcmFtXzIpKQogICAgewogICAgICAgIHJldHVybiAxLjBmOwogICAgfQogICAgcmV0dXJuIDAuMGY7Cn0KCmZsb2F0IHNoYWRvd0N1YmVDYWxjdWxhdGlvblBDRihpbnQgc2hhZG93TWFwSW5kZXgsIGZsb2F0MyBmcmFnVG9MaWdodCwgZmxvYXQgTmRvdEwpCnsKICAgIGludCBwYXJhbSA9IHNoYWRvd01hcEluZGV4OwogICAgU2hhZG93IF85ODkgPSBnZXRTaGFkb3dDdWJlQ29uZihwYXJhbSk7CiAgICBmbG9hdDMgcGFyYW1fMSA9IGZyYWdUb0xpZ2h0OwogICAgZmxvYXQyIHBhcmFtXzIgPSBfOTg5Lm5lYXJGYXI7CiAgICBmbG9hdCBfOTk2ID0gZGlzdGFuY2VUb0RlcHRoVmFsdWUocGFyYW1fMSwgcGFyYW1fMik7CiAgICBmbG9hdCBzaGFkb3cgPSAwLjBmOwogICAgZmxvYXQgXzEwMDYgPSBtYXgoXzk4OS5tYXhCaWFzICogKDEuMGYgLSBOZG90TCksIF85ODkubWluQmlhcyk7CiAgICBmbG9hdCBfMTAxMSA9IGxlbmd0aChmcmFnVG9MaWdodCkgKiAwLjAwMDUwMDAwMDAyMzc0ODcyNTY1MjY5NDcwMjE0ODQzNzVmOwogICAgaW50IHBhcmFtXzMgPSBzaGFkb3dNYXBJbmRleDsKICAgIGZsb2F0IHBhcmFtXzQgPSBfOTk2OwogICAgZmxvYXQgcGFyYW1fNSA9IF8xMDA2OwogICAgZmxvYXQzIHBhcmFtXzYgPSBmcmFnVG9MaWdodDsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8zLCBwYXJhbV80LCBwYXJhbV81LCBwYXJhbV82KTsKICAgIGludCBwYXJhbV83ID0gc2hhZG93TWFwSW5kZXg7CiAgICBmbG9hdCBwYXJhbV84ID0gXzk5NjsKICAgIGZsb2F0IHBhcmFtXzkgPSBfMTAwNjsKICAgIGZsb2F0MyBwYXJhbV8xMCA9IGZyYWdUb0xpZ2h0ICsgKDEuMGYueHh4ICogXzEwMTEpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzcsIHBhcmFtXzgsIHBhcmFtXzksIHBhcmFtXzEwKTsKICAgIGludCBwYXJhbV8xMSA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fMTIgPSBfOTk2OwogICAgZmxvYXQgcGFyYW1fMTMgPSBfMTAwNjsKICAgIGZsb2F0MyBwYXJhbV8xNCA9IGZyYWdUb0xpZ2h0ICsgKGZsb2F0MygxLjBmLCAtMS4wZiwgMS4wZikgKiBfMTAxMSk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMTEsIHBhcmFtXzEyLCBwYXJhbV8xMywgcGFyYW1fMTQpOwogICAgaW50IHBhcmFtXzE1ID0gc2hhZG93TWFwSW5kZXg7CiAgICBmbG9hdCBwYXJhbV8xNiA9IF85OTY7CiAgICBmbG9hdCBwYXJhbV8xNyA9IF8xMDA2OwogICAgZmxvYXQzIHBhcmFtXzE4ID0gZnJhZ1RvTGlnaHQgKyAoZmxvYXQzKC0xLjBmLCAtMS4wZiwgMS4wZikgKiBfMTAxMSk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMTUsIHBhcmFtXzE2LCBwYXJhbV8xNywgcGFyYW1fMTgpOwogICAgaW50IHBhcmFtXzE5ID0gc2hhZG93TWFwSW5kZXg7CiAgICBmbG9hdCBwYXJhbV8yMCA9IF85OTY7CiAgICBmbG9hdCBwYXJhbV8yMSA9IF8xMDA2OwogICAgZmxvYXQzIHBhcmFtXzIyID0gZnJhZ1RvTGlnaHQgKyAoZmxvYXQzKC0xLjBmLCAxLjBmLCAxLjBmKSAqIF8xMDExKTsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8xOSwgcGFyYW1fMjAsIHBhcmFtXzIxLCBwYXJhbV8yMik7CiAgICBpbnQgcGFyYW1fMjMgPSBzaGFkb3dNYXBJbmRleDsKICAgIGZsb2F0IHBhcmFtXzI0ID0gXzk5NjsKICAgIGZsb2F0IHBhcmFtXzI1ID0gXzEwMDY7CiAgICBmbG9hdDMgcGFyYW1fMjYgPSBmcmFnVG9MaWdodCArIChmbG9hdDMoMS4wZiwgMS4wZiwgLTEuMGYpICogXzEwMTEpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzIzLCBwYXJhbV8yNCwgcGFyYW1fMjUsIHBhcmFtXzI2KTsKICAgIGludCBwYXJhbV8yNyA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fMjggPSBfOTk2OwogICAgZmxvYXQgcGFyYW1fMjkgPSBfMTAwNjsKICAgIGZsb2F0MyBwYXJhbV8zMCA9IGZyYWdUb0xpZ2h0ICsgKGZsb2F0MygxLjBmLCAtMS4wZiwgLTEuMGYpICogXzEwMTEpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzI3LCBwYXJhbV8yOCwgcGFyYW1fMjksIHBhcmFtXzMwKTsKICAgIGludCBwYXJhbV8zMSA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fMzIgPSBfOTk2OwogICAgZmxvYXQgcGFyYW1fMzMgPSBfMTAwNjsKICAgIGZsb2F0MyBwYXJhbV8zNCA9IGZyYWdUb0xpZ2h0ICsgKCgtMS4wZikueHh4ICogXzEwMTEpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzMxLCBwYXJhbV8zMiwgcGFyYW1fMzMsIHBhcmFtXzM0KTsKICAgIGludCBwYXJhbV8zNSA9IHNoYWRvd01hcEluZGV4OwogICAgZmxvYXQgcGFyYW1fMzYgPSBfOTk2OwogICAgZmxvYXQgcGFyYW1fMzcgPSBfMTAwNjsKICAgIGZsb2F0MyBwYXJhbV8zOCA9IGZyYWdUb0xpZ2h0ICsgKGZsb2F0MygtMS4wZiwgMS4wZiwgLTEuMGYpICogXzEwMTEpOwogICAgZmxvYXQgXzExNDQgPSBzaGFkb3c7CiAgICBmbG9hdCBfMTE0NyA9IChfMTE0NCArIHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzM1LCBwYXJhbV8zNiwgcGFyYW1fMzcsIHBhcmFtXzM4KSkgKiAwLjExMTExMTExMTkzODk1MzM5OTY1ODIwMzEyNWY7CiAgICBzaGFkb3cgPSBfMTE0NzsKICAgIHJldHVybiBfMTE0NzsKfQoKZmxvYXQgZ2V0UmFuZ2VBdHRlbnVhdGlvbihmbG9hdCByYW5nZSwgZmxvYXQgX2Rpc3RhbmNlKQp7CiAgICBpZiAocmFuZ2UgPD0gMC4wZikKICAgIHsKICAgICAgICByZXR1cm4gMS4wZiAvIHBvdyhfZGlzdGFuY2UsIDIuMGYpOwogICAgfQogICAgcmV0dXJuIG1heChtaW4oMS4wZiAtIHBvdyhfZGlzdGFuY2UgLyByYW5nZSwgNC4wZiksIDEuMGYpLCAwLjBmKSAvIHBvdyhfZGlzdGFuY2UsIDIuMGYpOwp9CgpmbG9hdCBnZXRTcG90QXR0ZW51YXRpb24oZmxvYXQzIHBvaW50VG9MaWdodCwgZmxvYXQzIHNwb3REaXJlY3Rpb24sIGZsb2F0IG91dGVyQ29uZUNvcywgZmxvYXQgaW5uZXJDb25lQ29zKQp7CiAgICBmbG9hdCBfNTMwID0gZG90KG5vcm1hbGl6ZShzcG90RGlyZWN0aW9uKSwgbm9ybWFsaXplKC1wb2ludFRvTGlnaHQpKTsKICAgIGlmIChfNTMwID4gb3V0ZXJDb25lQ29zKQogICAgewogICAgICAgIGlmIChfNTMwIDwgaW5uZXJDb25lQ29zKQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIHNtb290aHN0ZXAob3V0ZXJDb25lQ29zLCBpbm5lckNvbmVDb3MsIF81MzApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gMS4wZjsKICAgIH0KICAgIHJldHVybiAwLjBmOwp9CgpmbG9hdDMgZ2V0TGlnaEludGVuc2l0eShMaWdodCBsaWdodCwgZmxvYXQzIHBvaW50VG9MaWdodCkKewogICAgZmxvYXQgcmFuZ2VBdHRlbnVhdGlvbiA9IDEuMGY7CiAgICBmbG9hdCBzcG90QXR0ZW51YXRpb24gPSAxLjBmOwogICAgaWYgKGxpZ2h0LnR5cGUgIT0gMCkKICAgIHsKICAgICAgICBmbG9hdCBwYXJhbSA9IGxpZ2h0LnJhbmdlOwogICAgICAgIGZsb2F0IHBhcmFtXzEgPSBsZW5ndGgocG9pbnRUb0xpZ2h0KTsKICAgICAgICByYW5nZUF0dGVudWF0aW9uID0gZ2V0UmFuZ2VBdHRlbnVhdGlvbihwYXJhbSwgcGFyYW1fMSk7CiAgICB9CiAgICBpZiAobGlnaHQudHlwZSA9PSAyKQogICAgewogICAgICAgIGZsb2F0MyBwYXJhbV8yID0gcG9pbnRUb0xpZ2h0OwogICAgICAgIGZsb2F0MyBwYXJhbV8zID0gbGlnaHQuZGlyZWN0aW9uOwogICAgICAgIGZsb2F0IHBhcmFtXzQgPSBsaWdodC5vdXRlckNvbmVDb3M7CiAgICAgICAgZmxvYXQgcGFyYW1fNSA9IGxpZ2h0LmlubmVyQ29uZUNvczsKICAgICAgICBzcG90QXR0ZW51YXRpb24gPSBnZXRTcG90QXR0ZW51YXRpb24ocGFyYW1fMiwgcGFyYW1fMywgcGFyYW1fNCwgcGFyYW1fNSk7CiAgICB9CiAgICByZXR1cm4gbGlnaHQuY29sb3IgKiAoKHJhbmdlQXR0ZW51YXRpb24gKiBzcG90QXR0ZW51YXRpb24pICogbGlnaHQuaW50ZW5zaXR5KTsKfQoKZmxvYXQzIEZfU2NobGljayhmbG9hdDMgZjAsIGZsb2F0MyBmOTAsIGZsb2F0IFZkb3RIKQp7CiAgICByZXR1cm4gZjAgKyAoKGY5MCAtIGYwKSAqIHBvdyhjbGFtcCgxLjBmIC0gVmRvdEgsIDAuMGYsIDEuMGYpLCA1LjBmKSk7Cn0KCmZsb2F0MyBCUkRGX2xhbWJlcnRpYW4oZmxvYXQzIGYwLCBmbG9hdDMgZjkwLCBmbG9hdDMgZGlmZnVzZUNvbG9yLCBmbG9hdCBWZG90SCkKewogICAgZmxvYXQzIHBhcmFtID0gZjA7CiAgICBmbG9hdDMgcGFyYW1fMSA9IGY5MDsKICAgIGZsb2F0IHBhcmFtXzIgPSBWZG90SDsKICAgIHJldHVybiAoMS4wZi54eHggLSBGX1NjaGxpY2socGFyYW0sIHBhcmFtXzEsIHBhcmFtXzIpKSAqIChkaWZmdXNlQ29sb3IgKiAwLjMxODMwOTg3MzM0MjUxNDAzODA4NTkzNzVmLnh4eCk7Cn0KCmZsb2F0IFZfR0dYKGZsb2F0IE5kb3RMLCBmbG9hdCBOZG90ViwgZmxvYXQgYWxwaGFSb3VnaG5lc3MpCnsKICAgIGZsb2F0IF8zOTggPSBhbHBoYVJvdWdobmVzcyAqIGFscGhhUm91Z2huZXNzOwogICAgZmxvYXQgXzQwNSA9IDEuMGYgLSBfMzk4OwogICAgZmxvYXQgXzQyNiA9IChOZG90TCAqIHNxcnQoKChOZG90ViAqIE5kb3RWKSAqIF80MDUpICsgXzM5OCkpICsgKE5kb3RWICogc3FydCgoKE5kb3RMICogTmRvdEwpICogXzQwNSkgKyBfMzk4KSk7CiAgICBpZiAoXzQyNiA+IDAuMGYpCiAgICB7CiAgICAgICAgcmV0dXJuIDAuNWYgLyBfNDI2OwogICAgfQogICAgcmV0dXJuIDAuMGY7Cn0KCmZsb2F0IERfR0dYKGZsb2F0IE5kb3RILCBmbG9hdCBhbHBoYVJvdWdobmVzcykKewogICAgZmxvYXQgXzQ0MCA9IGFscGhhUm91Z2huZXNzICogYWxwaGFSb3VnaG5lc3M7CiAgICBmbG9hdCBfNDQ4ID0gKChOZG90SCAqIE5kb3RIKSAqIChfNDQwIC0gMS4wZikpICsgMS4wZjsKICAgIHJldHVybiBfNDQwIC8gKCgzLjE0MTU5Mjc0MTAxMjU3MzI0MjE4NzVmICogXzQ0OCkgKiBfNDQ4KTsKfQoKZmxvYXQzIEJSREZfc3BlY3VsYXJHR1goZmxvYXQzIGYwLCBmbG9hdDMgZjkwLCBmbG9hdCBhbHBoYVJvdWdobmVzcywgZmxvYXQgVmRvdEgsIGZsb2F0IE5kb3RMLCBmbG9hdCBOZG90ViwgZmxvYXQgTmRvdEgpCnsKICAgIGZsb2F0MyBwYXJhbSA9IGYwOwogICAgZmxvYXQzIHBhcmFtXzEgPSBmOTA7CiAgICBmbG9hdCBwYXJhbV8yID0gVmRvdEg7CiAgICBmbG9hdCBwYXJhbV8zID0gTmRvdEw7CiAgICBmbG9hdCBwYXJhbV80ID0gTmRvdFY7CiAgICBmbG9hdCBwYXJhbV81ID0gYWxwaGFSb3VnaG5lc3M7CiAgICBmbG9hdCBwYXJhbV82ID0gTmRvdEg7CiAgICBmbG9hdCBwYXJhbV83ID0gYWxwaGFSb3VnaG5lc3M7CiAgICByZXR1cm4gKEZfU2NobGljayhwYXJhbSwgcGFyYW1fMSwgcGFyYW1fMikgKiBWX0dHWChwYXJhbV8zLCBwYXJhbV80LCBwYXJhbV81KSkgKiBEX0dHWChwYXJhbV82LCBwYXJhbV83KTsKfQoKZmxvYXQ0IGdldEVtaXNzaXZlVGV4dHVyZSgpCnsKICAgIHJldHVybiB1X2VtaXNzaXZlVGV4dHVyZS5TYW1wbGUoX3VfZW1pc3NpdmVUZXh0dXJlX3NhbXBsZXIsIHZfdXYxKTsKfQoKZmxvYXQzIGxpbmVhclRvc1JHQihmbG9hdDMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NWYueHh4KTsKfQoKdm9pZCBmcmFnX21haW4oKQp7CiAgICBmbG9hdDQgXzExNTIgPSBnZXRCYXNlQ29sb3IoKTsKICAgIGZsb2F0MyBfMTUwOCA9IGdldE5vcm1hbEluZm8oKS5uOwogICAgZmxvYXQzIF8xNTEyID0gMC4wZi54eHg7CiAgICBmbG9hdCBfMTUxMyA9IDAuMGY7CiAgICBmbG9hdDMgXzE1MTQgPSAwLjBmLnh4eDsKICAgIGZsb2F0MyBfMTUxNSA9IDAuMGYueHh4OwogICAgZmxvYXQzIF8xMTY3ID0gXzExNTIueHl6OwogICAgTWF0ZXJpYWxJbmZvIF8xNTM1ID0geyAwLjBmLCAwLjBmLnh4eCwgMC4wZiwgMC4wZi54eHgsIDAuMGYueHh4LCAwLjBmLCAwLjBmLnh4eCwgXzExNjcgfTsKICAgIE1hdGVyaWFsSW5mbyBwYXJhbSA9IF8xNTM1OwogICAgZmxvYXQgcGFyYW1fMSA9IDAuMDM5OTk5OTk5MTA1OTMwMzI4MzY5MTQwNjI1ZjsKICAgIE1hdGVyaWFsSW5mbyBfMTE3NyA9IGdldE1ldGFsbGljUm91Z2huZXNzSW5mbyhwYXJhbSwgcGFyYW1fMSk7CiAgICBfMTUxMiA9IF8xMTc3LmYwOwogICAgXzE1MTQgPSBfMTE3Ny5hbGJlZG9Db2xvcjsKICAgIGZsb2F0IF8xMTgwID0gY2xhbXAoXzExNzcucGVyY2VwdHVhbFJvdWdobmVzcywgMC4wZiwgMS4wZik7CiAgICBfMTUxMyA9IF8xMTgwICogXzExODA7CiAgICBfMTUxNSA9IGNsYW1wKG1heChtYXgoXzExNzcuZjAueCwgXzExNzcuZjAueSksIF8xMTc3LmYwLnopICogNTAuMGYsIDAuMGYsIDEuMGYpLnh4eDsKICAgIGZsb2F0MyBmX3NwZWN1bGFyID0gMC4wZi54eHg7CiAgICBmbG9hdDMgZl9lbWlzc2l2ZSA9IDAuMGYueHh4OwogICAgZmxvYXQzIGZfZGlmZnVzZSA9IChwYnJQYXJhbXNfYW1iaWVudExpZ2h0ICogcG93KHBiclBhcmFtc19hbWJpZW50RmFjdG9yLCAyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjVmKSkgKiBfMTE2NzsKICAgIGZsb2F0NCBfMTIyNSA9IGdldE9jY2x1c2lvblRleHR1cmUoKTsKICAgIGZsb2F0IF8xMjI2ID0gXzEyMjUueDsKICAgIGZfZGlmZnVzZSAqPSBfMTIyNjsKICAgIGZfc3BlY3VsYXIgKj0gXzEyMjY7CiAgICBmbG9hdDMgXzEyNTIgPSBub3JtYWxpemUobGlnaHRpbmdfZXllUG9zLnh5eiAtIHZfcG9zaXRpb24pOwogICAgZmxvYXQzIHBvaW50VG9MaWdodDsKICAgIGZvciAoaW50IGkgPSAwOyBpIDwgNjsgaSsrKQogICAgewogICAgICAgIGludCBfMTI2NSA9IGludChsaWdodGluZ19wb3NpdGlvbl90eXBlW2ldLncpOwogICAgICAgIGJvb2wgXzEyOTYgPSAobGlnaHRpbmdfaW5Db25lX291Q29uZV9zaGFkb3dzX2Nhc2NhZGVzW2ldLnogPCAwLjBmKSA/IGZhbHNlIDogdHJ1ZTsKICAgICAgICBpbnQgXzEzMDAgPSBpbnQobGlnaHRpbmdfaW5Db25lX291Q29uZV9zaGFkb3dzX2Nhc2NhZGVzW2ldLnopOwogICAgICAgIGludCBfMTMwNCA9IGludChsaWdodGluZ19pbkNvbmVfb3VDb25lX3NoYWRvd3NfY2FzY2FkZXNbaV0udyk7CiAgICAgICAgaWYgKGxpZ2h0aW5nX2NvbG9yX2ludGVuc2l0eVtpXS53ID4gMC4wZikKICAgICAgICB7CiAgICAgICAgICAgIGlmIChfMTI2NSAhPSAwKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBwb2ludFRvTGlnaHQgPSBsaWdodGluZ19wb3NpdGlvbl90eXBlW2ldLnh5eiAtIHZfcG9zaXRpb247CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBwb2ludFRvTGlnaHQgPSAtbGlnaHRpbmdfZGlyZWN0aW9uX3JhbmdlW2ldLnh5ejsKICAgICAgICAgICAgfQogICAgICAgICAgICBmbG9hdDMgXzEzMjcgPSBub3JtYWxpemUocG9pbnRUb0xpZ2h0KTsKICAgICAgICAgICAgZmxvYXQzIF8xMzMyID0gbm9ybWFsaXplKF8xMzI3ICsgXzEyNTIpOwogICAgICAgICAgICBmbG9hdDMgcGFyYW1fMiA9IF8xNTA4OwogICAgICAgICAgICBmbG9hdDMgcGFyYW1fMyA9IF8xMzI3OwogICAgICAgICAgICBmbG9hdCBfMTMzOCA9IGNsYW1wZWREb3QocGFyYW1fMiwgcGFyYW1fMyk7CiAgICAgICAgICAgIGZsb2F0MyBwYXJhbV80ID0gXzE1MDg7CiAgICAgICAgICAgIGZsb2F0MyBwYXJhbV81ID0gXzEyNTI7CiAgICAgICAgICAgIGZsb2F0IF8xMzQ0ID0gY2xhbXBlZERvdChwYXJhbV80LCBwYXJhbV81KTsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzYgPSBfMTUwODsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzcgPSBfMTMzMjsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzggPSBfMTMyNzsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzkgPSBfMTMzMjsKICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzEwID0gXzEyNTI7CiAgICAgICAgICAgIGZsb2F0MyBwYXJhbV8xMSA9IF8xMzMyOwogICAgICAgICAgICBmbG9hdCBfMTM2MiA9IGNsYW1wZWREb3QocGFyYW1fMTAsIHBhcmFtXzExKTsKICAgICAgICAgICAgZmxvYXQgc2hhZG93ID0gMS4wZjsKICAgICAgICAgICAgaWYgKF8xMjk2KQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoXzEyNjUgPT0gMikKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpbnQgcGFyYW1fMTIgPSBfMTMwMDsKICAgICAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8xMyA9IF8xMzM4OwogICAgICAgICAgICAgICAgICAgIHNoYWRvdyA9IDEuMGYgLSBzaGFkb3dDYWxjdWxhdGlvblBDRihwYXJhbV8xMiwgcGFyYW1fMTMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGlmIChfMTI2NSA9PSAwKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaW50IHBhcmFtXzE0ID0gXzEzMDA7CiAgICAgICAgICAgICAgICAgICAgICAgIGludCBwYXJhbV8xNSA9IF8xMzA0OwogICAgICAgICAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8xNiA9IF8xMzM4OwogICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3cgPSAxLjBmIC0gc2hhZG93Q2FzY2FkZWRDYWxjdWxhdGlvblBDRihwYXJhbV8xNCwgcGFyYW1fMTUsIHBhcmFtXzE2KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8xMjY1ID09IDEpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludCBwYXJhbV8xNyA9IF8xMzAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzE4ID0gLXBvaW50VG9MaWdodDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzE5ID0gXzEzMzg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3cgPSAxLjBmIC0gc2hhZG93Q3ViZUNhbGN1bGF0aW9uUENGKHBhcmFtXzE3LCBwYXJhbV8xOCwgcGFyYW1fMTkpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgoXzEzMzggPiAwLjBmKSB8fCAoXzEzNDQgPiAwLjBmKSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgTGlnaHQgXzE1ODAgPSB7IF8xMjY1LCBsaWdodGluZ19kaXJlY3Rpb25fcmFuZ2VbaV0ueHl6LCBsaWdodGluZ19jb2xvcl9pbnRlbnNpdHlbaV0ueHl6LCBsaWdodGluZ19wb3NpdGlvbl90eXBlW2ldLnh5eiwgbGlnaHRpbmdfZGlyZWN0aW9uX3JhbmdlW2ldLncsIGxpZ2h0aW5nX2NvbG9yX2ludGVuc2l0eVtpXS53LCBsaWdodGluZ19pbkNvbmVfb3VDb25lX3NoYWRvd3NfY2FzY2FkZXNbaV0ueCwgbGlnaHRpbmdfaW5Db25lX291Q29uZV9zaGFkb3dzX2Nhc2NhZGVzW2ldLnksIF8xMjk2LCBfMTMwMCwgXzEzMDQgfTsKICAgICAgICAgICAgICAgIExpZ2h0IHBhcmFtXzIwID0gXzE1ODA7CiAgICAgICAgICAgICAgICBmbG9hdDMgcGFyYW1fMjEgPSBwb2ludFRvTGlnaHQ7CiAgICAgICAgICAgICAgICBmbG9hdDMgXzE0MjggPSBnZXRMaWdoSW50ZW5zaXR5KHBhcmFtXzIwLCBwYXJhbV8yMSk7CiAgICAgICAgICAgICAgICBmbG9hdDMgcGFyYW1fMjIgPSBfMTUxMjsKICAgICAgICAgICAgICAgIGZsb2F0MyBwYXJhbV8yMyA9IF8xNTE1OwogICAgICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzI0ID0gXzE1MTQ7CiAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8yNSA9IF8xMzYyOwogICAgICAgICAgICAgICAgZl9kaWZmdXNlICs9ICgoKF8xNDI4ICogc2hhZG93KSAqIF8xMzM4KSAqIEJSREZfbGFtYmVydGlhbihwYXJhbV8yMiwgcGFyYW1fMjMsIHBhcmFtXzI0LCBwYXJhbV8yNSkpOwogICAgICAgICAgICAgICAgZmxvYXQzIHBhcmFtXzI2ID0gXzE1MTI7CiAgICAgICAgICAgICAgICBmbG9hdDMgcGFyYW1fMjcgPSBfMTUxNTsKICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzI4ID0gXzE1MTM7CiAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8yOSA9IF8xMzYyOwogICAgICAgICAgICAgICAgZmxvYXQgcGFyYW1fMzAgPSBfMTMzODsKICAgICAgICAgICAgICAgIGZsb2F0IHBhcmFtXzMxID0gXzEzNDQ7CiAgICAgICAgICAgICAgICBmbG9hdCBwYXJhbV8zMiA9IGNsYW1wZWREb3QocGFyYW1fNiwgcGFyYW1fNyk7CiAgICAgICAgICAgICAgICBmX3NwZWN1bGFyICs9ICgoKF8xNDI4ICogc2hhZG93KSAqIF8xMzM4KSAqIEJSREZfc3BlY3VsYXJHR1gocGFyYW1fMjYsIHBhcmFtXzI3LCBwYXJhbV8yOCwgcGFyYW1fMjksIHBhcmFtXzMwLCBwYXJhbV8zMSwgcGFyYW1fMzIpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGZfZW1pc3NpdmUgPSBwYnJQYXJhbXNfZW1pc3NpdmVGYWN0b3I7CiAgICBmbG9hdDMgcGFyYW1fMzMgPSBnZXRFbWlzc2l2ZVRleHR1cmUoKS54eXo7CiAgICBmbG9hdDMgXzE0ODMgPSBmX2VtaXNzaXZlOwogICAgZmxvYXQzIF8xNDg0ID0gXzE0ODMgKiBzUkdCVG9MaW5lYXIocGFyYW1fMzMpOwogICAgZl9lbWlzc2l2ZSA9IF8xNDg0OwogICAgZmxvYXQzIHBhcmFtXzM0ID0gKF8xNDg0ICsgZl9kaWZmdXNlKSArIGZfc3BlY3VsYXI7CiAgICBnX2ZpbmFsQ29sb3IgPSBmbG9hdDQobGluZWFyVG9zUkdCKHBhcmFtXzM0KSwgXzExNTIudyk7Cn0KClNQSVJWX0Nyb3NzX091dHB1dCBtYWluKFNQSVJWX0Nyb3NzX0lucHV0IHN0YWdlX2lucHV0KQp7CiAgICB2X3V2MSA9IHN0YWdlX2lucHV0LnZfdXYxOwogICAgdl9wb3NpdGlvbiA9IHN0YWdlX2lucHV0LnZfcG9zaXRpb247CiAgICB2X25vcm1hbCA9IHN0YWdlX2lucHV0LnZfbm9ybWFsOwogICAgdl9saWdodFByb2pQb3MgPSBzdGFnZV9pbnB1dC52X2xpZ2h0UHJvalBvczsKICAgIHZfY2xpcFNwYWNlUG9zWiA9IHN0YWdlX2lucHV0LnZfY2xpcFNwYWNlUG9zWjsKICAgIHZfdXYyID0gc3RhZ2VfaW5wdXQudl91djI7CiAgICBmcmFnX21haW4oKTsKICAgIFNQSVJWX0Nyb3NzX091dHB1dCBzdGFnZV9vdXRwdXQ7CiAgICBzdGFnZV9vdXRwdXQuZ19maW5hbENvbG9yID0gZ19maW5hbENvbG9yOwogICAgcmV0dXJuIHN0YWdlX291dHB1dDsKfQpSRUZMQwUAAG1lc2hfVXYxUHVjU2h3UGNmTm9yU2tpX2hsc2w1AAAAAAAAAAsAAAADAAAADAAAAHVfYmFzZUNvbG9yVGV4dHVyZQAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlAAAAAAAAAgAAAAEAAAAyRCAgVEZMVHVfb2NjbHVzaW9uVGV4dHVyZQAAAAAAAAAAAAAAAAAAAgAAAAIAAAAyRCAgVEZMVHVfZW1pc3NpdmVUZXh0dXJlAAAAAAAAAAAAAAAAAAAAAgAAAAMAAAAyRCAgVEZMVHVfc2hhZG93TWFwMQAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAQAAAAyRCAgVEZMVHVfc2hhZG93TWFwMgAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAUAAAAyRCAgVEZMVHVfc2hhZG93TWFwMwAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAyRCAgVEZMVHVfc2hhZG93TWFwNAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAcAAAAyRCAgVEZMVHVfc2hhZG93TWFwNQAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAgAAAAyRCAgVEZMVHVfc2hhZG93TWFwNgAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAkAAAAyRCAgVEZMVHVfc2hhZG93Q3ViZU1hcDEAAAAAAAAAAAAAAAAAAAAAAgAAAAoAAABDVUJFVEZMVAYAAAB1X2ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAWJhc2VDb2xvckZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAAbWV0YWxsaWNGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABAAAAByb3VnaG5lc3NGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAFAAAAGVtaXNzaXZlRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAgAAAAYW1iaWVudExpZ2h0AAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAADAAAABhbWJpZW50RmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAPAAAAAEAAAB1X2ZzX3NoYWRvd3MAAAAAAAAAAAAAAAAAAAAAAAAAAHVTaGFkb3dzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABwAAAAAWJpYXNfdGV4U2l6ZV9uZWFyRmFyAAAAAAAAAAAAAAAARkxUNAcAAAAAAAAABQAAAHVfZnNfbGlnaHRpbmcAAAAAAAAAAAAAAAAAAAAAAAAAbGlnaHRpbmcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAJABAAABZGlyZWN0aW9uX3JhbmdlAAAAAAAAAAAAAAAAAAAAAABGTFQ0BgAAAAAAAABjb2xvcl9pbnRlbnNpdHkAAAAAAAAAAAAAAAAAAAAAAEZMVDQGAAAAYAAAAHBvc2l0aW9uX3R5cGUAAAAAAAAAAAAAAAAAAAAAAAAARkxUNAYAAADAAAAAaW5Db25lX291Q29uZV9zaGFkb3dzX2Nhc2NhZGVzAABGTFQ0BgAAACABAABleWVQb3MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAgAEAAA==";

std::string getBase64Shader(std::string name) {
    if (name == "mesh_Uv1PucNorNmpTanVc4Fog_hlsl5") {
        return mesh_Uv1PucNorNmpTanVc4Fog_hlsl5;
    } else if (name == "mesh_Uv1PucNorNmpTanFog_hlsl5") {
        return mesh_Uv1PucNorNmpTanFog_hlsl5;
    } else if (name == "sky_hlsl5") {
        return sky_hlsl5;
    } else if (name == "ui_TexVc4_hlsl5") {
        return ui_TexVc4_hlsl5;
    } else if (name == "mesh_UltUv1Vc4TxrFog_hlsl5") {
        return mesh_UltUv1Vc4TxrFog_hlsl5;
    } else if (name == "mesh_Uv1PucNorVc4_hlsl5") {
        return mesh_Uv1PucNorVc4_hlsl5;
    } else if (name == "mesh_PucShwPcfNorTanFogMtaMnrMtg_hlsl5") {
        return mesh_PucShwPcfNorTanFogMtaMnrMtg_hlsl5;
    } else if (name == "mesh_Uv1PucShwPcfNorVc4Fog_hlsl5") {
        return mesh_Uv1PucShwPcfNorVc4Fog_hlsl5;
    } else if (name == "mesh_Uv1PucShwPcfNorFog_hlsl5") {
        return mesh_Uv1PucShwPcfNorFog_hlsl5;
    } else if (name == "mesh_Uv1PucNorNmpTanVc4Ski_hlsl5") {
        return mesh_Uv1PucNorNmpTanVc4Ski_hlsl5;
    } else if (name == "mesh_UltUv1_hlsl5") {
        return mesh_UltUv1_hlsl5;
    } else if (name == "depth_Ski_hlsl5") {
        return depth_Ski_hlsl5;
    } else if (name == "depth_hlsl5") {
        return depth_hlsl5;
    } else if (name == "mesh_Uv1PucNor_hlsl5") {
        return mesh_Uv1PucNor_hlsl5;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTan_hlsl5") {
        return mesh_Uv1PucShwPcfNorNmpTan_hlsl5;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTanVc4Fog_hlsl5") {
        return mesh_Uv1PucShwPcfNorNmpTanVc4Fog_hlsl5;
    } else if (name == "mesh_Uv1PucNorNmpTanVc4FogSki_hlsl5") {
        return mesh_Uv1PucNorNmpTanVc4FogSki_hlsl5;
    } else if (name == "mesh_PucShwPcfNorTanMtaMnr_hlsl5") {
        return mesh_PucShwPcfNorTanMtaMnr_hlsl5;
    } else if (name == "mesh_UltUv1Vc4_hlsl5") {
        return mesh_UltUv1Vc4_hlsl5;
    } else if (name == "mesh_UltUv1Vc4Txr_hlsl5") {
        return mesh_UltUv1Vc4Txr_hlsl5;
    } else if (name == "points_TexVc4Txr_hlsl5") {
        return points_TexVc4Txr_hlsl5;
    } else if (name == "mesh_PucShwPcfNorTanFogMtaMnr_hlsl5") {
        return mesh_PucShwPcfNorTanFogMtaMnr_hlsl5;
    } else if (name == "points_Vc4_hlsl5") {
        return points_Vc4_hlsl5;
    } else if (name == "mesh_PucShwPcfNorTanMtaMnrMtg_hlsl5") {
        return mesh_PucShwPcfNorTanMtaMnrMtg_hlsl5;
    } else if (name == "mesh_Uv1PucNorFog_hlsl5") {
        return mesh_Uv1PucNorFog_hlsl5;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTanVc4_hlsl5") {
        return mesh_Uv1PucShwPcfNorNmpTanVc4_hlsl5;
    } else if (name == "ui_Ftx_hlsl5") {
        return ui_Ftx_hlsl5;
    } else if (name == "mesh_PucShwPcfNor_hlsl5") {
        return mesh_PucShwPcfNor_hlsl5;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTanFog_hlsl5") {
        return mesh_Uv1PucShwPcfNorNmpTanFog_hlsl5;
    } else if (name == "mesh_Uv1PucNorNmpTanVc4_hlsl5") {
        return mesh_Uv1PucNorNmpTanVc4_hlsl5;
    } else if (name == "ui_Vc4_hlsl5") {
        return ui_Vc4_hlsl5;
    } else if (name == "mesh_Uv1PucNorNmpTan_hlsl5") {
        return mesh_Uv1PucNorNmpTan_hlsl5;
    } else if (name == "mesh_PucShwPcfNorSki_hlsl5") {
        return mesh_PucShwPcfNorSki_hlsl5;
    } else if (name == "mesh_UltUv1Fog_hlsl5") {
        return mesh_UltUv1Fog_hlsl5;
    } else if (name == "points_TexVc4_hlsl5") {
        return points_TexVc4_hlsl5;
    } else if (name == "mesh_Uv1PucShwPcfNorFogSki_hlsl5") {
        return mesh_Uv1PucShwPcfNorFogSki_hlsl5;
    } else if (name == "mesh_Uv1PucShwPcfNorVc4_hlsl5") {
        return mesh_Uv1PucShwPcfNorVc4_hlsl5;
    } else if (name == "depth_Mta_hlsl5") {
        return depth_Mta_hlsl5;
    } else if (name == "mesh_Uv1PucNorVc4Fog_hlsl5") {
        return mesh_Uv1PucNorVc4Fog_hlsl5;
    } else if (name == "mesh_UltUv1Vc4Fog_hlsl5") {
        return mesh_UltUv1Vc4Fog_hlsl5;
    } else if (name == "mesh_Uv1PucShwPcfNor_hlsl5") {
        return mesh_Uv1PucShwPcfNor_hlsl5;
    } else if (name == "mesh_Uv1PucShwPcfNorSki_hlsl5") {
        return mesh_Uv1PucShwPcfNorSki_hlsl5;
    }
    return "";
}
#endif //SHADER_hlsl5_h
