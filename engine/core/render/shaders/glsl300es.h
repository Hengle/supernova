#ifndef SHADER_glsl300es_h
#define SHADER_glsl300es_h

#include <string>

static const std::string mesh_Uv1PucNorNmpTan_glsl300es = "";
static const std::string mesh_Uv1PucShwPcfNorVc4_glsl300es = "";
static const std::string mesh_Uv1PucNorNmpTanVc4Ski_glsl300es = "";
static const std::string ui_Ftx_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUePAgAAVkVSVENPREU2AQAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c191aVBhcmFtc1s0XTsKb3V0IHZlYzIgdl91djE7CmxheW91dChsb2NhdGlvbiA9IDEpIGluIHZlYzIgYV90ZXhjb29yZDE7CmxheW91dChsb2NhdGlvbiA9IDApIGluIHZlYzMgYV9wb3NpdGlvbjsKCnZvaWQgbWFpbigpCnsKICAgIHZfdXYxID0gYV90ZXhjb29yZDE7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c191aVBhcmFtc1swXSwgdV92c191aVBhcmFtc1sxXSwgdV92c191aVBhcmFtc1syXSwgdV92c191aVBhcmFtc1szXSkgKiB2ZWM0KGFfcG9zaXRpb24sIDEuMCk7Cn0KClJFRkxFAQAAdWlfRnR4X2dsc2wzMDBlcwAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAEAAAABAAAAYV90ZXhjb29yZDEAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMmFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAdV92c191aVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAB1aVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUd0AwAARlJBR0NPREWDAgAAI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCB2ZWM0IHVfZnNfdWlQYXJhbXNbMV07CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfdWlUZXh0dXJlOwoKaW4gaGlnaHAgdmVjMiB2X3V2MTsKbGF5b3V0KGxvY2F0aW9uID0gMCkgb3V0IGhpZ2hwIHZlYzQgZ19maW5hbENvbG9yOwoKaGlnaHAgdmVjNCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2ZWM0KDEuMCk7Cn0KCmhpZ2hwIHZlYzQgZ2V0QmFzZUNvbG9yKCkKewogICAgcmV0dXJuICh1X2ZzX3VpUGFyYW1zWzBdICogdmVjNCgxLjAsIDEuMCwgMS4wLCB0ZXh0dXJlKHVfdWlUZXh0dXJlLCB2X3V2MSkueCkpICogZ2V0VmVydGV4Q29sb3IoKTsKfQoKaGlnaHAgdmVjMyBsaW5lYXJUb3NSR0IoaGlnaHAgdmVjMyBjb2xvcikKewogICAgcmV0dXJuIHBvdyhjb2xvciwgdmVjMygwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzUpKTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCBfNjMgPSBnZXRCYXNlQ29sb3IoKTsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBfNjMueHl6OwogICAgZ19maW5hbENvbG9yID0gdmVjNChsaW5lYXJUb3NSR0IocGFyYW0pLCBfNjMudyk7Cn0KClJFRkzdAAAAdWlfRnR4X2dsc2wzMDBlcwAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAdV91aVRleHR1cmUAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUAQAAAHVfZnNfdWlQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAdWlQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAABY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAAA=";
static const std::string ui_Vc4_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUeLAgAAVkVSVENPREUyAQAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c191aVBhcmFtc1s0XTsKb3V0IHZlYzQgdl9jb2xvcjsKbGF5b3V0KGxvY2F0aW9uID0gMSkgaW4gdmVjNCBhX2NvbG9yOwpsYXlvdXQobG9jYXRpb24gPSAwKSBpbiB2ZWMzIGFfcG9zaXRpb247Cgp2b2lkIG1haW4oKQp7CiAgICB2X2NvbG9yID0gYV9jb2xvcjsKICAgIGdsX1Bvc2l0aW9uID0gbWF0NCh1X3ZzX3VpUGFyYW1zWzBdLCB1X3ZzX3VpUGFyYW1zWzFdLCB1X3ZzX3VpUGFyYW1zWzJdLCB1X3ZzX3VpUGFyYW1zWzNdKSAqIHZlYzQoYV9wb3NpdGlvbiwgMS4wKTsKfQoKUkVGTEUBAAB1aV9WYzRfZ2xzbDMwMGVzAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAQAAAAEAAABhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABOT1JNQUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0YV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAB1X3ZzX3VpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAHVpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAW12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAU1RBR+cCAABGUkFHQ09ERSYCAAAjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBoaWdocCBpbnQ7Cgp1bmlmb3JtIGhpZ2hwIHZlYzQgdV9mc191aVBhcmFtc1sxXTsKaW4gaGlnaHAgdmVjNCB2X2NvbG9yOwpsYXlvdXQobG9jYXRpb24gPSAwKSBvdXQgaGlnaHAgdmVjNCBnX2ZpbmFsQ29sb3I7CgpoaWdocCB2ZWM0IGdldFZlcnRleENvbG9yKCkKewogICAgcmV0dXJuIHZfY29sb3I7Cn0KCmhpZ2hwIHZlYzQgZ2V0QmFzZUNvbG9yKCkKewogICAgcmV0dXJuIHVfZnNfdWlQYXJhbXNbMF0gKiBnZXRWZXJ0ZXhDb2xvcigpOwp9CgpoaWdocCB2ZWMzIGxpbmVhclRvc1JHQihoaWdocCB2ZWMzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCB2ZWMzKDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NSkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IF81MCA9IGdldEJhc2VDb2xvcigpOwogICAgaGlnaHAgdmVjMyBwYXJhbSA9IF81MC54eXo7CiAgICBnX2ZpbmFsQ29sb3IgPSB2ZWM0KGxpbmVhclRvc1JHQihwYXJhbSksIF81MC53KTsKfQoKUkVGTK0AAAB1aV9WYzRfZ2xzbDMwMGVzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAdV9mc191aVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAB1aVBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAFjb2xvcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAA==";
static const std::string mesh_PucShwPcfNorTanFogMtaMnr_glsl300es = "";
static const std::string depth_Ski_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUcJCgAAVkVSVENPREXnBwAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c19za2lubmluZ1syODBdOwp1bmlmb3JtIHZlYzQgdV92c19kZXB0aFBhcmFtc1s0XTsKbGF5b3V0KGxvY2F0aW9uID0gMikgaW4gdmVjNCBhX2JvbmVJZHM7CmxheW91dChsb2NhdGlvbiA9IDEpIGluIHZlYzQgYV9ib25lV2VpZ2h0czsKbGF5b3V0KGxvY2F0aW9uID0gMCkgaW4gdmVjMyBhX3Bvc2l0aW9uOwpvdXQgdmVjMiB2X3Byb2paVzsKCnZlYzMgZ2V0TW9ycGhQb3NpdGlvbih2ZWMzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKbWF0NCBnZXRCb25lVHJhbnNmb3JtKCkKewogICAgbWF0NCBfNTEgPSBtYXQ0KHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy54ICogNjU1MzUuMCkgKiA0ICsgMF0sIHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy54ICogNjU1MzUuMCkgKiA0ICsgMV0sIHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy54ICogNjU1MzUuMCkgKiA0ICsgMl0sIHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy54ICogNjU1MzUuMCkgKiA0ICsgM10pICogYV9ib25lV2VpZ2h0cy54OwogICAgbWF0NCBfNzUgPSBtYXQ0KHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy55ICogNjU1MzUuMCkgKiA0ICsgMF0sIHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy55ICogNjU1MzUuMCkgKiA0ICsgMV0sIHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy55ICogNjU1MzUuMCkgKiA0ICsgMl0sIHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy55ICogNjU1MzUuMCkgKiA0ICsgM10pICogYV9ib25lV2VpZ2h0cy55OwogICAgbWF0NCBfOTkgPSBtYXQ0KHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy56ICogNjU1MzUuMCkgKiA0ICsgMF0sIHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy56ICogNjU1MzUuMCkgKiA0ICsgMV0sIHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy56ICogNjU1MzUuMCkgKiA0ICsgMl0sIHVfdnNfc2tpbm5pbmdbaW50KGFfYm9uZUlkcy56ICogNjU1MzUuMCkgKiA0ICsgM10pICogYV9ib25lV2VpZ2h0cy56OwogICAgbWF0NCBfMTIzID0gbWF0NCh1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMudyAqIDY1NTM1LjApICogNCArIDBdLCB1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMudyAqIDY1NTM1LjApICogNCArIDFdLCB1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMudyAqIDY1NTM1LjApICogNCArIDJdLCB1X3ZzX3NraW5uaW5nW2ludChhX2JvbmVJZHMudyAqIDY1NTM1LjApICogNCArIDNdKSAqIGFfYm9uZVdlaWdodHMudzsKICAgIHJldHVybiBtYXQ0KCgoXzUxWzBdICsgXzc1WzBdKSArIF85OVswXSkgKyBfMTIzWzBdLCAoKF81MVsxXSArIF83NVsxXSkgKyBfOTlbMV0pICsgXzEyM1sxXSwgKChfNTFbMl0gKyBfNzVbMl0pICsgXzk5WzJdKSArIF8xMjNbMl0sICgoXzUxWzNdICsgXzc1WzNdKSArIF85OVszXSkgKyBfMTIzWzNdKTsKfQoKdmVjMyBnZXRTa2luUG9zaXRpb24oaW5vdXQgdmVjMyBwb3MsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgdmVjNCBfMTUxID0gYm9uZVRyYW5zZm9ybSAqIHZlYzQocG9zLCAxLjApOwogICAgcG9zID0gdmVjMyhfMTUxLnh5eikgLyB2ZWMzKF8xNTEudyk7CiAgICByZXR1cm4gcG9zOwp9Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWMzIHBvcyA9IGFfcG9zaXRpb247CiAgICB2ZWMzIHBhcmFtID0gYV9wb3NpdGlvbjsKICAgIHBvcyA9IGdldE1vcnBoUG9zaXRpb24ocGFyYW0pOwogICAgdmVjMyBwYXJhbV8xID0gcG9zOwogICAgbWF0NCBwYXJhbV8yID0gZ2V0Qm9uZVRyYW5zZm9ybSgpOwogICAgdmVjMyBfMTc5ID0gZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpOwogICAgcG9zID0gXzE3OTsKICAgIGdsX1Bvc2l0aW9uID0gbWF0NCh1X3ZzX2RlcHRoUGFyYW1zWzBdLCB1X3ZzX2RlcHRoUGFyYW1zWzFdLCB1X3ZzX2RlcHRoUGFyYW1zWzJdLCB1X3ZzX2RlcHRoUGFyYW1zWzNdKSAqIHZlYzQoXzE3OSwgMS4wKTsKICAgIHZfcHJvalpXID0gZ2xfUG9zaXRpb24uenc7Cn0KClJFRkwOAgAAZGVwdGhfU2tpX2dsc2wzMDBlcwAAAAAAAAAAAAAAAAADAAAAAAAAAAIAAAACAAAAYV9ib25lSWRzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNGFfYm9uZVdlaWdodHMAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDRhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAAHVfdnNfc2tpbm5pbmcAAAAAAAAAAAAAAAAAAAAAAAAAXzMzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIARAAABYm9uZXNNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0RgAAAAAAAAABAAAAdV92c19kZXB0aFBhcmFtcwAAAAAAAAAAAAAAAAAAAABkZXB0aFBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAQAAAAAFsaWdodE1WUE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUdHAgAARlJBR0NPREUDAgAAI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKbGF5b3V0KGxvY2F0aW9uID0gMCkgb3V0IGhpZ2hwIHZlYzQgZnJhZ19jb2xvcjsKaW4gaGlnaHAgdmVjMiB2X3Byb2paVzsKCmhpZ2hwIHZlYzQgZW5jb2RlRGVwdGgoaGlnaHAgZmxvYXQgdikKewogICAgaGlnaHAgdmVjNCBfMjMgPSBmcmFjdCh2ZWM0KDEuMCwgMjU1LjAsIDY1MDI1LjAsIDE2NTgxMzc1LjApICogdik7CiAgICByZXR1cm4gXzIzIC0gKF8yMy55end3ICogdmVjNCgwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjUsIDAuMDAzOTIxNTY4ODU5MzY4NTYyNjk4MzY0MjU3ODEyNSwgMC4wMDM5MjE1Njg4NTkzNjg1NjI2OTgzNjQyNTc4MTI1LCAwLjApKTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgZmxvYXQgcGFyYW0gPSAoKDAuNSAqIHZfcHJvalpXLngpIC8gdl9wcm9qWlcueSkgKyAwLjU7CiAgICBmcmFnX2NvbG9yID0gZW5jb2RlRGVwdGgocGFyYW0pOwp9CgpSRUZMMAAAAGRlcHRoX1NraV9nbHNsMzAwZXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==";
static const std::string mesh_UltUv1Vc4_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUdNBgAAVkVSVENPREVQBAAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwpsYXlvdXQobG9jYXRpb24gPSAwKSBpbiB2ZWMzIGFfcG9zaXRpb247Cm91dCB2ZWMzIHZfcG9zaXRpb247Cm91dCB2ZWMyIHZfdXYxOwpvdXQgdmVjMiB2X3V2MjsKbGF5b3V0KGxvY2F0aW9uID0gMSkgaW4gdmVjMiBhX3RleGNvb3JkMTsKb3V0IHZlYzQgdl9jb2xvcjsKbGF5b3V0KGxvY2F0aW9uID0gMikgaW4gdmVjNCBhX2NvbG9yOwoKbWF0NCBnZXRCb25lVHJhbnNmb3JtKCkKewogICAgcmV0dXJuIG1hdDQodmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSwgdmVjNCgwLjApKTsKfQoKdmVjMyBnZXRNb3JwaFBvc2l0aW9uKHZlYzMgcG9zKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2ZWMzIGdldFNraW5Qb3NpdGlvbih2ZWMzIHBvcywgbWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2ZWM0IGdldFBvc2l0aW9uKG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgdmVjMyBwYXJhbSA9IGFfcG9zaXRpb247CiAgICB2ZWMzIHBhcmFtXzEgPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIG1hdDQgcGFyYW1fMiA9IGJvbmVUcmFuc2Zvcm07CiAgICByZXR1cm4gdmVjNChnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMiksIDEuMCk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcGFyYW0gPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICB2ZWM0IF82NyA9IGdldFBvc2l0aW9uKHBhcmFtKTsKICAgIHZlYzQgXzc4ID0gbWF0NCh1X3ZzX3BiclBhcmFtc1swXSwgdV92c19wYnJQYXJhbXNbMV0sIHVfdnNfcGJyUGFyYW1zWzJdLCB1X3ZzX3BiclBhcmFtc1szXSkgKiBfNjc7CiAgICB2X3Bvc2l0aW9uID0gdmVjMyhfNzgueHl6KSAvIHZlYzMoXzc4LncpOwogICAgdl91djEgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MiA9IHZlYzIoMC4wKTsKICAgIHZfdXYxID0gYV90ZXhjb29yZDE7CiAgICB2X2NvbG9yID0gYV9jb2xvcjsKICAgIGdsX1Bvc2l0aW9uID0gbWF0NCh1X3ZzX3BiclBhcmFtc1s4XSwgdV92c19wYnJQYXJhbXNbOV0sIHVfdnNfcGJyUGFyYW1zWzEwXSwgdV92c19wYnJQYXJhbXNbMTFdKSAqIF82NzsKfQoKUkVGTOkBAABtZXNoX1VsdFV2MVZjNF9nbHNsMzAwZXMAAAAAAAAAAAMAAAAAAAAAAQAAAAMAAABhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV90ZXhjb29yZDEAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMmFfY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQDAAAAdV92c19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAFtb2RlbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAG5vcm1hbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAABAAAAAbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAIAAAABTVEFHGQYAAEZSQUdDT0RFTAQAACN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIGhpZ2hwIGludDsKCnVuaWZvcm0gaGlnaHAgdmVjNCB1X2ZzX3BiclBhcmFtc1s0XTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9iYXNlQ29sb3JUZXh0dXJlOwoKaW4gaGlnaHAgdmVjNCB2X2NvbG9yOwppbiBoaWdocCB2ZWMyIHZfdXYxOwppbiBoaWdocCB2ZWMzIHZfcG9zaXRpb247CmxheW91dChsb2NhdGlvbiA9IDApIG91dCBoaWdocCB2ZWM0IGdfZmluYWxDb2xvcjsKaW4gaGlnaHAgdmVjMiB2X3V2MjsKCmhpZ2hwIHZlYzMgc1JHQlRvTGluZWFyKGhpZ2hwIHZlYzMgc3JnYkluKQp7CiAgICByZXR1cm4gcG93KHNyZ2JJbiwgdmVjMygyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjUpKTsKfQoKaGlnaHAgdmVjNCBzUkdCVG9MaW5lYXIoaGlnaHAgdmVjNCBzcmdiSW4pCnsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBzcmdiSW4ueHl6OwogICAgcmV0dXJuIHZlYzQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9CgpoaWdocCB2ZWM0IGdldFZlcnRleENvbG9yKCkKewogICAgcmV0dXJuIHZfY29sb3I7Cn0KCmhpZ2hwIHZlYzQgZ2V0QmFzZUNvbG9yKCkKewogICAgaGlnaHAgdmVjNCBiYXNlQ29sb3IgPSB1X2ZzX3BiclBhcmFtc1swXTsKICAgIGhpZ2hwIHZlYzQgcGFyYW0gPSB0ZXh0dXJlKHVfYmFzZUNvbG9yVGV4dHVyZSwgdl91djEpOwogICAgaGlnaHAgdmVjNCBfMTAzID0gYmFzZUNvbG9yOwogICAgaGlnaHAgdmVjNCBfMTA0ID0gXzEwMyAqIHNSR0JUb0xpbmVhcihwYXJhbSk7CiAgICBiYXNlQ29sb3IgPSBfMTA0OwogICAgcmV0dXJuIF8xMDQgKiBnZXRWZXJ0ZXhDb2xvcigpOwp9CgpoaWdocCB2ZWMzIGxpbmVhclRvc1JHQihoaWdocCB2ZWMzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCB2ZWMzKDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NSkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IF8yNTkgPSBnZXRCYXNlQ29sb3IoKTsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBfMjU5Lnh5ejsKICAgIGdfZmluYWxDb2xvciA9IHZlYzQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzI1OS53KTsKfQoKUkVGTLkBAABtZXNoX1VsdFV2MVZjNF9nbHNsMzAwZXMAAAAAAAAAAAAAAAABAAAAAQAAAAYAAAB1X2Jhc2VDb2xvclRleHR1cmUAAAAAAAAAAAAAAAAAAAIAAAAAAAAAMkQgIFRGTFQGAAAAdV9mc19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFiYXNlQ29sb3JGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAG1ldGFsbGljRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAQAAAAcm91Z2huZXNzRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABQAAABlbWlzc2l2ZUZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAIAAAAGFtYmllbnRMaWdodAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAwAAAAYW1iaWVudEZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAADwAAAA=";
static const std::string mesh_Uv1PucShwPcfNorSki_glsl300es = "";
static const std::string mesh_Uv1PucShwPcfNorNmpTan_glsl300es = "";
static const std::string depth_Mta_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUesCAAAVkVSVENPREVaBQAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c19tb3JwaHRhcmdldFsyXTsKdW5pZm9ybSB2ZWM0IHVfdnNfZGVwdGhQYXJhbXNbNF07CmxheW91dChsb2NhdGlvbiA9IDEpIGluIHZlYzMgYV9tb3JwaFRhcmdldDA7CmxheW91dChsb2NhdGlvbiA9IDIpIGluIHZlYzMgYV9tb3JwaFRhcmdldDE7CmxheW91dChsb2NhdGlvbiA9IDMpIGluIHZlYzMgYV9tb3JwaFRhcmdldDQ7CmxheW91dChsb2NhdGlvbiA9IDQpIGluIHZlYzMgYV9tb3JwaFRhcmdldDU7CmxheW91dChsb2NhdGlvbiA9IDUpIGluIHZlYzMgYV9tb3JwaFRhcmdldDY7CmxheW91dChsb2NhdGlvbiA9IDYpIGluIHZlYzMgYV9tb3JwaFRhcmdldDc7CmxheW91dChsb2NhdGlvbiA9IDApIGluIHZlYzMgYV9wb3NpdGlvbjsKb3V0IHZlYzIgdl9wcm9qWlc7Cgp2ZWMzIGdldE1vcnBoUG9zaXRpb24oaW5vdXQgdmVjMyBwb3MpCnsKICAgIHBvcyArPSAoYV9tb3JwaFRhcmdldDAgKiB1X3ZzX21vcnBodGFyZ2V0WzBdLngpOwogICAgcG9zICs9IChhX21vcnBoVGFyZ2V0MSAqIHVfdnNfbW9ycGh0YXJnZXRbMF0ueSk7CiAgICBwb3MgKz0gKGFfbW9ycGhUYXJnZXQ0ICogdV92c19tb3JwaHRhcmdldFsxXS54KTsKICAgIHBvcyArPSAoYV9tb3JwaFRhcmdldDUgKiB1X3ZzX21vcnBodGFyZ2V0WzFdLnkpOwogICAgcG9zICs9IChhX21vcnBoVGFyZ2V0NiAqIHVfdnNfbW9ycGh0YXJnZXRbMV0ueik7CiAgICBwb3MgKz0gKGFfbW9ycGhUYXJnZXQ3ICogdV92c19tb3JwaHRhcmdldFsxXS53KTsKICAgIHJldHVybiBwb3M7Cn0KCm1hdDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIHJldHVybiBtYXQ0KHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2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";
static const std::string mesh_Uv1PucShwPcfNor_glsl300es = "";
static const std::string mesh_Uv1PucNorNmpTanVc4Fog_glsl300es = "";
static const std::string mesh_Uv1PucShwPcfNorNmpTanVc4_glsl300es = "";
static const std::string mesh_UltUv1Vc4TxrFog_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUc8BwAAVkVSVENPREXCBAAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwp1bmlmb3JtIHZlYzQgdV92c19zcHJpdGVQYXJhbXNbMV07CmxheW91dChsb2NhdGlvbiA9IDApIGluIHZlYzMgYV9wb3NpdGlvbjsKb3V0IHZlYzMgdl9wb3NpdGlvbjsKb3V0IHZlYzIgdl91djE7Cm91dCB2ZWMyIHZfdXYyOwpsYXlvdXQobG9jYXRpb24gPSAxKSBpbiB2ZWMyIGFfdGV4Y29vcmQxOwpvdXQgdmVjNCB2X2NvbG9yOwpsYXlvdXQobG9jYXRpb24gPSAyKSBpbiB2ZWM0IGFfY29sb3I7CgptYXQ0IGdldEJvbmVUcmFuc2Zvcm0oKQp7CiAgICByZXR1cm4gbWF0NCh2ZWM0KDAuMCksIHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCkpOwp9Cgp2ZWMzIGdldE1vcnBoUG9zaXRpb24odmVjMyBwb3MpCnsKICAgIHJldHVybiBwb3M7Cn0KCnZlYzMgZ2V0U2tpblBvc2l0aW9uKHZlYzMgcG9zLCBtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHJldHVybiBwb3M7Cn0KCnZlYzQgZ2V0UG9zaXRpb24obWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICB2ZWMzIHBhcmFtID0gYV9wb3NpdGlvbjsKICAgIHZlYzMgcGFyYW1fMSA9IGdldE1vcnBoUG9zaXRpb24ocGFyYW0pOwogICAgbWF0NCBwYXJhbV8yID0gYm9uZVRyYW5zZm9ybTsKICAgIHJldHVybiB2ZWM0KGdldFNraW5Qb3NpdGlvbihwYXJhbV8xLCBwYXJhbV8yKSwgMS4wKTsKfQoKdm9pZCBtYWluKCkKewogICAgbWF0NCBwYXJhbSA9IGdldEJvbmVUcmFuc2Zvcm0oKTsKICAgIHZlYzQgXzY3ID0gZ2V0UG9zaXRpb24ocGFyYW0pOwogICAgdmVjNCBfNzggPSBtYXQ0KHVfdnNfcGJyUGFyYW1zWzBdLCB1X3ZzX3BiclBhcmFtc1sxXSwgdV92c19wYnJQYXJhbXNbMl0sIHVfdnNfcGJyUGFyYW1zWzNdKSAqIF82NzsKICAgIHZfcG9zaXRpb24gPSB2ZWMzKF83OC54eXopIC8gdmVjMyhfNzgudyk7CiAgICB2X3V2MSA9IHZlYzIoMC4wKTsKICAgIHZfdXYyID0gdmVjMigwLjApOwogICAgdl91djEgPSBhX3RleGNvb3JkMTsKICAgIHZfdXYxID0gKGFfdGV4Y29vcmQxICogdV92c19zcHJpdGVQYXJhbXNbMF0uencpICsgdV92c19zcHJpdGVQYXJhbXNbMF0ueHk7CiAgICB2X2NvbG9yID0gYV9jb2xvcjsKICAgIGdsX1Bvc2l0aW9uID0gbWF0NCh1X3ZzX3BiclBhcmFtc1s4XSwgdV92c19wYnJQYXJhbXNbOV0sIHVfdnNfcGJyUGFyYW1zWzEwXSwgdV92c19wYnJQYXJhbXNbMTFdKSAqIF82NzsKfQoKUkVGTGYCAABtZXNoX1VsdFV2MVZjNFR4ckZvZ19nbHNsMzAwZXMAAAMAAAAAAAAAAgAAAAQAAABhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV90ZXhjb29yZDEAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMmFfY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQDAAAAdV92c19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAFtb2RlbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAG5vcm1hbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAABAAAAAbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAIAAAAABAAAAdV92c19zcHJpdGVQYXJhbXMAAAAAAAAAAAAAAAAAAABzcHJpdGVQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAEAAAAAF0ZXh0dXJlUmVjdAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAFNUQUcZBgAARlJBR0NPREVMBAAAI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCB2ZWM0IHVfZnNfcGJyUGFyYW1zWzRdOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X2Jhc2VDb2xvclRleHR1cmU7CgppbiBoaWdocCB2ZWM0IHZfY29sb3I7CmluIGhpZ2hwIHZlYzIgdl91djE7CmluIGhpZ2hwIHZlYzMgdl9wb3NpdGlvbjsKbGF5b3V0KGxvY2F0aW9uID0gMCkgb3V0IGhpZ2hwIHZlYzQgZ19maW5hbENvbG9yOwppbiBoaWdocCB2ZWMyIHZfdXYyOwoKaGlnaHAgdmVjMyBzUkdCVG9MaW5lYXIoaGlnaHAgdmVjMyBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCB2ZWMzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9CgpoaWdocCB2ZWM0IHNSR0JUb0xpbmVhcihoaWdocCB2ZWM0IHNyZ2JJbikKewogICAgaGlnaHAgdmVjMyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gdmVjNChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCmhpZ2hwIHZlYzQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdl9jb2xvcjsKfQoKaGlnaHAgdmVjNCBnZXRCYXNlQ29sb3IoKQp7CiAgICBoaWdocCB2ZWM0IGJhc2VDb2xvciA9IHVfZnNfcGJyUGFyYW1zWzBdOwogICAgaGlnaHAgdmVjNCBwYXJhbSA9IHRleHR1cmUodV9iYXNlQ29sb3JUZXh0dXJlLCB2X3V2MSk7CiAgICBoaWdocCB2ZWM0IF8xMDMgPSBiYXNlQ29sb3I7CiAgICBoaWdocCB2ZWM0IF8xMDQgPSBfMTAzICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8xMDQ7CiAgICByZXR1cm4gXzEwNCAqIGdldFZlcnRleENvbG9yKCk7Cn0KCmhpZ2hwIHZlYzMgbGluZWFyVG9zUkdCKGhpZ2hwIHZlYzMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIHZlYzMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIHZlYzQgXzI1OSA9IGdldEJhc2VDb2xvcigpOwogICAgaGlnaHAgdmVjMyBwYXJhbSA9IF8yNTkueHl6OwogICAgZ19maW5hbENvbG9yID0gdmVjNChsaW5lYXJUb3NSR0IocGFyYW0pLCBfMjU5LncpOwp9CgpSRUZMuQEAAG1lc2hfVWx0VXYxVmM0VHhyRm9nX2dsc2wzMDBlcwAAAAAAAAEAAAABAAAABgAAAHVfYmFzZUNvbG9yVGV4dHVyZQAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVAYAAAB1X2ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAWJhc2VDb2xvckZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAAbWV0YWxsaWNGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABAAAAByb3VnaG5lc3NGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAFAAAAGVtaXNzaXZlRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAgAAAAYW1iaWVudExpZ2h0AAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAADAAAABhbWJpZW50RmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAPAAAAA==";
static const std::string mesh_Uv1PucNorVc4Fog_glsl300es = "";
static const std::string mesh_Uv1PucNorNmpTanVc4FogSki_glsl300es = "";
static const std::string mesh_PucShwPcfNorTanMtaMnr_glsl300es = "";
static const std::string points_TexVc4_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUcDBAAAVkVSVENPREUSAgAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c19wb2ludHNQYXJhbXNbNF07Cm91dCBmbG9hdCB2X3BvaW50cm90YXRpb247CmxheW91dChsb2NhdGlvbiA9IDIpIGluIGZsb2F0IGFfcG9pbnRyb3RhdGlvbjsKb3V0IHZlYzQgdl9jb2xvcjsKbGF5b3V0KGxvY2F0aW9uID0gMykgaW4gdmVjNCBhX2NvbG9yOwpsYXlvdXQobG9jYXRpb24gPSAwKSBpbiB2ZWMzIGFfcG9zaXRpb247CmxheW91dChsb2NhdGlvbiA9IDEpIGluIGZsb2F0IGFfcG9pbnRzaXplOwoKdm9pZCBtYWluKCkKewogICAgdl9wb2ludHJvdGF0aW9uID0gYV9wb2ludHJvdGF0aW9uOwogICAgdl9jb2xvciA9IGFfY29sb3I7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c19wb2ludHNQYXJhbXNbMF0sIHVfdnNfcG9pbnRzUGFyYW1zWzFdLCB1X3ZzX3BvaW50c1BhcmFtc1syXSwgdV92c19wb2ludHNQYXJhbXNbM10pICogdmVjNChhX3Bvc2l0aW9uLCAxLjApOwogICAgZ2xfUG9pbnRTaXplID0gYV9wb2ludHNpemUgLyBnbF9Qb3NpdGlvbi53Owp9CgpSRUZM3QEAAHBvaW50c19UZXhWYzRfZ2xzbDMwMGVzAAAAAAAAAAAABAAAAAAAAAABAAAAAQAAAGFfcG9pbnRyb3RhdGlvbgAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDFhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABGTFQ0YV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfcG9pbnRzaXplAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAdV92c19wb2ludHNQYXJhbXMAAAAAAAAAAAAAAAAAAABwb2ludHNQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUfpBQAARlJBR0NPREV1BQAAI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9wb2ludHNUZXh0dXJlOwoKaW4gaGlnaHAgdmVjNCB2X2NvbG9yOwppbiBoaWdocCBmbG9hdCB2X3BvaW50cm90YXRpb247CmxheW91dChsb2NhdGlvbiA9IDApIG91dCBoaWdocCB2ZWM0IGdfZmluYWxDb2xvcjsKCmhpZ2hwIHZlYzMgc1JHQlRvTGluZWFyKGhpZ2hwIHZlYzMgc3JnYkluKQp7CiAgICByZXR1cm4gcG93KHNyZ2JJbiwgdmVjMygyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjUpKTsKfQoKaGlnaHAgdmVjNCBzUkdCVG9MaW5lYXIoaGlnaHAgdmVjNCBzcmdiSW4pCnsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBzcmdiSW4ueHl6OwogICAgcmV0dXJuIHZlYzQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9CgpoaWdocCB2ZWM0IGdldFZlcnRleENvbG9yKCkKewogICAgcmV0dXJuIHZfY29sb3I7Cn0KCmhpZ2hwIHZlYzQgZ2V0QmFzZUNvbG9yKCkKewogICAgaGlnaHAgdmVjNCBiYXNlQ29sb3IgPSB2ZWM0KDEuMCk7CiAgICBoaWdocCB2ZWMyIHJlc3VsdENvb3JkID0gZ2xfUG9pbnRDb29yZDsKICAgIGlmICghKHZfcG9pbnRyb3RhdGlvbiA9PSAwLjApKQogICAgewogICAgICAgIGhpZ2hwIGZsb2F0IF84MyA9IGNvcyh2X3BvaW50cm90YXRpb24pOwogICAgICAgIGhpZ2hwIGZsb2F0IF84OCA9IHJlc3VsdENvb3JkLnggLSAwLjU7CiAgICAgICAgaGlnaHAgZmxvYXQgXzkxID0gc2luKHZfcG9pbnRyb3RhdGlvbik7CiAgICAgICAgaGlnaHAgZmxvYXQgXzk1ID0gcmVzdWx0Q29vcmQueSAtIDAuNTsKICAgICAgICByZXN1bHRDb29yZCA9IHZlYzIoKChfODMgKiBfODgpICsgKF85MSAqIF85NSkpICsgMC41LCAoKF84MyAqIF85NSkgLSAoXzkxICogXzg4KSkgKyAwLjUpOwogICAgfQogICAgaGlnaHAgdmVjNCBwYXJhbSA9IHRleHR1cmUodV9wb2ludHNUZXh0dXJlLCByZXN1bHRDb29yZCk7CiAgICBoaWdocCB2ZWM0IF8xMjMgPSBiYXNlQ29sb3I7CiAgICBoaWdocCB2ZWM0IF8xMjQgPSBfMTIzICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8xMjQ7CiAgICByZXR1cm4gXzEyNCAqIGdldFZlcnRleENvbG9yKCk7Cn0KCmhpZ2hwIHZlYzMgbGluZWFyVG9zUkdCKGhpZ2hwIHZlYzMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIHZlYzMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIHZlYzQgXzEzMSA9IGdldEJhc2VDb2xvcigpOwogICAgaGlnaHAgdmVjMyBwYXJhbSA9IF8xMzEueHl6OwogICAgZ19maW5hbENvbG9yID0gdmVjNChsaW5lYXJUb3NSR0IocGFyYW0pLCBfMTMxLncpOwp9CgpSRUZMYAAAAHBvaW50c19UZXhWYzRfZ2xzbDMwMGVzAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAHVfcG9pbnRzVGV4dHVyZQAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVA==";
static const std::string mesh_Uv1PucShwPcfNorNmpTanFog_glsl300es = "";
static const std::string points_TexVc4Txr_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUe2BAAAVkVSVENPREV5AgAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c19wb2ludHNQYXJhbXNbNF07Cm91dCBmbG9hdCB2X3BvaW50cm90YXRpb247CmxheW91dChsb2NhdGlvbiA9IDIpIGluIGZsb2F0IGFfcG9pbnRyb3RhdGlvbjsKb3V0IHZlYzQgdl9jb2xvcjsKbGF5b3V0KGxvY2F0aW9uID0gMykgaW4gdmVjNCBhX2NvbG9yOwpvdXQgdmVjNCB2X3RleHR1cmVyZWN0OwpsYXlvdXQobG9jYXRpb24gPSA0KSBpbiB2ZWM0IGFfdGV4dHVyZXJlY3Q7CmxheW91dChsb2NhdGlvbiA9IDApIGluIHZlYzMgYV9wb3NpdGlvbjsKbGF5b3V0KGxvY2F0aW9uID0gMSkgaW4gZmxvYXQgYV9wb2ludHNpemU7Cgp2b2lkIG1haW4oKQp7CiAgICB2X3BvaW50cm90YXRpb24gPSBhX3BvaW50cm90YXRpb247CiAgICB2X2NvbG9yID0gYV9jb2xvcjsKICAgIHZfdGV4dHVyZXJlY3QgPSBhX3RleHR1cmVyZWN0OwogICAgZ2xfUG9zaXRpb24gPSBtYXQ0KHVfdnNfcG9pbnRzUGFyYW1zWzBdLCB1X3ZzX3BvaW50c1BhcmFtc1sxXSwgdV92c19wb2ludHNQYXJhbXNbMl0sIHVfdnNfcG9pbnRzUGFyYW1zWzNdKSAqIHZlYzQoYV9wb3NpdGlvbiwgMS4wKTsKICAgIGdsX1BvaW50U2l6ZSA9IGFfcG9pbnRzaXplIC8gZ2xfUG9zaXRpb24udzsKfQoKUkVGTCkCAABwb2ludHNfVGV4VmM0VHhyX2dsc2wzMDBlcwAAAAAAAAUAAAAAAAAAAQAAAAEAAABhX3BvaW50cm90YXRpb24AAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQxYV9jb2xvcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAARkxUNGFfdGV4dHVyZXJlY3QAAAAAAAAAAAAAAAAAAAAAAAAABAAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAEZMVDRhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV9wb2ludHNpemUAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAB1X3ZzX3BvaW50c1BhcmFtcwAAAAAAAAAAAAAAAAAAAHBvaW50c1BhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAW12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAU1RBR34GAABGUkFHQ09ERQoGAAAjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBoaWdocCBpbnQ7Cgp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X3BvaW50c1RleHR1cmU7CgppbiBoaWdocCB2ZWM0IHZfY29sb3I7CmluIGhpZ2hwIGZsb2F0IHZfcG9pbnRyb3RhdGlvbjsKaW4gaGlnaHAgdmVjNCB2X3RleHR1cmVyZWN0OwpsYXlvdXQobG9jYXRpb24gPSAwKSBvdXQgaGlnaHAgdmVjNCBnX2ZpbmFsQ29sb3I7CgpoaWdocCB2ZWMzIHNSR0JUb0xpbmVhcihoaWdocCB2ZWMzIHNyZ2JJbikKewogICAgcmV0dXJuIHBvdyhzcmdiSW4sIHZlYzMoMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSk7Cn0KCmhpZ2hwIHZlYzQgc1JHQlRvTGluZWFyKGhpZ2hwIHZlYzQgc3JnYkluKQp7CiAgICBoaWdocCB2ZWMzIHBhcmFtID0gc3JnYkluLnh5ejsKICAgIHJldHVybiB2ZWM0KHNSR0JUb0xpbmVhcihwYXJhbSksIHNyZ2JJbi53KTsKfQoKaGlnaHAgdmVjNCBnZXRWZXJ0ZXhDb2xvcigpCnsKICAgIHJldHVybiB2X2NvbG9yOwp9CgpoaWdocCB2ZWM0IGdldEJhc2VDb2xvcigpCnsKICAgIGhpZ2hwIHZlYzQgYmFzZUNvbG9yID0gdmVjNCgxLjApOwogICAgaGlnaHAgdmVjMiByZXN1bHRDb29yZCA9IGdsX1BvaW50Q29vcmQ7CiAgICBpZiAoISh2X3BvaW50cm90YXRpb24gPT0gMC4wKSkKICAgIHsKICAgICAgICBoaWdocCBmbG9hdCBfODMgPSBjb3Modl9wb2ludHJvdGF0aW9uKTsKICAgICAgICBoaWdocCBmbG9hdCBfODggPSByZXN1bHRDb29yZC54IC0gMC41OwogICAgICAgIGhpZ2hwIGZsb2F0IF85MSA9IHNpbih2X3BvaW50cm90YXRpb24pOwogICAgICAgIGhpZ2hwIGZsb2F0IF85NSA9IHJlc3VsdENvb3JkLnkgLSAwLjU7CiAgICAgICAgcmVzdWx0Q29vcmQgPSB2ZWMyKCgoXzgzICogXzg4KSArIChfOTEgKiBfOTUpKSArIDAuNSwgKChfODMgKiBfOTUpIC0gKF85MSAqIF84OCkpICsgMC41KTsKICAgIH0KICAgIGhpZ2hwIHZlYzIgXzExNCA9IHJlc3VsdENvb3JkOwogICAgaGlnaHAgdmVjMiBfMTIxID0gKF8xMTQgKiB2X3RleHR1cmVyZWN0Lnp3KSArIHZfdGV4dHVyZXJlY3QueHk7CiAgICByZXN1bHRDb29yZCA9IF8xMjE7CiAgICBoaWdocCB2ZWM0IHBhcmFtID0gdGV4dHVyZSh1X3BvaW50c1RleHR1cmUsIF8xMjEpOwogICAgaGlnaHAgdmVjNCBfMTMxID0gYmFzZUNvbG9yOwogICAgaGlnaHAgdmVjNCBfMTMyID0gXzEzMSAqIHNSR0JUb0xpbmVhcihwYXJhbSk7CiAgICBiYXNlQ29sb3IgPSBfMTMyOwogICAgcmV0dXJuIF8xMzIgKiBnZXRWZXJ0ZXhDb2xvcigpOwp9CgpoaWdocCB2ZWMzIGxpbmVhclRvc1JHQihoaWdocCB2ZWMzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCB2ZWMzKDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NSkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IF8xMzkgPSBnZXRCYXNlQ29sb3IoKTsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBfMTM5Lnh5ejsKICAgIGdfZmluYWxDb2xvciA9IHZlYzQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzEzOS53KTsKfQoKUkVGTGAAAABwb2ludHNfVGV4VmM0VHhyX2dsc2wzMDBlcwAAAAAAAAAAAAABAAAAAAAAAAAAAAB1X3BvaW50c1RleHR1cmUAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAMkQgIFRGTFQ=";
static const std::string mesh_Uv1PucNorVc4_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUflCAAAVkVSVENPREWcBgAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwpsYXlvdXQobG9jYXRpb24gPSAwKSBpbiB2ZWMzIGFfcG9zaXRpb247CmxheW91dChsb2NhdGlvbiA9IDEpIGluIHZlYzMgYV9ub3JtYWw7Cm91dCB2ZWMzIHZfcG9zaXRpb247Cm91dCB2ZWMzIHZfbm9ybWFsOwpvdXQgdmVjMiB2X3V2MTsKb3V0IHZlYzIgdl91djI7CmxheW91dChsb2NhdGlvbiA9IDIpIGluIHZlYzIgYV90ZXhjb29yZDE7Cm91dCB2ZWM0IHZfY29sb3I7CmxheW91dChsb2NhdGlvbiA9IDMpIGluIHZlYzQgYV9jb2xvcjsKCm1hdDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIHJldHVybiBtYXQ0KHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSk7Cn0KCnZlYzMgZ2V0TW9ycGhQb3NpdGlvbih2ZWMzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKdmVjMyBnZXRTa2luUG9zaXRpb24odmVjMyBwb3MsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKdmVjNCBnZXRQb3NpdGlvbihtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHZlYzMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgdmVjMyBwYXJhbV8xID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBtYXQ0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIHZlYzQoZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpLCAxLjApOwp9Cgp2ZWMzIGdldE1vcnBoTm9ybWFsKHZlYzMgbm9ybWFsKQp7CiAgICByZXR1cm4gbm9ybWFsOwp9Cgp2ZWMzIGdldFNraW5Ob3JtYWwodmVjMyBub3JtYWwsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIG5vcm1hbDsKfQoKdmVjMyBnZXROb3JtYWwobWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICB2ZWMzIHBhcmFtID0gYV9ub3JtYWw7CiAgICB2ZWMzIHBhcmFtXzEgPSBnZXRNb3JwaE5vcm1hbChwYXJhbSk7CiAgICBtYXQ0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIG5vcm1hbGl6ZShnZXRTa2luTm9ybWFsKHBhcmFtXzEsIHBhcmFtXzIpKTsKfQoKdm9pZCBtYWluKCkKewogICAgbWF0NCBfOTQgPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICBtYXQ0IHBhcmFtID0gXzk0OwogICAgdmVjNCBfOTkgPSBnZXRQb3NpdGlvbihwYXJhbSk7CiAgICB2ZWM0IF8xMTAgPSBtYXQ0KHVfdnNfcGJyUGFyYW1zWzBdLCB1X3ZzX3BiclBhcmFtc1sxXSwgdV92c19wYnJQYXJhbXNbMl0sIHVfdnNfcGJyUGFyYW1zWzNdKSAqIF85OTsKICAgIHZfcG9zaXRpb24gPSB2ZWMzKF8xMTAueHl6KSAvIHZlYzMoXzExMC53KTsKICAgIG1hdDQgcGFyYW1fMSA9IF85NDsKICAgIHZfbm9ybWFsID0gbm9ybWFsaXplKHZlYzMoKG1hdDQodV92c19wYnJQYXJhbXNbNF0sIHVfdnNfcGJyUGFyYW1zWzVdLCB1X3ZzX3BiclBhcmFtc1s2XSwgdV92c19wYnJQYXJhbXNbN10pICogdmVjNChnZXROb3JtYWwocGFyYW1fMSksIDAuMCkpLnh5eikpOwogICAgdl91djEgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MiA9IHZlYzIoMC4wKTsKICAgIHZfdXYxID0gYV90ZXhjb29yZDE7CiAgICB2X2NvbG9yID0gYV9jb2xvcjsKICAgIGdsX1Bvc2l0aW9uID0gbWF0NCh1X3ZzX3BiclBhcmFtc1s4XSwgdV92c19wYnJQYXJhbXNbOV0sIHVfdnNfcGJyUGFyYW1zWzEwXSwgdV92c19wYnJQYXJhbXNbMTFdKSAqIF85OTsKfQoKUkVGTDUCAABtZXNoX1V2MVB1Y05vclZjNF9nbHNsMzAwZXMAAAAAAAQAAAAAAAAAAQAAAAMAAABhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV9ub3JtYWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfdGV4Y29vcmQxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDJhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABGTFQ0AwAAAHVfdnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAABbW9kZWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABub3JtYWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAQAAAAG12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAACAAAAAU1RBR08qAABGUkFHQ09ERcUmAAAjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBoaWdocCBpbnQ7CgpzdHJ1Y3QgTWF0ZXJpYWxJbmZvCnsKICAgIGhpZ2hwIGZsb2F0IHBlcmNlcHR1YWxSb3VnaG5lc3M7CiAgICBoaWdocCB2ZWMzIGYwOwogICAgaGlnaHAgZmxvYXQgYWxwaGFSb3VnaG5lc3M7CiAgICBoaWdocCB2ZWMzIGFsYmVkb0NvbG9yOwogICAgaGlnaHAgdmVjMyBmOTA7CiAgICBoaWdocCBmbG9hdCBtZXRhbGxpYzsKICAgIGhpZ2hwIHZlYzMgbjsKICAgIGhpZ2hwIHZlYzMgYmFzZUNvbG9yOwp9OwoKc3RydWN0IE5vcm1hbEluZm8KewogICAgaGlnaHAgdmVjMyBuZzsKICAgIGhpZ2hwIHZlYzMgbjsKICAgIGhpZ2hwIHZlYzMgdDsKICAgIGhpZ2hwIHZlYzMgYjsKfTsKCnN0cnVjdCBMaWdodAp7CiAgICBpbnQgdHlwZTsKICAgIGhpZ2hwIHZlYzMgZGlyZWN0aW9uOwogICAgaGlnaHAgdmVjMyBjb2xvcjsKICAgIGhpZ2hwIHZlYzMgcG9zaXRpb247CiAgICBoaWdocCBmbG9hdCByYW5nZTsKICAgIGhpZ2hwIGZsb2F0IGludGVuc2l0eTsKICAgIGhpZ2hwIGZsb2F0IGlubmVyQ29uZUNvczsKICAgIGhpZ2hwIGZsb2F0IG91dGVyQ29uZUNvczsKICAgIGJvb2wgc2hhZG93czsKICAgIGludCBzaGFkb3dNYXBJbmRleDsKICAgIGludCBudW1TaGFkb3dDYXNjYWRlczsKfTsKCnVuaWZvcm0gaGlnaHAgdmVjNCB1X2ZzX3BiclBhcmFtc1s0XTsKdW5pZm9ybSBoaWdocCB2ZWM0IHVfZnNfbGlnaHRpbmdbMjVdOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X2Jhc2VDb2xvclRleHR1cmU7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X29jY2x1c2lvblRleHR1cmU7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfZW1pc3NpdmVUZXh0dXJlOwoKaW4gaGlnaHAgdmVjNCB2X2NvbG9yOwppbiBoaWdocCB2ZWMyIHZfdXYxOwppbiBoaWdocCB2ZWMzIHZfcG9zaXRpb247CmluIGhpZ2hwIHZlYzMgdl9ub3JtYWw7CmxheW91dChsb2NhdGlvbiA9IDApIG91dCBoaWdocCB2ZWM0IGdfZmluYWxDb2xvcjsKaW4gaGlnaHAgdmVjMiB2X3V2MjsKCmhpZ2hwIHZlYzMgc1JHQlRvTGluZWFyKGhpZ2hwIHZlYzMgc3JnYkluKQp7CiAgICByZXR1cm4gcG93KHNyZ2JJbiwgdmVjMygyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjUpKTsKfQoKaGlnaHAgdmVjNCBzUkdCVG9MaW5lYXIoaGlnaHAgdmVjNCBzcmdiSW4pCnsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBzcmdiSW4ueHl6OwogICAgcmV0dXJuIHZlYzQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9CgpoaWdocCB2ZWM0IGdldFZlcnRleENvbG9yKCkKewogICAgcmV0dXJuIHZfY29sb3I7Cn0KCmhpZ2hwIHZlYzQgZ2V0QmFzZUNvbG9yKCkKewogICAgaGlnaHAgdmVjNCBiYXNlQ29sb3IgPSB1X2ZzX3BiclBhcmFtc1swXTsKICAgIGhpZ2hwIHZlYzQgcGFyYW0gPSB0ZXh0dXJlKHVfYmFzZUNvbG9yVGV4dHVyZSwgdl91djEpOwogICAgaGlnaHAgdmVjNCBfMTY4ID0gYmFzZUNvbG9yOwogICAgaGlnaHAgdmVjNCBfMTY5ID0gXzE2OCAqIHNSR0JUb0xpbmVhcihwYXJhbSk7CiAgICBiYXNlQ29sb3IgPSBfMTY5OwogICAgcmV0dXJuIF8xNjkgKiBnZXRWZXJ0ZXhDb2xvcigpOwp9CgpOb3JtYWxJbmZvIGdldE5vcm1hbEluZm8oKQp7CiAgICBoaWdocCB2ZWMzIF8yNTEgPSB2ZWMzKHZfdXYxLCAwLjApOwogICAgaGlnaHAgdmVjMyBfMjUyID0gZEZkeChfMjUxKTsKICAgIGhpZ2hwIHZlYzMgXzI1OCA9IGRGZHkoXzI1MSk7CiAgICBoaWdocCBmbG9hdCBfMjYxID0gXzI1OC55OwogICAgaGlnaHAgZmxvYXQgXzI2OCA9IF8yNTIueTsKICAgIGhpZ2hwIHZlYzMgXzI4NiA9ICgoZEZkeCh2X3Bvc2l0aW9uKSAqIF8yNjEpIC0gKGRGZHkodl9wb3NpdGlvbikgKiBfMjY4KSkgLyB2ZWMzKChfMjUyLnggKiBfMjYxKSAtIChfMjU4LnggKiBfMjY4KSk7CiAgICBoaWdocCB2ZWMzIF8yOTAgPSBub3JtYWxpemUodl9ub3JtYWwpOwogICAgaGlnaHAgdmVjMyBfMjk5ID0gbm9ybWFsaXplKF8yODYgLSAoXzI5MCAqIGRvdChfMjkwLCBfMjg2KSkpOwogICAgcmV0dXJuIE5vcm1hbEluZm8oXzI5MCwgXzI5MCwgXzI5OSwgY3Jvc3MoXzI5MCwgXzI5OSkpOwp9CgpNYXRlcmlhbEluZm8gZ2V0TWV0YWxsaWNSb3VnaG5lc3NJbmZvKGlub3V0IE1hdGVyaWFsSW5mbyBpbmZvLCBoaWdocCBmbG9hdCBmMF9pb3IpCnsKICAgIGluZm8ubWV0YWxsaWMgPSB1X2ZzX3BiclBhcmFtc1sxXS54OwogICAgaW5mby5wZXJjZXB0dWFsUm91Z2huZXNzID0gdV9mc19wYnJQYXJhbXNbMV0ueTsKICAgIGhpZ2hwIHZlYzQgXzE4OSA9IHRleHR1cmUodV9tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUsIHZfdXYxKTsKICAgIGluZm8ucGVyY2VwdHVhbFJvdWdobmVzcyAqPSBfMTg5Lnk7CiAgICBpbmZvLm1ldGFsbGljICo9IF8xODkuejsKICAgIGhpZ2hwIHZlYzMgXzIwNiA9IHZlYzMoZjBfaW9yKTsKICAgIGluZm8uYWxiZWRvQ29sb3IgPSBtaXgoaW5mby5iYXNlQ29sb3IgKiAodmVjMygxLjApIC0gXzIwNiksIHZlYzMoMC4wKSwgdmVjMyhpbmZvLm1ldGFsbGljKSk7CiAgICBpbmZvLmYwID0gbWl4KF8yMDYsIGluZm8uYmFzZUNvbG9yLCB2ZWMzKGluZm8ubWV0YWxsaWMpKTsKICAgIHJldHVybiBpbmZvOwp9CgpoaWdocCB2ZWM0IGdldE9jY2x1c2lvblRleHR1cmUoKQp7CiAgICByZXR1cm4gdGV4dHVyZSh1X29jY2x1c2lvblRleHR1cmUsIHZfdXYxKTsKfQoKaGlnaHAgZmxvYXQgY2xhbXBlZERvdChoaWdocCB2ZWMzIHgsIGhpZ2hwIHZlYzMgeSkKewogICAgcmV0dXJuIGNsYW1wKGRvdCh4LCB5KSwgMC4wLCAxLjApOwp9CgpoaWdocCBmbG9hdCBnZXRSYW5nZUF0dGVudWF0aW9uKGhpZ2hwIGZsb2F0IHJhbmdlLCBoaWdocCBmbG9hdCBfZGlzdGFuY2UpCnsKICAgIGlmIChyYW5nZSA8PSAwLjApCiAgICB7CiAgICAgICAgcmV0dXJuIDEuMCAvIHBvdyhfZGlzdGFuY2UsIDIuMCk7CiAgICB9CiAgICByZXR1cm4gbWF4KG1pbigxLjAgLSBwb3coX2Rpc3RhbmNlIC8gcmFuZ2UsIDQuMCksIDEuMCksIDAuMCkgLyBwb3coX2Rpc3RhbmNlLCAyLjApOwp9CgpoaWdocCBmbG9hdCBnZXRTcG90QXR0ZW51YXRpb24oaGlnaHAgdmVjMyBwb2ludFRvTGlnaHQsIGhpZ2hwIHZlYzMgc3BvdERpcmVjdGlvbiwgaGlnaHAgZmxvYXQgb3V0ZXJDb25lQ29zLCBoaWdocCBmbG9hdCBpbm5lckNvbmVDb3MpCnsKICAgIGhpZ2hwIGZsb2F0IF80NjcgPSBkb3Qobm9ybWFsaXplKHNwb3REaXJlY3Rpb24pLCBub3JtYWxpemUoLXBvaW50VG9MaWdodCkpOwogICAgaWYgKF80NjcgPiBvdXRlckNvbmVDb3MpCiAgICB7CiAgICAgICAgaWYgKF80NjcgPCBpbm5lckNvbmVDb3MpCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gc21vb3Roc3RlcChvdXRlckNvbmVDb3MsIGlubmVyQ29uZUNvcywgXzQ2Nyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiAxLjA7CiAgICB9CiAgICByZXR1cm4gMC4wOwp9CgpoaWdocCB2ZWMzIGdldExpZ2hJbnRlbnNpdHkoTGlnaHQgbGlnaHQsIGhpZ2hwIHZlYzMgcG9pbnRUb0xpZ2h0KQp7CiAgICBoaWdocCBmbG9hdCByYW5nZUF0dGVudWF0aW9uID0gMS4wOwogICAgaGlnaHAgZmxvYXQgc3BvdEF0dGVudWF0aW9uID0gMS4wOwogICAgaWYgKGxpZ2h0LnR5cGUgIT0gMCkKICAgIHsKICAgICAgICBoaWdocCBmbG9hdCBwYXJhbSA9IGxpZ2h0LnJhbmdlOwogICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzEgPSBsZW5ndGgocG9pbnRUb0xpZ2h0KTsKICAgICAgICByYW5nZUF0dGVudWF0aW9uID0gZ2V0UmFuZ2VBdHRlbnVhdGlvbihwYXJhbSwgcGFyYW1fMSk7CiAgICB9CiAgICBpZiAobGlnaHQudHlwZSA9PSAyKQogICAgewogICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMiA9IHBvaW50VG9MaWdodDsKICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzMgPSBsaWdodC5kaXJlY3Rpb247CiAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fNCA9IGxpZ2h0Lm91dGVyQ29uZUNvczsKICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV81ID0gbGlnaHQuaW5uZXJDb25lQ29zOwogICAgICAgIHNwb3RBdHRlbnVhdGlvbiA9IGdldFNwb3RBdHRlbnVhdGlvbihwYXJhbV8yLCBwYXJhbV8zLCBwYXJhbV80LCBwYXJhbV81KTsKICAgIH0KICAgIHJldHVybiBsaWdodC5jb2xvciAqICgocmFuZ2VBdHRlbnVhdGlvbiAqIHNwb3RBdHRlbnVhdGlvbikgKiBsaWdodC5pbnRlbnNpdHkpOwp9CgpoaWdocCB2ZWMzIEZfU2NobGljayhoaWdocCB2ZWMzIGYwLCBoaWdocCB2ZWMzIGY5MCwgaGlnaHAgZmxvYXQgVmRvdEgpCnsKICAgIHJldHVybiBmMCArICgoZjkwIC0gZjApICogcG93KGNsYW1wKDEuMCAtIFZkb3RILCAwLjAsIDEuMCksIDUuMCkpOwp9CgpoaWdocCB2ZWMzIEJSREZfbGFtYmVydGlhbihoaWdocCB2ZWMzIGYwLCBoaWdocCB2ZWMzIGY5MCwgaGlnaHAgdmVjMyBkaWZmdXNlQ29sb3IsIGhpZ2hwIGZsb2F0IFZkb3RIKQp7CiAgICBoaWdocCB2ZWMzIHBhcmFtID0gZjA7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzEgPSBmOTA7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8yID0gVmRvdEg7CiAgICByZXR1cm4gKHZlYzMoMS4wKSAtIEZfU2NobGljayhwYXJhbSwgcGFyYW1fMSwgcGFyYW1fMikpICogKGRpZmZ1c2VDb2xvciAqIHZlYzMoMC4zMTgzMDk4NzMzNDI1MTQwMzgwODU5Mzc1KSk7Cn0KCmhpZ2hwIGZsb2F0IFZfR0dYKGhpZ2hwIGZsb2F0IE5kb3RMLCBoaWdocCBmbG9hdCBOZG90ViwgaGlnaHAgZmxvYXQgYWxwaGFSb3VnaG5lc3MpCnsKICAgIGhpZ2hwIGZsb2F0IF8zMzUgPSBhbHBoYVJvdWdobmVzcyAqIGFscGhhUm91Z2huZXNzOwogICAgaGlnaHAgZmxvYXQgXzM0MiA9IDEuMCAtIF8zMzU7CiAgICBoaWdocCBmbG9hdCBfMzYzID0gKE5kb3RMICogc3FydCgoKE5kb3RWICogTmRvdFYpICogXzM0MikgKyBfMzM1KSkgKyAoTmRvdFYgKiBzcXJ0KCgoTmRvdEwgKiBOZG90TCkgKiBfMzQyKSArIF8zMzUpKTsKICAgIGlmIChfMzYzID4gMC4wKQogICAgewogICAgICAgIHJldHVybiAwLjUgLyBfMzYzOwogICAgfQogICAgcmV0dXJuIDAuMDsKfQoKaGlnaHAgZmxvYXQgRF9HR1goaGlnaHAgZmxvYXQgTmRvdEgsIGhpZ2hwIGZsb2F0IGFscGhhUm91Z2huZXNzKQp7CiAgICBoaWdocCBmbG9hdCBfMzc3ID0gYWxwaGFSb3VnaG5lc3MgKiBhbHBoYVJvdWdobmVzczsKICAgIGhpZ2hwIGZsb2F0IF8zODUgPSAoKE5kb3RIICogTmRvdEgpICogKF8zNzcgLSAxLjApKSArIDEuMDsKICAgIHJldHVybiBfMzc3IC8gKCgzLjE0MTU5Mjc0MTAxMjU3MzI0MjE4NzUgKiBfMzg1KSAqIF8zODUpOwp9CgpoaWdocCB2ZWMzIEJSREZfc3BlY3VsYXJHR1goaGlnaHAgdmVjMyBmMCwgaGlnaHAgdmVjMyBmOTAsIGhpZ2hwIGZsb2F0IGFscGhhUm91Z2huZXNzLCBoaWdocCBmbG9hdCBWZG90SCwgaGlnaHAgZmxvYXQgTmRvdEwsIGhpZ2hwIGZsb2F0IE5kb3RWLCBoaWdocCBmbG9hdCBOZG90SCkKewogICAgaGlnaHAgdmVjMyBwYXJhbSA9IGYwOwogICAgaGlnaHAgdmVjMyBwYXJhbV8xID0gZjkwOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMiA9IFZkb3RIOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMyA9IE5kb3RMOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fNCA9IE5kb3RWOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fNSA9IGFscGhhUm91Z2huZXNzOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fNiA9IE5kb3RIOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fNyA9IGFscGhhUm91Z2huZXNzOwogICAgcmV0dXJuIChGX1NjaGxpY2socGFyYW0sIHBhcmFtXzEsIHBhcmFtXzIpICogVl9HR1gocGFyYW1fMywgcGFyYW1fNCwgcGFyYW1fNSkpICogRF9HR1gocGFyYW1fNiwgcGFyYW1fNyk7Cn0KCmhpZ2hwIHZlYzQgZ2V0RW1pc3NpdmVUZXh0dXJlKCkKewogICAgcmV0dXJuIHRleHR1cmUodV9lbWlzc2l2ZVRleHR1cmUsIHZfdXYxKTsKfQoKaGlnaHAgdmVjMyBsaW5lYXJUb3NSR0IoaGlnaHAgdmVjMyBjb2xvcikKewogICAgcmV0dXJuIHBvdyhjb2xvciwgdmVjMygwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzUpKTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCBfNTMyID0gZ2V0QmFzZUNvbG9yKCk7CiAgICBoaWdocCB2ZWMzIF84MzcgPSBnZXROb3JtYWxJbmZvKCkubjsKICAgIGhpZ2hwIHZlYzMgXzg0MSA9IHZlYzMoMC4wKTsKICAgIGhpZ2hwIGZsb2F0IF84NDIgPSAwLjA7CiAgICBoaWdocCB2ZWMzIF84NDMgPSB2ZWMzKDAuMCk7CiAgICBoaWdocCB2ZWMzIF84NDQgPSB2ZWMzKDAuMCk7CiAgICBoaWdocCB2ZWMzIF81NDcgPSBfNTMyLnh5ejsKICAgIE1hdGVyaWFsSW5mbyBwYXJhbSA9IE1hdGVyaWFsSW5mbygwLjAsIHZlYzMoMC4wKSwgMC4wLCB2ZWMzKDAuMCksIHZlYzMoMC4wKSwgMC4wLCB2ZWMzKDAuMCksIF81NDcpOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMSA9IDAuMDM5OTk5OTk5MTA1OTMwMzI4MzY5MTQwNjI1OwogICAgTWF0ZXJpYWxJbmZvIF81NTcgPSBnZXRNZXRhbGxpY1JvdWdobmVzc0luZm8ocGFyYW0sIHBhcmFtXzEpOwogICAgXzg0MSA9IF81NTcuZjA7CiAgICBfODQzID0gXzU1Ny5hbGJlZG9Db2xvcjsKICAgIGhpZ2hwIGZsb2F0IF81NjAgPSBjbGFtcChfNTU3LnBlcmNlcHR1YWxSb3VnaG5lc3MsIDAuMCwgMS4wKTsKICAgIF84NDIgPSBfNTYwICogXzU2MDsKICAgIF84NDQgPSB2ZWMzKGNsYW1wKG1heChtYXgoXzU1Ny5mMC54LCBfNTU3LmYwLnkpLCBfNTU3LmYwLnopICogNTAuMCwgMC4wLCAxLjApKTsKICAgIGhpZ2hwIHZlYzMgZl9zcGVjdWxhciA9IHZlYzMoMC4wKTsKICAgIGhpZ2hwIHZlYzMgZl9lbWlzc2l2ZSA9IHZlYzMoMC4wKTsKICAgIGhpZ2hwIHZlYzMgZl9kaWZmdXNlID0gKHVfZnNfcGJyUGFyYW1zWzNdLnh5eiAqIHBvdyh1X2ZzX3BiclBhcmFtc1szXS53LCAyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjUpKSAqIF81NDc7CiAgICBoaWdocCB2ZWM0IF82MDUgPSBnZXRPY2NsdXNpb25UZXh0dXJlKCk7CiAgICBoaWdocCBmbG9hdCBfNjA2ID0gXzYwNS54OwogICAgZl9kaWZmdXNlICo9IF82MDY7CiAgICBmX3NwZWN1bGFyICo9IF82MDY7CiAgICBoaWdocCB2ZWMzIF82MzMgPSBub3JtYWxpemUodV9mc19saWdodGluZ1syNF0ueHl6IC0gdl9wb3NpdGlvbik7CiAgICBoaWdocCB2ZWMzIHBvaW50VG9MaWdodDsKICAgIGZvciAoaW50IGkgPSAwOyBpIDwgNjsgaSsrKQogICAgewogICAgICAgIGludCBfNjQ2ID0gaW50KHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxMl0udyk7CiAgICAgICAgaWYgKHVfZnNfbGlnaHRpbmdbaSAqIDEgKyA2XS53ID4gMC4wKQogICAgICAgIHsKICAgICAgICAgICAgaWYgKF82NDYgIT0gMCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcG9pbnRUb0xpZ2h0ID0gdV9mc19saWdodGluZ1tpICogMSArIDEyXS54eXogLSB2X3Bvc2l0aW9uOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcG9pbnRUb0xpZ2h0ID0gLXVfZnNfbGlnaHRpbmdbaSAqIDEgKyAwXS54eXo7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaGlnaHAgdmVjMyBfNzA4ID0gbm9ybWFsaXplKHBvaW50VG9MaWdodCk7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgXzcxMyA9IG5vcm1hbGl6ZShfNzA4ICsgXzYzMyk7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMiA9IF84Mzc7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMyA9IF83MDg7CiAgICAgICAgICAgIGhpZ2hwIGZsb2F0IF83MTkgPSBjbGFtcGVkRG90KHBhcmFtXzIsIHBhcmFtXzMpOwogICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzQgPSBfODM3OwogICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzUgPSBfNjMzOwogICAgICAgICAgICBoaWdocCBmbG9hdCBfNzI1ID0gY2xhbXBlZERvdChwYXJhbV80LCBwYXJhbV81KTsKICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV82ID0gXzgzNzsKICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV83ID0gXzcxMzsKICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV84ID0gXzcwODsKICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV85ID0gXzcxMzsKICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8xMCA9IF82MzM7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMTEgPSBfNzEzOwogICAgICAgICAgICBoaWdocCBmbG9hdCBfNzQzID0gY2xhbXBlZERvdChwYXJhbV8xMCwgcGFyYW1fMTEpOwogICAgICAgICAgICBpZiAoKF83MTkgPiAwLjApIHx8IChfNzI1ID4gMC4wKSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgTGlnaHQgcGFyYW1fMTIgPSBMaWdodChfNjQ2LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMF0ueHl6LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgNl0ueHl6LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMTJdLnh5eiwgdV9mc19saWdodGluZ1tpICogMSArIDBdLncsIHVfZnNfbGlnaHRpbmdbaSAqIDEgKyA2XS53LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMThdLngsIHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxOF0ueSwgKHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxOF0ueiA8IDAuMCkgPyBmYWxzZSA6IHRydWUsIGludCh1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMThdLnopLCBpbnQodV9mc19saWdodGluZ1tpICogMSArIDE4XS53KSk7CiAgICAgICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzEzID0gcG9pbnRUb0xpZ2h0OwogICAgICAgICAgICAgICAgaGlnaHAgdmVjMyBfNzYyID0gKGdldExpZ2hJbnRlbnNpdHkocGFyYW1fMTIsIHBhcmFtXzEzKSAqIDEuMCkgKiBfNzE5OwogICAgICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8xNCA9IF84NDE7CiAgICAgICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzE1ID0gXzg0NDsKICAgICAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMTYgPSBfODQzOwogICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMTcgPSBfNzQzOwogICAgICAgICAgICAgICAgZl9kaWZmdXNlICs9IChfNzYyICogQlJERl9sYW1iZXJ0aWFuKHBhcmFtXzE0LCBwYXJhbV8xNSwgcGFyYW1fMTYsIHBhcmFtXzE3KSk7CiAgICAgICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzE4ID0gXzg0MTsKICAgICAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMTkgPSBfODQ0OwogICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMjAgPSBfODQyOwogICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMjEgPSBfNzQzOwogICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMjIgPSBfNzE5OwogICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMjMgPSBfNzI1OwogICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMjQgPSBjbGFtcGVkRG90KHBhcmFtXzYsIHBhcmFtXzcpOwogICAgICAgICAgICAgICAgZl9zcGVjdWxhciArPSAoXzc2MiAqIEJSREZfc3BlY3VsYXJHR1gocGFyYW1fMTgsIHBhcmFtXzE5LCBwYXJhbV8yMCwgcGFyYW1fMjEsIHBhcmFtXzIyLCBwYXJhbV8yMywgcGFyYW1fMjQpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGZfZW1pc3NpdmUgPSB1X2ZzX3BiclBhcmFtc1syXS54eXo7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzI1ID0gZ2V0RW1pc3NpdmVUZXh0dXJlKCkueHl6OwogICAgaGlnaHAgdmVjMyBfODEyID0gZl9lbWlzc2l2ZTsKICAgIGhpZ2hwIHZlYzMgXzgxMyA9IF84MTIgKiBzUkdCVG9MaW5lYXIocGFyYW1fMjUpOwogICAgZl9lbWlzc2l2ZSA9IF84MTM7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzI2ID0gKF84MTMgKyBmX2RpZmZ1c2UpICsgZl9zcGVjdWxhcjsKICAgIGdfZmluYWxDb2xvciA9IHZlYzQobGluZWFyVG9zUkdCKHBhcmFtXzI2KSwgXzUzMi53KTsKfQoKUkVGTHYDAABtZXNoX1V2MVB1Y05vclZjNF9nbHNsMzAwZXMAAAAAAAAAAAAEAAAAAgAAAAsAAAB1X2Jhc2VDb2xvclRleHR1cmUAAAAAAAAAAAAAAAAAAAIAAAAAAAAAMkQgIFRGTFR1X21ldGFsbGljUm91Z2huZXNzVGV4dHVyZQAAAAAAAAIAAAABAAAAMkQgIFRGTFR1X29jY2x1c2lvblRleHR1cmUAAAAAAAAAAAAAAAAAAAIAAAACAAAAMkQgIFRGTFR1X2VtaXNzaXZlVGV4dHVyZQAAAAAAAAAAAAAAAAAAAAIAAAADAAAAMkQgIFRGTFQGAAAAdV9mc19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFiYXNlQ29sb3JGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAG1ldGFsbGljRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAQAAAAcm91Z2huZXNzRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABQAAABlbWlzc2l2ZUZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAIAAAAGFtYmllbnRMaWdodAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAwAAAAYW1iaWVudEZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAADwAAAAFAAAAdV9mc19saWdodGluZwAAAAAAAAAAAAAAAAAAAAAAAABsaWdodGluZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAkAEAAAFkaXJlY3Rpb25fcmFuZ2UAAAAAAAAAAAAAAAAAAAAAAEZMVDQGAAAAAAAAAGNvbG9yX2ludGVuc2l0eQAAAAAAAAAAAAAAAAAAAAAARkxUNAYAAABgAAAAcG9zaXRpb25fdHlwZQAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0BgAAAMAAAABpbkNvbmVfb3VDb25lX3NoYWRvd3NfY2FzY2FkZXMAAEZMVDQGAAAAIAEAAGV5ZVBvcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAACAAQAA";
static const std::string mesh_Uv1PucShwPcfNorVc4Fog_glsl300es = "";
static const std::string mesh_Uv1PucNorFog_glsl300es = "";
static const std::string mesh_UltUv1Vc4Txr_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUc8BwAAVkVSVENPREXCBAAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwp1bmlmb3JtIHZlYzQgdV92c19zcHJpdGVQYXJhbXNbMV07CmxheW91dChsb2NhdGlvbiA9IDApIGluIHZlYzMgYV9wb3NpdGlvbjsKb3V0IHZlYzMgdl9wb3NpdGlvbjsKb3V0IHZlYzIgdl91djE7Cm91dCB2ZWMyIHZfdXYyOwpsYXlvdXQobG9jYXRpb24gPSAxKSBpbiB2ZWMyIGFfdGV4Y29vcmQxOwpvdXQgdmVjNCB2X2NvbG9yOwpsYXlvdXQobG9jYXRpb24gPSAyKSBpbiB2ZWM0IGFfY29sb3I7CgptYXQ0IGdldEJvbmVUcmFuc2Zvcm0oKQp7CiAgICByZXR1cm4gbWF0NCh2ZWM0KDAuMCksIHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCkpOwp9Cgp2ZWMzIGdldE1vcnBoUG9zaXRpb24odmVjMyBwb3MpCnsKICAgIHJldHVybiBwb3M7Cn0KCnZlYzMgZ2V0U2tpblBvc2l0aW9uKHZlYzMgcG9zLCBtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHJldHVybiBwb3M7Cn0KCnZlYzQgZ2V0UG9zaXRpb24obWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICB2ZWMzIHBhcmFtID0gYV9wb3NpdGlvbjsKICAgIHZlYzMgcGFyYW1fMSA9IGdldE1vcnBoUG9zaXRpb24ocGFyYW0pOwogICAgbWF0NCBwYXJhbV8yID0gYm9uZVRyYW5zZm9ybTsKICAgIHJldHVybiB2ZWM0KGdldFNraW5Qb3NpdGlvbihwYXJhbV8xLCBwYXJhbV8yKSwgMS4wKTsKfQoKdm9pZCBtYWluKCkKewogICAgbWF0NCBwYXJhbSA9IGdldEJvbmVUcmFuc2Zvcm0oKTsKICAgIHZlYzQgXzY3ID0gZ2V0UG9zaXRpb24ocGFyYW0pOwogICAgdmVjNCBfNzggPSBtYXQ0KHVfdnNfcGJyUGFyYW1zWzBdLCB1X3ZzX3BiclBhcmFtc1sxXSwgdV92c19wYnJQYXJhbXNbMl0sIHVfdnNfcGJyUGFyYW1zWzNdKSAqIF82NzsKICAgIHZfcG9zaXRpb24gPSB2ZWMzKF83OC54eXopIC8gdmVjMyhfNzgudyk7CiAgICB2X3V2MSA9IHZlYzIoMC4wKTsKICAgIHZfdXYyID0gdmVjMigwLjApOwogICAgdl91djEgPSBhX3RleGNvb3JkMTsKICAgIHZfdXYxID0gKGFfdGV4Y29vcmQxICogdV92c19zcHJpdGVQYXJhbXNbMF0uencpICsgdV92c19zcHJpdGVQYXJhbXNbMF0ueHk7CiAgICB2X2NvbG9yID0gYV9jb2xvcjsKICAgIGdsX1Bvc2l0aW9uID0gbWF0NCh1X3ZzX3BiclBhcmFtc1s4XSwgdV92c19wYnJQYXJhbXNbOV0sIHVfdnNfcGJyUGFyYW1zWzEwXSwgdV92c19wYnJQYXJhbXNbMTFdKSAqIF82NzsKfQoKUkVGTGYCAABtZXNoX1VsdFV2MVZjNFR4cl9nbHNsMzAwZXMAAAAAAAMAAAAAAAAAAgAAAAQAAABhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV90ZXhjb29yZDEAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMmFfY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQDAAAAdV92c19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAFtb2RlbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAG5vcm1hbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAABAAAAAbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAIAAAAABAAAAdV92c19zcHJpdGVQYXJhbXMAAAAAAAAAAAAAAAAAAABzcHJpdGVQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAEAAAAAF0ZXh0dXJlUmVjdAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAFNUQUcZBgAARlJBR0NPREVMBAAAI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCB2ZWM0IHVfZnNfcGJyUGFyYW1zWzRdOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X2Jhc2VDb2xvclRleHR1cmU7CgppbiBoaWdocCB2ZWM0IHZfY29sb3I7CmluIGhpZ2hwIHZlYzIgdl91djE7CmluIGhpZ2hwIHZlYzMgdl9wb3NpdGlvbjsKbGF5b3V0KGxvY2F0aW9uID0gMCkgb3V0IGhpZ2hwIHZlYzQgZ19maW5hbENvbG9yOwppbiBoaWdocCB2ZWMyIHZfdXYyOwoKaGlnaHAgdmVjMyBzUkdCVG9MaW5lYXIoaGlnaHAgdmVjMyBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCB2ZWMzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9CgpoaWdocCB2ZWM0IHNSR0JUb0xpbmVhcihoaWdocCB2ZWM0IHNyZ2JJbikKewogICAgaGlnaHAgdmVjMyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gdmVjNChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCmhpZ2hwIHZlYzQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdl9jb2xvcjsKfQoKaGlnaHAgdmVjNCBnZXRCYXNlQ29sb3IoKQp7CiAgICBoaWdocCB2ZWM0IGJhc2VDb2xvciA9IHVfZnNfcGJyUGFyYW1zWzBdOwogICAgaGlnaHAgdmVjNCBwYXJhbSA9IHRleHR1cmUodV9iYXNlQ29sb3JUZXh0dXJlLCB2X3V2MSk7CiAgICBoaWdocCB2ZWM0IF8xMDMgPSBiYXNlQ29sb3I7CiAgICBoaWdocCB2ZWM0IF8xMDQgPSBfMTAzICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8xMDQ7CiAgICByZXR1cm4gXzEwNCAqIGdldFZlcnRleENvbG9yKCk7Cn0KCmhpZ2hwIHZlYzMgbGluZWFyVG9zUkdCKGhpZ2hwIHZlYzMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIHZlYzMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIHZlYzQgXzI1OSA9IGdldEJhc2VDb2xvcigpOwogICAgaGlnaHAgdmVjMyBwYXJhbSA9IF8yNTkueHl6OwogICAgZ19maW5hbENvbG9yID0gdmVjNChsaW5lYXJUb3NSR0IocGFyYW0pLCBfMjU5LncpOwp9CgpSRUZMuQEAAG1lc2hfVWx0VXYxVmM0VHhyX2dsc2wzMDBlcwAAAAAAAAAAAAEAAAABAAAABgAAAHVfYmFzZUNvbG9yVGV4dHVyZQAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVAYAAAB1X2ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAWJhc2VDb2xvckZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAAbWV0YWxsaWNGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABAAAAByb3VnaG5lc3NGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAFAAAAGVtaXNzaXZlRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAgAAAAYW1iaWVudExpZ2h0AAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAADAAAABhbWJpZW50RmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAPAAAAA==";
static const std::string points_Vc4_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUcDBAAAVkVSVENPREUSAgAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c19wb2ludHNQYXJhbXNbNF07Cm91dCBmbG9hdCB2X3BvaW50cm90YXRpb247CmxheW91dChsb2NhdGlvbiA9IDIpIGluIGZsb2F0IGFfcG9pbnRyb3RhdGlvbjsKb3V0IHZlYzQgdl9jb2xvcjsKbGF5b3V0KGxvY2F0aW9uID0gMykgaW4gdmVjNCBhX2NvbG9yOwpsYXlvdXQobG9jYXRpb24gPSAwKSBpbiB2ZWMzIGFfcG9zaXRpb247CmxheW91dChsb2NhdGlvbiA9IDEpIGluIGZsb2F0IGFfcG9pbnRzaXplOwoKdm9pZCBtYWluKCkKewogICAgdl9wb2ludHJvdGF0aW9uID0gYV9wb2ludHJvdGF0aW9uOwogICAgdl9jb2xvciA9IGFfY29sb3I7CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c19wb2ludHNQYXJhbXNbMF0sIHVfdnNfcG9pbnRzUGFyYW1zWzFdLCB1X3ZzX3BvaW50c1BhcmFtc1syXSwgdV92c19wb2ludHNQYXJhbXNbM10pICogdmVjNChhX3Bvc2l0aW9uLCAxLjApOwogICAgZ2xfUG9pbnRTaXplID0gYV9wb2ludHNpemUgLyBnbF9Qb3NpdGlvbi53Owp9CgpSRUZM3QEAAHBvaW50c19WYzRfZ2xzbDMwMGVzAAAAAAAAAAAAAAAABAAAAAAAAAABAAAAAQAAAGFfcG9pbnRyb3RhdGlvbgAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDFhX2NvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABGTFQ0YV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfcG9pbnRzaXplAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAdV92c19wb2ludHNQYXJhbXMAAAAAAAAAAAAAAAAAAABwb2ludHNQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUdSAgAARlJBR0NPREUOAgAAI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKaW4gaGlnaHAgdmVjNCB2X2NvbG9yOwpsYXlvdXQobG9jYXRpb24gPSAwKSBvdXQgaGlnaHAgdmVjNCBnX2ZpbmFsQ29sb3I7CmluIGhpZ2hwIGZsb2F0IHZfcG9pbnRyb3RhdGlvbjsKCmhpZ2hwIHZlYzQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdl9jb2xvcjsKfQoKaGlnaHAgdmVjNCBnZXRCYXNlQ29sb3IoKQp7CiAgICByZXR1cm4gZ2V0VmVydGV4Q29sb3IoKTsKfQoKaGlnaHAgdmVjMyBsaW5lYXJUb3NSR0IoaGlnaHAgdmVjMyBjb2xvcikKewogICAgcmV0dXJuIHBvdyhjb2xvciwgdmVjMygwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzUpKTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCBfNDIgPSBnZXRCYXNlQ29sb3IoKTsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBfNDIueHl6OwogICAgZ19maW5hbENvbG9yID0gdmVjNChsaW5lYXJUb3NSR0IocGFyYW0pLCBfNDIudyk7Cn0KClJFRkwwAAAAcG9pbnRzX1ZjNF9nbHNsMzAwZXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
static const std::string mesh_UltUv1_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUeyBQAAVkVSVENPREUBBAAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwpsYXlvdXQobG9jYXRpb24gPSAwKSBpbiB2ZWMzIGFfcG9zaXRpb247Cm91dCB2ZWMzIHZfcG9zaXRpb247Cm91dCB2ZWMyIHZfdXYxOwpvdXQgdmVjMiB2X3V2MjsKbGF5b3V0KGxvY2F0aW9uID0gMSkgaW4gdmVjMiBhX3RleGNvb3JkMTsKCm1hdDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIHJldHVybiBtYXQ0KHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSk7Cn0KCnZlYzMgZ2V0TW9ycGhQb3NpdGlvbih2ZWMzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKdmVjMyBnZXRTa2luUG9zaXRpb24odmVjMyBwb3MsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKdmVjNCBnZXRQb3NpdGlvbihtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHZlYzMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgdmVjMyBwYXJhbV8xID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBtYXQ0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIHZlYzQoZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpLCAxLjApOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBtYXQ0IHBhcmFtID0gZ2V0Qm9uZVRyYW5zZm9ybSgpOwogICAgdmVjNCBfNjcgPSBnZXRQb3NpdGlvbihwYXJhbSk7CiAgICB2ZWM0IF83OCA9IG1hdDQodV92c19wYnJQYXJhbXNbMF0sIHVfdnNfcGJyUGFyYW1zWzFdLCB1X3ZzX3BiclBhcmFtc1syXSwgdV92c19wYnJQYXJhbXNbM10pICogXzY3OwogICAgdl9wb3NpdGlvbiA9IHZlYzMoXzc4Lnh5eikgLyB2ZWMzKF83OC53KTsKICAgIHZfdXYxID0gdmVjMigwLjApOwogICAgdl91djIgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MSA9IGFfdGV4Y29vcmQxOwogICAgZ2xfUG9zaXRpb24gPSBtYXQ0KHVfdnNfcGJyUGFyYW1zWzhdLCB1X3ZzX3BiclBhcmFtc1s5XSwgdV92c19wYnJQYXJhbXNbMTBdLCB1X3ZzX3BiclBhcmFtc1sxMV0pICogXzY3Owp9CgpSRUZMnQEAAG1lc2hfVWx0VXYxX2dsc2wzMDBlcwAAAAAAAAAAAAAAAgAAAAAAAAABAAAAAwAAAGFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDNhX3RleGNvb3JkMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABOT1JNQUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQyAwAAAHVfdnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAABbW9kZWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABub3JtYWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAQAAAAG12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAACAAAAAU1RBRwQGAABGUkFHQ09ERTcEAAAjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBoaWdocCBpbnQ7Cgp1bmlmb3JtIGhpZ2hwIHZlYzQgdV9mc19wYnJQYXJhbXNbNF07CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfYmFzZUNvbG9yVGV4dHVyZTsKCmluIGhpZ2hwIHZlYzIgdl91djE7CmluIGhpZ2hwIHZlYzMgdl9wb3NpdGlvbjsKbGF5b3V0KGxvY2F0aW9uID0gMCkgb3V0IGhpZ2hwIHZlYzQgZ19maW5hbENvbG9yOwppbiBoaWdocCB2ZWMyIHZfdXYyOwoKaGlnaHAgdmVjMyBzUkdCVG9MaW5lYXIoaGlnaHAgdmVjMyBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCB2ZWMzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9CgpoaWdocCB2ZWM0IHNSR0JUb0xpbmVhcihoaWdocCB2ZWM0IHNyZ2JJbikKewogICAgaGlnaHAgdmVjMyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gdmVjNChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCmhpZ2hwIHZlYzQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdmVjNCgxLjApOwp9CgpoaWdocCB2ZWM0IGdldEJhc2VDb2xvcigpCnsKICAgIGhpZ2hwIHZlYzQgYmFzZUNvbG9yID0gdV9mc19wYnJQYXJhbXNbMF07CiAgICBoaWdocCB2ZWM0IHBhcmFtID0gdGV4dHVyZSh1X2Jhc2VDb2xvclRleHR1cmUsIHZfdXYxKTsKICAgIGhpZ2hwIHZlYzQgXzEwMCA9IGJhc2VDb2xvcjsKICAgIGhpZ2hwIHZlYzQgXzEwMSA9IF8xMDAgKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzEwMTsKICAgIHJldHVybiBfMTAxICogZ2V0VmVydGV4Q29sb3IoKTsKfQoKaGlnaHAgdmVjMyBsaW5lYXJUb3NSR0IoaGlnaHAgdmVjMyBjb2xvcikKewogICAgcmV0dXJuIHBvdyhjb2xvciwgdmVjMygwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzUpKTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCBfMjU2ID0gZ2V0QmFzZUNvbG9yKCk7CiAgICBoaWdocCB2ZWMzIHBhcmFtID0gXzI1Ni54eXo7CiAgICBnX2ZpbmFsQ29sb3IgPSB2ZWM0KGxpbmVhclRvc1JHQihwYXJhbSksIF8yNTYudyk7Cn0KClJFRky5AQAAbWVzaF9VbHRVdjFfZ2xzbDMwMGVzAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAAGAAAAdV9iYXNlQ29sb3JUZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUBgAAAHVfZnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABYmFzZUNvbG9yRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABtZXRhbGxpY0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAEAAAAHJvdWdobmVzc0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAUAAAAZW1pc3NpdmVGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAACAAAABhbWJpZW50TGlnaHQAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAMAAAAGFtYmllbnRGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAA8AAAA";
static const std::string mesh_Uv1PucNor_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUdKCAAAVkVSVENPREVNBgAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwpsYXlvdXQobG9jYXRpb24gPSAwKSBpbiB2ZWMzIGFfcG9zaXRpb247CmxheW91dChsb2NhdGlvbiA9IDEpIGluIHZlYzMgYV9ub3JtYWw7Cm91dCB2ZWMzIHZfcG9zaXRpb247Cm91dCB2ZWMzIHZfbm9ybWFsOwpvdXQgdmVjMiB2X3V2MTsKb3V0IHZlYzIgdl91djI7CmxheW91dChsb2NhdGlvbiA9IDIpIGluIHZlYzIgYV90ZXhjb29yZDE7CgptYXQ0IGdldEJvbmVUcmFuc2Zvcm0oKQp7CiAgICByZXR1cm4gbWF0NCh2ZWM0KDAuMCksIHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCkpOwp9Cgp2ZWMzIGdldE1vcnBoUG9zaXRpb24odmVjMyBwb3MpCnsKICAgIHJldHVybiBwb3M7Cn0KCnZlYzMgZ2V0U2tpblBvc2l0aW9uKHZlYzMgcG9zLCBtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHJldHVybiBwb3M7Cn0KCnZlYzQgZ2V0UG9zaXRpb24obWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICB2ZWMzIHBhcmFtID0gYV9wb3NpdGlvbjsKICAgIHZlYzMgcGFyYW1fMSA9IGdldE1vcnBoUG9zaXRpb24ocGFyYW0pOwogICAgbWF0NCBwYXJhbV8yID0gYm9uZVRyYW5zZm9ybTsKICAgIHJldHVybiB2ZWM0KGdldFNraW5Qb3NpdGlvbihwYXJhbV8xLCBwYXJhbV8yKSwgMS4wKTsKfQoKdmVjMyBnZXRNb3JwaE5vcm1hbCh2ZWMzIG5vcm1hbCkKewogICAgcmV0dXJuIG5vcm1hbDsKfQoKdmVjMyBnZXRTa2luTm9ybWFsKHZlYzMgbm9ybWFsLCBtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHJldHVybiBub3JtYWw7Cn0KCnZlYzMgZ2V0Tm9ybWFsKG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgdmVjMyBwYXJhbSA9IGFfbm9ybWFsOwogICAgdmVjMyBwYXJhbV8xID0gZ2V0TW9ycGhOb3JtYWwocGFyYW0pOwogICAgbWF0NCBwYXJhbV8yID0gYm9uZVRyYW5zZm9ybTsKICAgIHJldHVybiBub3JtYWxpemUoZ2V0U2tpbk5vcm1hbChwYXJhbV8xLCBwYXJhbV8yKSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgXzk0ID0gZ2V0Qm9uZVRyYW5zZm9ybSgpOwogICAgbWF0NCBwYXJhbSA9IF85NDsKICAgIHZlYzQgXzk5ID0gZ2V0UG9zaXRpb24ocGFyYW0pOwogICAgdmVjNCBfMTEwID0gbWF0NCh1X3ZzX3BiclBhcmFtc1swXSwgdV92c19wYnJQYXJhbXNbMV0sIHVfdnNfcGJyUGFyYW1zWzJdLCB1X3ZzX3BiclBhcmFtc1szXSkgKiBfOTk7CiAgICB2X3Bvc2l0aW9uID0gdmVjMyhfMTEwLnh5eikgLyB2ZWMzKF8xMTAudyk7CiAgICBtYXQ0IHBhcmFtXzEgPSBfOTQ7CiAgICB2X25vcm1hbCA9IG5vcm1hbGl6ZSh2ZWMzKChtYXQ0KHVfdnNfcGJyUGFyYW1zWzRdLCB1X3ZzX3BiclBhcmFtc1s1XSwgdV92c19wYnJQYXJhbXNbNl0sIHVfdnNfcGJyUGFyYW1zWzddKSAqIHZlYzQoZ2V0Tm9ybWFsKHBhcmFtXzEpLCAwLjApKS54eXopKTsKICAgIHZfdXYxID0gdmVjMigwLjApOwogICAgdl91djIgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MSA9IGFfdGV4Y29vcmQxOwogICAgZ2xfUG9zaXRpb24gPSBtYXQ0KHVfdnNfcGJyUGFyYW1zWzhdLCB1X3ZzX3BiclBhcmFtc1s5XSwgdV92c19wYnJQYXJhbXNbMTBdLCB1X3ZzX3BiclBhcmFtc1sxMV0pICogXzk5Owp9CgpSRUZM6QEAAG1lc2hfVXYxUHVjTm9yX2dsc2wzMDBlcwAAAAAAAAAAAwAAAAAAAAABAAAAAwAAAGFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDNhX25vcm1hbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABOT1JNQUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV90ZXhjb29yZDEAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMgMAAAB1X3ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAW1vZGVsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAbm9ybWFsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAEAAAABtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAgAAAAFNUQUc6KgAARlJBR0NPREWwJgAAI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKc3RydWN0IE1hdGVyaWFsSW5mbwp7CiAgICBoaWdocCBmbG9hdCBwZXJjZXB0dWFsUm91Z2huZXNzOwogICAgaGlnaHAgdmVjMyBmMDsKICAgIGhpZ2hwIGZsb2F0IGFscGhhUm91Z2huZXNzOwogICAgaGlnaHAgdmVjMyBhbGJlZG9Db2xvcjsKICAgIGhpZ2hwIHZlYzMgZjkwOwogICAgaGlnaHAgZmxvYXQgbWV0YWxsaWM7CiAgICBoaWdocCB2ZWMzIG47CiAgICBoaWdocCB2ZWMzIGJhc2VDb2xvcjsKfTsKCnN0cnVjdCBOb3JtYWxJbmZvCnsKICAgIGhpZ2hwIHZlYzMgbmc7CiAgICBoaWdocCB2ZWMzIG47CiAgICBoaWdocCB2ZWMzIHQ7CiAgICBoaWdocCB2ZWMzIGI7Cn07CgpzdHJ1Y3QgTGlnaHQKewogICAgaW50IHR5cGU7CiAgICBoaWdocCB2ZWMzIGRpcmVjdGlvbjsKICAgIGhpZ2hwIHZlYzMgY29sb3I7CiAgICBoaWdocCB2ZWMzIHBvc2l0aW9uOwogICAgaGlnaHAgZmxvYXQgcmFuZ2U7CiAgICBoaWdocCBmbG9hdCBpbnRlbnNpdHk7CiAgICBoaWdocCBmbG9hdCBpbm5lckNvbmVDb3M7CiAgICBoaWdocCBmbG9hdCBvdXRlckNvbmVDb3M7CiAgICBib29sIHNoYWRvd3M7CiAgICBpbnQgc2hhZG93TWFwSW5kZXg7CiAgICBpbnQgbnVtU2hhZG93Q2FzY2FkZXM7Cn07Cgp1bmlmb3JtIGhpZ2hwIHZlYzQgdV9mc19wYnJQYXJhbXNbNF07CnVuaWZvcm0gaGlnaHAgdmVjNCB1X2ZzX2xpZ2h0aW5nWzI1XTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9iYXNlQ29sb3JUZXh0dXJlOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X21ldGFsbGljUm91Z2huZXNzVGV4dHVyZTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9vY2NsdXNpb25UZXh0dXJlOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X2VtaXNzaXZlVGV4dHVyZTsKCmluIGhpZ2hwIHZlYzIgdl91djE7CmluIGhpZ2hwIHZlYzMgdl9wb3NpdGlvbjsKaW4gaGlnaHAgdmVjMyB2X25vcm1hbDsKbGF5b3V0KGxvY2F0aW9uID0gMCkgb3V0IGhpZ2hwIHZlYzQgZ19maW5hbENvbG9yOwppbiBoaWdocCB2ZWMyIHZfdXYyOwoKaGlnaHAgdmVjMyBzUkdCVG9MaW5lYXIoaGlnaHAgdmVjMyBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCB2ZWMzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9CgpoaWdocCB2ZWM0IHNSR0JUb0xpbmVhcihoaWdocCB2ZWM0IHNyZ2JJbikKewogICAgaGlnaHAgdmVjMyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gdmVjNChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCmhpZ2hwIHZlYzQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdmVjNCgxLjApOwp9CgpoaWdocCB2ZWM0IGdldEJhc2VDb2xvcigpCnsKICAgIGhpZ2hwIHZlYzQgYmFzZUNvbG9yID0gdV9mc19wYnJQYXJhbXNbMF07CiAgICBoaWdocCB2ZWM0IHBhcmFtID0gdGV4dHVyZSh1X2Jhc2VDb2xvclRleHR1cmUsIHZfdXYxKTsKICAgIGhpZ2hwIHZlYzQgXzE2NSA9IGJhc2VDb2xvcjsKICAgIGhpZ2hwIHZlYzQgXzE2NiA9IF8xNjUgKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzE2NjsKICAgIHJldHVybiBfMTY2ICogZ2V0VmVydGV4Q29sb3IoKTsKfQoKTm9ybWFsSW5mbyBnZXROb3JtYWxJbmZvKCkKewogICAgaGlnaHAgdmVjMyBfMjQ4ID0gdmVjMyh2X3V2MSwgMC4wKTsKICAgIGhpZ2hwIHZlYzMgXzI0OSA9IGRGZHgoXzI0OCk7CiAgICBoaWdocCB2ZWMzIF8yNTUgPSBkRmR5KF8yNDgpOwogICAgaGlnaHAgZmxvYXQgXzI1OCA9IF8yNTUueTsKICAgIGhpZ2hwIGZsb2F0IF8yNjUgPSBfMjQ5Lnk7CiAgICBoaWdocCB2ZWMzIF8yODMgPSAoKGRGZHgodl9wb3NpdGlvbikgKiBfMjU4KSAtIChkRmR5KHZfcG9zaXRpb24pICogXzI2NSkpIC8gdmVjMygoXzI0OS54ICogXzI1OCkgLSAoXzI1NS54ICogXzI2NSkpOwogICAgaGlnaHAgdmVjMyBfMjg3ID0gbm9ybWFsaXplKHZfbm9ybWFsKTsKICAgIGhpZ2hwIHZlYzMgXzI5NiA9IG5vcm1hbGl6ZShfMjgzIC0gKF8yODcgKiBkb3QoXzI4NywgXzI4MykpKTsKICAgIHJldHVybiBOb3JtYWxJbmZvKF8yODcsIF8yODcsIF8yOTYsIGNyb3NzKF8yODcsIF8yOTYpKTsKfQoKTWF0ZXJpYWxJbmZvIGdldE1ldGFsbGljUm91Z2huZXNzSW5mbyhpbm91dCBNYXRlcmlhbEluZm8gaW5mbywgaGlnaHAgZmxvYXQgZjBfaW9yKQp7CiAgICBpbmZvLm1ldGFsbGljID0gdV9mc19wYnJQYXJhbXNbMV0ueDsKICAgIGluZm8ucGVyY2VwdHVhbFJvdWdobmVzcyA9IHVfZnNfcGJyUGFyYW1zWzFdLnk7CiAgICBoaWdocCB2ZWM0IF8xODYgPSB0ZXh0dXJlKHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlLCB2X3V2MSk7CiAgICBpbmZvLnBlcmNlcHR1YWxSb3VnaG5lc3MgKj0gXzE4Ni55OwogICAgaW5mby5tZXRhbGxpYyAqPSBfMTg2Lno7CiAgICBoaWdocCB2ZWMzIF8yMDMgPSB2ZWMzKGYwX2lvcik7CiAgICBpbmZvLmFsYmVkb0NvbG9yID0gbWl4KGluZm8uYmFzZUNvbG9yICogKHZlYzMoMS4wKSAtIF8yMDMpLCB2ZWMzKDAuMCksIHZlYzMoaW5mby5tZXRhbGxpYykpOwogICAgaW5mby5mMCA9IG1peChfMjAzLCBpbmZvLmJhc2VDb2xvciwgdmVjMyhpbmZvLm1ldGFsbGljKSk7CiAgICByZXR1cm4gaW5mbzsKfQoKaGlnaHAgdmVjNCBnZXRPY2NsdXNpb25UZXh0dXJlKCkKewogICAgcmV0dXJuIHRleHR1cmUodV9vY2NsdXNpb25UZXh0dXJlLCB2X3V2MSk7Cn0KCmhpZ2hwIGZsb2F0IGNsYW1wZWREb3QoaGlnaHAgdmVjMyB4LCBoaWdocCB2ZWMzIHkpCnsKICAgIHJldHVybiBjbGFtcChkb3QoeCwgeSksIDAuMCwgMS4wKTsKfQoKaGlnaHAgZmxvYXQgZ2V0UmFuZ2VBdHRlbnVhdGlvbihoaWdocCBmbG9hdCByYW5nZSwgaGlnaHAgZmxvYXQgX2Rpc3RhbmNlKQp7CiAgICBpZiAocmFuZ2UgPD0gMC4wKQogICAgewogICAgICAgIHJldHVybiAxLjAgLyBwb3coX2Rpc3RhbmNlLCAyLjApOwogICAgfQogICAgcmV0dXJuIG1heChtaW4oMS4wIC0gcG93KF9kaXN0YW5jZSAvIHJhbmdlLCA0LjApLCAxLjApLCAwLjApIC8gcG93KF9kaXN0YW5jZSwgMi4wKTsKfQoKaGlnaHAgZmxvYXQgZ2V0U3BvdEF0dGVudWF0aW9uKGhpZ2hwIHZlYzMgcG9pbnRUb0xpZ2h0LCBoaWdocCB2ZWMzIHNwb3REaXJlY3Rpb24sIGhpZ2hwIGZsb2F0IG91dGVyQ29uZUNvcywgaGlnaHAgZmxvYXQgaW5uZXJDb25lQ29zKQp7CiAgICBoaWdocCBmbG9hdCBfNDY0ID0gZG90KG5vcm1hbGl6ZShzcG90RGlyZWN0aW9uKSwgbm9ybWFsaXplKC1wb2ludFRvTGlnaHQpKTsKICAgIGlmIChfNDY0ID4gb3V0ZXJDb25lQ29zKQogICAgewogICAgICAgIGlmIChfNDY0IDwgaW5uZXJDb25lQ29zKQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIHNtb290aHN0ZXAob3V0ZXJDb25lQ29zLCBpbm5lckNvbmVDb3MsIF80NjQpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gMS4wOwogICAgfQogICAgcmV0dXJuIDAuMDsKfQoKaGlnaHAgdmVjMyBnZXRMaWdoSW50ZW5zaXR5KExpZ2h0IGxpZ2h0LCBoaWdocCB2ZWMzIHBvaW50VG9MaWdodCkKewogICAgaGlnaHAgZmxvYXQgcmFuZ2VBdHRlbnVhdGlvbiA9IDEuMDsKICAgIGhpZ2hwIGZsb2F0IHNwb3RBdHRlbnVhdGlvbiA9IDEuMDsKICAgIGlmIChsaWdodC50eXBlICE9IDApCiAgICB7CiAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW0gPSBsaWdodC5yYW5nZTsKICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8xID0gbGVuZ3RoKHBvaW50VG9MaWdodCk7CiAgICAgICAgcmFuZ2VBdHRlbnVhdGlvbiA9IGdldFJhbmdlQXR0ZW51YXRpb24ocGFyYW0sIHBhcmFtXzEpOwogICAgfQogICAgaWYgKGxpZ2h0LnR5cGUgPT0gMikKICAgIHsKICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzIgPSBwb2ludFRvTGlnaHQ7CiAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8zID0gbGlnaHQuZGlyZWN0aW9uOwogICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzQgPSBsaWdodC5vdXRlckNvbmVDb3M7CiAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fNSA9IGxpZ2h0LmlubmVyQ29uZUNvczsKICAgICAgICBzcG90QXR0ZW51YXRpb24gPSBnZXRTcG90QXR0ZW51YXRpb24ocGFyYW1fMiwgcGFyYW1fMywgcGFyYW1fNCwgcGFyYW1fNSk7CiAgICB9CiAgICByZXR1cm4gbGlnaHQuY29sb3IgKiAoKHJhbmdlQXR0ZW51YXRpb24gKiBzcG90QXR0ZW51YXRpb24pICogbGlnaHQuaW50ZW5zaXR5KTsKfQoKaGlnaHAgdmVjMyBGX1NjaGxpY2soaGlnaHAgdmVjMyBmMCwgaGlnaHAgdmVjMyBmOTAsIGhpZ2hwIGZsb2F0IFZkb3RIKQp7CiAgICByZXR1cm4gZjAgKyAoKGY5MCAtIGYwKSAqIHBvdyhjbGFtcCgxLjAgLSBWZG90SCwgMC4wLCAxLjApLCA1LjApKTsKfQoKaGlnaHAgdmVjMyBCUkRGX2xhbWJlcnRpYW4oaGlnaHAgdmVjMyBmMCwgaGlnaHAgdmVjMyBmOTAsIGhpZ2hwIHZlYzMgZGlmZnVzZUNvbG9yLCBoaWdocCBmbG9hdCBWZG90SCkKewogICAgaGlnaHAgdmVjMyBwYXJhbSA9IGYwOwogICAgaGlnaHAgdmVjMyBwYXJhbV8xID0gZjkwOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMiA9IFZkb3RIOwogICAgcmV0dXJuICh2ZWMzKDEuMCkgLSBGX1NjaGxpY2socGFyYW0sIHBhcmFtXzEsIHBhcmFtXzIpKSAqIChkaWZmdXNlQ29sb3IgKiB2ZWMzKDAuMzE4MzA5ODczMzQyNTE0MDM4MDg1OTM3NSkpOwp9CgpoaWdocCBmbG9hdCBWX0dHWChoaWdocCBmbG9hdCBOZG90TCwgaGlnaHAgZmxvYXQgTmRvdFYsIGhpZ2hwIGZsb2F0IGFscGhhUm91Z2huZXNzKQp7CiAgICBoaWdocCBmbG9hdCBfMzMyID0gYWxwaGFSb3VnaG5lc3MgKiBhbHBoYVJvdWdobmVzczsKICAgIGhpZ2hwIGZsb2F0IF8zMzkgPSAxLjAgLSBfMzMyOwogICAgaGlnaHAgZmxvYXQgXzM2MCA9IChOZG90TCAqIHNxcnQoKChOZG90ViAqIE5kb3RWKSAqIF8zMzkpICsgXzMzMikpICsgKE5kb3RWICogc3FydCgoKE5kb3RMICogTmRvdEwpICogXzMzOSkgKyBfMzMyKSk7CiAgICBpZiAoXzM2MCA+IDAuMCkKICAgIHsKICAgICAgICByZXR1cm4gMC41IC8gXzM2MDsKICAgIH0KICAgIHJldHVybiAwLjA7Cn0KCmhpZ2hwIGZsb2F0IERfR0dYKGhpZ2hwIGZsb2F0IE5kb3RILCBoaWdocCBmbG9hdCBhbHBoYVJvdWdobmVzcykKewogICAgaGlnaHAgZmxvYXQgXzM3NCA9IGFscGhhUm91Z2huZXNzICogYWxwaGFSb3VnaG5lc3M7CiAgICBoaWdocCBmbG9hdCBfMzgyID0gKChOZG90SCAqIE5kb3RIKSAqIChfMzc0IC0gMS4wKSkgKyAxLjA7CiAgICByZXR1cm4gXzM3NCAvICgoMy4xNDE1OTI3NDEwMTI1NzMyNDIxODc1ICogXzM4MikgKiBfMzgyKTsKfQoKaGlnaHAgdmVjMyBCUkRGX3NwZWN1bGFyR0dYKGhpZ2hwIHZlYzMgZjAsIGhpZ2hwIHZlYzMgZjkwLCBoaWdocCBmbG9hdCBhbHBoYVJvdWdobmVzcywgaGlnaHAgZmxvYXQgVmRvdEgsIGhpZ2hwIGZsb2F0IE5kb3RMLCBoaWdocCBmbG9hdCBOZG90ViwgaGlnaHAgZmxvYXQgTmRvdEgpCnsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBmMDsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMSA9IGY5MDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzIgPSBWZG90SDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzMgPSBOZG90TDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzQgPSBOZG90VjsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzUgPSBhbHBoYVJvdWdobmVzczsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzYgPSBOZG90SDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzcgPSBhbHBoYVJvdWdobmVzczsKICAgIHJldHVybiAoRl9TY2hsaWNrKHBhcmFtLCBwYXJhbV8xLCBwYXJhbV8yKSAqIFZfR0dYKHBhcmFtXzMsIHBhcmFtXzQsIHBhcmFtXzUpKSAqIERfR0dYKHBhcmFtXzYsIHBhcmFtXzcpOwp9CgpoaWdocCB2ZWM0IGdldEVtaXNzaXZlVGV4dHVyZSgpCnsKICAgIHJldHVybiB0ZXh0dXJlKHVfZW1pc3NpdmVUZXh0dXJlLCB2X3V2MSk7Cn0KCmhpZ2hwIHZlYzMgbGluZWFyVG9zUkdCKGhpZ2hwIHZlYzMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIHZlYzMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIHZlYzQgXzUyOSA9IGdldEJhc2VDb2xvcigpOwogICAgaGlnaHAgdmVjMyBfODM0ID0gZ2V0Tm9ybWFsSW5mbygpLm47CiAgICBoaWdocCB2ZWMzIF84MzggPSB2ZWMzKDAuMCk7CiAgICBoaWdocCBmbG9hdCBfODM5ID0gMC4wOwogICAgaGlnaHAgdmVjMyBfODQwID0gdmVjMygwLjApOwogICAgaGlnaHAgdmVjMyBfODQxID0gdmVjMygwLjApOwogICAgaGlnaHAgdmVjMyBfNTQ0ID0gXzUyOS54eXo7CiAgICBNYXRlcmlhbEluZm8gcGFyYW0gPSBNYXRlcmlhbEluZm8oMC4wLCB2ZWMzKDAuMCksIDAuMCwgdmVjMygwLjApLCB2ZWMzKDAuMCksIDAuMCwgdmVjMygwLjApLCBfNTQ0KTsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzEgPSAwLjAzOTk5OTk5OTEwNTkzMDMyODM2OTE0MDYyNTsKICAgIE1hdGVyaWFsSW5mbyBfNTU0ID0gZ2V0TWV0YWxsaWNSb3VnaG5lc3NJbmZvKHBhcmFtLCBwYXJhbV8xKTsKICAgIF84MzggPSBfNTU0LmYwOwogICAgXzg0MCA9IF81NTQuYWxiZWRvQ29sb3I7CiAgICBoaWdocCBmbG9hdCBfNTU3ID0gY2xhbXAoXzU1NC5wZXJjZXB0dWFsUm91Z2huZXNzLCAwLjAsIDEuMCk7CiAgICBfODM5ID0gXzU1NyAqIF81NTc7CiAgICBfODQxID0gdmVjMyhjbGFtcChtYXgobWF4KF81NTQuZjAueCwgXzU1NC5mMC55KSwgXzU1NC5mMC56KSAqIDUwLjAsIDAuMCwgMS4wKSk7CiAgICBoaWdocCB2ZWMzIGZfc3BlY3VsYXIgPSB2ZWMzKDAuMCk7CiAgICBoaWdocCB2ZWMzIGZfZW1pc3NpdmUgPSB2ZWMzKDAuMCk7CiAgICBoaWdocCB2ZWMzIGZfZGlmZnVzZSA9ICh1X2ZzX3BiclBhcmFtc1szXS54eXogKiBwb3codV9mc19wYnJQYXJhbXNbM10udywgMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSkgKiBfNTQ0OwogICAgaGlnaHAgdmVjNCBfNjAyID0gZ2V0T2NjbHVzaW9uVGV4dHVyZSgpOwogICAgaGlnaHAgZmxvYXQgXzYwMyA9IF82MDIueDsKICAgIGZfZGlmZnVzZSAqPSBfNjAzOwogICAgZl9zcGVjdWxhciAqPSBfNjAzOwogICAgaGlnaHAgdmVjMyBfNjMwID0gbm9ybWFsaXplKHVfZnNfbGlnaHRpbmdbMjRdLnh5eiAtIHZfcG9zaXRpb24pOwogICAgaGlnaHAgdmVjMyBwb2ludFRvTGlnaHQ7CiAgICBmb3IgKGludCBpID0gMDsgaSA8IDY7IGkrKykKICAgIHsKICAgICAgICBpbnQgXzY0MyA9IGludCh1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMTJdLncpOwogICAgICAgIGlmICh1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgNl0udyA+IDAuMCkKICAgICAgICB7CiAgICAgICAgICAgIGlmIChfNjQzICE9IDApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHBvaW50VG9MaWdodCA9IHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxMl0ueHl6IC0gdl9wb3NpdGlvbjsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHBvaW50VG9MaWdodCA9IC11X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMF0ueHl6OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgXzcwNSA9IG5vcm1hbGl6ZShwb2ludFRvTGlnaHQpOwogICAgICAgICAgICBoaWdocCB2ZWMzIF83MTAgPSBub3JtYWxpemUoXzcwNSArIF82MzApOwogICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzIgPSBfODM0OwogICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzMgPSBfNzA1OwogICAgICAgICAgICBoaWdocCBmbG9hdCBfNzE2ID0gY2xhbXBlZERvdChwYXJhbV8yLCBwYXJhbV8zKTsKICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV80ID0gXzgzNDsKICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV81ID0gXzYzMDsKICAgICAgICAgICAgaGlnaHAgZmxvYXQgXzcyMiA9IGNsYW1wZWREb3QocGFyYW1fNCwgcGFyYW1fNSk7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fNiA9IF84MzQ7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fNyA9IF83MTA7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fOCA9IF83MDU7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fOSA9IF83MTA7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMTAgPSBfNjMwOwogICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzExID0gXzcxMDsKICAgICAgICAgICAgaGlnaHAgZmxvYXQgXzc0MCA9IGNsYW1wZWREb3QocGFyYW1fMTAsIHBhcmFtXzExKTsKICAgICAgICAgICAgaWYgKChfNzE2ID4gMC4wKSB8fCAoXzcyMiA+IDAuMCkpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIExpZ2h0IHBhcmFtXzEyID0gTGlnaHQoXzY0MywgdV9mc19saWdodGluZ1tpICogMSArIDBdLnh5eiwgdV9mc19saWdodGluZ1tpICogMSArIDZdLnh5eiwgdV9mc19saWdodGluZ1tpICogMSArIDEyXS54eXosIHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAwXS53LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgNl0udywgdV9mc19saWdodGluZ1tpICogMSArIDE4XS54LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMThdLnksICh1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMThdLnogPCAwLjApID8gZmFsc2UgOiB0cnVlLCBpbnQodV9mc19saWdodGluZ1tpICogMSArIDE4XS56KSwgaW50KHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxOF0udykpOwogICAgICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8xMyA9IHBvaW50VG9MaWdodDsKICAgICAgICAgICAgICAgIGhpZ2hwIHZlYzMgXzc1OSA9IChnZXRMaWdoSW50ZW5zaXR5KHBhcmFtXzEyLCBwYXJhbV8xMykgKiAxLjApICogXzcxNjsKICAgICAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMTQgPSBfODM4OwogICAgICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8xNSA9IF84NDE7CiAgICAgICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzE2ID0gXzg0MDsKICAgICAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzE3ID0gXzc0MDsKICAgICAgICAgICAgICAgIGZfZGlmZnVzZSArPSAoXzc1OSAqIEJSREZfbGFtYmVydGlhbihwYXJhbV8xNCwgcGFyYW1fMTUsIHBhcmFtXzE2LCBwYXJhbV8xNykpOwogICAgICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8xOCA9IF84Mzg7CiAgICAgICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzE5ID0gXzg0MTsKICAgICAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzIwID0gXzgzOTsKICAgICAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzIxID0gXzc0MDsKICAgICAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzIyID0gXzcxNjsKICAgICAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzIzID0gXzcyMjsKICAgICAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzI0ID0gY2xhbXBlZERvdChwYXJhbV82LCBwYXJhbV83KTsKICAgICAgICAgICAgICAgIGZfc3BlY3VsYXIgKz0gKF83NTkgKiBCUkRGX3NwZWN1bGFyR0dYKHBhcmFtXzE4LCBwYXJhbV8xOSwgcGFyYW1fMjAsIHBhcmFtXzIxLCBwYXJhbV8yMiwgcGFyYW1fMjMsIHBhcmFtXzI0KSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBmX2VtaXNzaXZlID0gdV9mc19wYnJQYXJhbXNbMl0ueHl6OwogICAgaGlnaHAgdmVjMyBwYXJhbV8yNSA9IGdldEVtaXNzaXZlVGV4dHVyZSgpLnh5ejsKICAgIGhpZ2hwIHZlYzMgXzgwOSA9IGZfZW1pc3NpdmU7CiAgICBoaWdocCB2ZWMzIF84MTAgPSBfODA5ICogc1JHQlRvTGluZWFyKHBhcmFtXzI1KTsKICAgIGZfZW1pc3NpdmUgPSBfODEwOwogICAgaGlnaHAgdmVjMyBwYXJhbV8yNiA9IChfODEwICsgZl9kaWZmdXNlKSArIGZfc3BlY3VsYXI7CiAgICBnX2ZpbmFsQ29sb3IgPSB2ZWM0KGxpbmVhclRvc1JHQihwYXJhbV8yNiksIF81Mjkudyk7Cn0KClJFRkx2AwAAbWVzaF9VdjFQdWNOb3JfZ2xzbDMwMGVzAAAAAAAAAAAAAAAABAAAAAIAAAALAAAAdV9iYXNlQ29sb3JUZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUdV9tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUAAAAAAAACAAAAAQAAADJEICBURkxUdV9vY2NsdXNpb25UZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAgAAADJEICBURkxUdV9lbWlzc2l2ZVRleHR1cmUAAAAAAAAAAAAAAAAAAAACAAAAAwAAADJEICBURkxUBgAAAHVfZnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABYmFzZUNvbG9yRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABtZXRhbGxpY0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAEAAAAHJvdWdobmVzc0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAUAAAAZW1pc3NpdmVGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAACAAAABhbWJpZW50TGlnaHQAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAMAAAAGFtYmllbnRGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAA8AAAABQAAAHVfZnNfbGlnaHRpbmcAAAAAAAAAAAAAAAAAAAAAAAAAbGlnaHRpbmcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAJABAAABZGlyZWN0aW9uX3JhbmdlAAAAAAAAAAAAAAAAAAAAAABGTFQ0BgAAAAAAAABjb2xvcl9pbnRlbnNpdHkAAAAAAAAAAAAAAAAAAAAAAEZMVDQGAAAAYAAAAHBvc2l0aW9uX3R5cGUAAAAAAAAAAAAAAAAAAAAAAAAARkxUNAYAAADAAAAAaW5Db25lX291Q29uZV9zaGFkb3dzX2Nhc2NhZGVzAABGTFQ0BgAAACABAABleWVQb3MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAgAEAAA==";
static const std::string mesh_Uv1PucNorNmpTanFog_glsl300es = "";
static const std::string mesh_PucShwPcfNorTanFogMtaMnrMtg_glsl300es = "";
static const std::string mesh_UltUv1Vc4Fog_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUdNBgAAVkVSVENPREVQBAAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwpsYXlvdXQobG9jYXRpb24gPSAwKSBpbiB2ZWMzIGFfcG9zaXRpb247Cm91dCB2ZWMzIHZfcG9zaXRpb247Cm91dCB2ZWMyIHZfdXYxOwpvdXQgdmVjMiB2X3V2MjsKbGF5b3V0KGxvY2F0aW9uID0gMSkgaW4gdmVjMiBhX3RleGNvb3JkMTsKb3V0IHZlYzQgdl9jb2xvcjsKbGF5b3V0KGxvY2F0aW9uID0gMikgaW4gdmVjNCBhX2NvbG9yOwoKbWF0NCBnZXRCb25lVHJhbnNmb3JtKCkKewogICAgcmV0dXJuIG1hdDQodmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSwgdmVjNCgwLjApKTsKfQoKdmVjMyBnZXRNb3JwaFBvc2l0aW9uKHZlYzMgcG9zKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2ZWMzIGdldFNraW5Qb3NpdGlvbih2ZWMzIHBvcywgbWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICByZXR1cm4gcG9zOwp9Cgp2ZWM0IGdldFBvc2l0aW9uKG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgdmVjMyBwYXJhbSA9IGFfcG9zaXRpb247CiAgICB2ZWMzIHBhcmFtXzEgPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIG1hdDQgcGFyYW1fMiA9IGJvbmVUcmFuc2Zvcm07CiAgICByZXR1cm4gdmVjNChnZXRTa2luUG9zaXRpb24ocGFyYW1fMSwgcGFyYW1fMiksIDEuMCk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcGFyYW0gPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICB2ZWM0IF82NyA9IGdldFBvc2l0aW9uKHBhcmFtKTsKICAgIHZlYzQgXzc4ID0gbWF0NCh1X3ZzX3BiclBhcmFtc1swXSwgdV92c19wYnJQYXJhbXNbMV0sIHVfdnNfcGJyUGFyYW1zWzJdLCB1X3ZzX3BiclBhcmFtc1szXSkgKiBfNjc7CiAgICB2X3Bvc2l0aW9uID0gdmVjMyhfNzgueHl6KSAvIHZlYzMoXzc4LncpOwogICAgdl91djEgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MiA9IHZlYzIoMC4wKTsKICAgIHZfdXYxID0gYV90ZXhjb29yZDE7CiAgICB2X2NvbG9yID0gYV9jb2xvcjsKICAgIGdsX1Bvc2l0aW9uID0gbWF0NCh1X3ZzX3BiclBhcmFtc1s4XSwgdV92c19wYnJQYXJhbXNbOV0sIHVfdnNfcGJyUGFyYW1zWzEwXSwgdV92c19wYnJQYXJhbXNbMTFdKSAqIF82NzsKfQoKUkVGTOkBAABtZXNoX1VsdFV2MVZjNEZvZ19nbHNsMzAwZXMAAAAAAAMAAAAAAAAAAQAAAAMAAABhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV90ZXhjb29yZDEAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMmFfY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQDAAAAdV92c19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAFtb2RlbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAG5vcm1hbE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAABAAAAAbXZwTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAIAAAABTVEFHGQYAAEZSQUdDT0RFTAQAACN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIGhpZ2hwIGludDsKCnVuaWZvcm0gaGlnaHAgdmVjNCB1X2ZzX3BiclBhcmFtc1s0XTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9iYXNlQ29sb3JUZXh0dXJlOwoKaW4gaGlnaHAgdmVjNCB2X2NvbG9yOwppbiBoaWdocCB2ZWMyIHZfdXYxOwppbiBoaWdocCB2ZWMzIHZfcG9zaXRpb247CmxheW91dChsb2NhdGlvbiA9IDApIG91dCBoaWdocCB2ZWM0IGdfZmluYWxDb2xvcjsKaW4gaGlnaHAgdmVjMiB2X3V2MjsKCmhpZ2hwIHZlYzMgc1JHQlRvTGluZWFyKGhpZ2hwIHZlYzMgc3JnYkluKQp7CiAgICByZXR1cm4gcG93KHNyZ2JJbiwgdmVjMygyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjUpKTsKfQoKaGlnaHAgdmVjNCBzUkdCVG9MaW5lYXIoaGlnaHAgdmVjNCBzcmdiSW4pCnsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBzcmdiSW4ueHl6OwogICAgcmV0dXJuIHZlYzQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9CgpoaWdocCB2ZWM0IGdldFZlcnRleENvbG9yKCkKewogICAgcmV0dXJuIHZfY29sb3I7Cn0KCmhpZ2hwIHZlYzQgZ2V0QmFzZUNvbG9yKCkKewogICAgaGlnaHAgdmVjNCBiYXNlQ29sb3IgPSB1X2ZzX3BiclBhcmFtc1swXTsKICAgIGhpZ2hwIHZlYzQgcGFyYW0gPSB0ZXh0dXJlKHVfYmFzZUNvbG9yVGV4dHVyZSwgdl91djEpOwogICAgaGlnaHAgdmVjNCBfMTAzID0gYmFzZUNvbG9yOwogICAgaGlnaHAgdmVjNCBfMTA0ID0gXzEwMyAqIHNSR0JUb0xpbmVhcihwYXJhbSk7CiAgICBiYXNlQ29sb3IgPSBfMTA0OwogICAgcmV0dXJuIF8xMDQgKiBnZXRWZXJ0ZXhDb2xvcigpOwp9CgpoaWdocCB2ZWMzIGxpbmVhclRvc1JHQihoaWdocCB2ZWMzIGNvbG9yKQp7CiAgICByZXR1cm4gcG93KGNvbG9yLCB2ZWMzKDAuNDU0NTQ1NDY4MDkxOTY0NzIxNjc5Njg3NSkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IF8yNTkgPSBnZXRCYXNlQ29sb3IoKTsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBfMjU5Lnh5ejsKICAgIGdfZmluYWxDb2xvciA9IHZlYzQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzI1OS53KTsKfQoKUkVGTLkBAABtZXNoX1VsdFV2MVZjNEZvZ19nbHNsMzAwZXMAAAAAAAAAAAABAAAAAQAAAAYAAAB1X2Jhc2VDb2xvclRleHR1cmUAAAAAAAAAAAAAAAAAAAIAAAAAAAAAMkQgIFRGTFQGAAAAdV9mc19wYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABwYnJQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFiYXNlQ29sb3JGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAG1ldGFsbGljRmFjdG9yAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAQAAAAcm91Z2huZXNzRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAABQAAABlbWlzc2l2ZUZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAIAAAAGFtYmllbnRMaWdodAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAAwAAAAYW1iaWVudEZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAABGTFQxAQAAADwAAAA=";
static const std::string mesh_Uv1PucShwPcfNorFogSki_glsl300es = "";
static const std::string mesh_UltUv1Fog_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUeyBQAAVkVSVENPREUBBAAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwpsYXlvdXQobG9jYXRpb24gPSAwKSBpbiB2ZWMzIGFfcG9zaXRpb247Cm91dCB2ZWMzIHZfcG9zaXRpb247Cm91dCB2ZWMyIHZfdXYxOwpvdXQgdmVjMiB2X3V2MjsKbGF5b3V0KGxvY2F0aW9uID0gMSkgaW4gdmVjMiBhX3RleGNvb3JkMTsKCm1hdDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIHJldHVybiBtYXQ0KHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSk7Cn0KCnZlYzMgZ2V0TW9ycGhQb3NpdGlvbih2ZWMzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKdmVjMyBnZXRTa2luUG9zaXRpb24odmVjMyBwb3MsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKdmVjNCBnZXRQb3NpdGlvbihtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHZlYzMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgdmVjMyBwYXJhbV8xID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBtYXQ0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIHZlYzQoZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpLCAxLjApOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBtYXQ0IHBhcmFtID0gZ2V0Qm9uZVRyYW5zZm9ybSgpOwogICAgdmVjNCBfNjcgPSBnZXRQb3NpdGlvbihwYXJhbSk7CiAgICB2ZWM0IF83OCA9IG1hdDQodV92c19wYnJQYXJhbXNbMF0sIHVfdnNfcGJyUGFyYW1zWzFdLCB1X3ZzX3BiclBhcmFtc1syXSwgdV92c19wYnJQYXJhbXNbM10pICogXzY3OwogICAgdl9wb3NpdGlvbiA9IHZlYzMoXzc4Lnh5eikgLyB2ZWMzKF83OC53KTsKICAgIHZfdXYxID0gdmVjMigwLjApOwogICAgdl91djIgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MSA9IGFfdGV4Y29vcmQxOwogICAgZ2xfUG9zaXRpb24gPSBtYXQ0KHVfdnNfcGJyUGFyYW1zWzhdLCB1X3ZzX3BiclBhcmFtc1s5XSwgdV92c19wYnJQYXJhbXNbMTBdLCB1X3ZzX3BiclBhcmFtc1sxMV0pICogXzY3Owp9CgpSRUZMnQEAAG1lc2hfVWx0VXYxRm9nX2dsc2wzMDBlcwAAAAAAAAAAAgAAAAAAAAABAAAAAwAAAGFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDNhX3RleGNvb3JkMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABOT1JNQUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQyAwAAAHVfdnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAABbW9kZWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABub3JtYWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAQAAAAG12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAACAAAAAU1RBRwQGAABGUkFHQ09ERTcEAAAjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBoaWdocCBpbnQ7Cgp1bmlmb3JtIGhpZ2hwIHZlYzQgdV9mc19wYnJQYXJhbXNbNF07CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfYmFzZUNvbG9yVGV4dHVyZTsKCmluIGhpZ2hwIHZlYzIgdl91djE7CmluIGhpZ2hwIHZlYzMgdl9wb3NpdGlvbjsKbGF5b3V0KGxvY2F0aW9uID0gMCkgb3V0IGhpZ2hwIHZlYzQgZ19maW5hbENvbG9yOwppbiBoaWdocCB2ZWMyIHZfdXYyOwoKaGlnaHAgdmVjMyBzUkdCVG9MaW5lYXIoaGlnaHAgdmVjMyBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCB2ZWMzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9CgpoaWdocCB2ZWM0IHNSR0JUb0xpbmVhcihoaWdocCB2ZWM0IHNyZ2JJbikKewogICAgaGlnaHAgdmVjMyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gdmVjNChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCmhpZ2hwIHZlYzQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdmVjNCgxLjApOwp9CgpoaWdocCB2ZWM0IGdldEJhc2VDb2xvcigpCnsKICAgIGhpZ2hwIHZlYzQgYmFzZUNvbG9yID0gdV9mc19wYnJQYXJhbXNbMF07CiAgICBoaWdocCB2ZWM0IHBhcmFtID0gdGV4dHVyZSh1X2Jhc2VDb2xvclRleHR1cmUsIHZfdXYxKTsKICAgIGhpZ2hwIHZlYzQgXzEwMCA9IGJhc2VDb2xvcjsKICAgIGhpZ2hwIHZlYzQgXzEwMSA9IF8xMDAgKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzEwMTsKICAgIHJldHVybiBfMTAxICogZ2V0VmVydGV4Q29sb3IoKTsKfQoKaGlnaHAgdmVjMyBsaW5lYXJUb3NSR0IoaGlnaHAgdmVjMyBjb2xvcikKewogICAgcmV0dXJuIHBvdyhjb2xvciwgdmVjMygwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzUpKTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCBfMjU2ID0gZ2V0QmFzZUNvbG9yKCk7CiAgICBoaWdocCB2ZWMzIHBhcmFtID0gXzI1Ni54eXo7CiAgICBnX2ZpbmFsQ29sb3IgPSB2ZWM0KGxpbmVhclRvc1JHQihwYXJhbSksIF8yNTYudyk7Cn0KClJFRky5AQAAbWVzaF9VbHRVdjFGb2dfZ2xzbDMwMGVzAAAAAAAAAAAAAAAAAQAAAAEAAAAGAAAAdV9iYXNlQ29sb3JUZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUBgAAAHVfZnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABYmFzZUNvbG9yRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABtZXRhbGxpY0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAEAAAAHJvdWdobmVzc0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAUAAAAZW1pc3NpdmVGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAACAAAABhbWJpZW50TGlnaHQAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAMAAAAGFtYmllbnRGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAA8AAAA";
static const std::string mesh_PucShwPcfNor_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUdsCQAAVkVSVENPREU+BwAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwp1bmlmb3JtIHZlYzQgdV92c19zaGFkb3dzWzI0XTsKbGF5b3V0KGxvY2F0aW9uID0gMCkgaW4gdmVjMyBhX3Bvc2l0aW9uOwpsYXlvdXQobG9jYXRpb24gPSAxKSBpbiB2ZWMzIGFfbm9ybWFsOwpvdXQgdmVjMyB2X3Bvc2l0aW9uOwpvdXQgdmVjMyB2X25vcm1hbDsKb3V0IHZlYzIgdl91djE7Cm91dCB2ZWMyIHZfdXYyOwpvdXQgdmVjNCB2X2xpZ2h0UHJvalBvc1s2XTsKb3V0IGZsb2F0IHZfY2xpcFNwYWNlUG9zWjsKCm1hdDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIHJldHVybiBtYXQ0KHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSk7Cn0KCnZlYzMgZ2V0TW9ycGhQb3NpdGlvbih2ZWMzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKdmVjMyBnZXRTa2luUG9zaXRpb24odmVjMyBwb3MsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKdmVjNCBnZXRQb3NpdGlvbihtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHZlYzMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgdmVjMyBwYXJhbV8xID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBtYXQ0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIHZlYzQoZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpLCAxLjApOwp9Cgp2ZWMzIGdldE1vcnBoTm9ybWFsKHZlYzMgbm9ybWFsKQp7CiAgICByZXR1cm4gbm9ybWFsOwp9Cgp2ZWMzIGdldFNraW5Ob3JtYWwodmVjMyBub3JtYWwsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIG5vcm1hbDsKfQoKdmVjMyBnZXROb3JtYWwobWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICB2ZWMzIHBhcmFtID0gYV9ub3JtYWw7CiAgICB2ZWMzIHBhcmFtXzEgPSBnZXRNb3JwaE5vcm1hbChwYXJhbSk7CiAgICBtYXQ0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIG5vcm1hbGl6ZShnZXRTa2luTm9ybWFsKHBhcmFtXzEsIHBhcmFtXzIpKTsKfQoKdm9pZCBtYWluKCkKewogICAgbWF0NCBfOTQgPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICBtYXQ0IHBhcmFtID0gXzk0OwogICAgdmVjNCBfOTkgPSBnZXRQb3NpdGlvbihwYXJhbSk7CiAgICB2ZWM0IF8xMTAgPSBtYXQ0KHVfdnNfcGJyUGFyYW1zWzBdLCB1X3ZzX3BiclBhcmFtc1sxXSwgdV92c19wYnJQYXJhbXNbMl0sIHVfdnNfcGJyUGFyYW1zWzNdKSAqIF85OTsKICAgIHZfcG9zaXRpb24gPSB2ZWMzKF8xMTAueHl6KSAvIHZlYzMoXzExMC53KTsKICAgIG1hdDQgcGFyYW1fMSA9IF85NDsKICAgIHZfbm9ybWFsID0gbm9ybWFsaXplKHZlYzMoKG1hdDQodV92c19wYnJQYXJhbXNbNF0sIHVfdnNfcGJyUGFyYW1zWzVdLCB1X3ZzX3BiclBhcmFtc1s2XSwgdV92c19wYnJQYXJhbXNbN10pICogdmVjNChnZXROb3JtYWwocGFyYW1fMSksIDAuMCkpLnh5eikpOwogICAgdl91djEgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MiA9IHZlYzIoMC4wKTsKICAgIGZvciAoaW50IGkgPSAwOyBpIDwgNjsgaSsrKQogICAgewogICAgICAgIHZfbGlnaHRQcm9qUG9zW2ldID0gbWF0NCh1X3ZzX3NoYWRvd3NbaSAqIDQgKyAwXSwgdV92c19zaGFkb3dzW2kgKiA0ICsgMV0sIHVfdnNfc2hhZG93c1tpICogNCArIDJdLCB1X3ZzX3NoYWRvd3NbaSAqIDQgKyAzXSkgKiBfMTEwOwogICAgfQogICAgZ2xfUG9zaXRpb24gPSBtYXQ0KHVfdnNfcGJyUGFyYW1zWzhdLCB1X3ZzX3BiclBhcmFtc1s5XSwgdV92c19wYnJQYXJhbXNbMTBdLCB1X3ZzX3BiclBhcmFtc1sxMV0pICogXzk5OwogICAgdl9jbGlwU3BhY2VQb3NaID0gZ2xfUG9zaXRpb24uejsKfQoKUkVGTBoCAABtZXNoX1B1Y1Nod1BjZk5vcl9nbHNsMzAwZXMAAAAAAAIAAAAAAAAAAgAAAAQAAABhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV9ub3JtYWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwMAAAB1X3ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAW1vZGVsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAbm9ybWFsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAEAAAABtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAgAAAAAEAAAB1X3ZzX3NoYWRvd3MAAAAAAAAAAAAAAAAAAAAAAAAAAF8xNjcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAACAAQAAAWxpZ2h0VlBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAYAAAAAAAAAU1RBR11SAABGUkFHQ09ERQZNAAAjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBoaWdocCBpbnQ7CgpzdHJ1Y3QgTWF0ZXJpYWxJbmZvCnsKICAgIGhpZ2hwIGZsb2F0IHBlcmNlcHR1YWxSb3VnaG5lc3M7CiAgICBoaWdocCB2ZWMzIGYwOwogICAgaGlnaHAgZmxvYXQgYWxwaGFSb3VnaG5lc3M7CiAgICBoaWdocCB2ZWMzIGFsYmVkb0NvbG9yOwogICAgaGlnaHAgdmVjMyBmOTA7CiAgICBoaWdocCBmbG9hdCBtZXRhbGxpYzsKICAgIGhpZ2hwIHZlYzMgbjsKICAgIGhpZ2hwIHZlYzMgYmFzZUNvbG9yOwp9OwoKc3RydWN0IE5vcm1hbEluZm8KewogICAgaGlnaHAgdmVjMyBuZzsKICAgIGhpZ2hwIHZlYzMgbjsKICAgIGhpZ2hwIHZlYzMgdDsKICAgIGhpZ2hwIHZlYzMgYjsKfTsKCnN0cnVjdCBMaWdodAp7CiAgICBpbnQgdHlwZTsKICAgIGhpZ2hwIHZlYzMgZGlyZWN0aW9uOwogICAgaGlnaHAgdmVjMyBjb2xvcjsKICAgIGhpZ2hwIHZlYzMgcG9zaXRpb247CiAgICBoaWdocCBmbG9hdCByYW5nZTsKICAgIGhpZ2hwIGZsb2F0IGludGVuc2l0eTsKICAgIGhpZ2hwIGZsb2F0IGlubmVyQ29uZUNvczsKICAgIGhpZ2hwIGZsb2F0IG91dGVyQ29uZUNvczsKICAgIGJvb2wgc2hhZG93czsKICAgIGludCBzaGFkb3dNYXBJbmRleDsKICAgIGludCBudW1TaGFkb3dDYXNjYWRlczsKfTsKCnN0cnVjdCBTaGFkb3cKewogICAgaGlnaHAgZmxvYXQgbWF4QmlhczsKICAgIGhpZ2hwIGZsb2F0IG1pbkJpYXM7CiAgICBoaWdocCB2ZWMyIG1hcFNpemU7CiAgICBoaWdocCB2ZWMyIG5lYXJGYXI7CiAgICBoaWdocCB2ZWM0IGxpZ2h0UHJvalBvczsKfTsKCnVuaWZvcm0gaGlnaHAgdmVjNCB1X2ZzX3BiclBhcmFtc1s0XTsKdW5pZm9ybSBoaWdocCB2ZWM0IHVfZnNfc2hhZG93c1s3XTsKdW5pZm9ybSBoaWdocCB2ZWM0IHVfZnNfbGlnaHRpbmdbMjVdOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X2Jhc2VDb2xvclRleHR1cmU7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X29jY2x1c2lvblRleHR1cmU7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfZW1pc3NpdmVUZXh0dXJlOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X3NoYWRvd01hcDE7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfc2hhZG93TWFwMjsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9zaGFkb3dNYXAzOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X3NoYWRvd01hcDQ7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfc2hhZG93TWFwNTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9zaGFkb3dNYXA2Owp1bmlmb3JtIGhpZ2hwIHNhbXBsZXJDdWJlIHVfc2hhZG93Q3ViZU1hcDE7CgppbiBoaWdocCB2ZWMyIHZfdXYxOwppbiBoaWdocCB2ZWMzIHZfcG9zaXRpb247CmluIGhpZ2hwIHZlYzMgdl9ub3JtYWw7CmluIGhpZ2hwIHZlYzQgdl9saWdodFByb2pQb3NbNl07CmluIGhpZ2hwIGZsb2F0IHZfY2xpcFNwYWNlUG9zWjsKbGF5b3V0KGxvY2F0aW9uID0gMCkgb3V0IGhpZ2hwIHZlYzQgZ19maW5hbENvbG9yOwppbiBoaWdocCB2ZWMyIHZfdXYyOwoKaGlnaHAgdmVjMyBzUkdCVG9MaW5lYXIoaGlnaHAgdmVjMyBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCB2ZWMzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9CgpoaWdocCB2ZWM0IHNSR0JUb0xpbmVhcihoaWdocCB2ZWM0IHNyZ2JJbikKewogICAgaGlnaHAgdmVjMyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gdmVjNChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCmhpZ2hwIHZlYzQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdmVjNCgxLjApOwp9CgpoaWdocCB2ZWM0IGdldEJhc2VDb2xvcigpCnsKICAgIGhpZ2hwIHZlYzQgYmFzZUNvbG9yID0gdV9mc19wYnJQYXJhbXNbMF07CiAgICBoaWdocCB2ZWM0IHBhcmFtID0gdGV4dHVyZSh1X2Jhc2VDb2xvclRleHR1cmUsIHZfdXYxKTsKICAgIGhpZ2hwIHZlYzQgXzIzMiA9IGJhc2VDb2xvcjsKICAgIGhpZ2hwIHZlYzQgXzIzMyA9IF8yMzIgKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzIzMzsKICAgIHJldHVybiBfMjMzICogZ2V0VmVydGV4Q29sb3IoKTsKfQoKTm9ybWFsSW5mbyBnZXROb3JtYWxJbmZvKCkKewogICAgaGlnaHAgdmVjMyBfMzE0ID0gdmVjMyh2X3V2MSwgMC4wKTsKICAgIGhpZ2hwIHZlYzMgXzMxNSA9IGRGZHgoXzMxNCk7CiAgICBoaWdocCB2ZWMzIF8zMjEgPSBkRmR5KF8zMTQpOwogICAgaGlnaHAgZmxvYXQgXzMyNCA9IF8zMjEueTsKICAgIGhpZ2hwIGZsb2F0IF8zMzEgPSBfMzE1Lnk7CiAgICBoaWdocCB2ZWMzIF8zNDkgPSAoKGRGZHgodl9wb3NpdGlvbikgKiBfMzI0KSAtIChkRmR5KHZfcG9zaXRpb24pICogXzMzMSkpIC8gdmVjMygoXzMxNS54ICogXzMyNCkgLSAoXzMyMS54ICogXzMzMSkpOwogICAgaGlnaHAgdmVjMyBfMzUzID0gbm9ybWFsaXplKHZfbm9ybWFsKTsKICAgIGhpZ2hwIHZlYzMgXzM2MiA9IG5vcm1hbGl6ZShfMzQ5IC0gKF8zNTMgKiBkb3QoXzM1MywgXzM0OSkpKTsKICAgIHJldHVybiBOb3JtYWxJbmZvKF8zNTMsIF8zNTMsIF8zNjIsIGNyb3NzKF8zNTMsIF8zNjIpKTsKfQoKTWF0ZXJpYWxJbmZvIGdldE1ldGFsbGljUm91Z2huZXNzSW5mbyhpbm91dCBNYXRlcmlhbEluZm8gaW5mbywgaGlnaHAgZmxvYXQgZjBfaW9yKQp7CiAgICBpbmZvLm1ldGFsbGljID0gdV9mc19wYnJQYXJhbXNbMV0ueDsKICAgIGluZm8ucGVyY2VwdHVhbFJvdWdobmVzcyA9IHVfZnNfcGJyUGFyYW1zWzFdLnk7CiAgICBoaWdocCB2ZWM0IF8yNTMgPSB0ZXh0dXJlKHVfbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlLCB2X3V2MSk7CiAgICBpbmZvLnBlcmNlcHR1YWxSb3VnaG5lc3MgKj0gXzI1My55OwogICAgaW5mby5tZXRhbGxpYyAqPSBfMjUzLno7CiAgICBoaWdocCB2ZWMzIF8yNzAgPSB2ZWMzKGYwX2lvcik7CiAgICBpbmZvLmFsYmVkb0NvbG9yID0gbWl4KGluZm8uYmFzZUNvbG9yICogKHZlYzMoMS4wKSAtIF8yNzApLCB2ZWMzKDAuMCksIHZlYzMoaW5mby5tZXRhbGxpYykpOwogICAgaW5mby5mMCA9IG1peChfMjcwLCBpbmZvLmJhc2VDb2xvciwgdmVjMyhpbmZvLm1ldGFsbGljKSk7CiAgICByZXR1cm4gaW5mbzsKfQoKaGlnaHAgdmVjNCBnZXRPY2NsdXNpb25UZXh0dXJlKCkKewogICAgcmV0dXJuIHRleHR1cmUodV9vY2NsdXNpb25UZXh0dXJlLCB2X3V2MSk7Cn0KCmhpZ2hwIGZsb2F0IGNsYW1wZWREb3QoaGlnaHAgdmVjMyB4LCBoaWdocCB2ZWMzIHkpCnsKICAgIHJldHVybiBjbGFtcChkb3QoeCwgeSksIDAuMCwgMS4wKTsKfQoKU2hhZG93IGdldFNoYWRvdzJEQ29uZihpbnQgaW5kZXgpCnsKICAgIGZvciAoaW50IGkgPSAwOyBpIDwgNjsgaSsrKQogICAgewogICAgICAgIGlmIChpID09IGluZGV4KQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIFNoYWRvdyh1X2ZzX3NoYWRvd3NbaSAqIDEgKyAwXS54LCB1X2ZzX3NoYWRvd3NbaSAqIDEgKyAwXS54ICogMC4xMDAwMDAwMDE0OTAxMTYxMTkzODQ3NjU2MjUsIHVfZnNfc2hhZG93c1tpICogMSArIDBdLnl5LCB1X2ZzX3NoYWRvd3NbaSAqIDEgKyAwXS56dywgdl9saWdodFByb2pQb3NbaV0pOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBTaGFkb3coMC4wLCAwLjAsIHZlYzIoMC4wKSwgdmVjMigwLjApLCB2ZWM0KDAuMCkpOwp9CgpoaWdocCB2ZWM0IGdldFNoYWRvd01hcChpbnQgaW5kZXgsIGhpZ2hwIHZlYzIgY29vcmRzKQp7CiAgICBpZiAoaW5kZXggPT0gMCkKICAgIHsKICAgICAgICByZXR1cm4gdGV4dHVyZSh1X3NoYWRvd01hcDEsIGNvb3Jkcyk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgaWYgKGluZGV4ID09IDEpCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gdGV4dHVyZSh1X3NoYWRvd01hcDIsIGNvb3Jkcyk7CiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgIGlmIChpbmRleCA9PSAyKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dHVyZSh1X3NoYWRvd01hcDMsIGNvb3Jkcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT0gMykKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGV4dHVyZSh1X3NoYWRvd01hcDQsIGNvb3Jkcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IDQpCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGV4dHVyZSh1X3NoYWRvd01hcDUsIGNvb3Jkcyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSA1KQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGV4dHVyZSh1X3NoYWRvd01hcDYsIGNvb3Jkcyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gdmVjNCgwLjApOwp9CgpoaWdocCBmbG9hdCBkZWNvZGVEZXB0aChoaWdocCB2ZWM0IHJnYmEpCnsKICAgIHJldHVybiBkb3QocmdiYSwgdmVjNCgxLjAsIDAuMDAzOTIxNTY4ODU5MzY4NTYyNjk4MzY0MjU3ODEyNSwgMS41Mzc4NzAwNDgxOTYwNTQ5OTUwNTk5NjcwNDEwMTU2ZS0wNSwgNi4wMzA4NjI5MjAxNjk5NjU5NDYxMTU1NTMzNzkwNTg4ZS0wOCkpOwp9CgpoaWdocCBmbG9hdCBzaGFkb3dDb21wYXJlKGludCBzaGFkb3dNYXBJbmRleCwgaGlnaHAgZmxvYXQgY3VycmVudERlcHRoLCBoaWdocCBmbG9hdCBiaWFzLCBoaWdocCB2ZWMyIHRleENvb3JkcykKewogICAgaW50IHBhcmFtID0gc2hhZG93TWFwSW5kZXg7CiAgICBoaWdocCB2ZWMyIHBhcmFtXzEgPSB0ZXhDb29yZHM7CiAgICBoaWdocCB2ZWM0IHBhcmFtXzIgPSBnZXRTaGFkb3dNYXAocGFyYW0sIHBhcmFtXzEpOwogICAgcmV0dXJuIGZsb2F0KChjdXJyZW50RGVwdGggLSBiaWFzKSA+IGRlY29kZURlcHRoKHBhcmFtXzIpKTsKfQoKaGlnaHAgZmxvYXQgc2hhZG93Q2FsY3VsYXRpb25BdXgoaW50IHNoYWRvd01hcEluZGV4LCBTaGFkb3cgc2hhZG93Q29uZiwgaGlnaHAgZmxvYXQgTmRvdEwpCnsKICAgIGhpZ2hwIGZsb2F0IHNoYWRvdyA9IDAuMDsKICAgIGhpZ2hwIHZlYzMgXzgxNiA9ICgoc2hhZG93Q29uZi5saWdodFByb2pQb3MueHl6IC8gdmVjMyhzaGFkb3dDb25mLmxpZ2h0UHJvalBvcy53KSkgKiAwLjUpICsgdmVjMygwLjUpOwogICAgaGlnaHAgZmxvYXQgXzgxOSA9IF84MTYuejsKICAgIGhpZ2hwIGZsb2F0IF84MjggPSBtYXgoc2hhZG93Q29uZi5tYXhCaWFzICogKDEuMCAtIE5kb3RMKSwgc2hhZG93Q29uZi5taW5CaWFzKTsKICAgIGhpZ2hwIHZlYzIgXzgzMyA9IHZlYzIoMS4wKSAvIHNoYWRvd0NvbmYubWFwU2l6ZTsKICAgIGZvciAoaW50IHggPSAtMTsgeCA8PSAxOyB4KyspCiAgICB7CiAgICAgICAgZm9yIChpbnQgeSA9IC0xOyB5IDw9IDE7IHkrKykKICAgICAgICB7CiAgICAgICAgICAgIGludCBwYXJhbSA9IHNoYWRvd01hcEluZGV4OwogICAgICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8xID0gXzgxOTsKICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMiA9IF84Mjg7CiAgICAgICAgICAgIGhpZ2hwIHZlYzIgcGFyYW1fMyA9IF84MTYueHkgKyAodmVjMihmbG9hdCh4KSwgZmxvYXQoeSkpICogXzgzMyk7CiAgICAgICAgICAgIHNoYWRvdyArPSBzaGFkb3dDb21wYXJlKHBhcmFtLCBwYXJhbV8xLCBwYXJhbV8yLCBwYXJhbV8zKTsKICAgICAgICB9CiAgICB9CiAgICBzaGFkb3cgKj0gMC4xMTExMTExMTE5Mzg5NTMzOTk2NTgyMDMxMjU7CiAgICBpZiAoXzgxOSA+IDEuMCkKICAgIHsKICAgICAgICBzaGFkb3cgPSAwLjA7CiAgICB9CiAgICByZXR1cm4gc2hhZG93Owp9CgpoaWdocCBmbG9hdCBzaGFkb3dDYWxjdWxhdGlvblBDRihpbnQgc2hhZG93TWFwSW5kZXgsIGhpZ2hwIGZsb2F0IE5kb3RMKQp7CiAgICBpbnQgcGFyYW0gPSBzaGFkb3dNYXBJbmRleDsKICAgIGludCBwYXJhbV8xID0gc2hhZG93TWFwSW5kZXg7CiAgICBTaGFkb3cgcGFyYW1fMiA9IGdldFNoYWRvdzJEQ29uZihwYXJhbSk7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8zID0gTmRvdEw7CiAgICByZXR1cm4gc2hhZG93Q2FsY3VsYXRpb25BdXgocGFyYW1fMSwgcGFyYW1fMiwgcGFyYW1fMyk7Cn0KCmhpZ2hwIGZsb2F0IHNoYWRvd0Nhc2NhZGVkQ2FsY3VsYXRpb25QQ0YoaW50IHNoYWRvd01hcEluZGV4LCBpbnQgbnVtU2hhZG93Q2FzY2FkZXMsIGhpZ2hwIGZsb2F0IE5kb3RMKQp7CiAgICBmb3IgKGludCBjID0gMDsgYyA8IDQ7IGMrKykKICAgIHsKICAgICAgICBpZiAoYyA8IG51bVNoYWRvd0Nhc2NhZGVzKQogICAgICAgIHsKICAgICAgICAgICAgaW50IF85MTUgPSBzaGFkb3dNYXBJbmRleCArIGM7CiAgICAgICAgICAgIGludCBwYXJhbSA9IF85MTU7CiAgICAgICAgICAgIFNoYWRvdyBfOTE5ID0gZ2V0U2hhZG93MkRDb25mKHBhcmFtKTsKICAgICAgICAgICAgaGlnaHAgdmVjMiBfMTYxNCA9IF85MTkubmVhckZhcjsKICAgICAgICAgICAgYm9vbCBfOTI1ID0gdl9jbGlwU3BhY2VQb3NaID49IF8xNjE0Lng7CiAgICAgICAgICAgIGJvb2wgXzkzMjsKICAgICAgICAgICAgaWYgKF85MjUpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIF85MzIgPSB2X2NsaXBTcGFjZVBvc1ogPD0gXzE2MTQueTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIF85MzIgPSBfOTI1OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChfOTMyKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpbnQgcGFyYW1fMSA9IF85MTU7CiAgICAgICAgICAgICAgICBTaGFkb3cgcGFyYW1fMiA9IF85MTk7CiAgICAgICAgICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8zID0gTmRvdEw7CiAgICAgICAgICAgICAgICByZXR1cm4gc2hhZG93Q2FsY3VsYXRpb25BdXgocGFyYW1fMSwgcGFyYW1fMiwgcGFyYW1fMyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gMC4wOwp9CgpTaGFkb3cgZ2V0U2hhZG93Q3ViZUNvbmYoaW50IGluZGV4KQp7CiAgICBmb3IgKGludCBpID0gNjsgaSA8IDc7IGkrKykKICAgIHsKICAgICAgICBpZiAoaSA9PSBpbmRleCkKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiBTaGFkb3codV9mc19zaGFkb3dzW2kgKiAxICsgMF0ueCwgdV9mc19zaGFkb3dzW2kgKiAxICsgMF0ueCAqIDAuMTAwMDAwMDAxNDkwMTE2MTE5Mzg0NzY1NjI1LCB1X2ZzX3NoYWRvd3NbaSAqIDEgKyAwXS55eSwgdV9mc19zaGFkb3dzW2kgKiAxICsgMF0uencsIHZlYzQoMC4wKSk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIFNoYWRvdygwLjAsIDAuMCwgdmVjMigwLjApLCB2ZWMyKDAuMCksIHZlYzQoMC4wKSk7Cn0KCmhpZ2hwIGZsb2F0IGRpc3RhbmNlVG9EZXB0aFZhbHVlKGhpZ2hwIHZlYzMgX2Rpc3RhbmNlLCBoaWdocCB2ZWMyIGNhbGNOZWFyRmFyKQp7CiAgICBoaWdocCB2ZWMzIF85NDkgPSBhYnMoX2Rpc3RhbmNlKTsKICAgIHJldHVybiBjYWxjTmVhckZhci54ICsgKGNhbGNOZWFyRmFyLnkgLyBtYXgoXzk0OS54LCBtYXgoXzk0OS55LCBfOTQ5LnopKSk7Cn0KCmhpZ2hwIHZlYzQgZ2V0U2hhZG93Q3ViZU1hcChpbm91dCBpbnQgaW5kZXgsIGhpZ2hwIHZlYzMgY29vcmRzKQp7CiAgICBpbmRleCAtPSA2OwogICAgaWYgKGluZGV4ID09IDApCiAgICB7CiAgICAgICAgcmV0dXJuIHRleHR1cmUodV9zaGFkb3dDdWJlTWFwMSwgY29vcmRzKTsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgIH0KICAgIHJldHVybiB2ZWM0KDAuMCk7Cn0KCmhpZ2hwIGZsb2F0IHNoYWRvd0N1YmVDb21wYXJlKGludCBzaGFkb3dNYXBJbmRleCwgaGlnaHAgZmxvYXQgY3VycmVudERlcHRoLCBoaWdocCBmbG9hdCBiaWFzLCBoaWdocCB2ZWMzIHRleENvb3JkcykKewogICAgaW50IHBhcmFtID0gc2hhZG93TWFwSW5kZXg7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzEgPSB0ZXhDb29yZHM7CiAgICBoaWdocCB2ZWM0IF85NzMgPSBnZXRTaGFkb3dDdWJlTWFwKHBhcmFtLCBwYXJhbV8xKTsKICAgIGhpZ2hwIHZlYzQgcGFyYW1fMiA9IF85NzM7CiAgICBpZiAoKGN1cnJlbnREZXB0aCAtIGJpYXMpID4gZGVjb2RlRGVwdGgocGFyYW1fMikpCiAgICB7CiAgICAgICAgcmV0dXJuIDEuMDsKICAgIH0KICAgIHJldHVybiAwLjA7Cn0KCmhpZ2hwIGZsb2F0IHNoYWRvd0N1YmVDYWxjdWxhdGlvblBDRihpbnQgc2hhZG93TWFwSW5kZXgsIGhpZ2hwIHZlYzMgZnJhZ1RvTGlnaHQsIGhpZ2hwIGZsb2F0IE5kb3RMKQp7CiAgICBpbnQgcGFyYW0gPSBzaGFkb3dNYXBJbmRleDsKICAgIFNoYWRvdyBfOTg5ID0gZ2V0U2hhZG93Q3ViZUNvbmYocGFyYW0pOwogICAgaGlnaHAgdmVjMyBwYXJhbV8xID0gZnJhZ1RvTGlnaHQ7CiAgICBoaWdocCB2ZWMyIHBhcmFtXzIgPSBfOTg5Lm5lYXJGYXI7CiAgICBoaWdocCBmbG9hdCBfOTk2ID0gZGlzdGFuY2VUb0RlcHRoVmFsdWUocGFyYW1fMSwgcGFyYW1fMik7CiAgICBoaWdocCBmbG9hdCBzaGFkb3cgPSAwLjA7CiAgICBoaWdocCBmbG9hdCBfMTAwNiA9IG1heChfOTg5Lm1heEJpYXMgKiAoMS4wIC0gTmRvdEwpLCBfOTg5Lm1pbkJpYXMpOwogICAgaGlnaHAgZmxvYXQgXzEwMTEgPSBsZW5ndGgoZnJhZ1RvTGlnaHQpICogMC4wMDA1MDAwMDAwMjM3NDg3MjU2NTI2OTQ3MDIxNDg0Mzc1OwogICAgaW50IHBhcmFtXzMgPSBzaGFkb3dNYXBJbmRleDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzQgPSBfOTk2OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fNSA9IF8xMDA2OwogICAgaGlnaHAgdmVjMyBwYXJhbV82ID0gZnJhZ1RvTGlnaHQ7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMywgcGFyYW1fNCwgcGFyYW1fNSwgcGFyYW1fNik7CiAgICBpbnQgcGFyYW1fNyA9IHNoYWRvd01hcEluZGV4OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fOCA9IF85OTY7CiAgICBoaWdocCBmbG9hdCBwYXJhbV85ID0gXzEwMDY7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzEwID0gZnJhZ1RvTGlnaHQgKyAodmVjMygxLjApICogXzEwMTEpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzcsIHBhcmFtXzgsIHBhcmFtXzksIHBhcmFtXzEwKTsKICAgIGludCBwYXJhbV8xMSA9IHNoYWRvd01hcEluZGV4OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMTIgPSBfOTk2OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMTMgPSBfMTAwNjsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMTQgPSBmcmFnVG9MaWdodCArICh2ZWMzKDEuMCwgLTEuMCwgMS4wKSAqIF8xMDExKTsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8xMSwgcGFyYW1fMTIsIHBhcmFtXzEzLCBwYXJhbV8xNCk7CiAgICBpbnQgcGFyYW1fMTUgPSBzaGFkb3dNYXBJbmRleDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzE2ID0gXzk5NjsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzE3ID0gXzEwMDY7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzE4ID0gZnJhZ1RvTGlnaHQgKyAodmVjMygtMS4wLCAtMS4wLCAxLjApICogXzEwMTEpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzE1LCBwYXJhbV8xNiwgcGFyYW1fMTcsIHBhcmFtXzE4KTsKICAgIGludCBwYXJhbV8xOSA9IHNoYWRvd01hcEluZGV4OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMjAgPSBfOTk2OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMjEgPSBfMTAwNjsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMjIgPSBmcmFnVG9MaWdodCArICh2ZWMzKC0xLjAsIDEuMCwgMS4wKSAqIF8xMDExKTsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8xOSwgcGFyYW1fMjAsIHBhcmFtXzIxLCBwYXJhbV8yMik7CiAgICBpbnQgcGFyYW1fMjMgPSBzaGFkb3dNYXBJbmRleDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzI0ID0gXzk5NjsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzI1ID0gXzEwMDY7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzI2ID0gZnJhZ1RvTGlnaHQgKyAodmVjMygxLjAsIDEuMCwgLTEuMCkgKiBfMTAxMSk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMjMsIHBhcmFtXzI0LCBwYXJhbV8yNSwgcGFyYW1fMjYpOwogICAgaW50IHBhcmFtXzI3ID0gc2hhZG93TWFwSW5kZXg7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8yOCA9IF85OTY7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8yOSA9IF8xMDA2OwogICAgaGlnaHAgdmVjMyBwYXJhbV8zMCA9IGZyYWdUb0xpZ2h0ICsgKHZlYzMoMS4wLCAtMS4wLCAtMS4wKSAqIF8xMDExKTsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8yNywgcGFyYW1fMjgsIHBhcmFtXzI5LCBwYXJhbV8zMCk7CiAgICBpbnQgcGFyYW1fMzEgPSBzaGFkb3dNYXBJbmRleDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzMyID0gXzk5NjsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzMzID0gXzEwMDY7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzM0ID0gZnJhZ1RvTGlnaHQgKyAodmVjMygtMS4wKSAqIF8xMDExKTsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8zMSwgcGFyYW1fMzIsIHBhcmFtXzMzLCBwYXJhbV8zNCk7CiAgICBpbnQgcGFyYW1fMzUgPSBzaGFkb3dNYXBJbmRleDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzM2ID0gXzk5NjsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzM3ID0gXzEwMDY7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzM4ID0gZnJhZ1RvTGlnaHQgKyAodmVjMygtMS4wLCAxLjAsIC0xLjApICogXzEwMTEpOwogICAgaGlnaHAgZmxvYXQgXzExNDQgPSBzaGFkb3c7CiAgICBoaWdocCBmbG9hdCBfMTE0NyA9IChfMTE0NCArIHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzM1LCBwYXJhbV8zNiwgcGFyYW1fMzcsIHBhcmFtXzM4KSkgKiAwLjExMTExMTExMTkzODk1MzM5OTY1ODIwMzEyNTsKICAgIHNoYWRvdyA9IF8xMTQ3OwogICAgcmV0dXJuIF8xMTQ3Owp9CgpoaWdocCBmbG9hdCBnZXRSYW5nZUF0dGVudWF0aW9uKGhpZ2hwIGZsb2F0IHJhbmdlLCBoaWdocCBmbG9hdCBfZGlzdGFuY2UpCnsKICAgIGlmIChyYW5nZSA8PSAwLjApCiAgICB7CiAgICAgICAgcmV0dXJuIDEuMCAvIHBvdyhfZGlzdGFuY2UsIDIuMCk7CiAgICB9CiAgICByZXR1cm4gbWF4KG1pbigxLjAgLSBwb3coX2Rpc3RhbmNlIC8gcmFuZ2UsIDQuMCksIDEuMCksIDAuMCkgLyBwb3coX2Rpc3RhbmNlLCAyLjApOwp9CgpoaWdocCBmbG9hdCBnZXRTcG90QXR0ZW51YXRpb24oaGlnaHAgdmVjMyBwb2ludFRvTGlnaHQsIGhpZ2hwIHZlYzMgc3BvdERpcmVjdGlvbiwgaGlnaHAgZmxvYXQgb3V0ZXJDb25lQ29zLCBoaWdocCBmbG9hdCBpbm5lckNvbmVDb3MpCnsKICAgIGhpZ2hwIGZsb2F0IF81MzAgPSBkb3Qobm9ybWFsaXplKHNwb3REaXJlY3Rpb24pLCBub3JtYWxpemUoLXBvaW50VG9MaWdodCkpOwogICAgaWYgKF81MzAgPiBvdXRlckNvbmVDb3MpCiAgICB7CiAgICAgICAgaWYgKF81MzAgPCBpbm5lckNvbmVDb3MpCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gc21vb3Roc3RlcChvdXRlckNvbmVDb3MsIGlubmVyQ29uZUNvcywgXzUzMCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiAxLjA7CiAgICB9CiAgICByZXR1cm4gMC4wOwp9CgpoaWdocCB2ZWMzIGdldExpZ2hJbnRlbnNpdHkoTGlnaHQgbGlnaHQsIGhpZ2hwIHZlYzMgcG9pbnRUb0xpZ2h0KQp7CiAgICBoaWdocCBmbG9hdCByYW5nZUF0dGVudWF0aW9uID0gMS4wOwogICAgaGlnaHAgZmxvYXQgc3BvdEF0dGVudWF0aW9uID0gMS4wOwogICAgaWYgKGxpZ2h0LnR5cGUgIT0gMCkKICAgIHsKICAgICAgICBoaWdocCBmbG9hdCBwYXJhbSA9IGxpZ2h0LnJhbmdlOwogICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzEgPSBsZW5ndGgocG9pbnRUb0xpZ2h0KTsKICAgICAgICByYW5nZUF0dGVudWF0aW9uID0gZ2V0UmFuZ2VBdHRlbnVhdGlvbihwYXJhbSwgcGFyYW1fMSk7CiAgICB9CiAgICBpZiAobGlnaHQudHlwZSA9PSAyKQogICAgewogICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMiA9IHBvaW50VG9MaWdodDsKICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzMgPSBsaWdodC5kaXJlY3Rpb247CiAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fNCA9IGxpZ2h0Lm91dGVyQ29uZUNvczsKICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV81ID0gbGlnaHQuaW5uZXJDb25lQ29zOwogICAgICAgIHNwb3RBdHRlbnVhdGlvbiA9IGdldFNwb3RBdHRlbnVhdGlvbihwYXJhbV8yLCBwYXJhbV8zLCBwYXJhbV80LCBwYXJhbV81KTsKICAgIH0KICAgIHJldHVybiBsaWdodC5jb2xvciAqICgocmFuZ2VBdHRlbnVhdGlvbiAqIHNwb3RBdHRlbnVhdGlvbikgKiBsaWdodC5pbnRlbnNpdHkpOwp9CgpoaWdocCB2ZWMzIEZfU2NobGljayhoaWdocCB2ZWMzIGYwLCBoaWdocCB2ZWMzIGY5MCwgaGlnaHAgZmxvYXQgVmRvdEgpCnsKICAgIHJldHVybiBmMCArICgoZjkwIC0gZjApICogcG93KGNsYW1wKDEuMCAtIFZkb3RILCAwLjAsIDEuMCksIDUuMCkpOwp9CgpoaWdocCB2ZWMzIEJSREZfbGFtYmVydGlhbihoaWdocCB2ZWMzIGYwLCBoaWdocCB2ZWMzIGY5MCwgaGlnaHAgdmVjMyBkaWZmdXNlQ29sb3IsIGhpZ2hwIGZsb2F0IFZkb3RIKQp7CiAgICBoaWdocCB2ZWMzIHBhcmFtID0gZjA7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzEgPSBmOTA7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8yID0gVmRvdEg7CiAgICByZXR1cm4gKHZlYzMoMS4wKSAtIEZfU2NobGljayhwYXJhbSwgcGFyYW1fMSwgcGFyYW1fMikpICogKGRpZmZ1c2VDb2xvciAqIHZlYzMoMC4zMTgzMDk4NzMzNDI1MTQwMzgwODU5Mzc1KSk7Cn0KCmhpZ2hwIGZsb2F0IFZfR0dYKGhpZ2hwIGZsb2F0IE5kb3RMLCBoaWdocCBmbG9hdCBOZG90ViwgaGlnaHAgZmxvYXQgYWxwaGFSb3VnaG5lc3MpCnsKICAgIGhpZ2hwIGZsb2F0IF8zOTggPSBhbHBoYVJvdWdobmVzcyAqIGFscGhhUm91Z2huZXNzOwogICAgaGlnaHAgZmxvYXQgXzQwNSA9IDEuMCAtIF8zOTg7CiAgICBoaWdocCBmbG9hdCBfNDI2ID0gKE5kb3RMICogc3FydCgoKE5kb3RWICogTmRvdFYpICogXzQwNSkgKyBfMzk4KSkgKyAoTmRvdFYgKiBzcXJ0KCgoTmRvdEwgKiBOZG90TCkgKiBfNDA1KSArIF8zOTgpKTsKICAgIGlmIChfNDI2ID4gMC4wKQogICAgewogICAgICAgIHJldHVybiAwLjUgLyBfNDI2OwogICAgfQogICAgcmV0dXJuIDAuMDsKfQoKaGlnaHAgZmxvYXQgRF9HR1goaGlnaHAgZmxvYXQgTmRvdEgsIGhpZ2hwIGZsb2F0IGFscGhhUm91Z2huZXNzKQp7CiAgICBoaWdocCBmbG9hdCBfNDQwID0gYWxwaGFSb3VnaG5lc3MgKiBhbHBoYVJvdWdobmVzczsKICAgIGhpZ2hwIGZsb2F0IF80NDggPSAoKE5kb3RIICogTmRvdEgpICogKF80NDAgLSAxLjApKSArIDEuMDsKICAgIHJldHVybiBfNDQwIC8gKCgzLjE0MTU5Mjc0MTAxMjU3MzI0MjE4NzUgKiBfNDQ4KSAqIF80NDgpOwp9CgpoaWdocCB2ZWMzIEJSREZfc3BlY3VsYXJHR1goaGlnaHAgdmVjMyBmMCwgaGlnaHAgdmVjMyBmOTAsIGhpZ2hwIGZsb2F0IGFscGhhUm91Z2huZXNzLCBoaWdocCBmbG9hdCBWZG90SCwgaGlnaHAgZmxvYXQgTmRvdEwsIGhpZ2hwIGZsb2F0IE5kb3RWLCBoaWdocCBmbG9hdCBOZG90SCkKewogICAgaGlnaHAgdmVjMyBwYXJhbSA9IGYwOwogICAgaGlnaHAgdmVjMyBwYXJhbV8xID0gZjkwOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMiA9IFZkb3RIOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMyA9IE5kb3RMOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fNCA9IE5kb3RWOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fNSA9IGFscGhhUm91Z2huZXNzOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fNiA9IE5kb3RIOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fNyA9IGFscGhhUm91Z2huZXNzOwogICAgcmV0dXJuIChGX1NjaGxpY2socGFyYW0sIHBhcmFtXzEsIHBhcmFtXzIpICogVl9HR1gocGFyYW1fMywgcGFyYW1fNCwgcGFyYW1fNSkpICogRF9HR1gocGFyYW1fNiwgcGFyYW1fNyk7Cn0KCmhpZ2hwIHZlYzQgZ2V0RW1pc3NpdmVUZXh0dXJlKCkKewogICAgcmV0dXJuIHRleHR1cmUodV9lbWlzc2l2ZVRleHR1cmUsIHZfdXYxKTsKfQoKaGlnaHAgdmVjMyBsaW5lYXJUb3NSR0IoaGlnaHAgdmVjMyBjb2xvcikKewogICAgcmV0dXJuIHBvdyhjb2xvciwgdmVjMygwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzUpKTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCBfMTE1MiA9IGdldEJhc2VDb2xvcigpOwogICAgaGlnaHAgdmVjMyBfMTUwOCA9IGdldE5vcm1hbEluZm8oKS5uOwogICAgaGlnaHAgdmVjMyBfMTUxMiA9IHZlYzMoMC4wKTsKICAgIGhpZ2hwIGZsb2F0IF8xNTEzID0gMC4wOwogICAgaGlnaHAgdmVjMyBfMTUxNCA9IHZlYzMoMC4wKTsKICAgIGhpZ2hwIHZlYzMgXzE1MTUgPSB2ZWMzKDAuMCk7CiAgICBoaWdocCB2ZWMzIF8xMTY3ID0gXzExNTIueHl6OwogICAgTWF0ZXJpYWxJbmZvIHBhcmFtID0gTWF0ZXJpYWxJbmZvKDAuMCwgdmVjMygwLjApLCAwLjAsIHZlYzMoMC4wKSwgdmVjMygwLjApLCAwLjAsIHZlYzMoMC4wKSwgXzExNjcpOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMSA9IDAuMDM5OTk5OTk5MTA1OTMwMzI4MzY5MTQwNjI1OwogICAgTWF0ZXJpYWxJbmZvIF8xMTc3ID0gZ2V0TWV0YWxsaWNSb3VnaG5lc3NJbmZvKHBhcmFtLCBwYXJhbV8xKTsKICAgIF8xNTEyID0gXzExNzcuZjA7CiAgICBfMTUxNCA9IF8xMTc3LmFsYmVkb0NvbG9yOwogICAgaGlnaHAgZmxvYXQgXzExODAgPSBjbGFtcChfMTE3Ny5wZXJjZXB0dWFsUm91Z2huZXNzLCAwLjAsIDEuMCk7CiAgICBfMTUxMyA9IF8xMTgwICogXzExODA7CiAgICBfMTUxNSA9IHZlYzMoY2xhbXAobWF4KG1heChfMTE3Ny5mMC54LCBfMTE3Ny5mMC55KSwgXzExNzcuZjAueikgKiA1MC4wLCAwLjAsIDEuMCkpOwogICAgaGlnaHAgdmVjMyBmX3NwZWN1bGFyID0gdmVjMygwLjApOwogICAgaGlnaHAgdmVjMyBmX2VtaXNzaXZlID0gdmVjMygwLjApOwogICAgaGlnaHAgdmVjMyBmX2RpZmZ1c2UgPSAodV9mc19wYnJQYXJhbXNbM10ueHl6ICogcG93KHVfZnNfcGJyUGFyYW1zWzNdLncsIDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpICogXzExNjc7CiAgICBoaWdocCB2ZWM0IF8xMjI1ID0gZ2V0T2NjbHVzaW9uVGV4dHVyZSgpOwogICAgaGlnaHAgZmxvYXQgXzEyMjYgPSBfMTIyNS54OwogICAgZl9kaWZmdXNlICo9IF8xMjI2OwogICAgZl9zcGVjdWxhciAqPSBfMTIyNjsKICAgIGhpZ2hwIHZlYzMgXzEyNTIgPSBub3JtYWxpemUodV9mc19saWdodGluZ1syNF0ueHl6IC0gdl9wb3NpdGlvbik7CiAgICBoaWdocCB2ZWMzIHBvaW50VG9MaWdodDsKICAgIGZvciAoaW50IGkgPSAwOyBpIDwgNjsgaSsrKQogICAgewogICAgICAgIGludCBfMTI2NSA9IGludCh1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMTJdLncpOwogICAgICAgIGJvb2wgXzEyOTYgPSAodV9mc19saWdodGluZ1tpICogMSArIDE4XS56IDwgMC4wKSA/IGZhbHNlIDogdHJ1ZTsKICAgICAgICBpbnQgXzEzMDAgPSBpbnQodV9mc19saWdodGluZ1tpICogMSArIDE4XS56KTsKICAgICAgICBpbnQgXzEzMDQgPSBpbnQodV9mc19saWdodGluZ1tpICogMSArIDE4XS53KTsKICAgICAgICBpZiAodV9mc19saWdodGluZ1tpICogMSArIDZdLncgPiAwLjApCiAgICAgICAgewogICAgICAgICAgICBpZiAoXzEyNjUgIT0gMCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcG9pbnRUb0xpZ2h0ID0gdV9mc19saWdodGluZ1tpICogMSArIDEyXS54eXogLSB2X3Bvc2l0aW9uOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcG9pbnRUb0xpZ2h0ID0gLXVfZnNfbGlnaHRpbmdbaSAqIDEgKyAwXS54eXo7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaGlnaHAgdmVjMyBfMTMyNyA9IG5vcm1hbGl6ZShwb2ludFRvTGlnaHQpOwogICAgICAgICAgICBoaWdocCB2ZWMzIF8xMzMyID0gbm9ybWFsaXplKF8xMzI3ICsgXzEyNTIpOwogICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzIgPSBfMTUwODsKICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8zID0gXzEzMjc7CiAgICAgICAgICAgIGhpZ2hwIGZsb2F0IF8xMzM4ID0gY2xhbXBlZERvdChwYXJhbV8yLCBwYXJhbV8zKTsKICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV80ID0gXzE1MDg7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fNSA9IF8xMjUyOwogICAgICAgICAgICBoaWdocCBmbG9hdCBfMTM0NCA9IGNsYW1wZWREb3QocGFyYW1fNCwgcGFyYW1fNSk7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fNiA9IF8xNTA4OwogICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzcgPSBfMTMzMjsKICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV84ID0gXzEzMjc7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fOSA9IF8xMzMyOwogICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzEwID0gXzEyNTI7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMTEgPSBfMTMzMjsKICAgICAgICAgICAgaGlnaHAgZmxvYXQgXzEzNjIgPSBjbGFtcGVkRG90KHBhcmFtXzEwLCBwYXJhbV8xMSk7CiAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHNoYWRvdyA9IDEuMDsKICAgICAgICAgICAgaWYgKF8xMjk2KQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoXzEyNjUgPT0gMikKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpbnQgcGFyYW1fMTIgPSBfMTMwMDsKICAgICAgICAgICAgICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8xMyA9IF8xMzM4OwogICAgICAgICAgICAgICAgICAgIHNoYWRvdyA9IDEuMCAtIHNoYWRvd0NhbGN1bGF0aW9uUENGKHBhcmFtXzEyLCBwYXJhbV8xMyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWYgKF8xMjY1ID09IDApCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBpbnQgcGFyYW1fMTQgPSBfMTMwMDsKICAgICAgICAgICAgICAgICAgICAgICAgaW50IHBhcmFtXzE1ID0gXzEzMDQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzE2ID0gXzEzMzg7CiAgICAgICAgICAgICAgICAgICAgICAgIHNoYWRvdyA9IDEuMCAtIHNoYWRvd0Nhc2NhZGVkQ2FsY3VsYXRpb25QQ0YocGFyYW1fMTQsIHBhcmFtXzE1LCBwYXJhbV8xNik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfMTI2NSA9PSAxKQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnQgcGFyYW1fMTcgPSBfMTMwMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMTggPSAtcG9pbnRUb0xpZ2h0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMTkgPSBfMTMzODsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYWRvdyA9IDEuMCAtIHNoYWRvd0N1YmVDYWxjdWxhdGlvblBDRihwYXJhbV8xNywgcGFyYW1fMTgsIHBhcmFtXzE5KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoKF8xMzM4ID4gMC4wKSB8fCAoXzEzNDQgPiAwLjApKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBMaWdodCBwYXJhbV8yMCA9IExpZ2h0KF8xMjY1LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMF0ueHl6LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgNl0ueHl6LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMTJdLnh5eiwgdV9mc19saWdodGluZ1tpICogMSArIDBdLncsIHVfZnNfbGlnaHRpbmdbaSAqIDEgKyA2XS53LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMThdLngsIHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxOF0ueSwgXzEyOTYsIF8xMzAwLCBfMTMwNCk7CiAgICAgICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzIxID0gcG9pbnRUb0xpZ2h0OwogICAgICAgICAgICAgICAgaGlnaHAgdmVjMyBfMTQyOCA9IGdldExpZ2hJbnRlbnNpdHkocGFyYW1fMjAsIHBhcmFtXzIxKTsKICAgICAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMjIgPSBfMTUxMjsKICAgICAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMjMgPSBfMTUxNTsKICAgICAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMjQgPSBfMTUxNDsKICAgICAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzI1ID0gXzEzNjI7CiAgICAgICAgICAgICAgICBmX2RpZmZ1c2UgKz0gKCgoXzE0MjggKiBzaGFkb3cpICogXzEzMzgpICogQlJERl9sYW1iZXJ0aWFuKHBhcmFtXzIyLCBwYXJhbV8yMywgcGFyYW1fMjQsIHBhcmFtXzI1KSk7CiAgICAgICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzI2ID0gXzE1MTI7CiAgICAgICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzI3ID0gXzE1MTU7CiAgICAgICAgICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8yOCA9IF8xNTEzOwogICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMjkgPSBfMTM2MjsKICAgICAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzMwID0gXzEzMzg7CiAgICAgICAgICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8zMSA9IF8xMzQ0OwogICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMzIgPSBjbGFtcGVkRG90KHBhcmFtXzYsIHBhcmFtXzcpOwogICAgICAgICAgICAgICAgZl9zcGVjdWxhciArPSAoKChfMTQyOCAqIHNoYWRvdykgKiBfMTMzOCkgKiBCUkRGX3NwZWN1bGFyR0dYKHBhcmFtXzI2LCBwYXJhbV8yNywgcGFyYW1fMjgsIHBhcmFtXzI5LCBwYXJhbV8zMCwgcGFyYW1fMzEsIHBhcmFtXzMyKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBmX2VtaXNzaXZlID0gdV9mc19wYnJQYXJhbXNbMl0ueHl6OwogICAgaGlnaHAgdmVjMyBwYXJhbV8zMyA9IGdldEVtaXNzaXZlVGV4dHVyZSgpLnh5ejsKICAgIGhpZ2hwIHZlYzMgXzE0ODMgPSBmX2VtaXNzaXZlOwogICAgaGlnaHAgdmVjMyBfMTQ4NCA9IF8xNDgzICogc1JHQlRvTGluZWFyKHBhcmFtXzMzKTsKICAgIGZfZW1pc3NpdmUgPSBfMTQ4NDsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMzQgPSAoXzE0ODQgKyBmX2RpZmZ1c2UpICsgZl9zcGVjdWxhcjsKICAgIGdfZmluYWxDb2xvciA9IHZlYzQobGluZWFyVG9zUkdCKHBhcmFtXzM0KSwgXzExNTIudyk7Cn0KClJFRkxDBQAAbWVzaF9QdWNTaHdQY2ZOb3JfZ2xzbDMwMGVzAAAAAAAAAAAACwAAAAMAAAAMAAAAdV9iYXNlQ29sb3JUZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAAAAADJEICBURkxUdV9tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUAAAAAAAACAAAAAQAAADJEICBURkxUdV9vY2NsdXNpb25UZXh0dXJlAAAAAAAAAAAAAAAAAAACAAAAAgAAADJEICBURkxUdV9lbWlzc2l2ZVRleHR1cmUAAAAAAAAAAAAAAAAAAAACAAAAAwAAADJEICBURkxUdV9zaGFkb3dNYXAxAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABAAAADJEICBURkxUdV9zaGFkb3dNYXAyAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABQAAADJEICBURkxUdV9zaGFkb3dNYXAzAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAADJEICBURkxUdV9zaGFkb3dNYXA0AAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABwAAADJEICBURkxUdV9zaGFkb3dNYXA1AAAAAAAAAAAAAAAAAAAAAAAAAAACAAAACAAAADJEICBURkxUdV9zaGFkb3dNYXA2AAAAAAAAAAAAAAAAAAAAAAAAAAACAAAACQAAADJEICBURkxUdV9zaGFkb3dDdWJlTWFwMQAAAAAAAAAAAAAAAAAAAAACAAAACgAAAENVQkVURkxUBgAAAHVfZnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABYmFzZUNvbG9yRmFjdG9yAAAAAAAAAAAAAAAAAAAAAABGTFQ0AQAAAAAAAABtZXRhbGxpY0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAAAEZMVDEBAAAAEAAAAHJvdWdobmVzc0ZhY3RvcgAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAAUAAAAZW1pc3NpdmVGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAACAAAABhbWJpZW50TGlnaHQAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAMAAAAGFtYmllbnRGYWN0b3IAAAAAAAAAAAAAAAAAAAAAAAAARkxUMQEAAAA8AAAAAQAAAHVfZnNfc2hhZG93cwAAAAAAAAAAAAAAAAAAAAAAAAAAdVNoYWRvd3MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAHAAAAABYmlhc190ZXhTaXplX25lYXJGYXIAAAAAAAAAAAAAAABGTFQ0BwAAAAAAAAAFAAAAdV9mc19saWdodGluZwAAAAAAAAAAAAAAAAAAAAAAAABsaWdodGluZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAkAEAAAFkaXJlY3Rpb25fcmFuZ2UAAAAAAAAAAAAAAAAAAAAAAEZMVDQGAAAAAAAAAGNvbG9yX2ludGVuc2l0eQAAAAAAAAAAAAAAAAAAAAAARkxUNAYAAABgAAAAcG9zaXRpb25fdHlwZQAAAAAAAAAAAAAAAAAAAAAAAABGTFQ0BgAAAMAAAABpbkNvbmVfb3VDb25lX3NoYWRvd3NfY2FzY2FkZXMAAEZMVDQGAAAAIAEAAGV5ZVBvcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAACAAQAA";
static const std::string mesh_PucShwPcfNorTanMtaMnrMtg_glsl300es = "";
static const std::string mesh_Uv1PucShwPcfNorNmpTanVc4Fog_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUcjDQAAVkVSVENPREURCgAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwp1bmlmb3JtIHZlYzQgdV92c19zaGFkb3dzWzI0XTsKbGF5b3V0KGxvY2F0aW9uID0gMCkgaW4gdmVjMyBhX3Bvc2l0aW9uOwpsYXlvdXQobG9jYXRpb24gPSAxKSBpbiB2ZWMzIGFfbm9ybWFsOwpsYXlvdXQobG9jYXRpb24gPSAyKSBpbiB2ZWM0IGFfdGFuZ2VudDsKb3V0IHZlYzMgdl9wb3NpdGlvbjsKb3V0IG1hdDMgdl90Ym47Cm91dCB2ZWMyIHZfdXYxOwpvdXQgdmVjMiB2X3V2MjsKbGF5b3V0KGxvY2F0aW9uID0gMykgaW4gdmVjMiBhX3RleGNvb3JkMTsKb3V0IHZlYzQgdl9jb2xvcjsKbGF5b3V0KGxvY2F0aW9uID0gNCkgaW4gdmVjNCBhX2NvbG9yOwpvdXQgdmVjNCB2X2xpZ2h0UHJvalBvc1s2XTsKb3V0IGZsb2F0IHZfY2xpcFNwYWNlUG9zWjsKCm1hdDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIHJldHVybiBtYXQ0KHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSk7Cn0KCnZlYzMgZ2V0TW9ycGhQb3NpdGlvbih2ZWMzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKdmVjMyBnZXRTa2luUG9zaXRpb24odmVjMyBwb3MsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKdmVjNCBnZXRQb3NpdGlvbihtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHZlYzMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgdmVjMyBwYXJhbV8xID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBtYXQ0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIHZlYzQoZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpLCAxLjApOwp9Cgp2ZWMzIGdldE1vcnBoVGFuZ2VudCh2ZWMzIHRhbmdlbnQpCnsKICAgIHJldHVybiB0YW5nZW50Owp9Cgp2ZWMzIGdldFNraW5UYW5nZW50KHZlYzMgdGFuZ2VudCwgbWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICByZXR1cm4gdGFuZ2VudDsKfQoKdmVjMyBnZXRUYW5nZW50KG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgdmVjMyBwYXJhbSA9IGFfdGFuZ2VudC54eXo7CiAgICB2ZWMzIHBhcmFtXzEgPSBnZXRNb3JwaFRhbmdlbnQocGFyYW0pOwogICAgbWF0NCBwYXJhbV8yID0gYm9uZVRyYW5zZm9ybTsKICAgIHJldHVybiBub3JtYWxpemUoZ2V0U2tpblRhbmdlbnQocGFyYW1fMSwgcGFyYW1fMikpOwp9Cgp2ZWMzIGdldE1vcnBoTm9ybWFsKHZlYzMgbm9ybWFsKQp7CiAgICByZXR1cm4gbm9ybWFsOwp9Cgp2ZWMzIGdldFNraW5Ob3JtYWwodmVjMyBub3JtYWwsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIG5vcm1hbDsKfQoKdmVjMyBnZXROb3JtYWwobWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICB2ZWMzIHBhcmFtID0gYV9ub3JtYWw7CiAgICB2ZWMzIHBhcmFtXzEgPSBnZXRNb3JwaE5vcm1hbChwYXJhbSk7CiAgICBtYXQ0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIG5vcm1hbGl6ZShnZXRTa2luTm9ybWFsKHBhcmFtXzEsIHBhcmFtXzIpKTsKfQoKdm9pZCBtYWluKCkKewogICAgbWF0NCBfMTI3ID0gZ2V0Qm9uZVRyYW5zZm9ybSgpOwogICAgbWF0NCBwYXJhbSA9IF8xMjc7CiAgICB2ZWM0IF8xMzIgPSBnZXRQb3NpdGlvbihwYXJhbSk7CiAgICBtYXQ0IF8xNDEgPSBtYXQ0KHVfdnNfcGJyUGFyYW1zWzBdLCB1X3ZzX3BiclBhcmFtc1sxXSwgdV92c19wYnJQYXJhbXNbMl0sIHVfdnNfcGJyUGFyYW1zWzNdKTsKICAgIHZlYzQgXzE0MyA9IF8xNDEgKiBfMTMyOwogICAgdl9wb3NpdGlvbiA9IHZlYzMoXzE0My54eXopIC8gdmVjMyhfMTQzLncpOwogICAgbWF0NCBwYXJhbV8xID0gXzEyNzsKICAgIG1hdDQgcGFyYW1fMiA9IF8xMjc7CiAgICB2ZWMzIF8xNzkgPSBub3JtYWxpemUodmVjMygobWF0NCh1X3ZzX3BiclBhcmFtc1s0XSwgdV92c19wYnJQYXJhbXNbNV0sIHVfdnNfcGJyUGFyYW1zWzZdLCB1X3ZzX3BiclBhcmFtc1s3XSkgKiB2ZWM0KGdldE5vcm1hbChwYXJhbV8yKSwgMC4wKSkueHl6KSk7CiAgICB2ZWMzIF8xOTMgPSBub3JtYWxpemUodmVjMygoXzE0MSAqIHZlYzQoZ2V0VGFuZ2VudChwYXJhbV8xKSwgMC4wKSkueHl6KSk7CiAgICB2X3RibiA9IG1hdDMoXzE5MywgY3Jvc3MoXzE3OSwgXzE5MykgKiBhX3RhbmdlbnQudywgXzE3OSk7CiAgICB2X3V2MSA9IHZlYzIoMC4wKTsKICAgIHZfdXYyID0gdmVjMigwLjApOwogICAgdl91djEgPSBhX3RleGNvb3JkMTsKICAgIHZfY29sb3IgPSBhX2NvbG9yOwogICAgZm9yIChpbnQgaSA9IDA7IGkgPCA2OyBpKyspCiAgICB7CiAgICAgICAgdl9saWdodFByb2pQb3NbaV0gPSBtYXQ0KHVfdnNfc2hhZG93c1tpICogNCArIDBdLCB1X3ZzX3NoYWRvd3NbaSAqIDQgKyAxXSwgdV92c19zaGFkb3dzW2kgKiA0ICsgMl0sIHVfdnNfc2hhZG93c1tpICogNCArIDNdKSAqIF8xNDM7CiAgICB9CiAgICBnbF9Qb3NpdGlvbiA9IG1hdDQodV92c19wYnJQYXJhbXNbOF0sIHVfdnNfcGJyUGFyYW1zWzldLCB1X3ZzX3BiclBhcmFtc1sxMF0sIHVfdnNfcGJyUGFyYW1zWzExXSkgKiBfMTMyOwogICAgdl9jbGlwU3BhY2VQb3NaID0gZ2xfUG9zaXRpb24uejsKfQoKUkVGTP4CAABtZXNoX1V2MVB1Y1Nod1BjZk5vck5tcFRhblZjNEZvAAUAAAAAAAAAAgAAAAQAAABhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzYV9ub3JtYWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAATk9STUFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2FfdGFuZ2VudAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFRFWENPT1JEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDRhX3RleGNvb3JkMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABGTFQyYV9jb2xvcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAVEVYQ09PUkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAARkxUNAMAAAB1X3ZzX3BiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAHBiclBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAW1vZGVsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAbm9ybWFsTWF0cml4AAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAEAAAABtdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAgAAAAAEAAAB1X3ZzX3NoYWRvd3MAAAAAAAAAAAAAAAAAAAAAAAAAAF8yNTIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAACAAQAAAWxpZ2h0VlBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAYAAAAAAAAAU1RBRylWAABGUkFHQ09ERflPAAAjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBoaWdocCBpbnQ7CgpzdHJ1Y3QgTWF0ZXJpYWxJbmZvCnsKICAgIGhpZ2hwIGZsb2F0IHBlcmNlcHR1YWxSb3VnaG5lc3M7CiAgICBoaWdocCB2ZWMzIGYwOwogICAgaGlnaHAgZmxvYXQgYWxwaGFSb3VnaG5lc3M7CiAgICBoaWdocCB2ZWMzIGFsYmVkb0NvbG9yOwogICAgaGlnaHAgdmVjMyBmOTA7CiAgICBoaWdocCBmbG9hdCBtZXRhbGxpYzsKICAgIGhpZ2hwIHZlYzMgbjsKICAgIGhpZ2hwIHZlYzMgYmFzZUNvbG9yOwp9OwoKc3RydWN0IE5vcm1hbEluZm8KewogICAgaGlnaHAgdmVjMyBuZzsKICAgIGhpZ2hwIHZlYzMgbjsKICAgIGhpZ2hwIHZlYzMgdDsKICAgIGhpZ2hwIHZlYzMgYjsKfTsKCnN0cnVjdCBMaWdodAp7CiAgICBpbnQgdHlwZTsKICAgIGhpZ2hwIHZlYzMgZGlyZWN0aW9uOwogICAgaGlnaHAgdmVjMyBjb2xvcjsKICAgIGhpZ2hwIHZlYzMgcG9zaXRpb247CiAgICBoaWdocCBmbG9hdCByYW5nZTsKICAgIGhpZ2hwIGZsb2F0IGludGVuc2l0eTsKICAgIGhpZ2hwIGZsb2F0IGlubmVyQ29uZUNvczsKICAgIGhpZ2hwIGZsb2F0IG91dGVyQ29uZUNvczsKICAgIGJvb2wgc2hhZG93czsKICAgIGludCBzaGFkb3dNYXBJbmRleDsKICAgIGludCBudW1TaGFkb3dDYXNjYWRlczsKfTsKCnN0cnVjdCBTaGFkb3cKewogICAgaGlnaHAgZmxvYXQgbWF4QmlhczsKICAgIGhpZ2hwIGZsb2F0IG1pbkJpYXM7CiAgICBoaWdocCB2ZWMyIG1hcFNpemU7CiAgICBoaWdocCB2ZWMyIG5lYXJGYXI7CiAgICBoaWdocCB2ZWM0IGxpZ2h0UHJvalBvczsKfTsKCnVuaWZvcm0gaGlnaHAgdmVjNCB1X2ZzX3BiclBhcmFtc1s0XTsKdW5pZm9ybSBoaWdocCB2ZWM0IHVfZnNfc2hhZG93c1s3XTsKdW5pZm9ybSBoaWdocCB2ZWM0IHVfZnNfbGlnaHRpbmdbMjVdOwp1bmlmb3JtIGhpZ2hwIHZlYzQgdV9mc19mb2dbMl07CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfYmFzZUNvbG9yVGV4dHVyZTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9tZXRhbGxpY1JvdWdobmVzc1RleHR1cmU7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfb2NjbHVzaW9uVGV4dHVyZTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9lbWlzc2l2ZVRleHR1cmU7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfbm9ybWFsVGV4dHVyZTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9zaGFkb3dNYXAxOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X3NoYWRvd01hcDI7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfc2hhZG93TWFwMzsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9zaGFkb3dNYXA0Owp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X3NoYWRvd01hcDU7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfc2hhZG93TWFwNjsKdW5pZm9ybSBoaWdocCBzYW1wbGVyQ3ViZSB1X3NoYWRvd0N1YmVNYXAxOwoKaW4gaGlnaHAgdmVjNCB2X2NvbG9yOwppbiBoaWdocCB2ZWMyIHZfdXYxOwppbiBoaWdocCB2ZWMzIHZfcG9zaXRpb247CmluIGhpZ2hwIG1hdDMgdl90Ym47CmluIGhpZ2hwIHZlYzQgdl9saWdodFByb2pQb3NbNl07CmluIGhpZ2hwIGZsb2F0IHZfY2xpcFNwYWNlUG9zWjsKbGF5b3V0KGxvY2F0aW9uID0gMCkgb3V0IGhpZ2hwIHZlYzQgZ19maW5hbENvbG9yOwppbiBoaWdocCB2ZWMyIHZfdXYyOwoKaGlnaHAgdmVjMyBzUkdCVG9MaW5lYXIoaGlnaHAgdmVjMyBzcmdiSW4pCnsKICAgIHJldHVybiBwb3coc3JnYkluLCB2ZWMzKDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpOwp9CgpoaWdocCB2ZWM0IHNSR0JUb0xpbmVhcihoaWdocCB2ZWM0IHNyZ2JJbikKewogICAgaGlnaHAgdmVjMyBwYXJhbSA9IHNyZ2JJbi54eXo7CiAgICByZXR1cm4gdmVjNChzUkdCVG9MaW5lYXIocGFyYW0pLCBzcmdiSW4udyk7Cn0KCmhpZ2hwIHZlYzQgZ2V0VmVydGV4Q29sb3IoKQp7CiAgICByZXR1cm4gdl9jb2xvcjsKfQoKaGlnaHAgdmVjNCBnZXRCYXNlQ29sb3IoKQp7CiAgICBoaWdocCB2ZWM0IGJhc2VDb2xvciA9IHVfZnNfcGJyUGFyYW1zWzBdOwogICAgaGlnaHAgdmVjNCBwYXJhbSA9IHRleHR1cmUodV9iYXNlQ29sb3JUZXh0dXJlLCB2X3V2MSk7CiAgICBoaWdocCB2ZWM0IF8yMzUgPSBiYXNlQ29sb3I7CiAgICBoaWdocCB2ZWM0IF8yMzYgPSBfMjM1ICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8yMzY7CiAgICByZXR1cm4gXzIzNiAqIGdldFZlcnRleENvbG9yKCk7Cn0KCk5vcm1hbEluZm8gZ2V0Tm9ybWFsSW5mbygpCnsKICAgIGhpZ2hwIHZlYzMgXzM1OSA9IG5vcm1hbGl6ZSh2X3RiblswXSk7CiAgICBoaWdocCB2ZWMzIF8zNjMgPSBub3JtYWxpemUodl90Ym5bMV0pOwogICAgaGlnaHAgdmVjMyBfMzY3ID0gbm9ybWFsaXplKHZfdGJuWzJdKTsKICAgIHJldHVybiBOb3JtYWxJbmZvKF8zNjcsIG1hdDMoXzM1OSwgXzM2MywgXzM2NykgKiBub3JtYWxpemUoKHRleHR1cmUodV9ub3JtYWxUZXh0dXJlLCB2X3V2MSkueHl6ICogMi4wKSAtIHZlYzMoMS4wKSksIF8zNTksIF8zNjMpOwp9CgpNYXRlcmlhbEluZm8gZ2V0TWV0YWxsaWNSb3VnaG5lc3NJbmZvKGlub3V0IE1hdGVyaWFsSW5mbyBpbmZvLCBoaWdocCBmbG9hdCBmMF9pb3IpCnsKICAgIGluZm8ubWV0YWxsaWMgPSB1X2ZzX3BiclBhcmFtc1sxXS54OwogICAgaW5mby5wZXJjZXB0dWFsUm91Z2huZXNzID0gdV9mc19wYnJQYXJhbXNbMV0ueTsKICAgIGhpZ2hwIHZlYzQgXzI1NiA9IHRleHR1cmUodV9tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUsIHZfdXYxKTsKICAgIGluZm8ucGVyY2VwdHVhbFJvdWdobmVzcyAqPSBfMjU2Lnk7CiAgICBpbmZvLm1ldGFsbGljICo9IF8yNTYuejsKICAgIGhpZ2hwIHZlYzMgXzI3MyA9IHZlYzMoZjBfaW9yKTsKICAgIGluZm8uYWxiZWRvQ29sb3IgPSBtaXgoaW5mby5iYXNlQ29sb3IgKiAodmVjMygxLjApIC0gXzI3MyksIHZlYzMoMC4wKSwgdmVjMyhpbmZvLm1ldGFsbGljKSk7CiAgICBpbmZvLmYwID0gbWl4KF8yNzMsIGluZm8uYmFzZUNvbG9yLCB2ZWMzKGluZm8ubWV0YWxsaWMpKTsKICAgIHJldHVybiBpbmZvOwp9CgpoaWdocCB2ZWM0IGdldE9jY2x1c2lvblRleHR1cmUoKQp7CiAgICByZXR1cm4gdGV4dHVyZSh1X29jY2x1c2lvblRleHR1cmUsIHZfdXYxKTsKfQoKaGlnaHAgZmxvYXQgY2xhbXBlZERvdChoaWdocCB2ZWMzIHgsIGhpZ2hwIHZlYzMgeSkKewogICAgcmV0dXJuIGNsYW1wKGRvdCh4LCB5KSwgMC4wLCAxLjApOwp9CgpTaGFkb3cgZ2V0U2hhZG93MkRDb25mKGludCBpbmRleCkKewogICAgZm9yIChpbnQgaSA9IDA7IGkgPCA2OyBpKyspCiAgICB7CiAgICAgICAgaWYgKGkgPT0gaW5kZXgpCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gU2hhZG93KHVfZnNfc2hhZG93c1tpICogMSArIDBdLngsIHVfZnNfc2hhZG93c1tpICogMSArIDBdLnggKiAwLjEwMDAwMDAwMTQ5MDExNjExOTM4NDc2NTYyNSwgdV9mc19zaGFkb3dzW2kgKiAxICsgMF0ueXksIHVfZnNfc2hhZG93c1tpICogMSArIDBdLnp3LCB2X2xpZ2h0UHJvalBvc1tpXSk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIFNoYWRvdygwLjAsIDAuMCwgdmVjMigwLjApLCB2ZWMyKDAuMCksIHZlYzQoMC4wKSk7Cn0KCmhpZ2hwIHZlYzQgZ2V0U2hhZG93TWFwKGludCBpbmRleCwgaGlnaHAgdmVjMiBjb29yZHMpCnsKICAgIGlmIChpbmRleCA9PSAwKQogICAgewogICAgICAgIHJldHVybiB0ZXh0dXJlKHVfc2hhZG93TWFwMSwgY29vcmRzKTsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBpZiAoaW5kZXggPT0gMSkKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlKHVfc2hhZG93TWFwMiwgY29vcmRzKTsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgaWYgKGluZGV4ID09IDIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlKHVfc2hhZG93TWFwMywgY29vcmRzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSAzKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlKHVfc2hhZG93TWFwNCwgY29vcmRzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT0gNCkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlKHVfc2hhZG93TWFwNSwgY29vcmRzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IDUpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlKHVfc2hhZG93TWFwNiwgY29vcmRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiB2ZWM0KDAuMCk7Cn0KCmhpZ2hwIGZsb2F0IGRlY29kZURlcHRoKGhpZ2hwIHZlYzQgcmdiYSkKewogICAgcmV0dXJuIGRvdChyZ2JhLCB2ZWM0KDEuMCwgMC4wMDM5MjE1Njg4NTkzNjg1NjI2OTgzNjQyNTc4MTI1LCAxLjUzNzg3MDA0ODE5NjA1NDk5NTA1OTk2NzA0MTAxNTZlLTA1LCA2LjAzMDg2MjkyMDE2OTk2NTk0NjExNTU1MzM3OTA1ODhlLTA4KSk7Cn0KCmhpZ2hwIGZsb2F0IHNoYWRvd0NvbXBhcmUoaW50IHNoYWRvd01hcEluZGV4LCBoaWdocCBmbG9hdCBjdXJyZW50RGVwdGgsIGhpZ2hwIGZsb2F0IGJpYXMsIGhpZ2hwIHZlYzIgdGV4Q29vcmRzKQp7CiAgICBpbnQgcGFyYW0gPSBzaGFkb3dNYXBJbmRleDsKICAgIGhpZ2hwIHZlYzIgcGFyYW1fMSA9IHRleENvb3JkczsKICAgIGhpZ2hwIHZlYzQgcGFyYW1fMiA9IGdldFNoYWRvd01hcChwYXJhbSwgcGFyYW1fMSk7CiAgICByZXR1cm4gZmxvYXQoKGN1cnJlbnREZXB0aCAtIGJpYXMpID4gZGVjb2RlRGVwdGgocGFyYW1fMikpOwp9CgpoaWdocCBmbG9hdCBzaGFkb3dDYWxjdWxhdGlvbkF1eChpbnQgc2hhZG93TWFwSW5kZXgsIFNoYWRvdyBzaGFkb3dDb25mLCBoaWdocCBmbG9hdCBOZG90TCkKewogICAgaGlnaHAgZmxvYXQgc2hhZG93ID0gMC4wOwogICAgaGlnaHAgdmVjMyBfODQzID0gKChzaGFkb3dDb25mLmxpZ2h0UHJvalBvcy54eXogLyB2ZWMzKHNoYWRvd0NvbmYubGlnaHRQcm9qUG9zLncpKSAqIDAuNSkgKyB2ZWMzKDAuNSk7CiAgICBoaWdocCBmbG9hdCBfODQ2ID0gXzg0My56OwogICAgaGlnaHAgZmxvYXQgXzg1NSA9IG1heChzaGFkb3dDb25mLm1heEJpYXMgKiAoMS4wIC0gTmRvdEwpLCBzaGFkb3dDb25mLm1pbkJpYXMpOwogICAgaGlnaHAgdmVjMiBfODYwID0gdmVjMigxLjApIC8gc2hhZG93Q29uZi5tYXBTaXplOwogICAgZm9yIChpbnQgeCA9IC0xOyB4IDw9IDE7IHgrKykKICAgIHsKICAgICAgICBmb3IgKGludCB5ID0gLTE7IHkgPD0gMTsgeSsrKQogICAgICAgIHsKICAgICAgICAgICAgaW50IHBhcmFtID0gc2hhZG93TWFwSW5kZXg7CiAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzEgPSBfODQ2OwogICAgICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8yID0gXzg1NTsKICAgICAgICAgICAgaGlnaHAgdmVjMiBwYXJhbV8zID0gXzg0My54eSArICh2ZWMyKGZsb2F0KHgpLCBmbG9hdCh5KSkgKiBfODYwKTsKICAgICAgICAgICAgc2hhZG93ICs9IHNoYWRvd0NvbXBhcmUocGFyYW0sIHBhcmFtXzEsIHBhcmFtXzIsIHBhcmFtXzMpOwogICAgICAgIH0KICAgIH0KICAgIHNoYWRvdyAqPSAwLjExMTExMTExMTkzODk1MzM5OTY1ODIwMzEyNTsKICAgIGlmIChfODQ2ID4gMS4wKQogICAgewogICAgICAgIHNoYWRvdyA9IDAuMDsKICAgIH0KICAgIHJldHVybiBzaGFkb3c7Cn0KCmhpZ2hwIGZsb2F0IHNoYWRvd0NhbGN1bGF0aW9uUENGKGludCBzaGFkb3dNYXBJbmRleCwgaGlnaHAgZmxvYXQgTmRvdEwpCnsKICAgIGludCBwYXJhbSA9IHNoYWRvd01hcEluZGV4OwogICAgaW50IHBhcmFtXzEgPSBzaGFkb3dNYXBJbmRleDsKICAgIFNoYWRvdyBwYXJhbV8yID0gZ2V0U2hhZG93MkRDb25mKHBhcmFtKTsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzMgPSBOZG90TDsKICAgIHJldHVybiBzaGFkb3dDYWxjdWxhdGlvbkF1eChwYXJhbV8xLCBwYXJhbV8yLCBwYXJhbV8zKTsKfQoKaGlnaHAgZmxvYXQgc2hhZG93Q2FzY2FkZWRDYWxjdWxhdGlvblBDRihpbnQgc2hhZG93TWFwSW5kZXgsIGludCBudW1TaGFkb3dDYXNjYWRlcywgaGlnaHAgZmxvYXQgTmRvdEwpCnsKICAgIGZvciAoaW50IGMgPSAwOyBjIDwgNDsgYysrKQogICAgewogICAgICAgIGlmIChjIDwgbnVtU2hhZG93Q2FzY2FkZXMpCiAgICAgICAgewogICAgICAgICAgICBpbnQgXzk0MiA9IHNoYWRvd01hcEluZGV4ICsgYzsKICAgICAgICAgICAgaW50IHBhcmFtID0gXzk0MjsKICAgICAgICAgICAgU2hhZG93IF85NDYgPSBnZXRTaGFkb3cyRENvbmYocGFyYW0pOwogICAgICAgICAgICBoaWdocCB2ZWMyIF8xNzEzID0gXzk0Ni5uZWFyRmFyOwogICAgICAgICAgICBib29sIF85NTIgPSB2X2NsaXBTcGFjZVBvc1ogPj0gXzE3MTMueDsKICAgICAgICAgICAgYm9vbCBfOTU5OwogICAgICAgICAgICBpZiAoXzk1MikKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgXzk1OSA9IHZfY2xpcFNwYWNlUG9zWiA8PSBfMTcxMy55OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgXzk1OSA9IF85NTI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKF85NTkpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGludCBwYXJhbV8xID0gXzk0MjsKICAgICAgICAgICAgICAgIFNoYWRvdyBwYXJhbV8yID0gXzk0NjsKICAgICAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzMgPSBOZG90TDsKICAgICAgICAgICAgICAgIHJldHVybiBzaGFkb3dDYWxjdWxhdGlvbkF1eChwYXJhbV8xLCBwYXJhbV8yLCBwYXJhbV8zKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiAwLjA7Cn0KClNoYWRvdyBnZXRTaGFkb3dDdWJlQ29uZihpbnQgaW5kZXgpCnsKICAgIGZvciAoaW50IGkgPSA2OyBpIDwgNzsgaSsrKQogICAgewogICAgICAgIGlmIChpID09IGluZGV4KQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIFNoYWRvdyh1X2ZzX3NoYWRvd3NbaSAqIDEgKyAwXS54LCB1X2ZzX3NoYWRvd3NbaSAqIDEgKyAwXS54ICogMC4xMDAwMDAwMDE0OTAxMTYxMTkzODQ3NjU2MjUsIHVfZnNfc2hhZG93c1tpICogMSArIDBdLnl5LCB1X2ZzX3NoYWRvd3NbaSAqIDEgKyAwXS56dywgdmVjNCgwLjApKTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gU2hhZG93KDAuMCwgMC4wLCB2ZWMyKDAuMCksIHZlYzIoMC4wKSwgdmVjNCgwLjApKTsKfQoKaGlnaHAgZmxvYXQgZGlzdGFuY2VUb0RlcHRoVmFsdWUoaGlnaHAgdmVjMyBfZGlzdGFuY2UsIGhpZ2hwIHZlYzIgY2FsY05lYXJGYXIpCnsKICAgIGhpZ2hwIHZlYzMgXzk3NiA9IGFicyhfZGlzdGFuY2UpOwogICAgcmV0dXJuIGNhbGNOZWFyRmFyLnggKyAoY2FsY05lYXJGYXIueSAvIG1heChfOTc2LngsIG1heChfOTc2LnksIF85NzYueikpKTsKfQoKaGlnaHAgdmVjNCBnZXRTaGFkb3dDdWJlTWFwKGlub3V0IGludCBpbmRleCwgaGlnaHAgdmVjMyBjb29yZHMpCnsKICAgIGluZGV4IC09IDY7CiAgICBpZiAoaW5kZXggPT0gMCkKICAgIHsKICAgICAgICByZXR1cm4gdGV4dHVyZSh1X3NoYWRvd0N1YmVNYXAxLCBjb29yZHMpOwogICAgfQogICAgZWxzZQogICAgewogICAgfQogICAgcmV0dXJuIHZlYzQoMC4wKTsKfQoKaGlnaHAgZmxvYXQgc2hhZG93Q3ViZUNvbXBhcmUoaW50IHNoYWRvd01hcEluZGV4LCBoaWdocCBmbG9hdCBjdXJyZW50RGVwdGgsIGhpZ2hwIGZsb2F0IGJpYXMsIGhpZ2hwIHZlYzMgdGV4Q29vcmRzKQp7CiAgICBpbnQgcGFyYW0gPSBzaGFkb3dNYXBJbmRleDsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMSA9IHRleENvb3JkczsKICAgIGhpZ2hwIHZlYzQgXzEwMDAgPSBnZXRTaGFkb3dDdWJlTWFwKHBhcmFtLCBwYXJhbV8xKTsKICAgIGhpZ2hwIHZlYzQgcGFyYW1fMiA9IF8xMDAwOwogICAgaWYgKChjdXJyZW50RGVwdGggLSBiaWFzKSA+IGRlY29kZURlcHRoKHBhcmFtXzIpKQogICAgewogICAgICAgIHJldHVybiAxLjA7CiAgICB9CiAgICByZXR1cm4gMC4wOwp9CgpoaWdocCBmbG9hdCBzaGFkb3dDdWJlQ2FsY3VsYXRpb25QQ0YoaW50IHNoYWRvd01hcEluZGV4LCBoaWdocCB2ZWMzIGZyYWdUb0xpZ2h0LCBoaWdocCBmbG9hdCBOZG90TCkKewogICAgaW50IHBhcmFtID0gc2hhZG93TWFwSW5kZXg7CiAgICBTaGFkb3cgXzEwMTYgPSBnZXRTaGFkb3dDdWJlQ29uZihwYXJhbSk7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzEgPSBmcmFnVG9MaWdodDsKICAgIGhpZ2hwIHZlYzIgcGFyYW1fMiA9IF8xMDE2Lm5lYXJGYXI7CiAgICBoaWdocCBmbG9hdCBfMTAyMyA9IGRpc3RhbmNlVG9EZXB0aFZhbHVlKHBhcmFtXzEsIHBhcmFtXzIpOwogICAgaGlnaHAgZmxvYXQgc2hhZG93ID0gMC4wOwogICAgaGlnaHAgZmxvYXQgXzEwMzMgPSBtYXgoXzEwMTYubWF4QmlhcyAqICgxLjAgLSBOZG90TCksIF8xMDE2Lm1pbkJpYXMpOwogICAgaGlnaHAgZmxvYXQgXzEwMzggPSBsZW5ndGgoZnJhZ1RvTGlnaHQpICogMC4wMDA1MDAwMDAwMjM3NDg3MjU2NTI2OTQ3MDIxNDg0Mzc1OwogICAgaW50IHBhcmFtXzMgPSBzaGFkb3dNYXBJbmRleDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzQgPSBfMTAyMzsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzUgPSBfMTAzMzsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fNiA9IGZyYWdUb0xpZ2h0OwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzMsIHBhcmFtXzQsIHBhcmFtXzUsIHBhcmFtXzYpOwogICAgaW50IHBhcmFtXzcgPSBzaGFkb3dNYXBJbmRleDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzggPSBfMTAyMzsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzkgPSBfMTAzMzsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMTAgPSBmcmFnVG9MaWdodCArICh2ZWMzKDEuMCkgKiBfMTAzOCk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fNywgcGFyYW1fOCwgcGFyYW1fOSwgcGFyYW1fMTApOwogICAgaW50IHBhcmFtXzExID0gc2hhZG93TWFwSW5kZXg7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8xMiA9IF8xMDIzOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMTMgPSBfMTAzMzsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMTQgPSBmcmFnVG9MaWdodCArICh2ZWMzKDEuMCwgLTEuMCwgMS4wKSAqIF8xMDM4KTsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8xMSwgcGFyYW1fMTIsIHBhcmFtXzEzLCBwYXJhbV8xNCk7CiAgICBpbnQgcGFyYW1fMTUgPSBzaGFkb3dNYXBJbmRleDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzE2ID0gXzEwMjM7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8xNyA9IF8xMDMzOwogICAgaGlnaHAgdmVjMyBwYXJhbV8xOCA9IGZyYWdUb0xpZ2h0ICsgKHZlYzMoLTEuMCwgLTEuMCwgMS4wKSAqIF8xMDM4KTsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8xNSwgcGFyYW1fMTYsIHBhcmFtXzE3LCBwYXJhbV8xOCk7CiAgICBpbnQgcGFyYW1fMTkgPSBzaGFkb3dNYXBJbmRleDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzIwID0gXzEwMjM7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8yMSA9IF8xMDMzOwogICAgaGlnaHAgdmVjMyBwYXJhbV8yMiA9IGZyYWdUb0xpZ2h0ICsgKHZlYzMoLTEuMCwgMS4wLCAxLjApICogXzEwMzgpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzE5LCBwYXJhbV8yMCwgcGFyYW1fMjEsIHBhcmFtXzIyKTsKICAgIGludCBwYXJhbV8yMyA9IHNoYWRvd01hcEluZGV4OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMjQgPSBfMTAyMzsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzI1ID0gXzEwMzM7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzI2ID0gZnJhZ1RvTGlnaHQgKyAodmVjMygxLjAsIDEuMCwgLTEuMCkgKiBfMTAzOCk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMjMsIHBhcmFtXzI0LCBwYXJhbV8yNSwgcGFyYW1fMjYpOwogICAgaW50IHBhcmFtXzI3ID0gc2hhZG93TWFwSW5kZXg7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8yOCA9IF8xMDIzOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMjkgPSBfMTAzMzsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMzAgPSBmcmFnVG9MaWdodCArICh2ZWMzKDEuMCwgLTEuMCwgLTEuMCkgKiBfMTAzOCk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMjcsIHBhcmFtXzI4LCBwYXJhbV8yOSwgcGFyYW1fMzApOwogICAgaW50IHBhcmFtXzMxID0gc2hhZG93TWFwSW5kZXg7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8zMiA9IF8xMDIzOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMzMgPSBfMTAzMzsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMzQgPSBmcmFnVG9MaWdodCArICh2ZWMzKC0xLjApICogXzEwMzgpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzMxLCBwYXJhbV8zMiwgcGFyYW1fMzMsIHBhcmFtXzM0KTsKICAgIGludCBwYXJhbV8zNSA9IHNoYWRvd01hcEluZGV4OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMzYgPSBfMTAyMzsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzM3ID0gXzEwMzM7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzM4ID0gZnJhZ1RvTGlnaHQgKyAodmVjMygtMS4wLCAxLjAsIC0xLjApICogXzEwMzgpOwogICAgaGlnaHAgZmxvYXQgXzExNzEgPSBzaGFkb3c7CiAgICBoaWdocCBmbG9hdCBfMTE3NCA9IChfMTE3MSArIHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzM1LCBwYXJhbV8zNiwgcGFyYW1fMzcsIHBhcmFtXzM4KSkgKiAwLjExMTExMTExMTkzODk1MzM5OTY1ODIwMzEyNTsKICAgIHNoYWRvdyA9IF8xMTc0OwogICAgcmV0dXJuIF8xMTc0Owp9CgpoaWdocCBmbG9hdCBnZXRSYW5nZUF0dGVudWF0aW9uKGhpZ2hwIGZsb2F0IHJhbmdlLCBoaWdocCBmbG9hdCBfZGlzdGFuY2UpCnsKICAgIGlmIChyYW5nZSA8PSAwLjApCiAgICB7CiAgICAgICAgcmV0dXJuIDEuMCAvIHBvdyhfZGlzdGFuY2UsIDIuMCk7CiAgICB9CiAgICByZXR1cm4gbWF4KG1pbigxLjAgLSBwb3coX2Rpc3RhbmNlIC8gcmFuZ2UsIDQuMCksIDEuMCksIDAuMCkgLyBwb3coX2Rpc3RhbmNlLCAyLjApOwp9CgpoaWdocCBmbG9hdCBnZXRTcG90QXR0ZW51YXRpb24oaGlnaHAgdmVjMyBwb2ludFRvTGlnaHQsIGhpZ2hwIHZlYzMgc3BvdERpcmVjdGlvbiwgaGlnaHAgZmxvYXQgb3V0ZXJDb25lQ29zLCBoaWdocCBmbG9hdCBpbm5lckNvbmVDb3MpCnsKICAgIGhpZ2hwIGZsb2F0IF81NTggPSBkb3Qobm9ybWFsaXplKHNwb3REaXJlY3Rpb24pLCBub3JtYWxpemUoLXBvaW50VG9MaWdodCkpOwogICAgaWYgKF81NTggPiBvdXRlckNvbmVDb3MpCiAgICB7CiAgICAgICAgaWYgKF81NTggPCBpbm5lckNvbmVDb3MpCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gc21vb3Roc3RlcChvdXRlckNvbmVDb3MsIGlubmVyQ29uZUNvcywgXzU1OCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiAxLjA7CiAgICB9CiAgICByZXR1cm4gMC4wOwp9CgpoaWdocCB2ZWMzIGdldExpZ2hJbnRlbnNpdHkoTGlnaHQgbGlnaHQsIGhpZ2hwIHZlYzMgcG9pbnRUb0xpZ2h0KQp7CiAgICBoaWdocCBmbG9hdCByYW5nZUF0dGVudWF0aW9uID0gMS4wOwogICAgaGlnaHAgZmxvYXQgc3BvdEF0dGVudWF0aW9uID0gMS4wOwogICAgaWYgKGxpZ2h0LnR5cGUgIT0gMCkKICAgIHsKICAgICAgICBoaWdocCBmbG9hdCBwYXJhbSA9IGxpZ2h0LnJhbmdlOwogICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzEgPSBsZW5ndGgocG9pbnRUb0xpZ2h0KTsKICAgICAgICByYW5nZUF0dGVudWF0aW9uID0gZ2V0UmFuZ2VBdHRlbnVhdGlvbihwYXJhbSwgcGFyYW1fMSk7CiAgICB9CiAgICBpZiAobGlnaHQudHlwZSA9PSAyKQogICAgewogICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMiA9IHBvaW50VG9MaWdodDsKICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzMgPSBsaWdodC5kaXJlY3Rpb247CiAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fNCA9IGxpZ2h0Lm91dGVyQ29uZUNvczsKICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV81ID0gbGlnaHQuaW5uZXJDb25lQ29zOwogICAgICAgIHNwb3RBdHRlbnVhdGlvbiA9IGdldFNwb3RBdHRlbnVhdGlvbihwYXJhbV8yLCBwYXJhbV8zLCBwYXJhbV80LCBwYXJhbV81KTsKICAgIH0KICAgIHJldHVybiBsaWdodC5jb2xvciAqICgocmFuZ2VBdHRlbnVhdGlvbiAqIHNwb3RBdHRlbnVhdGlvbikgKiBsaWdodC5pbnRlbnNpdHkpOwp9CgpoaWdocCB2ZWMzIEZfU2NobGljayhoaWdocCB2ZWMzIGYwLCBoaWdocCB2ZWMzIGY5MCwgaGlnaHAgZmxvYXQgVmRvdEgpCnsKICAgIHJldHVybiBmMCArICgoZjkwIC0gZjApICogcG93KGNsYW1wKDEuMCAtIFZkb3RILCAwLjAsIDEuMCksIDUuMCkpOwp9CgpoaWdocCB2ZWMzIEJSREZfbGFtYmVydGlhbihoaWdocCB2ZWMzIGYwLCBoaWdocCB2ZWMzIGY5MCwgaGlnaHAgdmVjMyBkaWZmdXNlQ29sb3IsIGhpZ2hwIGZsb2F0IFZkb3RIKQp7CiAgICBoaWdocCB2ZWMzIHBhcmFtID0gZjA7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzEgPSBmOTA7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8yID0gVmRvdEg7CiAgICByZXR1cm4gKHZlYzMoMS4wKSAtIEZfU2NobGljayhwYXJhbSwgcGFyYW1fMSwgcGFyYW1fMikpICogKGRpZmZ1c2VDb2xvciAqIHZlYzMoMC4zMTgzMDk4NzMzNDI1MTQwMzgwODU5Mzc1KSk7Cn0KCmhpZ2hwIGZsb2F0IFZfR0dYKGhpZ2hwIGZsb2F0IE5kb3RMLCBoaWdocCBmbG9hdCBOZG90ViwgaGlnaHAgZmxvYXQgYWxwaGFSb3VnaG5lc3MpCnsKICAgIGhpZ2hwIGZsb2F0IF80MjcgPSBhbHBoYVJvdWdobmVzcyAqIGFscGhhUm91Z2huZXNzOwogICAgaGlnaHAgZmxvYXQgXzQzNCA9IDEuMCAtIF80Mjc7CiAgICBoaWdocCBmbG9hdCBfNDU1ID0gKE5kb3RMICogc3FydCgoKE5kb3RWICogTmRvdFYpICogXzQzNCkgKyBfNDI3KSkgKyAoTmRvdFYgKiBzcXJ0KCgoTmRvdEwgKiBOZG90TCkgKiBfNDM0KSArIF80MjcpKTsKICAgIGlmIChfNDU1ID4gMC4wKQogICAgewogICAgICAgIHJldHVybiAwLjUgLyBfNDU1OwogICAgfQogICAgcmV0dXJuIDAuMDsKfQoKaGlnaHAgZmxvYXQgRF9HR1goaGlnaHAgZmxvYXQgTmRvdEgsIGhpZ2hwIGZsb2F0IGFscGhhUm91Z2huZXNzKQp7CiAgICBoaWdocCBmbG9hdCBfNDY5ID0gYWxwaGFSb3VnaG5lc3MgKiBhbHBoYVJvdWdobmVzczsKICAgIGhpZ2hwIGZsb2F0IF80NzcgPSAoKE5kb3RIICogTmRvdEgpICogKF80NjkgLSAxLjApKSArIDEuMDsKICAgIHJldHVybiBfNDY5IC8gKCgzLjE0MTU5Mjc0MTAxMjU3MzI0MjE4NzUgKiBfNDc3KSAqIF80NzcpOwp9CgpoaWdocCB2ZWMzIEJSREZfc3BlY3VsYXJHR1goaGlnaHAgdmVjMyBmMCwgaGlnaHAgdmVjMyBmOTAsIGhpZ2hwIGZsb2F0IGFscGhhUm91Z2huZXNzLCBoaWdocCBmbG9hdCBWZG90SCwgaGlnaHAgZmxvYXQgTmRvdEwsIGhpZ2hwIGZsb2F0IE5kb3RWLCBoaWdocCBmbG9hdCBOZG90SCkKewogICAgaGlnaHAgdmVjMyBwYXJhbSA9IGYwOwogICAgaGlnaHAgdmVjMyBwYXJhbV8xID0gZjkwOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMiA9IFZkb3RIOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMyA9IE5kb3RMOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fNCA9IE5kb3RWOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fNSA9IGFscGhhUm91Z2huZXNzOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fNiA9IE5kb3RIOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fNyA9IGFscGhhUm91Z2huZXNzOwogICAgcmV0dXJuIChGX1NjaGxpY2socGFyYW0sIHBhcmFtXzEsIHBhcmFtXzIpICogVl9HR1gocGFyYW1fMywgcGFyYW1fNCwgcGFyYW1fNSkpICogRF9HR1gocGFyYW1fNiwgcGFyYW1fNyk7Cn0KCmhpZ2hwIHZlYzQgZ2V0RW1pc3NpdmVUZXh0dXJlKCkKewogICAgcmV0dXJuIHRleHR1cmUodV9lbWlzc2l2ZVRleHR1cmUsIHZfdXYxKTsKfQoKaGlnaHAgdmVjMyBsaW5lYXJUb3NSR0IoaGlnaHAgdmVjMyBjb2xvcikKewogICAgcmV0dXJuIHBvdyhjb2xvciwgdmVjMygwLjQ1NDU0NTQ2ODA5MTk2NDcyMTY3OTY4NzUpKTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCBfMTE3OSA9IGdldEJhc2VDb2xvcigpOwogICAgaGlnaHAgdmVjMyBfMTYwNyA9IGdldE5vcm1hbEluZm8oKS5uOwogICAgaGlnaHAgdmVjMyBfMTYxMSA9IHZlYzMoMC4wKTsKICAgIGhpZ2hwIGZsb2F0IF8xNjEyID0gMC4wOwogICAgaGlnaHAgdmVjMyBfMTYxMyA9IHZlYzMoMC4wKTsKICAgIGhpZ2hwIHZlYzMgXzE2MTQgPSB2ZWMzKDAuMCk7CiAgICBoaWdocCB2ZWMzIF8xMTk0ID0gXzExNzkueHl6OwogICAgTWF0ZXJpYWxJbmZvIHBhcmFtID0gTWF0ZXJpYWxJbmZvKDAuMCwgdmVjMygwLjApLCAwLjAsIHZlYzMoMC4wKSwgdmVjMygwLjApLCAwLjAsIHZlYzMoMC4wKSwgXzExOTQpOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMSA9IDAuMDM5OTk5OTk5MTA1OTMwMzI4MzY5MTQwNjI1OwogICAgTWF0ZXJpYWxJbmZvIF8xMjA0ID0gZ2V0TWV0YWxsaWNSb3VnaG5lc3NJbmZvKHBhcmFtLCBwYXJhbV8xKTsKICAgIF8xNjExID0gXzEyMDQuZjA7CiAgICBfMTYxMyA9IF8xMjA0LmFsYmVkb0NvbG9yOwogICAgaGlnaHAgZmxvYXQgXzEyMDcgPSBjbGFtcChfMTIwNC5wZXJjZXB0dWFsUm91Z2huZXNzLCAwLjAsIDEuMCk7CiAgICBfMTYxMiA9IF8xMjA3ICogXzEyMDc7CiAgICBfMTYxNCA9IHZlYzMoY2xhbXAobWF4KG1heChfMTIwNC5mMC54LCBfMTIwNC5mMC55KSwgXzEyMDQuZjAueikgKiA1MC4wLCAwLjAsIDEuMCkpOwogICAgaGlnaHAgdmVjMyBmX3NwZWN1bGFyID0gdmVjMygwLjApOwogICAgaGlnaHAgdmVjMyBmX2VtaXNzaXZlID0gdmVjMygwLjApOwogICAgaGlnaHAgdmVjMyBmX2RpZmZ1c2UgPSAodV9mc19wYnJQYXJhbXNbM10ueHl6ICogcG93KHVfZnNfcGJyUGFyYW1zWzNdLncsIDIuMjAwMDAwMDQ3NjgzNzE1ODIwMzEyNSkpICogXzExOTQ7CiAgICBoaWdocCB2ZWM0IF8xMjUyID0gZ2V0T2NjbHVzaW9uVGV4dHVyZSgpOwogICAgaGlnaHAgZmxvYXQgXzEyNTMgPSBfMTI1Mi54OwogICAgZl9kaWZmdXNlICo9IF8xMjUzOwogICAgZl9zcGVjdWxhciAqPSBfMTI1MzsKICAgIGhpZ2hwIHZlYzMgXzEyNzkgPSBub3JtYWxpemUodV9mc19saWdodGluZ1syNF0ueHl6IC0gdl9wb3NpdGlvbik7CiAgICBoaWdocCB2ZWMzIHBvaW50VG9MaWdodDsKICAgIGZvciAoaW50IGkgPSAwOyBpIDwgNjsgaSsrKQogICAgewogICAgICAgIGludCBfMTI5MiA9IGludCh1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMTJdLncpOwogICAgICAgIGJvb2wgXzEzMjMgPSAodV9mc19saWdodGluZ1tpICogMSArIDE4XS56IDwgMC4wKSA/IGZhbHNlIDogdHJ1ZTsKICAgICAgICBpbnQgXzEzMjcgPSBpbnQodV9mc19saWdodGluZ1tpICogMSArIDE4XS56KTsKICAgICAgICBpbnQgXzEzMzEgPSBpbnQodV9mc19saWdodGluZ1tpICogMSArIDE4XS53KTsKICAgICAgICBpZiAodV9mc19saWdodGluZ1tpICogMSArIDZdLncgPiAwLjApCiAgICAgICAgewogICAgICAgICAgICBpZiAoXzEyOTIgIT0gMCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcG9pbnRUb0xpZ2h0ID0gdV9mc19saWdodGluZ1tpICogMSArIDEyXS54eXogLSB2X3Bvc2l0aW9uOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcG9pbnRUb0xpZ2h0ID0gLXVfZnNfbGlnaHRpbmdbaSAqIDEgKyAwXS54eXo7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaGlnaHAgdmVjMyBfMTM1NCA9IG5vcm1hbGl6ZShwb2ludFRvTGlnaHQpOwogICAgICAgICAgICBoaWdocCB2ZWMzIF8xMzU5ID0gbm9ybWFsaXplKF8xMzU0ICsgXzEyNzkpOwogICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzIgPSBfMTYwNzsKICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8zID0gXzEzNTQ7CiAgICAgICAgICAgIGhpZ2hwIGZsb2F0IF8xMzY1ID0gY2xhbXBlZERvdChwYXJhbV8yLCBwYXJhbV8zKTsKICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV80ID0gXzE2MDc7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fNSA9IF8xMjc5OwogICAgICAgICAgICBoaWdocCBmbG9hdCBfMTM3MSA9IGNsYW1wZWREb3QocGFyYW1fNCwgcGFyYW1fNSk7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fNiA9IF8xNjA3OwogICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzcgPSBfMTM1OTsKICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV84ID0gXzEzNTQ7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fOSA9IF8xMzU5OwogICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzEwID0gXzEyNzk7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMTEgPSBfMTM1OTsKICAgICAgICAgICAgaGlnaHAgZmxvYXQgXzEzODkgPSBjbGFtcGVkRG90KHBhcmFtXzEwLCBwYXJhbV8xMSk7CiAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHNoYWRvdyA9IDEuMDsKICAgICAgICAgICAgaWYgKF8xMzIzKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoXzEyOTIgPT0gMikKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpbnQgcGFyYW1fMTIgPSBfMTMyNzsKICAgICAgICAgICAgICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8xMyA9IF8xMzY1OwogICAgICAgICAgICAgICAgICAgIHNoYWRvdyA9IDEuMCAtIHNoYWRvd0NhbGN1bGF0aW9uUENGKHBhcmFtXzEyLCBwYXJhbV8xMyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWYgKF8xMjkyID09IDApCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBpbnQgcGFyYW1fMTQgPSBfMTMyNzsKICAgICAgICAgICAgICAgICAgICAgICAgaW50IHBhcmFtXzE1ID0gXzEzMzE7CiAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzE2ID0gXzEzNjU7CiAgICAgICAgICAgICAgICAgICAgICAgIHNoYWRvdyA9IDEuMCAtIHNoYWRvd0Nhc2NhZGVkQ2FsY3VsYXRpb25QQ0YocGFyYW1fMTQsIHBhcmFtXzE1LCBwYXJhbV8xNik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfMTI5MiA9PSAxKQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnQgcGFyYW1fMTcgPSBfMTMyNzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMTggPSAtcG9pbnRUb0xpZ2h0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMTkgPSBfMTM2NTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYWRvdyA9IDEuMCAtIHNoYWRvd0N1YmVDYWxjdWxhdGlvblBDRihwYXJhbV8xNywgcGFyYW1fMTgsIHBhcmFtXzE5KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoKF8xMzY1ID4gMC4wKSB8fCAoXzEzNzEgPiAwLjApKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBMaWdodCBwYXJhbV8yMCA9IExpZ2h0KF8xMjkyLCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMF0ueHl6LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgNl0ueHl6LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMTJdLnh5eiwgdV9mc19saWdodGluZ1tpICogMSArIDBdLncsIHVfZnNfbGlnaHRpbmdbaSAqIDEgKyA2XS53LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMThdLngsIHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxOF0ueSwgXzEzMjMsIF8xMzI3LCBfMTMzMSk7CiAgICAgICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzIxID0gcG9pbnRUb0xpZ2h0OwogICAgICAgICAgICAgICAgaGlnaHAgdmVjMyBfMTQ1NSA9IGdldExpZ2hJbnRlbnNpdHkocGFyYW1fMjAsIHBhcmFtXzIxKTsKICAgICAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMjIgPSBfMTYxMTsKICAgICAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMjMgPSBfMTYxNDsKICAgICAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMjQgPSBfMTYxMzsKICAgICAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzI1ID0gXzEzODk7CiAgICAgICAgICAgICAgICBmX2RpZmZ1c2UgKz0gKCgoXzE0NTUgKiBzaGFkb3cpICogXzEzNjUpICogQlJERl9sYW1iZXJ0aWFuKHBhcmFtXzIyLCBwYXJhbV8yMywgcGFyYW1fMjQsIHBhcmFtXzI1KSk7CiAgICAgICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzI2ID0gXzE2MTE7CiAgICAgICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzI3ID0gXzE2MTQ7CiAgICAgICAgICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8yOCA9IF8xNjEyOwogICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMjkgPSBfMTM4OTsKICAgICAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzMwID0gXzEzNjU7CiAgICAgICAgICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8zMSA9IF8xMzcxOwogICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMzIgPSBjbGFtcGVkRG90KHBhcmFtXzYsIHBhcmFtXzcpOwogICAgICAgICAgICAgICAgZl9zcGVjdWxhciArPSAoKChfMTQ1NSAqIHNoYWRvdykgKiBfMTM2NSkgKiBCUkRGX3NwZWN1bGFyR0dYKHBhcmFtXzI2LCBwYXJhbV8yNywgcGFyYW1fMjgsIHBhcmFtXzI5LCBwYXJhbV8zMCwgcGFyYW1fMzEsIHBhcmFtXzMyKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBmX2VtaXNzaXZlID0gdV9mc19wYnJQYXJhbXNbMl0ueHl6OwogICAgaGlnaHAgdmVjMyBwYXJhbV8zMyA9IGdldEVtaXNzaXZlVGV4dHVyZSgpLnh5ejsKICAgIGhpZ2hwIHZlYzMgXzE1MTAgPSBmX2VtaXNzaXZlOwogICAgaGlnaHAgdmVjMyBfMTUxMSA9IF8xNTEwICogc1JHQlRvTGluZWFyKHBhcmFtXzMzKTsKICAgIGZfZW1pc3NpdmUgPSBfMTUxMTsKICAgIGhpZ2hwIHZlYzMgY29sb3IgPSAoXzE1MTEgKyBmX2RpZmZ1c2UpICsgZl9zcGVjdWxhcjsKICAgIGludCBfMTUyNCA9IGludCh1X2ZzX2ZvZ1swXS53KTsKICAgIGhpZ2hwIGZsb2F0IGZvZ0ZhY3RvciA9IDAuMDsKICAgIGhpZ2hwIGZsb2F0IF8xNTQ1ID0gZ2xfRnJhZ0Nvb3JkLnogLyBnbF9GcmFnQ29vcmQudzsKICAgIGlmIChfMTUyNCA9PSAwKQogICAgewogICAgICAgIGZvZ0ZhY3RvciA9ICh1X2ZzX2ZvZ1sxXS53IC0gXzE1NDUpIC8gKHVfZnNfZm9nWzFdLncgLSB1X2ZzX2ZvZ1sxXS56KTsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBpZiAoXzE1MjQgPT0gMSkKICAgICAgICB7CiAgICAgICAgICAgIGZvZ0ZhY3RvciA9IGV4cDIoKCgtdV9mc19mb2dbMV0ueCkgKiBfMTU0NSkgKiAxLjQ0MjY5NTAyMTYyOTMzMzQ5NjA5Mzc1KTsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgaWYgKF8x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";
static const std::string mesh_Uv1PucShwPcfNorFog_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUf7CQAAVkVSVENPREWBBwAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c19wYnJQYXJhbXNbMTJdOwp1bmlmb3JtIHZlYzQgdV92c19zaGFkb3dzWzI0XTsKbGF5b3V0KGxvY2F0aW9uID0gMCkgaW4gdmVjMyBhX3Bvc2l0aW9uOwpsYXlvdXQobG9jYXRpb24gPSAxKSBpbiB2ZWMzIGFfbm9ybWFsOwpvdXQgdmVjMyB2X3Bvc2l0aW9uOwpvdXQgdmVjMyB2X25vcm1hbDsKb3V0IHZlYzIgdl91djE7Cm91dCB2ZWMyIHZfdXYyOwpsYXlvdXQobG9jYXRpb24gPSAyKSBpbiB2ZWMyIGFfdGV4Y29vcmQxOwpvdXQgdmVjNCB2X2xpZ2h0UHJvalBvc1s2XTsKb3V0IGZsb2F0IHZfY2xpcFNwYWNlUG9zWjsKCm1hdDQgZ2V0Qm9uZVRyYW5zZm9ybSgpCnsKICAgIHJldHVybiBtYXQ0KHZlYzQoMC4wKSwgdmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSk7Cn0KCnZlYzMgZ2V0TW9ycGhQb3NpdGlvbih2ZWMzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKdmVjMyBnZXRTa2luUG9zaXRpb24odmVjMyBwb3MsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKdmVjNCBnZXRQb3NpdGlvbihtYXQ0IGJvbmVUcmFuc2Zvcm0pCnsKICAgIHZlYzMgcGFyYW0gPSBhX3Bvc2l0aW9uOwogICAgdmVjMyBwYXJhbV8xID0gZ2V0TW9ycGhQb3NpdGlvbihwYXJhbSk7CiAgICBtYXQ0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIHZlYzQoZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpLCAxLjApOwp9Cgp2ZWMzIGdldE1vcnBoTm9ybWFsKHZlYzMgbm9ybWFsKQp7CiAgICByZXR1cm4gbm9ybWFsOwp9Cgp2ZWMzIGdldFNraW5Ob3JtYWwodmVjMyBub3JtYWwsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIG5vcm1hbDsKfQoKdmVjMyBnZXROb3JtYWwobWF0NCBib25lVHJhbnNmb3JtKQp7CiAgICB2ZWMzIHBhcmFtID0gYV9ub3JtYWw7CiAgICB2ZWMzIHBhcmFtXzEgPSBnZXRNb3JwaE5vcm1hbChwYXJhbSk7CiAgICBtYXQ0IHBhcmFtXzIgPSBib25lVHJhbnNmb3JtOwogICAgcmV0dXJuIG5vcm1hbGl6ZShnZXRTa2luTm9ybWFsKHBhcmFtXzEsIHBhcmFtXzIpKTsKfQoKdm9pZCBtYWluKCkKewogICAgbWF0NCBfOTQgPSBnZXRCb25lVHJhbnNmb3JtKCk7CiAgICBtYXQ0IHBhcmFtID0gXzk0OwogICAgdmVjNCBfOTkgPSBnZXRQb3NpdGlvbihwYXJhbSk7CiAgICB2ZWM0IF8xMTAgPSBtYXQ0KHVfdnNfcGJyUGFyYW1zWzBdLCB1X3ZzX3BiclBhcmFtc1sxXSwgdV92c19wYnJQYXJhbXNbMl0sIHVfdnNfcGJyUGFyYW1zWzNdKSAqIF85OTsKICAgIHZfcG9zaXRpb24gPSB2ZWMzKF8xMTAueHl6KSAvIHZlYzMoXzExMC53KTsKICAgIG1hdDQgcGFyYW1fMSA9IF85NDsKICAgIHZfbm9ybWFsID0gbm9ybWFsaXplKHZlYzMoKG1hdDQodV92c19wYnJQYXJhbXNbNF0sIHVfdnNfcGJyUGFyYW1zWzVdLCB1X3ZzX3BiclBhcmFtc1s2XSwgdV92c19wYnJQYXJhbXNbN10pICogdmVjNChnZXROb3JtYWwocGFyYW1fMSksIDAuMCkpLnh5eikpOwogICAgdl91djEgPSB2ZWMyKDAuMCk7CiAgICB2X3V2MiA9IHZlYzIoMC4wKTsKICAgIHZfdXYxID0gYV90ZXhjb29yZDE7CiAgICBmb3IgKGludCBpID0gMDsgaSA8IDY7IGkrKykKICAgIHsKICAgICAgICB2X2xpZ2h0UHJvalBvc1tpXSA9IG1hdDQodV92c19zaGFkb3dzW2kgKiA0ICsgMF0sIHVfdnNfc2hhZG93c1tpICogNCArIDFdLCB1X3ZzX3NoYWRvd3NbaSAqIDQgKyAyXSwgdV92c19zaGFkb3dzW2kgKiA0ICsgM10pICogXzExMDsKICAgIH0KICAgIGdsX1Bvc2l0aW9uID0gbWF0NCh1X3ZzX3BiclBhcmFtc1s4XSwgdV92c19wYnJQYXJhbXNbOV0sIHVfdnNfcGJyUGFyYW1zWzEwXSwgdV92c19wYnJQYXJhbXNbMTFdKSAqIF85OTsKICAgIHZfY2xpcFNwYWNlUG9zWiA9IGdsX1Bvc2l0aW9uLno7Cn0KClJFRkxmAgAAbWVzaF9VdjFQdWNTaHdQY2ZOb3JGb2dfZ2xzbDMwMAADAAAAAAAAAAIAAAAEAAAAYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUM2Ffbm9ybWFsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDNhX3RleGNvb3JkMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQyAwAAAHVfdnNfcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAcGJyUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAABbW9kZWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABub3JtYWxNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAQAAAAG12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAACAAAAAAQAAAHVfdnNfc2hhZG93cwAAAAAAAAAAAAAAAAAAAAAAAAAAXzE3MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAIABAAABbGlnaHRWUE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0BgAAAAAAAABTVEFHc1YAAEZSQUdDT0RFc1AAACN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIGhpZ2hwIGludDsKCnN0cnVjdCBNYXRlcmlhbEluZm8KewogICAgaGlnaHAgZmxvYXQgcGVyY2VwdHVhbFJvdWdobmVzczsKICAgIGhpZ2hwIHZlYzMgZjA7CiAgICBoaWdocCBmbG9hdCBhbHBoYVJvdWdobmVzczsKICAgIGhpZ2hwIHZlYzMgYWxiZWRvQ29sb3I7CiAgICBoaWdocCB2ZWMzIGY5MDsKICAgIGhpZ2hwIGZsb2F0IG1ldGFsbGljOwogICAgaGlnaHAgdmVjMyBuOwogICAgaGlnaHAgdmVjMyBiYXNlQ29sb3I7Cn07CgpzdHJ1Y3QgTm9ybWFsSW5mbwp7CiAgICBoaWdocCB2ZWMzIG5nOwogICAgaGlnaHAgdmVjMyBuOwogICAgaGlnaHAgdmVjMyB0OwogICAgaGlnaHAgdmVjMyBiOwp9OwoKc3RydWN0IExpZ2h0CnsKICAgIGludCB0eXBlOwogICAgaGlnaHAgdmVjMyBkaXJlY3Rpb247CiAgICBoaWdocCB2ZWMzIGNvbG9yOwogICAgaGlnaHAgdmVjMyBwb3NpdGlvbjsKICAgIGhpZ2hwIGZsb2F0IHJhbmdlOwogICAgaGlnaHAgZmxvYXQgaW50ZW5zaXR5OwogICAgaGlnaHAgZmxvYXQgaW5uZXJDb25lQ29zOwogICAgaGlnaHAgZmxvYXQgb3V0ZXJDb25lQ29zOwogICAgYm9vbCBzaGFkb3dzOwogICAgaW50IHNoYWRvd01hcEluZGV4OwogICAgaW50IG51bVNoYWRvd0Nhc2NhZGVzOwp9OwoKc3RydWN0IFNoYWRvdwp7CiAgICBoaWdocCBmbG9hdCBtYXhCaWFzOwogICAgaGlnaHAgZmxvYXQgbWluQmlhczsKICAgIGhpZ2hwIHZlYzIgbWFwU2l6ZTsKICAgIGhpZ2hwIHZlYzIgbmVhckZhcjsKICAgIGhpZ2hwIHZlYzQgbGlnaHRQcm9qUG9zOwp9OwoKdW5pZm9ybSBoaWdocCB2ZWM0IHVfZnNfcGJyUGFyYW1zWzRdOwp1bmlmb3JtIGhpZ2hwIHZlYzQgdV9mc19zaGFkb3dzWzddOwp1bmlmb3JtIGhpZ2hwIHZlYzQgdV9mc19saWdodGluZ1syNV07CnVuaWZvcm0gaGlnaHAgdmVjNCB1X2ZzX2ZvZ1syXTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9iYXNlQ29sb3JUZXh0dXJlOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X21ldGFsbGljUm91Z2huZXNzVGV4dHVyZTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9vY2NsdXNpb25UZXh0dXJlOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X2VtaXNzaXZlVGV4dHVyZTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9zaGFkb3dNYXAxOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X3NoYWRvd01hcDI7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfc2hhZG93TWFwMzsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV9zaGFkb3dNYXA0Owp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1X3NoYWRvd01hcDU7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVfc2hhZG93TWFwNjsKdW5pZm9ybSBoaWdocCBzYW1wbGVyQ3ViZSB1X3NoYWRvd0N1YmVNYXAxOwoKaW4gaGlnaHAgdmVjMiB2X3V2MTsKaW4gaGlnaHAgdmVjMyB2X3Bvc2l0aW9uOwppbiBoaWdocCB2ZWMzIHZfbm9ybWFsOwppbiBoaWdocCB2ZWM0IHZfbGlnaHRQcm9qUG9zWzZdOwppbiBoaWdocCBmbG9hdCB2X2NsaXBTcGFjZVBvc1o7CmxheW91dChsb2NhdGlvbiA9IDApIG91dCBoaWdocCB2ZWM0IGdfZmluYWxDb2xvcjsKaW4gaGlnaHAgdmVjMiB2X3V2MjsKCmhpZ2hwIHZlYzMgc1JHQlRvTGluZWFyKGhpZ2hwIHZlYzMgc3JnYkluKQp7CiAgICByZXR1cm4gcG93KHNyZ2JJbiwgdmVjMygyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjUpKTsKfQoKaGlnaHAgdmVjNCBzUkdCVG9MaW5lYXIoaGlnaHAgdmVjNCBzcmdiSW4pCnsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBzcmdiSW4ueHl6OwogICAgcmV0dXJuIHZlYzQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9CgpoaWdocCB2ZWM0IGdldFZlcnRleENvbG9yKCkKewogICAgcmV0dXJuIHZlYzQoMS4wKTsKfQoKaGlnaHAgdmVjNCBnZXRCYXNlQ29sb3IoKQp7CiAgICBoaWdocCB2ZWM0IGJhc2VDb2xvciA9IHVfZnNfcGJyUGFyYW1zWzBdOwogICAgaGlnaHAgdmVjNCBwYXJhbSA9IHRleHR1cmUodV9iYXNlQ29sb3JUZXh0dXJlLCB2X3V2MSk7CiAgICBoaWdocCB2ZWM0IF8yMzIgPSBiYXNlQ29sb3I7CiAgICBoaWdocCB2ZWM0IF8yMzMgPSBfMjMyICogc1JHQlRvTGluZWFyKHBhcmFtKTsKICAgIGJhc2VDb2xvciA9IF8yMzM7CiAgICByZXR1cm4gXzIzMyAqIGdldFZlcnRleENvbG9yKCk7Cn0KCk5vcm1hbEluZm8gZ2V0Tm9ybWFsSW5mbygpCnsKICAgIGhpZ2hwIHZlYzMgXzMxNCA9IHZlYzModl91djEsIDAuMCk7CiAgICBoaWdocCB2ZWMzIF8zMTUgPSBkRmR4KF8zMTQpOwogICAgaGlnaHAgdmVjMyBfMzIxID0gZEZkeShfMzE0KTsKICAgIGhpZ2hwIGZsb2F0IF8zMjQgPSBfMzIxLnk7CiAgICBoaWdocCBmbG9hdCBfMzMxID0gXzMxNS55OwogICAgaGlnaHAgdmVjMyBfMzQ5ID0gKChkRmR4KHZfcG9zaXRpb24pICogXzMyNCkgLSAoZEZkeSh2X3Bvc2l0aW9uKSAqIF8zMzEpKSAvIHZlYzMoKF8zMTUueCAqIF8zMjQpIC0gKF8zMjEueCAqIF8zMzEpKTsKICAgIGhpZ2hwIHZlYzMgXzM1MyA9IG5vcm1hbGl6ZSh2X25vcm1hbCk7CiAgICBoaWdocCB2ZWMzIF8zNjIgPSBub3JtYWxpemUoXzM0OSAtIChfMzUzICogZG90KF8zNTMsIF8zNDkpKSk7CiAgICByZXR1cm4gTm9ybWFsSW5mbyhfMzUzLCBfMzUzLCBfMzYyLCBjcm9zcyhfMzUzLCBfMzYyKSk7Cn0KCk1hdGVyaWFsSW5mbyBnZXRNZXRhbGxpY1JvdWdobmVzc0luZm8oaW5vdXQgTWF0ZXJpYWxJbmZvIGluZm8sIGhpZ2hwIGZsb2F0IGYwX2lvcikKewogICAgaW5mby5tZXRhbGxpYyA9IHVfZnNfcGJyUGFyYW1zWzFdLng7CiAgICBpbmZvLnBlcmNlcHR1YWxSb3VnaG5lc3MgPSB1X2ZzX3BiclBhcmFtc1sxXS55OwogICAgaGlnaHAgdmVjNCBfMjUzID0gdGV4dHVyZSh1X21ldGFsbGljUm91Z2huZXNzVGV4dHVyZSwgdl91djEpOwogICAgaW5mby5wZXJjZXB0dWFsUm91Z2huZXNzICo9IF8yNTMueTsKICAgIGluZm8ubWV0YWxsaWMgKj0gXzI1My56OwogICAgaGlnaHAgdmVjMyBfMjcwID0gdmVjMyhmMF9pb3IpOwogICAgaW5mby5hbGJlZG9Db2xvciA9IG1peChpbmZvLmJhc2VDb2xvciAqICh2ZWMzKDEuMCkgLSBfMjcwKSwgdmVjMygwLjApLCB2ZWMzKGluZm8ubWV0YWxsaWMpKTsKICAgIGluZm8uZjAgPSBtaXgoXzI3MCwgaW5mby5iYXNlQ29sb3IsIHZlYzMoaW5mby5tZXRhbGxpYykpOwogICAgcmV0dXJuIGluZm87Cn0KCmhpZ2hwIHZlYzQgZ2V0T2NjbHVzaW9uVGV4dHVyZSgpCnsKICAgIHJldHVybiB0ZXh0dXJlKHVfb2NjbHVzaW9uVGV4dHVyZSwgdl91djEpOwp9CgpoaWdocCBmbG9hdCBjbGFtcGVkRG90KGhpZ2hwIHZlYzMgeCwgaGlnaHAgdmVjMyB5KQp7CiAgICByZXR1cm4gY2xhbXAoZG90KHgsIHkpLCAwLjAsIDEuMCk7Cn0KClNoYWRvdyBnZXRTaGFkb3cyRENvbmYoaW50IGluZGV4KQp7CiAgICBmb3IgKGludCBpID0gMDsgaSA8IDY7IGkrKykKICAgIHsKICAgICAgICBpZiAoaSA9PSBpbmRleCkKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiBTaGFkb3codV9mc19zaGFkb3dzW2kgKiAxICsgMF0ueCwgdV9mc19zaGFkb3dzW2kgKiAxICsgMF0ueCAqIDAuMTAwMDAwMDAxNDkwMTE2MTE5Mzg0NzY1NjI1LCB1X2ZzX3NoYWRvd3NbaSAqIDEgKyAwXS55eSwgdV9mc19zaGFkb3dzW2kgKiAxICsgMF0uencsIHZfbGlnaHRQcm9qUG9zW2ldKTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gU2hhZG93KDAuMCwgMC4wLCB2ZWMyKDAuMCksIHZlYzIoMC4wKSwgdmVjNCgwLjApKTsKfQoKaGlnaHAgdmVjNCBnZXRTaGFkb3dNYXAoaW50IGluZGV4LCBoaWdocCB2ZWMyIGNvb3JkcykKewogICAgaWYgKGluZGV4ID09IDApCiAgICB7CiAgICAgICAgcmV0dXJuIHRleHR1cmUodV9zaGFkb3dNYXAxLCBjb29yZHMpOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIGlmIChpbmRleCA9PSAxKQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIHRleHR1cmUodV9zaGFkb3dNYXAyLCBjb29yZHMpOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICBpZiAoaW5kZXggPT0gMikKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcmV0dXJuIHRleHR1cmUodV9zaGFkb3dNYXAzLCBjb29yZHMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IDMpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRleHR1cmUodV9zaGFkb3dNYXA0LCBjb29yZHMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSA0KQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRleHR1cmUodV9zaGFkb3dNYXA1LCBjb29yZHMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT0gNSkKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRleHR1cmUodV9zaGFkb3dNYXA2LCBjb29yZHMpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHZlYzQoMC4wKTsKfQoKaGlnaHAgZmxvYXQgZGVjb2RlRGVwdGgoaGlnaHAgdmVjNCByZ2JhKQp7CiAgICByZXR1cm4gZG90KHJnYmEsIHZlYzQoMS4wLCAwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjUsIDEuNTM3ODcwMDQ4MTk2MDU0OTk1MDU5OTY3MDQxMDE1NmUtMDUsIDYuMDMwODYyOTIwMTY5OTY1OTQ2MTE1NTUzMzc5MDU4OGUtMDgpKTsKfQoKaGlnaHAgZmxvYXQgc2hhZG93Q29tcGFyZShpbnQgc2hhZG93TWFwSW5kZXgsIGhpZ2hwIGZsb2F0IGN1cnJlbnREZXB0aCwgaGlnaHAgZmxvYXQgYmlhcywgaGlnaHAgdmVjMiB0ZXhDb29yZHMpCnsKICAgIGludCBwYXJhbSA9IHNoYWRvd01hcEluZGV4OwogICAgaGlnaHAgdmVjMiBwYXJhbV8xID0gdGV4Q29vcmRzOwogICAgaGlnaHAgdmVjNCBwYXJhbV8yID0gZ2V0U2hhZG93TWFwKHBhcmFtLCBwYXJhbV8xKTsKICAgIHJldHVybiBmbG9hdCgoY3VycmVudERlcHRoIC0gYmlhcykgPiBkZWNvZGVEZXB0aChwYXJhbV8yKSk7Cn0KCmhpZ2hwIGZsb2F0IHNoYWRvd0NhbGN1bGF0aW9uQXV4KGludCBzaGFkb3dNYXBJbmRleCwgU2hhZG93IHNoYWRvd0NvbmYsIGhpZ2hwIGZsb2F0IE5kb3RMKQp7CiAgICBoaWdocCBmbG9hdCBzaGFkb3cgPSAwLjA7CiAgICBoaWdocCB2ZWMzIF84MTYgPSAoKHNoYWRvd0NvbmYubGlnaHRQcm9qUG9zLnh5eiAvIHZlYzMoc2hhZG93Q29uZi5saWdodFByb2pQb3MudykpICogMC41KSArIHZlYzMoMC41KTsKICAgIGhpZ2hwIGZsb2F0IF84MTkgPSBfODE2Lno7CiAgICBoaWdocCBmbG9hdCBfODI4ID0gbWF4KHNoYWRvd0NvbmYubWF4QmlhcyAqICgxLjAgLSBOZG90TCksIHNoYWRvd0NvbmYubWluQmlhcyk7CiAgICBoaWdocCB2ZWMyIF84MzMgPSB2ZWMyKDEuMCkgLyBzaGFkb3dDb25mLm1hcFNpemU7CiAgICBmb3IgKGludCB4ID0gLTE7IHggPD0gMTsgeCsrKQogICAgewogICAgICAgIGZvciAoaW50IHkgPSAtMTsgeSA8PSAxOyB5KyspCiAgICAgICAgewogICAgICAgICAgICBpbnQgcGFyYW0gPSBzaGFkb3dNYXBJbmRleDsKICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMSA9IF84MTk7CiAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzIgPSBfODI4OwogICAgICAgICAgICBoaWdocCB2ZWMyIHBhcmFtXzMgPSBfODE2Lnh5ICsgKHZlYzIoZmxvYXQoeCksIGZsb2F0KHkpKSAqIF84MzMpOwogICAgICAgICAgICBzaGFkb3cgKz0gc2hhZG93Q29tcGFyZShwYXJhbSwgcGFyYW1fMSwgcGFyYW1fMiwgcGFyYW1fMyk7CiAgICAgICAgfQogICAgfQogICAgc2hhZG93ICo9IDAuMTExMTExMTExOTM4OTUzMzk5NjU4MjAzMTI1OwogICAgaWYgKF84MTkgPiAxLjApCiAgICB7CiAgICAgICAgc2hhZG93ID0gMC4wOwogICAgfQogICAgcmV0dXJuIHNoYWRvdzsKfQoKaGlnaHAgZmxvYXQgc2hhZG93Q2FsY3VsYXRpb25QQ0YoaW50IHNoYWRvd01hcEluZGV4LCBoaWdocCBmbG9hdCBOZG90TCkKewogICAgaW50IHBhcmFtID0gc2hhZG93TWFwSW5kZXg7CiAgICBpbnQgcGFyYW1fMSA9IHNoYWRvd01hcEluZGV4OwogICAgU2hhZG93IHBhcmFtXzIgPSBnZXRTaGFkb3cyRENvbmYocGFyYW0pOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMyA9IE5kb3RMOwogICAgcmV0dXJuIHNoYWRvd0NhbGN1bGF0aW9uQXV4KHBhcmFtXzEsIHBhcmFtXzIsIHBhcmFtXzMpOwp9CgpoaWdocCBmbG9hdCBzaGFkb3dDYXNjYWRlZENhbGN1bGF0aW9uUENGKGludCBzaGFkb3dNYXBJbmRleCwgaW50IG51bVNoYWRvd0Nhc2NhZGVzLCBoaWdocCBmbG9hdCBOZG90TCkKewogICAgZm9yIChpbnQgYyA9IDA7IGMgPCA0OyBjKyspCiAgICB7CiAgICAgICAgaWYgKGMgPCBudW1TaGFkb3dDYXNjYWRlcykKICAgICAgICB7CiAgICAgICAgICAgIGludCBfOTE1ID0gc2hhZG93TWFwSW5kZXggKyBjOwogICAgICAgICAgICBpbnQgcGFyYW0gPSBfOTE1OwogICAgICAgICAgICBTaGFkb3cgXzkxOSA9IGdldFNoYWRvdzJEQ29uZihwYXJhbSk7CiAgICAgICAgICAgIGhpZ2hwIHZlYzIgXzE2ODcgPSBfOTE5Lm5lYXJGYXI7CiAgICAgICAgICAgIGJvb2wgXzkyNSA9IHZfY2xpcFNwYWNlUG9zWiA+PSBfMTY4Ny54OwogICAgICAgICAgICBib29sIF85MzI7CiAgICAgICAgICAgIGlmIChfOTI1KQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBfOTMyID0gdl9jbGlwU3BhY2VQb3NaIDw9IF8xNjg3Lnk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBfOTMyID0gXzkyNTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoXzkzMikKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaW50IHBhcmFtXzEgPSBfOTE1OwogICAgICAgICAgICAgICAgU2hhZG93IHBhcmFtXzIgPSBfOTE5OwogICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMyA9IE5kb3RMOwogICAgICAgICAgICAgICAgcmV0dXJuIHNoYWRvd0NhbGN1bGF0aW9uQXV4KHBhcmFtXzEsIHBhcmFtXzIsIHBhcmFtXzMpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIDAuMDsKfQoKU2hhZG93IGdldFNoYWRvd0N1YmVDb25mKGludCBpbmRleCkKewogICAgZm9yIChpbnQgaSA9IDY7IGkgPCA3OyBpKyspCiAgICB7CiAgICAgICAgaWYgKGkgPT0gaW5kZXgpCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gU2hhZG93KHVfZnNfc2hhZG93c1tpICogMSArIDBdLngsIHVfZnNfc2hhZG93c1tpICogMSArIDBdLnggKiAwLjEwMDAwMDAwMTQ5MDExNjExOTM4NDc2NTYyNSwgdV9mc19zaGFkb3dzW2kgKiAxICsgMF0ueXksIHVfZnNfc2hhZG93c1tpICogMSArIDBdLnp3LCB2ZWM0KDAuMCkpOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBTaGFkb3coMC4wLCAwLjAsIHZlYzIoMC4wKSwgdmVjMigwLjApLCB2ZWM0KDAuMCkpOwp9CgpoaWdocCBmbG9hdCBkaXN0YW5jZVRvRGVwdGhWYWx1ZShoaWdocCB2ZWMzIF9kaXN0YW5jZSwgaGlnaHAgdmVjMiBjYWxjTmVhckZhcikKewogICAgaGlnaHAgdmVjMyBfOTQ5ID0gYWJzKF9kaXN0YW5jZSk7CiAgICByZXR1cm4gY2FsY05lYXJGYXIueCArIChjYWxjTmVhckZhci55IC8gbWF4KF85NDkueCwgbWF4KF85NDkueSwgXzk0OS56KSkpOwp9CgpoaWdocCB2ZWM0IGdldFNoYWRvd0N1YmVNYXAoaW5vdXQgaW50IGluZGV4LCBoaWdocCB2ZWMzIGNvb3JkcykKewogICAgaW5kZXggLT0gNjsKICAgIGlmIChpbmRleCA9PSAwKQogICAgewogICAgICAgIHJldHVybiB0ZXh0dXJlKHVfc2hhZG93Q3ViZU1hcDEsIGNvb3Jkcyk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICB9CiAgICByZXR1cm4gdmVjNCgwLjApOwp9CgpoaWdocCBmbG9hdCBzaGFkb3dDdWJlQ29tcGFyZShpbnQgc2hhZG93TWFwSW5kZXgsIGhpZ2hwIGZsb2F0IGN1cnJlbnREZXB0aCwgaGlnaHAgZmxvYXQgYmlhcywgaGlnaHAgdmVjMyB0ZXhDb29yZHMpCnsKICAgIGludCBwYXJhbSA9IHNoYWRvd01hcEluZGV4OwogICAgaGlnaHAgdmVjMyBwYXJhbV8xID0gdGV4Q29vcmRzOwogICAgaGlnaHAgdmVjNCBfOTczID0gZ2V0U2hhZG93Q3ViZU1hcChwYXJhbSwgcGFyYW1fMSk7CiAgICBoaWdocCB2ZWM0IHBhcmFtXzIgPSBfOTczOwogICAgaWYgKChjdXJyZW50RGVwdGggLSBiaWFzKSA+IGRlY29kZURlcHRoKHBhcmFtXzIpKQogICAgewogICAgICAgIHJldHVybiAxLjA7CiAgICB9CiAgICByZXR1cm4gMC4wOwp9CgpoaWdocCBmbG9hdCBzaGFkb3dDdWJlQ2FsY3VsYXRpb25QQ0YoaW50IHNoYWRvd01hcEluZGV4LCBoaWdocCB2ZWMzIGZyYWdUb0xpZ2h0LCBoaWdocCBmbG9hdCBOZG90TCkKewogICAgaW50IHBhcmFtID0gc2hhZG93TWFwSW5kZXg7CiAgICBTaGFkb3cgXzk4OSA9IGdldFNoYWRvd0N1YmVDb25mKHBhcmFtKTsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMSA9IGZyYWdUb0xpZ2h0OwogICAgaGlnaHAgdmVjMiBwYXJhbV8yID0gXzk4OS5uZWFyRmFyOwogICAgaGlnaHAgZmxvYXQgXzk5NiA9IGRpc3RhbmNlVG9EZXB0aFZhbHVlKHBhcmFtXzEsIHBhcmFtXzIpOwogICAgaGlnaHAgZmxvYXQgc2hhZG93ID0gMC4wOwogICAgaGlnaHAgZmxvYXQgXzEwMDYgPSBtYXgoXzk4OS5tYXhCaWFzICogKDEuMCAtIE5kb3RMKSwgXzk4OS5taW5CaWFzKTsKICAgIGhpZ2hwIGZsb2F0IF8xMDExID0gbGVuZ3RoKGZyYWdUb0xpZ2h0KSAqIDAuMDAwNTAwMDAwMDIzNzQ4NzI1NjUyNjk0NzAyMTQ4NDM3NTsKICAgIGludCBwYXJhbV8zID0gc2hhZG93TWFwSW5kZXg7CiAgICBoaWdocCBmbG9hdCBwYXJhbV80ID0gXzk5NjsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzUgPSBfMTAwNjsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fNiA9IGZyYWdUb0xpZ2h0OwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzMsIHBhcmFtXzQsIHBhcmFtXzUsIHBhcmFtXzYpOwogICAgaW50IHBhcmFtXzcgPSBzaGFkb3dNYXBJbmRleDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzggPSBfOTk2OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fOSA9IF8xMDA2OwogICAgaGlnaHAgdmVjMyBwYXJhbV8xMCA9IGZyYWdUb0xpZ2h0ICsgKHZlYzMoMS4wKSAqIF8xMDExKTsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV83LCBwYXJhbV84LCBwYXJhbV85LCBwYXJhbV8xMCk7CiAgICBpbnQgcGFyYW1fMTEgPSBzaGFkb3dNYXBJbmRleDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzEyID0gXzk5NjsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzEzID0gXzEwMDY7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzE0ID0gZnJhZ1RvTGlnaHQgKyAodmVjMygxLjAsIC0xLjAsIDEuMCkgKiBfMTAxMSk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMTEsIHBhcmFtXzEyLCBwYXJhbV8xMywgcGFyYW1fMTQpOwogICAgaW50IHBhcmFtXzE1ID0gc2hhZG93TWFwSW5kZXg7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8xNiA9IF85OTY7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8xNyA9IF8xMDA2OwogICAgaGlnaHAgdmVjMyBwYXJhbV8xOCA9IGZyYWdUb0xpZ2h0ICsgKHZlYzMoLTEuMCwgLTEuMCwgMS4wKSAqIF8xMDExKTsKICAgIHNoYWRvdyArPSBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8xNSwgcGFyYW1fMTYsIHBhcmFtXzE3LCBwYXJhbV8xOCk7CiAgICBpbnQgcGFyYW1fMTkgPSBzaGFkb3dNYXBJbmRleDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzIwID0gXzk5NjsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzIxID0gXzEwMDY7CiAgICBoaWdocCB2ZWMzIHBhcmFtXzIyID0gZnJhZ1RvTGlnaHQgKyAodmVjMygtMS4wLCAxLjAsIDEuMCkgKiBfMTAxMSk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMTksIHBhcmFtXzIwLCBwYXJhbV8yMSwgcGFyYW1fMjIpOwogICAgaW50IHBhcmFtXzIzID0gc2hhZG93TWFwSW5kZXg7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8yNCA9IF85OTY7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8yNSA9IF8xMDA2OwogICAgaGlnaHAgdmVjMyBwYXJhbV8yNiA9IGZyYWdUb0xpZ2h0ICsgKHZlYzMoMS4wLCAxLjAsIC0xLjApICogXzEwMTEpOwogICAgc2hhZG93ICs9IHNoYWRvd0N1YmVDb21wYXJlKHBhcmFtXzIzLCBwYXJhbV8yNCwgcGFyYW1fMjUsIHBhcmFtXzI2KTsKICAgIGludCBwYXJhbV8yNyA9IHNoYWRvd01hcEluZGV4OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMjggPSBfOTk2OwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMjkgPSBfMTAwNjsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMzAgPSBmcmFnVG9MaWdodCArICh2ZWMzKDEuMCwgLTEuMCwgLTEuMCkgKiBfMTAxMSk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMjcsIHBhcmFtXzI4LCBwYXJhbV8yOSwgcGFyYW1fMzApOwogICAgaW50IHBhcmFtXzMxID0gc2hhZG93TWFwSW5kZXg7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8zMiA9IF85OTY7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8zMyA9IF8xMDA2OwogICAgaGlnaHAgdmVjMyBwYXJhbV8zNCA9IGZyYWdUb0xpZ2h0ICsgKHZlYzMoLTEuMCkgKiBfMTAxMSk7CiAgICBzaGFkb3cgKz0gc2hhZG93Q3ViZUNvbXBhcmUocGFyYW1fMzEsIHBhcmFtXzMyLCBwYXJhbV8zMywgcGFyYW1fMzQpOwogICAgaW50IHBhcmFtXzM1ID0gc2hhZG93TWFwSW5kZXg7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8zNiA9IF85OTY7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8zNyA9IF8xMDA2OwogICAgaGlnaHAgdmVjMyBwYXJhbV8zOCA9IGZyYWdUb0xpZ2h0ICsgKHZlYzMoLTEuMCwgMS4wLCAtMS4wKSAqIF8xMDExKTsKICAgIGhpZ2hwIGZsb2F0IF8xMTQ0ID0gc2hhZG93OwogICAgaGlnaHAgZmxvYXQgXzExNDcgPSAoXzExNDQgKyBzaGFkb3dDdWJlQ29tcGFyZShwYXJhbV8zNSwgcGFyYW1fMzYsIHBhcmFtXzM3LCBwYXJhbV8zOCkpICogMC4xMTExMTExMTE5Mzg5NTMzOTk2NTgyMDMxMjU7CiAgICBzaGFkb3cgPSBfMTE0NzsKICAgIHJldHVybiBfMTE0NzsKfQoKaGlnaHAgZmxvYXQgZ2V0UmFuZ2VBdHRlbnVhdGlvbihoaWdocCBmbG9hdCByYW5nZSwgaGlnaHAgZmxvYXQgX2Rpc3RhbmNlKQp7CiAgICBpZiAocmFuZ2UgPD0gMC4wKQogICAgewogICAgICAgIHJldHVybiAxLjAgLyBwb3coX2Rpc3RhbmNlLCAyLjApOwogICAgfQogICAgcmV0dXJuIG1heChtaW4oMS4wIC0gcG93KF9kaXN0YW5jZSAvIHJhbmdlLCA0LjApLCAxLjApLCAwLjApIC8gcG93KF9kaXN0YW5jZSwgMi4wKTsKfQoKaGlnaHAgZmxvYXQgZ2V0U3BvdEF0dGVudWF0aW9uKGhpZ2hwIHZlYzMgcG9pbnRUb0xpZ2h0LCBoaWdocCB2ZWMzIHNwb3REaXJlY3Rpb24sIGhpZ2hwIGZsb2F0IG91dGVyQ29uZUNvcywgaGlnaHAgZmxvYXQgaW5uZXJDb25lQ29zKQp7CiAgICBoaWdocCBmbG9hdCBfNTMwID0gZG90KG5vcm1hbGl6ZShzcG90RGlyZWN0aW9uKSwgbm9ybWFsaXplKC1wb2ludFRvTGlnaHQpKTsKICAgIGlmIChfNTMwID4gb3V0ZXJDb25lQ29zKQogICAgewogICAgICAgIGlmIChfNTMwIDwgaW5uZXJDb25lQ29zKQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIHNtb290aHN0ZXAob3V0ZXJDb25lQ29zLCBpbm5lckNvbmVDb3MsIF81MzApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gMS4wOwogICAgfQogICAgcmV0dXJuIDAuMDsKfQoKaGlnaHAgdmVjMyBnZXRMaWdoSW50ZW5zaXR5KExpZ2h0IGxpZ2h0LCBoaWdocCB2ZWMzIHBvaW50VG9MaWdodCkKewogICAgaGlnaHAgZmxvYXQgcmFuZ2VBdHRlbnVhdGlvbiA9IDEuMDsKICAgIGhpZ2hwIGZsb2F0IHNwb3RBdHRlbnVhdGlvbiA9IDEuMDsKICAgIGlmIChsaWdodC50eXBlICE9IDApCiAgICB7CiAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW0gPSBsaWdodC5yYW5nZTsKICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8xID0gbGVuZ3RoKHBvaW50VG9MaWdodCk7CiAgICAgICAgcmFuZ2VBdHRlbnVhdGlvbiA9IGdldFJhbmdlQXR0ZW51YXRpb24ocGFyYW0sIHBhcmFtXzEpOwogICAgfQogICAgaWYgKGxpZ2h0LnR5cGUgPT0gMikKICAgIHsKICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzIgPSBwb2ludFRvTGlnaHQ7CiAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8zID0gbGlnaHQuZGlyZWN0aW9uOwogICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzQgPSBsaWdodC5vdXRlckNvbmVDb3M7CiAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fNSA9IGxpZ2h0LmlubmVyQ29uZUNvczsKICAgICAgICBzcG90QXR0ZW51YXRpb24gPSBnZXRTcG90QXR0ZW51YXRpb24ocGFyYW1fMiwgcGFyYW1fMywgcGFyYW1fNCwgcGFyYW1fNSk7CiAgICB9CiAgICByZXR1cm4gbGlnaHQuY29sb3IgKiAoKHJhbmdlQXR0ZW51YXRpb24gKiBzcG90QXR0ZW51YXRpb24pICogbGlnaHQuaW50ZW5zaXR5KTsKfQoKaGlnaHAgdmVjMyBGX1NjaGxpY2soaGlnaHAgdmVjMyBmMCwgaGlnaHAgdmVjMyBmOTAsIGhpZ2hwIGZsb2F0IFZkb3RIKQp7CiAgICByZXR1cm4gZjAgKyAoKGY5MCAtIGYwKSAqIHBvdyhjbGFtcCgxLjAgLSBWZG90SCwgMC4wLCAxLjApLCA1LjApKTsKfQoKaGlnaHAgdmVjMyBCUkRGX2xhbWJlcnRpYW4oaGlnaHAgdmVjMyBmMCwgaGlnaHAgdmVjMyBmOTAsIGhpZ2hwIHZlYzMgZGlmZnVzZUNvbG9yLCBoaWdocCBmbG9hdCBWZG90SCkKewogICAgaGlnaHAgdmVjMyBwYXJhbSA9IGYwOwogICAgaGlnaHAgdmVjMyBwYXJhbV8xID0gZjkwOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMiA9IFZkb3RIOwogICAgcmV0dXJuICh2ZWMzKDEuMCkgLSBGX1NjaGxpY2socGFyYW0sIHBhcmFtXzEsIHBhcmFtXzIpKSAqIChkaWZmdXNlQ29sb3IgKiB2ZWMzKDAuMzE4MzA5ODczMzQyNTE0MDM4MDg1OTM3NSkpOwp9CgpoaWdocCBmbG9hdCBWX0dHWChoaWdocCBmbG9hdCBOZG90TCwgaGlnaHAgZmxvYXQgTmRvdFYsIGhpZ2hwIGZsb2F0IGFscGhhUm91Z2huZXNzKQp7CiAgICBoaWdocCBmbG9hdCBfMzk4ID0gYWxwaGFSb3VnaG5lc3MgKiBhbHBoYVJvdWdobmVzczsKICAgIGhpZ2hwIGZsb2F0IF80MDUgPSAxLjAgLSBfMzk4OwogICAgaGlnaHAgZmxvYXQgXzQyNiA9IChOZG90TCAqIHNxcnQoKChOZG90ViAqIE5kb3RWKSAqIF80MDUpICsgXzM5OCkpICsgKE5kb3RWICogc3FydCgoKE5kb3RMICogTmRvdEwpICogXzQwNSkgKyBfMzk4KSk7CiAgICBpZiAoXzQyNiA+IDAuMCkKICAgIHsKICAgICAgICByZXR1cm4gMC41IC8gXzQyNjsKICAgIH0KICAgIHJldHVybiAwLjA7Cn0KCmhpZ2hwIGZsb2F0IERfR0dYKGhpZ2hwIGZsb2F0IE5kb3RILCBoaWdocCBmbG9hdCBhbHBoYVJvdWdobmVzcykKewogICAgaGlnaHAgZmxvYXQgXzQ0MCA9IGFscGhhUm91Z2huZXNzICogYWxwaGFSb3VnaG5lc3M7CiAgICBoaWdocCBmbG9hdCBfNDQ4ID0gKChOZG90SCAqIE5kb3RIKSAqIChfNDQwIC0gMS4wKSkgKyAxLjA7CiAgICByZXR1cm4gXzQ0MCAvICgoMy4xNDE1OTI3NDEwMTI1NzMyNDIxODc1ICogXzQ0OCkgKiBfNDQ4KTsKfQoKaGlnaHAgdmVjMyBCUkRGX3NwZWN1bGFyR0dYKGhpZ2hwIHZlYzMgZjAsIGhpZ2hwIHZlYzMgZjkwLCBoaWdocCBmbG9hdCBhbHBoYVJvdWdobmVzcywgaGlnaHAgZmxvYXQgVmRvdEgsIGhpZ2hwIGZsb2F0IE5kb3RMLCBoaWdocCBmbG9hdCBOZG90ViwgaGlnaHAgZmxvYXQgTmRvdEgpCnsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBmMDsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMSA9IGY5MDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzIgPSBWZG90SDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzMgPSBOZG90TDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzQgPSBOZG90VjsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzUgPSBhbHBoYVJvdWdobmVzczsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzYgPSBOZG90SDsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzcgPSBhbHBoYVJvdWdobmVzczsKICAgIHJldHVybiAoRl9TY2hsaWNrKHBhcmFtLCBwYXJhbV8xLCBwYXJhbV8yKSAqIFZfR0dYKHBhcmFtXzMsIHBhcmFtXzQsIHBhcmFtXzUpKSAqIERfR0dYKHBhcmFtXzYsIHBhcmFtXzcpOwp9CgpoaWdocCB2ZWM0IGdldEVtaXNzaXZlVGV4dHVyZSgpCnsKICAgIHJldHVybiB0ZXh0dXJlKHVfZW1pc3NpdmVUZXh0dXJlLCB2X3V2MSk7Cn0KCmhpZ2hwIHZlYzMgbGluZWFyVG9zUkdCKGhpZ2hwIHZlYzMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIHZlYzMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIHZlYzQgXzExNTIgPSBnZXRCYXNlQ29sb3IoKTsKICAgIGhpZ2hwIHZlYzMgXzE1ODEgPSBnZXROb3JtYWxJbmZvKCkubjsKICAgIGhpZ2hwIHZlYzMgXzE1ODUgPSB2ZWMzKDAuMCk7CiAgICBoaWdocCBmbG9hdCBfMTU4NiA9IDAuMDsKICAgIGhpZ2hwIHZlYzMgXzE1ODcgPSB2ZWMzKDAuMCk7CiAgICBoaWdocCB2ZWMzIF8xNTg4ID0gdmVjMygwLjApOwogICAgaGlnaHAgdmVjMyBfMTE2NyA9IF8xMTUyLnh5ejsKICAgIE1hdGVyaWFsSW5mbyBwYXJhbSA9IE1hdGVyaWFsSW5mbygwLjAsIHZlYzMoMC4wKSwgMC4wLCB2ZWMzKDAuMCksIHZlYzMoMC4wKSwgMC4wLCB2ZWMzKDAuMCksIF8xMTY3KTsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzEgPSAwLjAzOTk5OTk5OTEwNTkzMDMyODM2OTE0MDYyNTsKICAgIE1hdGVyaWFsSW5mbyBfMTE3NyA9IGdldE1ldGFsbGljUm91Z2huZXNzSW5mbyhwYXJhbSwgcGFyYW1fMSk7CiAgICBfMTU4NSA9IF8xMTc3LmYwOwogICAgXzE1ODcgPSBfMTE3Ny5hbGJlZG9Db2xvcjsKICAgIGhpZ2hwIGZsb2F0IF8xMTgwID0gY2xhbXAoXzExNzcucGVyY2VwdHVhbFJvdWdobmVzcywgMC4wLCAxLjApOwogICAgXzE1ODYgPSBfMTE4MCAqIF8xMTgwOwogICAgXzE1ODggPSB2ZWMzKGNsYW1wKG1heChtYXgoXzExNzcuZjAueCwgXzExNzcuZjAueSksIF8xMTc3LmYwLnopICogNTAuMCwgMC4wLCAxLjApKTsKICAgIGhpZ2hwIHZlYzMgZl9zcGVjdWxhciA9IHZlYzMoMC4wKTsKICAgIGhpZ2hwIHZlYzMgZl9lbWlzc2l2ZSA9IHZlYzMoMC4wKTsKICAgIGhpZ2hwIHZlYzMgZl9kaWZmdXNlID0gKHVfZnNfcGJyUGFyYW1zWzNdLnh5eiAqIHBvdyh1X2ZzX3BiclBhcmFtc1szXS53LCAyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjUpKSAqIF8xMTY3OwogICAgaGlnaHAgdmVjNCBfMTIyNSA9IGdldE9jY2x1c2lvblRleHR1cmUoKTsKICAgIGhpZ2hwIGZsb2F0IF8xMjI2ID0gXzEyMjUueDsKICAgIGZfZGlmZnVzZSAqPSBfMTIyNjsKICAgIGZfc3BlY3VsYXIgKj0gXzEyMjY7CiAgICBoaWdocCB2ZWMzIF8xMjUyID0gbm9ybWFsaXplKHVfZnNfbGlnaHRpbmdbMjRdLnh5eiAtIHZfcG9zaXRpb24pOwogICAgaGlnaHAgdmVjMyBwb2ludFRvTGlnaHQ7CiAgICBmb3IgKGludCBpID0gMDsgaSA8IDY7IGkrKykKICAgIHsKICAgICAgICBpbnQgXzEyNjUgPSBpbnQodV9mc19saWdodGluZ1tpICogMSArIDEyXS53KTsKICAgICAgICBib29sIF8xMjk2ID0gKHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxOF0ueiA8IDAuMCkgPyBmYWxzZSA6IHRydWU7CiAgICAgICAgaW50IF8xMzAwID0gaW50KHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxOF0ueik7CiAgICAgICAgaW50IF8xMzA0ID0gaW50KHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxOF0udyk7CiAgICAgICAgaWYgKHVfZnNfbGlnaHRpbmdbaSAqIDEgKyA2XS53ID4gMC4wKQogICAgICAgIHsKICAgICAgICAgICAgaWYgKF8xMjY1ICE9IDApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHBvaW50VG9MaWdodCA9IHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAxMl0ueHl6IC0gdl9wb3NpdGlvbjsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHBvaW50VG9MaWdodCA9IC11X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMF0ueHl6OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgXzEzMjcgPSBub3JtYWxpemUocG9pbnRUb0xpZ2h0KTsKICAgICAgICAgICAgaGlnaHAgdmVjMyBfMTMzMiA9IG5vcm1hbGl6ZShfMTMyNyArIF8xMjUyKTsKICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8yID0gXzE1ODE7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fMyA9IF8xMzI3OwogICAgICAgICAgICBoaWdocCBmbG9hdCBfMTMzOCA9IGNsYW1wZWREb3QocGFyYW1fMiwgcGFyYW1fMyk7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fNCA9IF8xNTgxOwogICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzUgPSBfMTI1MjsKICAgICAgICAgICAgaGlnaHAgZmxvYXQgXzEzNDQgPSBjbGFtcGVkRG90KHBhcmFtXzQsIHBhcmFtXzUpOwogICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzYgPSBfMTU4MTsKICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV83ID0gXzEzMzI7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW1fOCA9IF8xMzI3OwogICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzkgPSBfMTMzMjsKICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8xMCA9IF8xMjUyOwogICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzExID0gXzEzMzI7CiAgICAgICAgICAgIGhpZ2hwIGZsb2F0IF8xMzYyID0gY2xhbXBlZERvdChwYXJhbV8xMCwgcGFyYW1fMTEpOwogICAgICAgICAgICBoaWdocCBmbG9hdCBzaGFkb3cgPSAxLjA7CiAgICAgICAgICAgIGlmIChfMTI5NikKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaWYgKF8xMjY1ID09IDIpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaW50IHBhcmFtXzEyID0gXzEzMDA7CiAgICAgICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMTMgPSBfMTMzODsKICAgICAgICAgICAgICAgICAgICBzaGFkb3cgPSAxLjAgLSBzaGFkb3dDYWxjdWxhdGlvblBDRihwYXJhbV8xMiwgcGFyYW1fMTMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGlmIChfMTI2NSA9PSAwKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaW50IHBhcmFtXzE0ID0gXzEzMDA7CiAgICAgICAgICAgICAgICAgICAgICAgIGludCBwYXJhbV8xNSA9IF8xMzA0OwogICAgICAgICAgICAgICAgICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8xNiA9IF8xMzM4OwogICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3cgPSAxLjAgLSBzaGFkb3dDYXNjYWRlZENhbGN1bGF0aW9uUENGKHBhcmFtXzE0LCBwYXJhbV8xNSwgcGFyYW1fMTYpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoXzEyNjUgPT0gMSkKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50IHBhcmFtXzE3ID0gXzEzMDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzE4ID0gLXBvaW50VG9MaWdodDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzE5ID0gXzEzMzg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3cgPSAxLjAgLSBzaGFkb3dDdWJlQ2FsY3VsYXRpb25QQ0YocGFyYW1fMTcsIHBhcmFtXzE4LCBwYXJhbV8xOSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKChfMTMzOCA+IDAuMCkgfHwgKF8xMzQ0ID4gMC4wKSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgTGlnaHQgcGFyYW1fMjAgPSBMaWdodChfMTI2NSwgdV9mc19saWdodGluZ1tpICogMSArIDBdLnh5eiwgdV9mc19saWdodGluZ1tpICogMSArIDZdLnh5eiwgdV9mc19saWdodGluZ1tpICogMSArIDEyXS54eXosIHVfZnNfbGlnaHRpbmdbaSAqIDEgKyAwXS53LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgNl0udywgdV9mc19saWdodGluZ1tpICogMSArIDE4XS54LCB1X2ZzX2xpZ2h0aW5nW2kgKiAxICsgMThdLnksIF8xMjk2LCBfMTMwMCwgXzEzMDQpOwogICAgICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8yMSA9IHBvaW50VG9MaWdodDsKICAgICAgICAgICAgICAgIGhpZ2hwIHZlYzMgXzE0MjggPSBnZXRMaWdoSW50ZW5zaXR5KHBhcmFtXzIwLCBwYXJhbV8yMSk7CiAgICAgICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzIyID0gXzE1ODU7CiAgICAgICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzIzID0gXzE1ODg7CiAgICAgICAgICAgICAgICBoaWdocCB2ZWMzIHBhcmFtXzI0ID0gXzE1ODc7CiAgICAgICAgICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8yNSA9IF8xMzYyOwogICAgICAgICAgICAgICAgZl9kaWZmdXNlICs9ICgoKF8xNDI4ICogc2hhZG93KSAqIF8xMzM4KSAqIEJSREZfbGFtYmVydGlhbihwYXJhbV8yMiwgcGFyYW1fMjMsIHBhcmFtXzI0LCBwYXJhbV8yNSkpOwogICAgICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8yNiA9IF8xNTg1OwogICAgICAgICAgICAgICAgaGlnaHAgdmVjMyBwYXJhbV8yNyA9IF8xNTg4OwogICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMjggPSBfMTU4NjsKICAgICAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzI5ID0gXzEzNjI7CiAgICAgICAgICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8zMCA9IF8xMzM4OwogICAgICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMzEgPSBfMTM0NDsKICAgICAgICAgICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzMyID0gY2xhbXBlZERvdChwYXJhbV82LCBwYXJhbV83KTsKICAgICAgICAgICAgICAgIGZfc3BlY3VsYXIgKz0gKCgoXzE0MjggKiBzaGFkb3cpICogXzEzMzgpICogQlJERl9zcGVjdWxhckdHWChwYXJhbV8yNiwgcGFyYW1fMjcsIHBhcmFtXzI4LCBwYXJhbV8yOSwgcGFyYW1fMzAsIHBhcmFtXzMxLCBwYXJhbV8zMikpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgZl9lbWlzc2l2ZSA9IHVfZnNfcGJyUGFyYW1zWzJdLnh5ejsKICAgIGhpZ2hwIHZlYzMgcGFyYW1fMzMgPSBnZXRFbWlzc2l2ZVRleHR1cmUoKS54eXo7CiAgICBoaWdocCB2ZWMzIF8xNDgzID0gZl9lbWlzc2l2ZTsKICAgIGhpZ2hwIHZlYzMgXzE0ODQgPSBfMTQ4MyAqIHNSR0JUb0xpbmVhcihwYXJhbV8zMyk7CiAgICBmX2VtaXNzaXZlID0gXzE0ODQ7CiAgICBoaWdocCB2ZWMzIGNvbG9yID0gKF8xNDg0ICsgZl9kaWZmdXNlKSArIGZfc3BlY3VsYXI7CiAgICBpbnQgXzE0OTcgPSBpbnQodV9mc19mb2dbMF0udyk7CiAgICBoaWdocCBmbG9hdCBmb2dGYWN0b3IgPSAwLjA7CiAgICBoaWdocCBmbG9hdCBfMTUxOCA9IGdsX0ZyYWdDb29yZC56IC8gZ2xfRnJhZ0Nvb3JkLnc7CiAgICBpZiAoXzE0OTcgPT0gMCkKICAgIHsKICAgICAgICBmb2dGYWN0b3IgPSAodV9mc19mb2dbMV0udyAtIF8xNTE4KSAvICh1X2ZzX2ZvZ1sx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";
static const std::string ui_TexVc4_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUcqAwAAVkVSVENPREWFAQAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c191aVBhcmFtc1s0XTsKb3V0IHZlYzQgdl9jb2xvcjsKbGF5b3V0KGxvY2F0aW9uID0gMSkgaW4gdmVjNCBhX2NvbG9yOwpvdXQgdmVjMiB2X3V2MTsKbGF5b3V0KGxvY2F0aW9uID0gMikgaW4gdmVjMiBhX3RleGNvb3JkMTsKbGF5b3V0KGxvY2F0aW9uID0gMCkgaW4gdmVjMyBhX3Bvc2l0aW9uOwoKdm9pZCBtYWluKCkKewogICAgdl9jb2xvciA9IGFfY29sb3I7CiAgICB2X3V2MSA9IGFfdGV4Y29vcmQxOwogICAgZ2xfUG9zaXRpb24gPSBtYXQ0KHVfdnNfdWlQYXJhbXNbMF0sIHVfdnNfdWlQYXJhbXNbMV0sIHVfdnNfdWlQYXJhbXNbMl0sIHVfdnNfdWlQYXJhbXNbM10pICogdmVjNChhX3Bvc2l0aW9uLCAxLjApOwp9CgpSRUZMkQEAAHVpX1RleFZjNF9nbHNsMzAwZXMAAAAAAAAAAAAAAAAAAwAAAAAAAAABAAAAAQAAAGFfY29sb3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAE5PUk1BTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDRhX3RleGNvb3JkMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAABURVhDT09SRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQyYV9wb3NpdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUE9TSVRJT04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUMwEAAAB1X3ZzX3VpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAHVpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAW12cE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATUFUNAEAAAAAAAAAU1RBR/YEAABGUkFHQ09ERQUEAAAjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBoaWdocCBpbnQ7Cgp1bmlmb3JtIGhpZ2hwIHZlYzQgdV9mc191aVBhcmFtc1sxXTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdV91aVRleHR1cmU7CgppbiBoaWdocCB2ZWM0IHZfY29sb3I7CmluIGhpZ2hwIHZlYzIgdl91djE7CmxheW91dChsb2NhdGlvbiA9IDApIG91dCBoaWdocCB2ZWM0IGdfZmluYWxDb2xvcjsKCmhpZ2hwIHZlYzMgc1JHQlRvTGluZWFyKGhpZ2hwIHZlYzMgc3JnYkluKQp7CiAgICByZXR1cm4gcG93KHNyZ2JJbiwgdmVjMygyLjIwMDAwMDA0NzY4MzcxNTgyMDMxMjUpKTsKfQoKaGlnaHAgdmVjNCBzUkdCVG9MaW5lYXIoaGlnaHAgdmVjNCBzcmdiSW4pCnsKICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBzcmdiSW4ueHl6OwogICAgcmV0dXJuIHZlYzQoc1JHQlRvTGluZWFyKHBhcmFtKSwgc3JnYkluLncpOwp9CgpoaWdocCB2ZWM0IGdldFZlcnRleENvbG9yKCkKewogICAgcmV0dXJuIHZfY29sb3I7Cn0KCmhpZ2hwIHZlYzQgZ2V0QmFzZUNvbG9yKCkKewogICAgaGlnaHAgdmVjNCBiYXNlQ29sb3IgPSB1X2ZzX3VpUGFyYW1zWzBdOwogICAgaGlnaHAgdmVjNCBwYXJhbSA9IHRleHR1cmUodV91aVRleHR1cmUsIHZfdXYxKTsKICAgIGhpZ2hwIHZlYzQgXzg4ID0gYmFzZUNvbG9yOwogICAgaGlnaHAgdmVjNCBfODkgPSBfODggKiBzUkdCVG9MaW5lYXIocGFyYW0pOwogICAgYmFzZUNvbG9yID0gXzg5OwogICAgcmV0dXJuIF84OSAqIGdldFZlcnRleENvbG9yKCk7Cn0KCmhpZ2hwIHZlYzMgbGluZWFyVG9zUkdCKGhpZ2hwIHZlYzMgY29sb3IpCnsKICAgIHJldHVybiBwb3coY29sb3IsIHZlYzMoMC40NTQ1NDU0NjgwOTE5NjQ3MjE2Nzk2ODc1KSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIHZlYzQgXzk2ID0gZ2V0QmFzZUNvbG9yKCk7CiAgICBoaWdocCB2ZWMzIHBhcmFtID0gXzk2Lnh5ejsKICAgIGdfZmluYWxDb2xvciA9IHZlYzQobGluZWFyVG9zUkdCKHBhcmFtKSwgXzk2LncpOwp9CgpSRUZM3QAAAHVpX1RleFZjNF9nbHNsMzAwZXMAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAQAAAHVfdWlUZXh0dXJlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAyRCAgVEZMVAEAAAB1X2ZzX3VpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAHVpUGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAWNvbG9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARkxUNAEAAAAAAAAA";
static const std::string depth_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUfcAwAAVkVSVENPREXPAgAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c19kZXB0aFBhcmFtc1s0XTsKbGF5b3V0KGxvY2F0aW9uID0gMCkgaW4gdmVjMyBhX3Bvc2l0aW9uOwpvdXQgdmVjMiB2X3Byb2paVzsKCnZlYzMgZ2V0TW9ycGhQb3NpdGlvbih2ZWMzIHBvcykKewogICAgcmV0dXJuIHBvczsKfQoKbWF0NCBnZXRCb25lVHJhbnNmb3JtKCkKewogICAgcmV0dXJuIG1hdDQodmVjNCgwLjApLCB2ZWM0KDAuMCksIHZlYzQoMC4wKSwgdmVjNCgwLjApKTsKfQoKdmVjMyBnZXRTa2luUG9zaXRpb24odmVjMyBwb3MsIG1hdDQgYm9uZVRyYW5zZm9ybSkKewogICAgcmV0dXJuIHBvczsKfQoKdm9pZCBtYWluKCkKewogICAgdmVjMyBwb3MgPSBhX3Bvc2l0aW9uOwogICAgdmVjMyBwYXJhbSA9IGFfcG9zaXRpb247CiAgICBwb3MgPSBnZXRNb3JwaFBvc2l0aW9uKHBhcmFtKTsKICAgIHZlYzMgcGFyYW1fMSA9IHBvczsKICAgIG1hdDQgcGFyYW1fMiA9IGdldEJvbmVUcmFuc2Zvcm0oKTsKICAgIHZlYzMgXzQ4ID0gZ2V0U2tpblBvc2l0aW9uKHBhcmFtXzEsIHBhcmFtXzIpOwogICAgcG9zID0gXzQ4OwogICAgZ2xfUG9zaXRpb24gPSBtYXQ0KHVfdnNfZGVwdGhQYXJhbXNbMF0sIHVfdnNfZGVwdGhQYXJhbXNbMV0sIHVfdnNfZGVwdGhQYXJhbXNbMl0sIHVfdnNfZGVwdGhQYXJhbXNbM10pICogdmVjNChfNDgsIDEuMCk7CiAgICB2X3Byb2paVyA9IGdsX1Bvc2l0aW9uLnp3Owp9CgpSRUZM+QAAAGRlcHRoX2dsc2wzMDBlcwAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAQAAAGFfcG9zaXRpb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPU0lUSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDMBAAAAdV92c19kZXB0aFBhcmFtcwAAAAAAAAAAAAAAAAAAAABkZXB0aFBhcmFtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAFsaWdodE1WUE1hdHJpeAAAAAAAAAAAAAAAAAAAAAAAAE1BVDQBAAAAAAAAAFNUQUdHAgAARlJBR0NPREUDAgAAI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKbGF5b3V0KGxvY2F0aW9uID0gMCkgb3V0IGhpZ2hwIHZlYzQgZnJhZ19jb2xvcjsKaW4gaGlnaHAgdmVjMiB2X3Byb2paVzsKCmhpZ2hwIHZlYzQgZW5jb2RlRGVwdGgoaGlnaHAgZmxvYXQgdikKewogICAgaGlnaHAgdmVjNCBfMjMgPSBmcmFjdCh2ZWM0KDEuMCwgMjU1LjAsIDY1MDI1LjAsIDE2NTgxMzc1LjApICogdik7CiAgICByZXR1cm4gXzIzIC0gKF8yMy55end3ICogdmVjNCgwLjAwMzkyMTU2ODg1OTM2ODU2MjY5ODM2NDI1NzgxMjUsIDAuMDAzOTIxNTY4ODU5MzY4NTYyNjk4MzY0MjU3ODEyNSwgMC4wMDM5MjE1Njg4NTkzNjg1NjI2OTgzNjQyNTc4MTI1LCAwLjApKTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgZmxvYXQgcGFyYW0gPSAoKDAuNSAqIHZfcHJvalpXLngpIC8gdl9wcm9qWlcueSkgKyAwLjU7CiAgICBmcmFnX2NvbG9yID0gZW5jb2RlRGVwdGgocGFyYW0pOwp9CgpSRUZMMAAAAGRlcHRoX2dsc2wzMDBlcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==";
static const std::string mesh_Uv1PucNorNmpTanVc4_glsl300es = "";
static const std::string mesh_PucShwPcfNorSki_glsl300es = "";
static const std::string sky_glsl300es = "U0JTIAAAAABkAAAAR0xTTCwBAAABAFNUQUceAgAAVkVSVENPREURAQAAI3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgdV92c19za3lQYXJhbXNbNF07Cm91dCB2ZWMzIHV2OwpsYXlvdXQobG9jYXRpb24gPSAwKSBpbiB2ZWMzIGFfcG9zaXRpb247Cgp2b2lkIG1haW4oKQp7CiAgICB1diA9IGFfcG9zaXRpb247CiAgICBnbF9Qb3NpdGlvbiA9IChtYXQ0KHVfdnNfc2t5UGFyYW1zWzBdLCB1X3ZzX3NreVBhcmFtc1sxXSwgdV92c19za3lQYXJhbXNbMl0sIHVfdnNfc2t5UGFyYW1zWzNdKSAqIHZlYzQoYV9wb3NpdGlvbiwgMS4wKSkueHl3dzsKfQoKUkVGTPkAAABza3lfZ2xzbDMwMGVzAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAQAAAAEAAABhX3Bvc2l0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQT1NJVElPTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTFQzAQAAAHVfdnNfc2t5UGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAc2t5UGFyYW1zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAABdnBNYXRyaXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNQVQ0AQAAAAAAAABTVEFHEwIAAEZSQUdDT0RFIgEAACN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIGhpZ2hwIGludDsKCnVuaWZvcm0gaGlnaHAgdmVjNCB1X2ZzX3NreVBhcmFtc1sxXTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyQ3ViZSB1X3NreVRleHR1cmU7CgpsYXlvdXQobG9jYXRpb24gPSAwKSBvdXQgaGlnaHAgdmVjNCBmcmFnX2NvbG9yOwppbiBoaWdocCB2ZWMzIHV2OwoKdm9pZCBtYWluKCkKewogICAgZnJhZ19jb2xvciA9IHVfZnNfc2t5UGFyYW1zWzBdICogdGV4dHVyZSh1X3NreVRleHR1cmUsIHV2KTsKfQoKUkVGTN0AAABza3lfZ2xzbDMwMGVzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAEAAAB1X3NreVRleHR1cmUAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAQ1VCRVRGTFQBAAAAdV9mc19za3lQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAABza3lQYXJhbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAFjb2xvcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZMVDQBAAAAAAAAAA==";

std::string getBase64Shader(std::string name) {
    if (name == "mesh_Uv1PucNorNmpTan_glsl300es") {
        return mesh_Uv1PucNorNmpTan_glsl300es;
    } else if (name == "mesh_Uv1PucShwPcfNorVc4_glsl300es") {
        return mesh_Uv1PucShwPcfNorVc4_glsl300es;
    } else if (name == "mesh_Uv1PucNorNmpTanVc4Ski_glsl300es") {
        return mesh_Uv1PucNorNmpTanVc4Ski_glsl300es;
    } else if (name == "ui_Ftx_glsl300es") {
        return ui_Ftx_glsl300es;
    } else if (name == "ui_Vc4_glsl300es") {
        return ui_Vc4_glsl300es;
    } else if (name == "mesh_PucShwPcfNorTanFogMtaMnr_glsl300es") {
        return mesh_PucShwPcfNorTanFogMtaMnr_glsl300es;
    } else if (name == "depth_Ski_glsl300es") {
        return depth_Ski_glsl300es;
    } else if (name == "mesh_UltUv1Vc4_glsl300es") {
        return mesh_UltUv1Vc4_glsl300es;
    } else if (name == "mesh_Uv1PucShwPcfNorSki_glsl300es") {
        return mesh_Uv1PucShwPcfNorSki_glsl300es;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTan_glsl300es") {
        return mesh_Uv1PucShwPcfNorNmpTan_glsl300es;
    } else if (name == "depth_Mta_glsl300es") {
        return depth_Mta_glsl300es;
    } else if (name == "mesh_Uv1PucShwPcfNor_glsl300es") {
        return mesh_Uv1PucShwPcfNor_glsl300es;
    } else if (name == "mesh_Uv1PucNorNmpTanVc4Fog_glsl300es") {
        return mesh_Uv1PucNorNmpTanVc4Fog_glsl300es;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTanVc4_glsl300es") {
        return mesh_Uv1PucShwPcfNorNmpTanVc4_glsl300es;
    } else if (name == "mesh_UltUv1Vc4TxrFog_glsl300es") {
        return mesh_UltUv1Vc4TxrFog_glsl300es;
    } else if (name == "mesh_Uv1PucNorVc4Fog_glsl300es") {
        return mesh_Uv1PucNorVc4Fog_glsl300es;
    } else if (name == "mesh_Uv1PucNorNmpTanVc4FogSki_glsl300es") {
        return mesh_Uv1PucNorNmpTanVc4FogSki_glsl300es;
    } else if (name == "mesh_PucShwPcfNorTanMtaMnr_glsl300es") {
        return mesh_PucShwPcfNorTanMtaMnr_glsl300es;
    } else if (name == "points_TexVc4_glsl300es") {
        return points_TexVc4_glsl300es;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTanFog_glsl300es") {
        return mesh_Uv1PucShwPcfNorNmpTanFog_glsl300es;
    } else if (name == "points_TexVc4Txr_glsl300es") {
        return points_TexVc4Txr_glsl300es;
    } else if (name == "mesh_Uv1PucNorVc4_glsl300es") {
        return mesh_Uv1PucNorVc4_glsl300es;
    } else if (name == "mesh_Uv1PucShwPcfNorVc4Fog_glsl300es") {
        return mesh_Uv1PucShwPcfNorVc4Fog_glsl300es;
    } else if (name == "mesh_Uv1PucNorFog_glsl300es") {
        return mesh_Uv1PucNorFog_glsl300es;
    } else if (name == "mesh_UltUv1Vc4Txr_glsl300es") {
        return mesh_UltUv1Vc4Txr_glsl300es;
    } else if (name == "points_Vc4_glsl300es") {
        return points_Vc4_glsl300es;
    } else if (name == "mesh_UltUv1_glsl300es") {
        return mesh_UltUv1_glsl300es;
    } else if (name == "mesh_Uv1PucNor_glsl300es") {
        return mesh_Uv1PucNor_glsl300es;
    } else if (name == "mesh_Uv1PucNorNmpTanFog_glsl300es") {
        return mesh_Uv1PucNorNmpTanFog_glsl300es;
    } else if (name == "mesh_PucShwPcfNorTanFogMtaMnrMtg_glsl300es") {
        return mesh_PucShwPcfNorTanFogMtaMnrMtg_glsl300es;
    } else if (name == "mesh_UltUv1Vc4Fog_glsl300es") {
        return mesh_UltUv1Vc4Fog_glsl300es;
    } else if (name == "mesh_Uv1PucShwPcfNorFogSki_glsl300es") {
        return mesh_Uv1PucShwPcfNorFogSki_glsl300es;
    } else if (name == "mesh_UltUv1Fog_glsl300es") {
        return mesh_UltUv1Fog_glsl300es;
    } else if (name == "mesh_PucShwPcfNor_glsl300es") {
        return mesh_PucShwPcfNor_glsl300es;
    } else if (name == "mesh_PucShwPcfNorTanMtaMnrMtg_glsl300es") {
        return mesh_PucShwPcfNorTanMtaMnrMtg_glsl300es;
    } else if (name == "mesh_Uv1PucShwPcfNorNmpTanVc4Fog_glsl300es") {
        return mesh_Uv1PucShwPcfNorNmpTanVc4Fog_glsl300es;
    } else if (name == "mesh_Uv1PucShwPcfNorFog_glsl300es") {
        return mesh_Uv1PucShwPcfNorFog_glsl300es;
    } else if (name == "ui_TexVc4_glsl300es") {
        return ui_TexVc4_glsl300es;
    } else if (name == "depth_glsl300es") {
        return depth_glsl300es;
    } else if (name == "mesh_Uv1PucNorNmpTanVc4_glsl300es") {
        return mesh_Uv1PucNorNmpTanVc4_glsl300es;
    } else if (name == "mesh_PucShwPcfNorSki_glsl300es") {
        return mesh_PucShwPcfNorSki_glsl300es;
    } else if (name == "sky_glsl300es") {
        return sky_glsl300es;
    }
    return "";
}
#endif //SHADER_glsl300es_h
